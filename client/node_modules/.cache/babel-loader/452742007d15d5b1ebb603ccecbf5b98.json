{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { APIv2 } from \"../../tools/API\";\nexport const useWorkListGrade = (user, date) => {\n  _s();\n\n  const [grade, setGrade] = useState();\n  const [difference, setDifference] = useState();\n  const [target, setTarget] = useState();\n  const [value, setValue] = useState();\n  const [isGradeLoading, setLoad] = useState(false);\n\n  const updateInfo = async () => {\n    try {\n      isGradeLoading(true);\n      const res = await APIv2.workList(user, date).grade();\n      console.log(res.data);\n      if (!(res === null || res === void 0 ? void 0 : res.data)) throw new Error(\"[Error] WorkList Grade cannot load\");\n      const gradeInfo = res.data;\n      setGrade(gradeInfo.grade);\n      setDifference(gradeInfo.difference);\n      setTarget(gradeInfo.target);\n      setValue(gradeInfo.value);\n      isGradeLoading(false);\n    } catch (error) {\n      alert(error);\n      isGradeLoading(false);\n    }\n  };\n\n  return [grade, difference, target, value, isGradeLoading, updateInfo];\n};\n\n_s(useWorkListGrade, \"2KmaQjC4BcMUeWH5zEZFtNWf0KU=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/useWorkListGrade.js"],"names":["useState","APIv2","useWorkListGrade","user","date","grade","setGrade","difference","setDifference","target","setTarget","value","setValue","isGradeLoading","setLoad","updateInfo","res","workList","console","log","data","Error","gradeInfo","error","alert"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAAA;;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,EAAlC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,EAA5C;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,EAApC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,EAAlC;AACA,QAAM,CAACa,cAAD,EAAiBC,OAAjB,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;;AACA,QAAMe,UAAU,GAAG,YAAY;AAC7B,QAAI;AACFF,MAAAA,cAAc,CAAC,IAAD,CAAd;AACA,YAAMG,GAAG,GAAG,MAAMf,KAAK,CAACgB,QAAN,CAAed,IAAf,EAAqBC,IAArB,EAA2BC,KAA3B,EAAlB;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,IAAhB;AACA,UAAI,EAACJ,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEI,IAAN,CAAJ,EAAgB,MAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AAChB,YAAMC,SAAS,GAAGN,GAAG,CAACI,IAAtB;AACAd,MAAAA,QAAQ,CAACgB,SAAS,CAACjB,KAAX,CAAR;AACAG,MAAAA,aAAa,CAACc,SAAS,CAACf,UAAX,CAAb;AACAG,MAAAA,SAAS,CAACY,SAAS,CAACb,MAAX,CAAT;AACAG,MAAAA,QAAQ,CAACU,SAAS,CAACX,KAAX,CAAR;AACAE,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD,KAXD,CAWE,OAAOU,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACAV,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,GAhBD;;AAiBA,SAAO,CAACR,KAAD,EAAQE,UAAR,EAAoBE,MAApB,EAA4BE,KAA5B,EAAmCE,cAAnC,EAAmDE,UAAnD,CAAP;AACD,CAxBM;;GAAMb,gB","sourcesContent":["import { useState } from \"react\";\nimport { APIv2 } from \"../../tools/API\";\n\nexport const useWorkListGrade = (user, date) => {\n  const [grade, setGrade] = useState();\n  const [difference, setDifference] = useState();\n  const [target, setTarget] = useState();\n  const [value, setValue] = useState();\n  const [isGradeLoading, setLoad] = useState(false);\n  const updateInfo = async () => {\n    try {\n      isGradeLoading(true);\n      const res = await APIv2.workList(user, date).grade();\n      console.log(res.data);\n      if (!res?.data) throw new Error(\"[Error] WorkList Grade cannot load\");\n      const gradeInfo = res.data;\n      setGrade(gradeInfo.grade);\n      setDifference(gradeInfo.difference);\n      setTarget(gradeInfo.target);\n      setValue(gradeInfo.value);\n      isGradeLoading(false);\n    } catch (error) {\n      alert(error);\n      isGradeLoading(false);\n    }\n  };\n  return [grade, difference, target, value, isGradeLoading, updateInfo];\n};\n"]},"metadata":{},"sourceType":"module"}