{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { API } from \"../../../tools/API\";\nimport randomToken from \"rand-token\";\nexport const usePushWork = ({\n  setWork,\n  callback\n}) => {\n  _s();\n\n  const [workColor, setColor] = useState();\n  const [workName, setWorkName] = useState();\n  const [workTime, setWorkTime] = useState();\n\n  const hexToRgba = color => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n\n  const onChangeWorkColor = color => {\n    if (!color) {} else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n\n    setColor(color);\n  };\n\n  const onChangeWorkName = name => setWorkName(name);\n\n  const onChangeWorkTime = time => setWorkTime(parseInt(time));\n\n  const validator = workObj => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n\n  const pushWorkItem = async workObj => await setWork(workObj).create();\n\n  const getErrText = () => {\n    let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${!workTime + !workColor > 0 && !workName ? \", \" : \"\"}${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${workColor ? \"\" : \"WorkColor\"} ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n    return errText;\n  };\n\n  const onSubmitWork = event => {\n    try {\n      event.preventDefault(); // const workName = event.target.workName.value;\n      // const workTime = parseInt(event.target.workTime.value);\n\n      const id = Date.now().toString(16) + randomToken.generate(5);\n      const workObj = {\n        workName,\n        workTime,\n        workColor,\n        id\n      };\n      let willUpdate = true;\n      if (typeof validator === \"function\") willUpdate = validator(workObj);\n\n      if (willUpdate) {\n        callback();\n        pushWorkItem(workObj);\n      } else {\n        throw new Error(getErrText());\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return {\n    onChangeWorkColor,\n    onChangeWorkName,\n    onChangeWorkTime,\n    onSubmitWork\n  };\n};\n\n_s(usePushWork, \"s6cUyFsU/WjXfCqWvMkOQ/lz0wk=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/work/usePushWork.js"],"names":["useState","API","randomToken","usePushWork","setWork","callback","workColor","setColor","workName","setWorkName","workTime","setWorkTime","hexToRgba","color","r","parseInt","substr","g","b","onChangeWorkColor","onChangeWorkName","name","onChangeWorkTime","time","validator","workObj","pushWorkItem","create","getErrText","errText","onSubmitWork","event","preventDefault","id","Date","now","toString","generate","willUpdate","Error","error","alert"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { API } from \"../../../tools/API\";\nimport randomToken from \"rand-token\";\nexport const usePushWork = ({ setWork, callback }) => {\n  const [workColor, setColor] = useState();\n  const [workName, setWorkName] = useState();\n  const [workTime, setWorkTime] = useState();\n\n  const hexToRgba = (color) => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n\n  const onChangeWorkColor = (color) => {\n    if (!color) {\n    } else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n    setColor(color);\n  };\n  const onChangeWorkName = (name) => setWorkName(name);\n  const onChangeWorkTime = (time) => setWorkTime(parseInt(time));\n  const validator = (workObj) => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n  const pushWorkItem = async (workObj) => await setWork(workObj).create();\n\n  const getErrText = () => {\n    let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${\n      !workTime + !workColor > 0 && !workName ? \", \" : \"\"\n    }${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${\n      workColor ? \"\" : \"WorkColor\"\n    } ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n    return errText;\n  };\n  const onSubmitWork = (event) => {\n    try {\n      event.preventDefault();\n      // const workName = event.target.workName.value;\n      // const workTime = parseInt(event.target.workTime.value);\n      const id = Date.now().toString(16) + randomToken.generate(5);\n\n      const workObj = { workName, workTime, workColor, id };\n      let willUpdate = true;\n      if (typeof validator === \"function\") willUpdate = validator(workObj);\n      if (willUpdate) {\n        callback();\n        pushWorkItem(workObj);\n      } else {\n        throw new Error(getErrText());\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  return {\n    onChangeWorkColor,\n    onChangeWorkName,\n    onChangeWorkTime,\n    onSubmitWork,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}