{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { getAddedDateObj, getAddedDateStr, getDiffDayInStr } from \"../../tools/time\";\nconst STARTDATEDIFF = 2;\n\nconst makeStartDate = date => getAddedDateStr(date, -1 * STARTDATEDIFF);\n\nconst getStartDate = date => LocalStroage.startDate().isEmpty() ? makeStartDate(date) : LocalStroage.startDate().get();\n\nlet befStartDate;\nexport const useListView = (user, date, setDate, workList) => {\n  _s();\n\n  console.log(\"LIST VIEW RENDERING\");\n  const [startDate, setStratDate] = useState(getStartDate(date));\n\n  const getEndDate = startDate => getAddedDateObj(startDate, STARTDATEDIFF * 2);\n\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState();\n\n  const updateStartDate = nextDate => {\n    LocalStroage.startDate().set(nextDate);\n    setStratDate(nextDate);\n  };\n\n  const onClickLeftBtn = () => {\n    const nextDate = getAddedDateStr(startDate, -1);\n    updateStartDate(nextDate);\n  };\n\n  const onClickRightBtn = () => {\n    const nextDate = getAddedDateStr(startDate, 1);\n    updateStartDate(nextDate);\n  };\n\n  useEffect(() => {\n    setStratDate(makeStartDate(date));\n  }, [date]);\n\n  const getListView = async () => {\n    try {\n      if (user && startDate) {\n        setLoad(true);\n        const data = await APIv2.listView(user, startDate).get(STARTDATEDIFF);\n        setLoad(false);\n        if (!(data === null || data === void 0 ? void 0 : data.data)) throw new Error(\"List View cann't found\");\n        console.log(\"DATA : LISTVIEW \", data === null || data === void 0 ? void 0 : data.data);\n        setListView(data === null || data === void 0 ? void 0 : data.data);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    const updateListView = () => {};\n\n    const moveListView = () => {};\n\n    console.log(\"Set list view start\");\n    if (!befStartDate || getDiffDayInStr(befStartDate, startDate) > 2) updateListView(startDate);else moveListView(startDate);\n    getListView();\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn\n  };\n};\n\n_s(useListView, \"V+2o66MlX8GHhfyN0gsA7Kh4bsU=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/listView/useListView.js"],"names":["useEffect","useState","APIv2","LocalStroage","getAddedDateObj","getAddedDateStr","getDiffDayInStr","STARTDATEDIFF","makeStartDate","date","getStartDate","startDate","isEmpty","get","befStartDate","useListView","user","setDate","workList","console","log","setStratDate","getEndDate","listView","setListView","isListViewLoading","setLoad","updateStartDate","nextDate","set","onClickLeftBtn","onClickRightBtn","getListView","data","Error","error","alert","updateListView","moveListView"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport {\n  getAddedDateObj,\n  getAddedDateStr,\n  getDiffDayInStr,\n} from \"../../tools/time\";\nconst STARTDATEDIFF = 2;\nconst makeStartDate = (date) => getAddedDateStr(date, -1 * STARTDATEDIFF);\nconst getStartDate = (date) =>\n  LocalStroage.startDate().isEmpty()\n    ? makeStartDate(date)\n    : LocalStroage.startDate().get();\n\nlet befStartDate;\nexport const useListView = (user, date, setDate, workList) => {\n  console.log(\"LIST VIEW RENDERING\");\n  const [startDate, setStratDate] = useState(getStartDate(date));\n  const getEndDate = (startDate) =>\n    getAddedDateObj(startDate, STARTDATEDIFF * 2);\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState();\n\n  const updateStartDate = (nextDate) => {\n    LocalStroage.startDate().set(nextDate);\n    setStratDate(nextDate);\n  };\n  const onClickLeftBtn = () => {\n    const nextDate = getAddedDateStr(startDate, -1);\n    updateStartDate(nextDate);\n  };\n  const onClickRightBtn = () => {\n    const nextDate = getAddedDateStr(startDate, 1);\n    updateStartDate(nextDate);\n  };\n\n  useEffect(() => {\n    setStratDate(makeStartDate(date));\n  }, [date]);\n  const getListView = async () => {\n    try {\n      if (user && startDate) {\n        setLoad(true);\n        const data = await APIv2.listView(user, startDate).get(STARTDATEDIFF);\n        setLoad(false);\n        if (!data?.data) throw new Error(\"List View cann't found\");\n        console.log(\"DATA : LISTVIEW \", data?.data);\n        setListView(data?.data);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    const updateListView = () => {};\n    const moveListView = () => {};\n    console.log(\"Set list view start\");\n    if (!befStartDate || getDiffDayInStr(befStartDate, startDate) > 2)\n      updateListView(startDate);\n    else moveListView(startDate);\n    getListView();\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}