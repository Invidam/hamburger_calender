{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/worklist/element/work/Work.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useModal } from \"../../../../hooks/example/useModal\";\nimport { useDeleteWork } from \"../../../../hooks/workList/work/useDeleteWork\";\nimport { getDifference, makeDisplayTime } from \"../../../../tools/time\";\nimport { EditWorkWindow } from \"../../window/work/EditWorkWindow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst customStyles = {\n  content: {\n    // top: \"40vh\",\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"rgb(245, 235, 220)\",\n    border: \"none\"\n  },\n  overlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(0,0,0,0.4)\"\n  }\n};\nexport const Work = ({\n  workItem,\n  setWork,\n  targetTime,\n  workTimeSum\n}) => {\n  _s();\n\n  const {\n    id\n  } = workItem;\n  const {\n    editModalIsOpen,\n    openEditModal,\n    closeEditModal\n  } = useModal();\n  const {\n    onDeleteWork\n  } = useDeleteWork(workItem, setWork, closeEditModal);\n\n  const editWorkWindow = /*#__PURE__*/_jsxDEV(EditWorkWindow, {\n    workItem: workItem,\n    setWork: setWork,\n    callback: closeEditModal\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n\n  const editModal = /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: editModalIsOpen,\n    onRequestClose: closeEditModal,\n    style: customStyles,\n    contentLabel: \"Example Modal\",\n    overlayClassName: \"Overlay\",\n    children: [editWorkWindow, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"modalWindow__btn\",\n      onClick: onDeleteWork,\n      children: \"DELETE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"modalWindow__close modalWindow__btn\",\n      onClick: closeEditModal,\n      children: \"CLOSE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n\n  const targetElement = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tooltip-box__target\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-box__key\",\n      children: \"TargetTime:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-box__value\",\n      children: [makeDisplayTime(targetTime.hour), \":\", makeDisplayTime(targetTime.minute), targetTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n\n  const valueElement = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tooltip-box__target\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-box__key\",\n      children: \"Worktime Sum:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-box__value\",\n      children: makeDisplayTime(workTimeSum)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n\n  const diffTime = getDifference(targetTime, {\n    hour: workTimeSum,\n    minute: 0\n  });\n\n  const diffElement = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tooltip-box__target\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-box__key\",\n      children: \"Difference:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-box__value\",\n      children: [makeDisplayTime(diffTime.hour), \": \", makeDisplayTime(diffTime.minute)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this); // <span className=\"tooltip_box__value\">{`${isWake ? \"Wake\" : \"Bed\"}Time: ${\n  //   recordTime.hour\n  // }: ${recordTime.minute}`}</span>;\n\n\n  const tooltipBox = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tooltip-content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tooltip-box\",\n      children: [targetTime.hour !== -1 ? targetElement : \"\", valueElement, targetTime.hour !== -1 ? diffElement : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this); // const tooltipBox = (\n  //   <span className=\"tooltip-content\" key={id}>\n  //     {workItem.workName} {workItem.workTime}h targetTime workTimeSum\n  //   </span>\n  // );\n\n\n  console.log(\"[WORK]\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"workList__work tooltip\",\n      style: {\n        backgroundColor: workItem.workColor\n      },\n      onClick: openEditModal,\n      children: [workItem.workName, \" \", workItem.workTime, \"h\", tooltipBox]\n    }, \"_\" + id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), editModal]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Work, \"rYmNFZwhI2MhMg+gML9YZ1+LX+4=\", false, function () {\n  return [useModal, useDeleteWork];\n});\n\n_c = Work;\n\nvar _c;\n\n$RefreshReg$(_c, \"Work\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/worklist/element/work/Work.js"],"names":["useState","Modal","useModal","useDeleteWork","getDifference","makeDisplayTime","EditWorkWindow","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","backgroundColor","border","overlay","position","Work","workItem","setWork","targetTime","workTimeSum","id","editModalIsOpen","openEditModal","closeEditModal","onDeleteWork","editWorkWindow","editModal","targetElement","hour","minute","valueElement","diffTime","diffElement","tooltipBox","console","log","workColor","workName","workTime"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useModal } from \"../../../../hooks/example/useModal\";\nimport { useDeleteWork } from \"../../../../hooks/workList/work/useDeleteWork\";\nimport { getDifference, makeDisplayTime } from \"../../../../tools/time\";\nimport { EditWorkWindow } from \"../../window/work/EditWorkWindow\";\nModal.setAppElement(\"#root\");\nconst customStyles = {\n  content: {\n    // top: \"40vh\",\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"rgb(245, 235, 220)\",\n    border: \"none\",\n  },\n  overlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(0,0,0,0.4)\",\n  },\n};\nexport const Work = ({ workItem, setWork, targetTime, workTimeSum }) => {\n  const { id } = workItem;\n  const { editModalIsOpen, openEditModal, closeEditModal } = useModal();\n  const { onDeleteWork } = useDeleteWork(workItem, setWork, closeEditModal);\n\n  const editWorkWindow = (\n    <EditWorkWindow\n      workItem={workItem}\n      setWork={setWork}\n      callback={closeEditModal}\n    />\n  );\n\n  const editModal = (\n    <Modal\n      isOpen={editModalIsOpen}\n      onRequestClose={closeEditModal}\n      style={customStyles}\n      contentLabel=\"Example Modal\"\n      overlayClassName=\"Overlay\"\n    >\n      {editWorkWindow}\n      <button className=\"modalWindow__btn\" onClick={onDeleteWork}>\n        DELETE\n      </button>\n      <button\n        className=\"modalWindow__close modalWindow__btn\"\n        onClick={closeEditModal}\n      >\n        CLOSE\n      </button>\n    </Modal>\n  );\n  const targetElement = (\n    <div className=\"tooltip-box__target\">\n      <span className=\"tooltip-box__key\">TargetTime:</span>\n      <span className=\"tooltip-box__value\">\n        {makeDisplayTime(targetTime.hour)}:{makeDisplayTime(targetTime.minute)}\n        {targetTime}\n      </span>\n    </div>\n  );\n  const valueElement = (\n    <div className=\"tooltip-box__target\">\n      <span className=\"tooltip-box__key\">Worktime Sum:</span>\n      <span className=\"tooltip-box__value\">{makeDisplayTime(workTimeSum)}</span>\n    </div>\n  );\n  const diffTime = getDifference(targetTime, {\n    hour: workTimeSum,\n    minute: 0,\n  });\n  const diffElement = (\n    <div className=\"tooltip-box__target\">\n      <span className=\"tooltip-box__key\">Difference:</span>\n      <span className=\"tooltip-box__value\">\n        {makeDisplayTime(diffTime.hour)}: {makeDisplayTime(diffTime.minute)}\n      </span>\n    </div>\n  );\n  // <span className=\"tooltip_box__value\">{`${isWake ? \"Wake\" : \"Bed\"}Time: ${\n  //   recordTime.hour\n  // }: ${recordTime.minute}`}</span>;\n  const tooltipBox = (\n    <div className=\"tooltip-content\">\n      <div className=\"tooltip-box\">\n        {targetTime.hour !== -1 ? targetElement : \"\"}\n        {valueElement}\n        {targetTime.hour !== -1 ? diffElement : \"\"}\n      </div>\n    </div>\n  );\n  // const tooltipBox = (\n  //   <span className=\"tooltip-content\" key={id}>\n  //     {workItem.workName} {workItem.workTime}h targetTime workTimeSum\n  //   </span>\n  // );\n  console.log(\"[WORK]\");\n  return (\n    <div>\n      <li\n        className=\"workList__work tooltip\"\n        style={{ backgroundColor: workItem.workColor }}\n        key={\"_\" + id}\n        onClick={openEditModal}\n      >\n        {workItem.workName} {workItem.workTime}h{tooltipBox}\n      </li>\n      {editModal}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}