{"ast":null,"code":"const {\n  improvedDH\n} = require('../../help/runtime_support');\n\nconst {\n  KEYOBJECT\n} = require('../../help/consts');\n\nconst {\n  generateSync\n} = require('../../jwk/generate');\n\nconst {\n  ECDH_DERIVE_LENGTHS\n} = require('../../registry');\n\nconst derive = require('./derive');\n\nconst wrapKey = (wrap, derive, key, payload) => {\n  const epk = generateSync(key.kty, key.crv);\n  const derivedKey = derive(epk, key, payload);\n  const result = wrap({\n    [KEYOBJECT]: derivedKey\n  }, payload);\n  result.header = result.header || {};\n  Object.assign(result.header, {\n    epk: {\n      kty: key.kty,\n      crv: key.crv,\n      x: epk.x,\n      y: epk.y\n    }\n  });\n  return result;\n};\n\nconst unwrapKey = (unwrap, derive, key, payload, header) => {\n  const {\n    epk\n  } = header;\n  const derivedKey = derive(key, epk, header);\n  return unwrap({\n    [KEYOBJECT]: derivedKey\n  }, payload, header);\n};\n\nmodule.exports = (JWA, JWK) => {\n  ['ECDH-ES+A128KW', 'ECDH-ES+A192KW', 'ECDH-ES+A256KW'].forEach(jwaAlg => {\n    const kw = jwaAlg.substr(-6);\n    const kwWrap = JWA.keyManagementEncrypt.get(kw);\n    const kwUnwrap = JWA.keyManagementDecrypt.get(kw);\n    const keylen = parseInt(jwaAlg.substr(9, 3), 10);\n    ECDH_DERIVE_LENGTHS.set(jwaAlg, keylen);\n\n    if (kwWrap && kwUnwrap) {\n      JWA.keyManagementEncrypt.set(jwaAlg, wrapKey.bind(undefined, kwWrap, derive.bind(undefined, jwaAlg, keylen)));\n      JWA.keyManagementDecrypt.set(jwaAlg, unwrapKey.bind(undefined, kwUnwrap, derive.bind(undefined, jwaAlg, keylen)));\n\n      JWK.EC.deriveKey[jwaAlg] = key => (key.use === 'enc' || key.use === undefined) && key.crv !== 'secp256k1';\n\n      if (improvedDH) {\n        JWK.OKP.deriveKey[jwaAlg] = key => (key.use === 'enc' || key.use === undefined) && key.keyObject.asymmetricKeyType.startsWith('x');\n      }\n    }\n  });\n};\n\nmodule.exports.wrapKey = wrapKey;\nmodule.exports.unwrapKey = unwrapKey;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/jwa/ecdh/kw.js"],"names":["improvedDH","require","KEYOBJECT","generateSync","ECDH_DERIVE_LENGTHS","derive","wrapKey","wrap","key","payload","epk","kty","crv","derivedKey","result","header","Object","assign","x","y","unwrapKey","unwrap","module","exports","JWA","JWK","forEach","jwaAlg","kw","substr","kwWrap","keyManagementEncrypt","get","kwUnwrap","keyManagementDecrypt","keylen","parseInt","set","bind","undefined","EC","deriveKey","use","OKP","keyObject","asymmetricKeyType","startsWith"],"mappings":"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","sourcesContent":["const { improvedDH } = require('../../help/runtime_support')\nconst { KEYOBJECT } = require('../../help/consts')\nconst { generateSync } = require('../../jwk/generate')\nconst { ECDH_DERIVE_LENGTHS } = require('../../registry')\n\nconst derive = require('./derive')\n\nconst wrapKey = (wrap, derive, key, payload) => {\n  const epk = generateSync(key.kty, key.crv)\n\n  const derivedKey = derive(epk, key, payload)\n\n  const result = wrap({ [KEYOBJECT]: derivedKey }, payload)\n  result.header = result.header || {}\n  Object.assign(result.header, { epk: { kty: key.kty, crv: key.crv, x: epk.x, y: epk.y } })\n\n  return result\n}\n\nconst unwrapKey = (unwrap, derive, key, payload, header) => {\n  const { epk } = header\n  const derivedKey = derive(key, epk, header)\n\n  return unwrap({ [KEYOBJECT]: derivedKey }, payload, header)\n}\n\nmodule.exports = (JWA, JWK) => {\n  ['ECDH-ES+A128KW', 'ECDH-ES+A192KW', 'ECDH-ES+A256KW'].forEach((jwaAlg) => {\n    const kw = jwaAlg.substr(-6)\n    const kwWrap = JWA.keyManagementEncrypt.get(kw)\n    const kwUnwrap = JWA.keyManagementDecrypt.get(kw)\n    const keylen = parseInt(jwaAlg.substr(9, 3), 10)\n    ECDH_DERIVE_LENGTHS.set(jwaAlg, keylen)\n\n    if (kwWrap && kwUnwrap) {\n      JWA.keyManagementEncrypt.set(jwaAlg, wrapKey.bind(undefined, kwWrap, derive.bind(undefined, jwaAlg, keylen)))\n      JWA.keyManagementDecrypt.set(jwaAlg, unwrapKey.bind(undefined, kwUnwrap, derive.bind(undefined, jwaAlg, keylen)))\n      JWK.EC.deriveKey[jwaAlg] = key => (key.use === 'enc' || key.use === undefined) && key.crv !== 'secp256k1'\n\n      if (improvedDH) {\n        JWK.OKP.deriveKey[jwaAlg] = key => (key.use === 'enc' || key.use === undefined) && key.keyObject.asymmetricKeyType.startsWith('x')\n      }\n    }\n  })\n}\nmodule.exports.wrapKey = wrapKey\nmodule.exports.unwrapKey = unwrapKey\n"]},"metadata":{},"sourceType":"script"}