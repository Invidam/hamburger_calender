{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\n\nconst makeTargetTimeObj = (targetWorkTime, targetWakeHour, targetWakeMinute, targetBedHour, targetBedMinute) => {\n  return {\n    targetWorkTime,\n    targetWakeTime: {\n      hour: targetWakeHour,\n      minute: targetWakeMinute\n    },\n    targetBedTime: {\n      hour: targetBedHour,\n      minute: targetBedMinute\n    }\n  };\n};\n\nexport const useTargetSetting = (user, isLoginLoading) => {\n  _s();\n\n  console.log(\"UPDATE SETTING HOOK USER: \");\n  const [targetWorkTime, setTargetWorkTime] = useState(-1);\n  const [targetWakeHour, setTargetWakeHour] = useState(-1);\n  const [targetBedHour, setTargetBedHour] = useState(-1);\n  const [targetWakeMinute, setTargetWakeMinute] = useState(-1);\n  const [targetBedMinute, setTargetBedMinute] = useState(-1);\n  const [isSettingHookLoading, setLoad] = useState(true);\n\n  const getUserSetting = async () => {\n    try {\n      if (user && !isLoginLoading) {\n        console.log(\"SETTIN-G\", user);\n        const data = await APIv2.userSetting(user).get(); //API.get(`/auth/setting/${user}`);\n\n        const settingObj = data === null || data === void 0 ? void 0 : data.data;\n        if (!data) throw new Error(\"Cannot find data\");\n        setTargetWorkTime(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetWorkTime);\n        setTargetWakeHour(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetWakeTime.hour);\n        setTargetBedHour(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetBedTime.hour);\n        setTargetWakeMinute(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetWakeTime.minute);\n        setTargetBedMinute(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetBedTime.minute);\n        setLoad(false);\n        console.log(\"SETTIN-G END\", isSettingHookLoading);\n      } else {//\n      }\n    } catch (error) {\n      setLoad(false);\n      alert(error); // history.push(\"/setting\");\n    }\n  };\n\n  useEffect(() => {\n    getUserSetting();\n  }, [user, isLoginLoading]);\n\n  const validator = targetTimeObj => {\n    return targetTimeObj.targetWorkTime !== -1 && targetTimeObj.targetWakeTime.hour !== -1 && targetTimeObj.targetBedTime.hour !== -1 && targetTimeObj.targetWakeTime.minute !== -1 && targetTimeObj.targetBedTime.minute !== -1;\n  };\n\n  const setTargetTime = targetTimeObj => {\n    try {\n      let willUpdate = true;\n      console.log(\"EDIT TARGET\");\n      if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n\n      if (willUpdate) {\n        console.log(\"API START~~\");\n        APIv2.userSetting(user).edit(targetTimeObj);\n        setTargetWorkTime(targetTimeObj === null || targetTimeObj === void 0 ? void 0 : targetTimeObj.targetWorkTime);\n        setTargetWakeHour(targetTimeObj === null || targetTimeObj === void 0 ? void 0 : targetTimeObj.targetWakeTime.hour);\n        setTargetBedHour(targetTimeObj === null || targetTimeObj === void 0 ? void 0 : targetTimeObj.targetBedTime.hour);\n        setTargetWakeMinute(targetTimeObj === null || targetTimeObj === void 0 ? void 0 : targetTimeObj.targetWakeTime.minute);\n        setTargetBedMinute(targetTimeObj === null || targetTimeObj === void 0 ? void 0 : targetTimeObj.targetBedTime.minute);\n      } else {\n        const targetWakeTime = targetWakeHour && targetWakeMinute;\n        const targetBedTime = targetBedHour && targetBedMinute;\n        let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${!targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"}${targetWakeTime ? \"\" : \"TargetWakeTime\"}${!targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"}${targetBedTime ? \"\" : \"TargetBedtime\"} ${!targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"} not entered.`;\n        throw new Error(errText);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const targetTimeObj = makeTargetTimeObj(targetWorkTime, targetWakeHour, targetBedHour, targetWakeMinute, targetBedMinute);\n  return {\n    setTargetTime,\n    targetTimeObj,\n    isSettingHookLoading\n  };\n};\n\n_s(useTargetSetting, \"BvYw7HkduhWQR752F26zNKgP2v4=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useTargetSetting.js"],"names":["useEffect","useState","API","APIv2","makeTargetTimeObj","targetWorkTime","targetWakeHour","targetWakeMinute","targetBedHour","targetBedMinute","targetWakeTime","hour","minute","targetBedTime","useTargetSetting","user","isLoginLoading","console","log","setTargetWorkTime","setTargetWakeHour","setTargetBedHour","setTargetWakeMinute","setTargetBedMinute","isSettingHookLoading","setLoad","getUserSetting","data","userSetting","get","settingObj","Error","error","alert","validator","targetTimeObj","setTargetTime","willUpdate","edit","errText"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nconst makeTargetTimeObj = (\n  targetWorkTime,\n  targetWakeHour,\n  targetWakeMinute,\n  targetBedHour,\n  targetBedMinute\n) => {\n  return {\n    targetWorkTime,\n    targetWakeTime: { hour: targetWakeHour, minute: targetWakeMinute },\n    targetBedTime: { hour: targetBedHour, minute: targetBedMinute },\n  };\n};\nexport const useTargetSetting = (user, isLoginLoading) => {\n  console.log(\"UPDATE SETTING HOOK USER: \");\n  const [targetWorkTime, setTargetWorkTime] = useState(-1);\n  const [targetWakeHour, setTargetWakeHour] = useState(-1);\n  const [targetBedHour, setTargetBedHour] = useState(-1);\n  const [targetWakeMinute, setTargetWakeMinute] = useState(-1);\n  const [targetBedMinute, setTargetBedMinute] = useState(-1);\n  const [isSettingHookLoading, setLoad] = useState(true);\n  const getUserSetting = async () => {\n    try {\n      if (user && !isLoginLoading) {\n        console.log(\"SETTIN-G\", user);\n        const data = await APIv2.userSetting(user).get(); //API.get(`/auth/setting/${user}`);\n        const settingObj = data?.data;\n        if (!data) throw new Error(\"Cannot find data\");\n        setTargetWorkTime(settingObj?.targetWorkTime);\n        setTargetWakeHour(settingObj?.targetWakeTime.hour);\n        setTargetBedHour(settingObj?.targetBedTime.hour);\n        setTargetWakeMinute(settingObj?.targetWakeTime.minute);\n        setTargetBedMinute(settingObj?.targetBedTime.minute);\n        setLoad(false);\n        console.log(\"SETTIN-G END\", isSettingHookLoading);\n      } else {\n        //\n      }\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n      // history.push(\"/setting\");\n    }\n  };\n  useEffect(() => {\n    getUserSetting();\n  }, [user, isLoginLoading]);\n\n  const validator = (targetTimeObj) => {\n    return (\n      targetTimeObj.targetWorkTime !== -1 &&\n      targetTimeObj.targetWakeTime.hour !== -1 &&\n      targetTimeObj.targetBedTime.hour !== -1 &&\n      targetTimeObj.targetWakeTime.minute !== -1 &&\n      targetTimeObj.targetBedTime.minute !== -1\n    );\n  };\n  const setTargetTime = (targetTimeObj) => {\n    try {\n      let willUpdate = true;\n      console.log(\"EDIT TARGET\");\n      if (typeof validator === \"function\")\n        willUpdate = validator(targetTimeObj);\n      if (willUpdate) {\n        console.log(\"API START~~\");\n        APIv2.userSetting(user).edit(targetTimeObj);\n        setTargetWorkTime(targetTimeObj?.targetWorkTime);\n        setTargetWakeHour(targetTimeObj?.targetWakeTime.hour);\n        setTargetBedHour(targetTimeObj?.targetBedTime.hour);\n        setTargetWakeMinute(targetTimeObj?.targetWakeTime.minute);\n        setTargetBedMinute(targetTimeObj?.targetBedTime.minute);\n      } else {\n        const targetWakeTime = targetWakeHour && targetWakeMinute;\n        const targetBedTime = targetBedHour && targetBedMinute;\n        let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${\n          !targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"\n        }${targetWakeTime ? \"\" : \"TargetWakeTime\"}${\n          !targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"\n        }${targetBedTime ? \"\" : \"TargetBedtime\"} ${\n          !targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"\n        } not entered.`;\n        throw new Error(errText);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  const targetTimeObj = makeTargetTimeObj(\n    targetWorkTime,\n    targetWakeHour,\n    targetBedHour,\n    targetWakeMinute,\n    targetBedMinute\n  );\n  return {\n    setTargetTime,\n    targetTimeObj,\n    isSettingHookLoading,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}