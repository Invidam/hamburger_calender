{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Deque } from \"../../classes/Deque\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { getAddedDateStr, getDiffDayInStr } from \"../../tools/time\";\nconst STARTDATEDIFF = 2;\nconst DISPLAY_LENGTH = 5;\nconst LIST_LENGTH = 11;\n\nconst makeStartDate = date => getAddedDateStr(date, -1 * Math.floor(DISPLAY_LENGTH / 2)); // const makeStartDate = (date) => getAddedDateStr(date, -1 * STARTDATEDIFF);\n\n\nconst getStartDate = date => LocalStroage.startDate().isEmpty() ? makeStartDate(date) : LocalStroage.startDate().get();\n\nlet befStartDate;\nlet listDeque = Deque();\nexport const useListView = (user, date, setDate, workList) => {\n  _s();\n\n  console.log(\"LIST VIEW RENDERING\");\n  const [startDate, setStratDate] = useState(getStartDate(date)); // const getEndDate = (startDate) =>\n  //   getAddedDateObj(startDate, STARTDATEDIFF * 2);\n\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState();\n\n  const updateStartDate = nextDate => {\n    console.log(\"list change\");\n    LocalStroage.startDate().set(nextDate);\n    setStratDate(nextDate);\n  };\n\n  const onClickLeftBtn = () => {\n    const nextDate = getAddedDateStr(startDate, -1);\n    updateStartDate(nextDate);\n  };\n\n  const onClickRightBtn = () => {\n    const nextDate = getAddedDateStr(startDate, 1);\n    updateStartDate(nextDate);\n  };\n\n  useEffect(() => {\n    updateStartDate(makeStartDate(date));\n  }, [date]);\n\n  const getListView = async () => {\n    try {\n      if (user && startDate) {\n        setLoad(true);\n        const data = await APIv2.listView(user, startDate).get(STARTDATEDIFF);\n        setLoad(false);\n        if (!(data === null || data === void 0 ? void 0 : data.data)) throw new Error(\"List View cann't found\");\n        console.log(\"DATA : LISTVIEW \", data === null || data === void 0 ? void 0 : data.data);\n        listDeque = new Deque();\n        setListView(data === null || data === void 0 ? void 0 : data.data);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    const updateListView = () => {};\n\n    const moveListView = () => {};\n\n    console.log(\"Set list view start\");\n    if (!befStartDate || getDiffDayInStr(befStartDate, startDate) > 2) updateListView(startDate);else moveListView(startDate);\n    getListView();\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn\n  };\n};\n\n_s(useListView, \"V+2o66MlX8GHhfyN0gsA7Kh4bsU=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/listView/useListView.js"],"names":["useEffect","useState","Deque","APIv2","LocalStroage","getAddedDateStr","getDiffDayInStr","STARTDATEDIFF","DISPLAY_LENGTH","LIST_LENGTH","makeStartDate","date","Math","floor","getStartDate","startDate","isEmpty","get","befStartDate","listDeque","useListView","user","setDate","workList","console","log","setStratDate","listView","setListView","isListViewLoading","setLoad","updateStartDate","nextDate","set","onClickLeftBtn","onClickRightBtn","getListView","data","Error","error","alert","updateListView","moveListView"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Deque } from \"../../classes/Deque\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { getAddedDateStr, getDiffDayInStr } from \"../../tools/time\";\nconst STARTDATEDIFF = 2;\nconst DISPLAY_LENGTH = 5;\nconst LIST_LENGTH = 11;\nconst makeStartDate = (date) =>\n  getAddedDateStr(date, -1 * Math.floor(DISPLAY_LENGTH / 2));\n// const makeStartDate = (date) => getAddedDateStr(date, -1 * STARTDATEDIFF);\nconst getStartDate = (date) =>\n  LocalStroage.startDate().isEmpty()\n    ? makeStartDate(date)\n    : LocalStroage.startDate().get();\n\nlet befStartDate;\nlet listDeque = Deque();\nexport const useListView = (user, date, setDate, workList) => {\n  console.log(\"LIST VIEW RENDERING\");\n  const [startDate, setStratDate] = useState(getStartDate(date));\n  // const getEndDate = (startDate) =>\n  //   getAddedDateObj(startDate, STARTDATEDIFF * 2);\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState();\n\n  const updateStartDate = (nextDate) => {\n    console.log(\"list change\");\n    LocalStroage.startDate().set(nextDate);\n    setStratDate(nextDate);\n  };\n  const onClickLeftBtn = () => {\n    const nextDate = getAddedDateStr(startDate, -1);\n    updateStartDate(nextDate);\n  };\n  const onClickRightBtn = () => {\n    const nextDate = getAddedDateStr(startDate, 1);\n    updateStartDate(nextDate);\n  };\n\n  useEffect(() => {\n    updateStartDate(makeStartDate(date));\n  }, [date]);\n  const getListView = async () => {\n    try {\n      if (user && startDate) {\n        setLoad(true);\n        const data = await APIv2.listView(user, startDate).get(STARTDATEDIFF);\n        setLoad(false);\n        if (!data?.data) throw new Error(\"List View cann't found\");\n        console.log(\"DATA : LISTVIEW \", data?.data);\n        listDeque = new Deque();\n        setListView(data?.data);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    const updateListView = () => {};\n    const moveListView = () => {};\n    console.log(\"Set list view start\");\n    if (!befStartDate || getDiffDayInStr(befStartDate, startDate) > 2)\n      updateListView(startDate);\n    else moveListView(startDate);\n    getListView();\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}