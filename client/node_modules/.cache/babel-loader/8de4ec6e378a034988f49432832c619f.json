{"ast":null,"code":"const {\n  inherits\n} = require('util');\n\nconst DEREncoder = require('./der');\n\nfunction PEMEncoder(entity) {\n  DEREncoder.call(this, entity);\n  this.enc = 'pem';\n}\n\ninherits(PEMEncoder, DEREncoder);\n\nPEMEncoder.prototype.encode = function encode(data, options) {\n  const buf = DEREncoder.prototype.encode.call(this, data);\n  const p = buf.toString('base64');\n  const out = [`-----BEGIN ${options.label}-----`];\n\n  for (let i = 0; i < p.length; i += 64) {\n    out.push(p.slice(i, i + 64));\n  }\n\n  out.push(`-----END ${options.label}-----`);\n  return out.join('\\n');\n};\n\nmodule.exports = PEMEncoder;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/@panva/asn1.js/lib/asn1/encoders/pem.js"],"names":["inherits","require","DEREncoder","PEMEncoder","entity","call","enc","prototype","encode","data","options","buf","p","toString","out","label","i","length","push","slice","join","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,MAAD,CAA5B;;AAEA,MAAMC,UAAU,GAAGD,OAAO,CAAC,OAAD,CAA1B;;AAEA,SAASE,UAAT,CAAqBC,MAArB,EAA6B;AAC3BF,EAAAA,UAAU,CAACG,IAAX,CAAgB,IAAhB,EAAsBD,MAAtB;AACA,OAAKE,GAAL,GAAW,KAAX;AACD;;AACDN,QAAQ,CAACG,UAAD,EAAaD,UAAb,CAAR;;AAEAC,UAAU,CAACI,SAAX,CAAqBC,MAArB,GAA8B,SAASA,MAAT,CAAiBC,IAAjB,EAAuBC,OAAvB,EAAgC;AAC5D,QAAMC,GAAG,GAAGT,UAAU,CAACK,SAAX,CAAqBC,MAArB,CAA4BH,IAA5B,CAAiC,IAAjC,EAAuCI,IAAvC,CAAZ;AAEA,QAAMG,CAAC,GAAGD,GAAG,CAACE,QAAJ,CAAa,QAAb,CAAV;AACA,QAAMC,GAAG,GAAG,CAAE,cAAaJ,OAAO,CAACK,KAAM,OAA7B,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAAC,CAACK,MAAtB,EAA8BD,CAAC,IAAI,EAAnC,EAAuC;AAAEF,IAAAA,GAAG,CAACI,IAAJ,CAASN,CAAC,CAACO,KAAF,CAAQH,CAAR,EAAWA,CAAC,GAAG,EAAf,CAAT;AAA8B;;AACvEF,EAAAA,GAAG,CAACI,IAAJ,CAAU,YAAWR,OAAO,CAACK,KAAM,OAAnC;AACA,SAAOD,GAAG,CAACM,IAAJ,CAAS,IAAT,CAAP;AACD,CARD;;AAUAC,MAAM,CAACC,OAAP,GAAiBnB,UAAjB","sourcesContent":["const { inherits } = require('util')\n\nconst DEREncoder = require('./der')\n\nfunction PEMEncoder (entity) {\n  DEREncoder.call(this, entity)\n  this.enc = 'pem'\n}\ninherits(PEMEncoder, DEREncoder)\n\nPEMEncoder.prototype.encode = function encode (data, options) {\n  const buf = DEREncoder.prototype.encode.call(this, data)\n\n  const p = buf.toString('base64')\n  const out = [`-----BEGIN ${options.label}-----`]\n  for (let i = 0; i < p.length; i += 64) { out.push(p.slice(i, i + 64)) }\n  out.push(`-----END ${options.label}-----`)\n  return out.join('\\n')\n}\n\nmodule.exports = PEMEncoder\n"]},"metadata":{},"sourceType":"script"}