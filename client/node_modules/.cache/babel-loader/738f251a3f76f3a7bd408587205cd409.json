{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst stream_1 = require(\"stream\");\n\nconst deepEqual = require(\"fast-deep-equal\");\n\nconst document_1 = require(\"./document\");\n\nconst document_change_1 = require(\"./document-change\");\n\nconst logger_1 = require(\"./logger\");\n\nconst order_1 = require(\"./order\");\n\nconst path_1 = require(\"./path\");\n\nconst serializer_1 = require(\"./serializer\");\n\nconst timestamp_1 = require(\"./timestamp\");\n\nconst types_1 = require(\"./types\");\n\nconst util_1 = require(\"./util\");\n\nconst validate_1 = require(\"./validate\");\n\nconst write_batch_1 = require(\"./write-batch\");\n/**\n * The direction of a `Query.orderBy()` clause is specified as 'desc' or 'asc'\n * (descending or ascending).\n *\n * @private\n * @internal\n */\n\n\nconst directionOperators = {\n  asc: 'ASCENDING',\n  desc: 'DESCENDING'\n};\n/**\n * Filter conditions in a `Query.where()` clause are specified using the\n * strings '<', '<=', '==', '!=', '>=', '>', 'array-contains', 'in', 'not-in',\n * and 'array-contains-any'.\n *\n * @private\n * @internal\n */\n\nconst comparisonOperators = {\n  '<': 'LESS_THAN',\n  '<=': 'LESS_THAN_OR_EQUAL',\n  '==': 'EQUAL',\n  '!=': 'NOT_EQUAL',\n  '>': 'GREATER_THAN',\n  '>=': 'GREATER_THAN_OR_EQUAL',\n  'array-contains': 'ARRAY_CONTAINS',\n  in: 'IN',\n  'not-in': 'NOT_IN',\n  'array-contains-any': 'ARRAY_CONTAINS_ANY'\n};\n/**\n * onSnapshot() callback that receives a QuerySnapshot.\n *\n * @callback querySnapshotCallback\n * @param {QuerySnapshot} snapshot A query snapshot.\n */\n\n/**\n * onSnapshot() callback that receives a DocumentSnapshot.\n *\n * @callback documentSnapshotCallback\n * @param {DocumentSnapshot} snapshot A document snapshot.\n */\n\n/**\n * onSnapshot() callback that receives an error.\n *\n * @callback errorCallback\n * @param {Error} err An error from a listen.\n */\n\n/**\n * A DocumentReference refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist. A DocumentReference can\n * also be used to create a\n * [CollectionReference]{@link CollectionReference} to a\n * subcollection.\n *\n * @class DocumentReference\n */\n\nclass DocumentReference {\n  /**\n   * @hideconstructor\n   *\n   * @param _firestore The Firestore Database client.\n   * @param _path The Path of this reference.\n   */\n  constructor(_firestore, _path, _converter = types_1.defaultConverter()) {\n    this._firestore = _firestore;\n    this._path = _path;\n    this._converter = _converter;\n  }\n  /**\n   * The string representation of the DocumentReference's location.\n   * @private\n   * @internal\n   * @type {string}\n   * @name DocumentReference#formattedName\n   */\n\n\n  get formattedName() {\n    const projectId = this.firestore.projectId;\n    return this._path.toQualifiedResourcePath(projectId).formattedName;\n  }\n  /**\n   * The [Firestore]{@link Firestore} instance for the Firestore\n   * database (useful for performing transactions, etc.).\n   *\n   * @type {Firestore}\n   * @name DocumentReference#firestore\n   * @readonly\n   *\n   * @example\n   * let collectionRef = firestore.collection('col');\n   *\n   * collectionRef.add({foo: 'bar'}).then(documentReference => {\n   *   let firestore = documentReference.firestore;\n   *   console.log(`Root location for document is ${firestore.formattedName}`);\n   * });\n   */\n\n\n  get firestore() {\n    return this._firestore;\n  }\n  /**\n   * A string representing the path of the referenced document (relative\n   * to the root of the database).\n   *\n   * @type {string}\n   * @name DocumentReference#path\n   * @readonly\n   *\n   * @example\n   * let collectionRef = firestore.collection('col');\n   *\n   * collectionRef.add({foo: 'bar'}).then(documentReference => {\n   *   console.log(`Added document at '${documentReference.path}'`);\n   * });\n   */\n\n\n  get path() {\n    return this._path.relativeName;\n  }\n  /**\n   * The last path element of the referenced document.\n   *\n   * @type {string}\n   * @name DocumentReference#id\n   * @readonly\n   *\n   * @example\n   * let collectionRef = firestore.collection('col');\n   *\n   * collectionRef.add({foo: 'bar'}).then(documentReference => {\n   *   console.log(`Added document with name '${documentReference.id}'`);\n   * });\n   */\n\n\n  get id() {\n    return this._path.id;\n  }\n  /**\n   * Returns a resource path for this document.\n   * @private\n   * @internal\n   */\n\n\n  get _resourcePath() {\n    return this._path;\n  }\n  /**\n   * A reference to the collection to which this DocumentReference belongs.\n   *\n   * @name DocumentReference#parent\n   * @type {CollectionReference}\n   * @readonly\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   * let collectionRef = documentRef.parent;\n   *\n   * collectionRef.where('foo', '==', 'bar').get().then(results => {\n   *   console.log(`Found ${results.size} matches in parent collection`);\n   * }):\n   */\n\n\n  get parent() {\n    return new CollectionReference(this._firestore, this._path.parent(), this._converter);\n  }\n  /**\n   * Reads the document referred to by this DocumentReference.\n   *\n   * @returns {Promise.<DocumentSnapshot>} A Promise resolved with a\n   * DocumentSnapshot for the retrieved document on success. For missing\n   * documents, DocumentSnapshot.exists will be false. If the get() fails for\n   * other reasons, the Promise will be rejected.\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.get().then(documentSnapshot => {\n   *   if (documentSnapshot.exists) {\n   *     console.log('Document retrieved successfully.');\n   *   }\n   * });\n   */\n\n\n  get() {\n    return this._firestore.getAll(this).then(([result]) => result);\n  }\n  /**\n   * Gets a [CollectionReference]{@link CollectionReference} instance\n   * that refers to the collection at the specified path.\n   *\n   * @param {string} collectionPath A slash-separated path to a collection.\n   * @returns {CollectionReference} A reference to the new\n   * subcollection.\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   * let subcollection = documentRef.collection('subcollection');\n   * console.log(`Path to subcollection: ${subcollection.path}`);\n   */\n\n\n  collection(collectionPath) {\n    path_1.validateResourcePath('collectionPath', collectionPath);\n\n    const path = this._path.append(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\n    }\n\n    return new CollectionReference(this._firestore, path);\n  }\n  /**\n   * Fetches the subcollections that are direct children of this document.\n   *\n   * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n   * with an array of CollectionReferences.\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.listCollections().then(collections => {\n   *   for (let collection of collections) {\n   *     console.log(`Found subcollection with id: ${collection.id}`);\n   *   }\n   * });\n   */\n\n\n  listCollections() {\n    const tag = util_1.requestTag();\n    return this.firestore.initializeIfNeeded(tag).then(() => {\n      const request = {\n        parent: this.formattedName,\n        // Setting `pageSize` to an arbitrarily large value lets the backend cap\n        // the page size (currently to 300). Note that the backend rejects\n        // MAX_INT32 (b/146883794).\n        pageSize: Math.pow(2, 16) - 1\n      };\n      return this._firestore.request('listCollectionIds', request, tag).then(collectionIds => {\n        const collections = []; // We can just sort this list using the default comparator since it\n        // will only contain collection ids.\n\n        collectionIds.sort();\n\n        for (const collectionId of collectionIds) {\n          collections.push(this.collection(collectionId));\n        }\n\n        return collections;\n      });\n    });\n  }\n  /**\n   * Create a document with the provided object values. This will fail the write\n   * if a document exists at its location.\n   *\n   * @param {DocumentData} data An object that contains the fields and data to\n   * serialize as the document.\n   * @returns {Promise.<WriteResult>} A Promise that resolves with the\n   * write time of this create.\n   *\n   * @example\n   * let documentRef = firestore.collection('col').doc();\n   *\n   * documentRef.create({foo: 'bar'}).then((res) => {\n   *   console.log(`Document created at ${res.updateTime}`);\n   * }).catch((err) => {\n   *   console.log(`Failed to create document: ${err}`);\n   * });\n   */\n\n\n  create(data) {\n    const writeBatch = new write_batch_1.WriteBatch(this._firestore);\n    return writeBatch.create(this, data).commit().then(([writeResult]) => writeResult);\n  }\n  /**\n   * Deletes the document referred to by this `DocumentReference`.\n   *\n   * A delete for a non-existing document is treated as a success (unless\n   * lastUptimeTime is provided).\n   *\n   * @param {Precondition=} precondition A precondition to enforce for this\n   * delete.\n   * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n   * document was last updated at lastUpdateTime. Fails the delete if the\n   * document was last updated at a different time.\n   * @param {boolean=} precondition.exists If set, enforces that the target\n   * document must or must not exist.\n   * @returns {Promise.<WriteResult>} A Promise that resolves with the\n   * delete time.\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.delete().then(() => {\n   *   console.log('Document successfully deleted.');\n   * });\n   */\n\n\n  delete(precondition) {\n    const writeBatch = new write_batch_1.WriteBatch(this._firestore);\n    return writeBatch.delete(this, precondition).commit().then(([writeResult]) => writeResult);\n  }\n  /**\n   * Writes to the document referred to by this DocumentReference. If the\n   * document does not yet exist, it will be created. If you pass\n   * [SetOptions]{@link SetOptions}, the provided data can be merged into an\n   * existing document.\n   *\n   * @param {T|Partial<T>} data A map of the fields and values for the document.\n   * @param {SetOptions=} options An object to configure the set behavior.\n   * @param {boolean=} options.merge If true, set() merges the values specified\n   * in its data argument. Fields omitted from this set() call remain untouched.\n   * @param {Array.<string|FieldPath>=} options.mergeFields If provided,\n   * set() only replaces the specified field paths. Any field path that is not\n   * specified is ignored and remains untouched.\n   * @returns {Promise.<WriteResult>} A Promise that resolves with the\n   * write time of this set.\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.set({foo: 'bar'}).then(res => {\n   *   console.log(`Document written at ${res.updateTime}`);\n   * });\n   */\n\n\n  set(data, options) {\n    const writeBatch = new write_batch_1.WriteBatch(this._firestore);\n    return writeBatch.set(this, data, options).commit().then(([writeResult]) => writeResult);\n  }\n  /**\n   * Updates fields in the document referred to by this DocumentReference.\n   * If the document doesn't yet exist, the update fails and the returned\n   * Promise will be rejected.\n   *\n   * The update() method accepts either an object with field paths encoded as\n   * keys and field values encoded as values, or a variable number of arguments\n   * that alternate between field paths and field values.\n   *\n   * A Precondition restricting this update can be specified as the last\n   * argument.\n   *\n   * @param {UpdateData|string|FieldPath} dataOrField An object containing the\n   * fields and values with which to update the document or the path of the\n   * first field to update.\n   * @param {\n   * ...(*|string|FieldPath|Precondition)} preconditionOrValues An alternating\n   * list of field paths and values to update or a Precondition to restrict\n   * this update.\n   * @returns {Promise.<WriteResult>} A Promise that resolves once the\n   * data has been successfully written to the backend.\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * documentRef.update({foo: 'bar'}).then(res => {\n   *   console.log(`Document updated at ${res.updateTime}`);\n   * });\n   */\n\n\n  update(dataOrField, ...preconditionOrValues) {\n    // eslint-disable-next-line prefer-rest-params\n    validate_1.validateMinNumberOfArguments('DocumentReference.update', arguments, 1);\n    const writeBatch = new write_batch_1.WriteBatch(this._firestore);\n    return writeBatch.update(this, dataOrField, ...preconditionOrValues).commit().then(([writeResult]) => writeResult);\n  }\n  /**\n   * Attaches a listener for DocumentSnapshot events.\n   *\n   * @param {documentSnapshotCallback} onNext A callback to be called every\n   * time a new `DocumentSnapshot` is available.\n   * @param {errorCallback=} onError A callback to be called if the listen fails\n   * or is cancelled. No further callbacks will occur. If unset, errors will be\n   * logged to the console.\n   *\n   * @returns {function()} An unsubscribe function that can be called to cancel\n   * the snapshot listener.\n   *\n   * @example\n   * let documentRef = firestore.doc('col/doc');\n   *\n   * let unsubscribe = documentRef.onSnapshot(documentSnapshot => {\n   *   if (documentSnapshot.exists) {\n   *     console.log(documentSnapshot.data());\n   *   }\n   * }, err => {\n   *   console.log(`Encountered error: ${err}`);\n   * });\n   *\n   * // Remove this listener.\n   * unsubscribe();\n   */\n\n\n  onSnapshot(onNext, onError) {\n    validate_1.validateFunction('onNext', onNext);\n    validate_1.validateFunction('onError', onError, {\n      optional: true\n    });\n    const watch = new (require('./watch').DocumentWatch)(this.firestore, this);\n    return watch.onSnapshot((readTime, size, docs) => {\n      for (const document of docs()) {\n        if (document.ref.path === this.path) {\n          onNext(document);\n          return;\n        }\n      } // The document is missing.\n\n\n      const ref = new DocumentReference(this._firestore, this._path, this._converter);\n      const document = new document_1.DocumentSnapshotBuilder(ref);\n      document.readTime = readTime;\n      onNext(document.build());\n    }, onError || console.error);\n  }\n  /**\n   * Returns true if this `DocumentReference` is equal to the provided value.\n   *\n   * @param {*} other The value to compare against.\n   * @return {boolean} true if this `DocumentReference` is equal to the provided\n   * value.\n   */\n\n\n  isEqual(other) {\n    return this === other || other instanceof DocumentReference && this._firestore === other._firestore && this._path.isEqual(other._path) && this._converter === other._converter;\n  }\n  /**\n   * Converts this DocumentReference to the Firestore Proto representation.\n   *\n   * @private\n   * @internal\n   */\n\n\n  toProto() {\n    return {\n      referenceValue: this.formattedName\n    };\n  }\n  /**\n   * Applies a custom data converter to this DocumentReference, allowing you to\n   * use your own custom model objects with Firestore. When you call set(),\n   * get(), etc. on the returned DocumentReference instance, the provided\n   * converter will convert between Firestore data and your custom type U.\n   *\n   * Using the converter allows you to specify generic type arguments when\n   * storing and retrieving objects from Firestore.\n   *\n   * Passing in `null` as the converter parameter removes the current\n   * converter.\n   *\n   * @example\n   * class Post {\n   *   constructor(readonly title: string, readonly author: string) {}\n   *\n   *   toString(): string {\n   *     return this.title + ', by ' + this.author;\n   *   }\n   * }\n   *\n   * const postConverter = {\n   *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n   *     return {title: post.title, author: post.author};\n   *   },\n   *   fromFirestore(\n   *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n   *   ): Post {\n   *     const data = snapshot.data();\n   *     return new Post(data.title, data.author);\n   *   }\n   * };\n   *\n   * const postSnap = await Firestore()\n   *   .collection('posts')\n   *   .withConverter(postConverter)\n   *   .doc().get();\n   * const post = postSnap.data();\n   * if (post !== undefined) {\n   *   post.title; // string\n   *   post.toString(); // Should be defined\n   *   post.someNonExistentProperty; // TS error\n   * }\n   *\n   * @param {FirestoreDataConverter | null} converter Converts objects to and\n   * from Firestore. Passing in `null` removes the current converter.\n   * @return A DocumentReference<U> that uses the provided converter.\n   */\n\n\n  withConverter(converter) {\n    return new DocumentReference(this.firestore, this._path, converter !== null && converter !== void 0 ? converter : types_1.defaultConverter());\n  }\n\n}\n\nexports.DocumentReference = DocumentReference;\n/**\n * A Query order-by field.\n *\n * @private\n * @internal\n * @class\n */\n\nclass FieldOrder {\n  /**\n   * @param field The name of a document field (member) on which to order query\n   * results.\n   * @param direction One of 'ASCENDING' (default) or 'DESCENDING' to\n   * set the ordering direction to ascending or descending, respectively.\n   */\n  constructor(field, direction = 'ASCENDING') {\n    this.field = field;\n    this.direction = direction;\n  }\n  /**\n   * Generates the proto representation for this field order.\n   * @private\n   * @internal\n   */\n\n\n  toProto() {\n    return {\n      field: {\n        fieldPath: this.field.formattedName\n      },\n      direction: this.direction\n    };\n  }\n\n}\n\nexports.FieldOrder = FieldOrder;\n/**\n * A field constraint for a Query where clause.\n *\n * @private\n * @internal\n * @class\n */\n\nclass FieldFilter {\n  /**\n   * @param serializer The Firestore serializer\n   * @param field The path of the property value to compare.\n   * @param op A comparison operation.\n   * @param value The value to which to compare the field for inclusion in a\n   * query.\n   */\n  constructor(serializer, field, op, value) {\n    this.serializer = serializer;\n    this.field = field;\n    this.op = op;\n    this.value = value;\n  }\n  /**\n   * Returns whether this FieldFilter uses an equals comparison.\n   *\n   * @private\n   * @internal\n   */\n\n\n  isInequalityFilter() {\n    switch (this.op) {\n      case 'GREATER_THAN':\n      case 'GREATER_THAN_OR_EQUAL':\n      case 'LESS_THAN':\n      case 'LESS_THAN_OR_EQUAL':\n        return true;\n\n      default:\n        return false;\n    }\n  }\n  /**\n   * Generates the proto representation for this field filter.\n   *\n   * @private\n   * @internal\n   */\n\n\n  toProto() {\n    if (typeof this.value === 'number' && isNaN(this.value)) {\n      return {\n        unaryFilter: {\n          field: {\n            fieldPath: this.field.formattedName\n          },\n          op: this.op === 'EQUAL' ? 'IS_NAN' : 'IS_NOT_NAN'\n        }\n      };\n    }\n\n    if (this.value === null) {\n      return {\n        unaryFilter: {\n          field: {\n            fieldPath: this.field.formattedName\n          },\n          op: this.op === 'EQUAL' ? 'IS_NULL' : 'IS_NOT_NULL'\n        }\n      };\n    }\n\n    return {\n      fieldFilter: {\n        field: {\n          fieldPath: this.field.formattedName\n        },\n        op: this.op,\n        value: this.serializer.encodeValue(this.value)\n      }\n    };\n  }\n\n}\n/**\n * A QuerySnapshot contains zero or more\n * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} objects\n * representing the results of a query. The documents can be accessed as an\n * array via the [documents]{@link QuerySnapshot#documents} property\n * or enumerated using the [forEach]{@link QuerySnapshot#forEach}\n * method. The number of documents can be determined via the\n * [empty]{@link QuerySnapshot#empty} and\n * [size]{@link QuerySnapshot#size} properties.\n *\n * @class QuerySnapshot\n */\n\n\nclass QuerySnapshot {\n  /**\n   * @hideconstructor\n   *\n   * @param _query The originating query.\n   * @param _readTime The time when this query snapshot was obtained.\n   * @param _size The number of documents in the result set.\n   * @param docs A callback returning a sorted array of documents matching\n   * this query\n   * @param changes A callback returning a sorted array of document change\n   * events for this snapshot.\n   */\n  constructor(_query, _readTime, _size, docs, changes) {\n    this._query = _query;\n    this._readTime = _readTime;\n    this._size = _size;\n    this._materializedDocs = null;\n    this._materializedChanges = null;\n    this._docs = null;\n    this._changes = null;\n    this._docs = docs;\n    this._changes = changes;\n  }\n  /**\n   * The query on which you called get() or onSnapshot() in order to get this\n   * QuerySnapshot.\n   *\n   * @type {Query}\n   * @name QuerySnapshot#query\n   * @readonly\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * query.limit(10).get().then(querySnapshot => {\n   *   console.log(`Returned first batch of results`);\n   *   let query = querySnapshot.query;\n   *   return query.offset(10).get();\n   * }).then(() => {\n   *   console.log(`Returned second batch of results`);\n   * });\n   */\n\n\n  get query() {\n    return this._query;\n  }\n  /**\n   * An array of all the documents in this QuerySnapshot.\n   *\n   * @type {Array.<QueryDocumentSnapshot>}\n   * @name QuerySnapshot#docs\n   * @readonly\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * query.get().then(querySnapshot => {\n   *   let docs = querySnapshot.docs;\n   *   for (let doc of docs) {\n   *     console.log(`Document found at path: ${doc.ref.path}`);\n   *   }\n   * });\n   */\n\n\n  get docs() {\n    if (this._materializedDocs) {\n      return this._materializedDocs;\n    }\n\n    this._materializedDocs = this._docs();\n    this._docs = null;\n    return this._materializedDocs;\n  }\n  /**\n   * True if there are no documents in the QuerySnapshot.\n   *\n   * @type {boolean}\n   * @name QuerySnapshot#empty\n   * @readonly\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * query.get().then(querySnapshot => {\n   *   if (querySnapshot.empty) {\n   *     console.log('No documents found.');\n   *   }\n   * });\n   */\n\n\n  get empty() {\n    return this._size === 0;\n  }\n  /**\n   * The number of documents in the QuerySnapshot.\n   *\n   * @type {number}\n   * @name QuerySnapshot#size\n   * @readonly\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * query.get().then(querySnapshot => {\n   *   console.log(`Found ${querySnapshot.size} documents.`);\n   * });\n   */\n\n\n  get size() {\n    return this._size;\n  }\n  /**\n   * The time this query snapshot was obtained.\n   *\n   * @type {Timestamp}\n   * @name QuerySnapshot#readTime\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * query.get().then((querySnapshot) => {\n   *   let readTime = querySnapshot.readTime;\n   *   console.log(`Query results returned at '${readTime.toDate()}'`);\n   * });\n   */\n\n\n  get readTime() {\n    return this._readTime;\n  }\n  /**\n   * Returns an array of the documents changes since the last snapshot. If\n   * this is the first snapshot, all documents will be in the list as added\n   * changes.\n   *\n   * @return {Array.<DocumentChange>}\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * query.onSnapshot(querySnapshot => {\n   *   let changes = querySnapshot.docChanges();\n   *   for (let change of changes) {\n   *     console.log(`A document was ${change.type}.`);\n   *   }\n   * });\n   */\n\n\n  docChanges() {\n    if (this._materializedChanges) {\n      return this._materializedChanges;\n    }\n\n    this._materializedChanges = this._changes();\n    this._changes = null;\n    return this._materializedChanges;\n  }\n  /**\n   * Enumerates all of the documents in the QuerySnapshot. This is a convenience\n   * method for running the same callback on each {@link QueryDocumentSnapshot}\n   * that is returned.\n   *\n   * @param {function} callback A callback to be called with a\n   * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} for each document in\n   * the snapshot.\n   * @param {*=} thisArg The `this` binding for the callback..\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * query.get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Document found at path: ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   */\n\n\n  forEach(callback, thisArg) {\n    validate_1.validateFunction('callback', callback);\n\n    for (const doc of this.docs) {\n      callback.call(thisArg, doc);\n    }\n  }\n  /**\n   * Returns true if the document data in this `QuerySnapshot` is equal to the\n   * provided value.\n   *\n   * @param {*} other The value to compare against.\n   * @return {boolean} true if this `QuerySnapshot` is equal to the provided\n   * value.\n   */\n\n\n  isEqual(other) {\n    // Since the read time is different on every query read, we explicitly\n    // ignore all metadata in this comparison.\n    if (this === other) {\n      return true;\n    }\n\n    if (!(other instanceof QuerySnapshot)) {\n      return false;\n    }\n\n    if (this._size !== other._size) {\n      return false;\n    }\n\n    if (!this._query.isEqual(other._query)) {\n      return false;\n    }\n\n    if (this._materializedDocs && !this._materializedChanges) {\n      // If we have only materialized the documents, we compare them first.\n      return isArrayEqual(this.docs, other.docs) && isArrayEqual(this.docChanges(), other.docChanges());\n    } // Otherwise, we compare the changes first as we expect there to be fewer.\n\n\n    return isArrayEqual(this.docChanges(), other.docChanges()) && isArrayEqual(this.docs, other.docs);\n  }\n\n}\n\nexports.QuerySnapshot = QuerySnapshot;\n/*!\n * Denotes whether a provided limit is applied to the beginning or the end of\n * the result set.\n */\n\nvar LimitType;\n\n(function (LimitType) {\n  LimitType[LimitType[\"First\"] = 0] = \"First\";\n  LimitType[LimitType[\"Last\"] = 1] = \"Last\";\n})(LimitType || (LimitType = {}));\n/**\n * Internal class representing custom Query options.\n *\n * These options are immutable. Modified options can be created using `with()`.\n * @private\n * @internal\n */\n\n\nclass QueryOptions {\n  constructor(parentPath, collectionId, converter, allDescendants, fieldFilters, fieldOrders, startAt, endAt, limit, limitType, offset, projection, // Whether to select all documents under `parentPath`. By default, only\n  // collections that match `collectionId` are selected.\n  kindless = false, // Whether to require consistent documents when restarting the query. By\n  // default, restarting the query uses the readTime offset of the original\n  // query to provide consistent results.\n  requireConsistency = true) {\n    this.parentPath = parentPath;\n    this.collectionId = collectionId;\n    this.converter = converter;\n    this.allDescendants = allDescendants;\n    this.fieldFilters = fieldFilters;\n    this.fieldOrders = fieldOrders;\n    this.startAt = startAt;\n    this.endAt = endAt;\n    this.limit = limit;\n    this.limitType = limitType;\n    this.offset = offset;\n    this.projection = projection;\n    this.kindless = kindless;\n    this.requireConsistency = requireConsistency;\n  }\n  /**\n   * Returns query options for a collection group query.\n   * @private\n   * @internal\n   */\n\n\n  static forCollectionGroupQuery(collectionId, converter = types_1.defaultConverter()) {\n    return new QueryOptions(\n    /*parentPath=*/\n    path_1.ResourcePath.EMPTY, collectionId, converter,\n    /*allDescendants=*/\n    true,\n    /*fieldFilters=*/\n    [],\n    /*fieldOrders=*/\n    []);\n  }\n  /**\n   * Returns query options for a single-collection query.\n   * @private\n   * @internal\n   */\n\n\n  static forCollectionQuery(collectionRef, converter = types_1.defaultConverter()) {\n    return new QueryOptions(collectionRef.parent(), collectionRef.id, converter,\n    /*allDescendants=*/\n    false,\n    /*fieldFilters=*/\n    [],\n    /*fieldOrders=*/\n    []);\n  }\n  /**\n   * Returns query options for a query that fetches all descendants under the\n   * specified reference.\n   *\n   * @private\n   * @internal\n   */\n\n\n  static forKindlessAllDescendants(parent, id, requireConsistency = true) {\n    let options = new QueryOptions(parent, id, types_1.defaultConverter(),\n    /*allDescendants=*/\n    true,\n    /*fieldFilters=*/\n    [],\n    /*fieldOrders=*/\n    []);\n    options = options.with({\n      kindless: true,\n      requireConsistency\n    });\n    return options;\n  }\n  /**\n   * Returns the union of the current and the provided options.\n   * @private\n   * @internal\n   */\n\n\n  with(settings) {\n    return new QueryOptions(coalesce(settings.parentPath, this.parentPath), coalesce(settings.collectionId, this.collectionId), this.converter, coalesce(settings.allDescendants, this.allDescendants), coalesce(settings.fieldFilters, this.fieldFilters), coalesce(settings.fieldOrders, this.fieldOrders), coalesce(settings.startAt, this.startAt), coalesce(settings.endAt, this.endAt), coalesce(settings.limit, this.limit), coalesce(settings.limitType, this.limitType), coalesce(settings.offset, this.offset), coalesce(settings.projection, this.projection), coalesce(settings.kindless, this.kindless), coalesce(settings.requireConsistency, this.requireConsistency));\n  }\n\n  withConverter(converter) {\n    return new QueryOptions(this.parentPath, this.collectionId, converter, this.allDescendants, this.fieldFilters, this.fieldOrders, this.startAt, this.endAt, this.limit, this.limitType, this.offset, this.projection);\n  }\n\n  hasFieldOrders() {\n    return this.fieldOrders.length > 0;\n  }\n\n  isEqual(other) {\n    if (this === other) {\n      return true;\n    }\n\n    return other instanceof QueryOptions && this.parentPath.isEqual(other.parentPath) && this.collectionId === other.collectionId && this.converter === other.converter && this.allDescendants === other.allDescendants && this.limit === other.limit && this.offset === other.offset && deepEqual(this.fieldFilters, other.fieldFilters) && deepEqual(this.fieldOrders, other.fieldOrders) && deepEqual(this.startAt, other.startAt) && deepEqual(this.endAt, other.endAt) && deepEqual(this.projection, other.projection) && this.kindless === other.kindless && this.requireConsistency === other.requireConsistency;\n  }\n\n}\n\nexports.QueryOptions = QueryOptions;\n/**\n * A Query refers to a query which you can read or stream from. You can also\n * construct refined Query objects by adding filters and ordering.\n *\n * @class Query\n */\n\nclass Query {\n  /**\n   * @hideconstructor\n   *\n   * @param _firestore The Firestore Database client.\n   * @param _queryOptions Options that define the query.\n   */\n  constructor(_firestore, _queryOptions) {\n    this._firestore = _firestore;\n    this._queryOptions = _queryOptions;\n    this._serializer = new serializer_1.Serializer(_firestore);\n    this._allowUndefined = !!this._firestore._settings.ignoreUndefinedProperties;\n  }\n  /**\n   * Extracts field values from the DocumentSnapshot based on the provided\n   * field order.\n   *\n   * @private\n   * @internal\n   * @param documentSnapshot The document to extract the fields from.\n   * @param fieldOrders The field order that defines what fields we should\n   * extract.\n   * @return {Array.<*>} The field values to use.\n   * @private\n   * @internal\n   */\n\n\n  static _extractFieldValues(documentSnapshot, fieldOrders) {\n    const fieldValues = [];\n\n    for (const fieldOrder of fieldOrders) {\n      if (path_1.FieldPath.documentId().isEqual(fieldOrder.field)) {\n        fieldValues.push(documentSnapshot.ref);\n      } else {\n        const fieldValue = documentSnapshot.get(fieldOrder.field);\n\n        if (fieldValue === undefined) {\n          throw new Error(`Field \"${fieldOrder.field}\" is missing in the provided DocumentSnapshot. ` + 'Please provide a document that contains values for all specified ' + 'orderBy() and where() constraints.');\n        } else {\n          fieldValues.push(fieldValue);\n        }\n      }\n    }\n\n    return fieldValues;\n  }\n  /**\n   * The [Firestore]{@link Firestore} instance for the Firestore\n   * database (useful for performing transactions, etc.).\n   *\n   * @type {Firestore}\n   * @name Query#firestore\n   * @readonly\n   *\n   * @example\n   * let collectionRef = firestore.collection('col');\n   *\n   * collectionRef.add({foo: 'bar'}).then(documentReference => {\n   *   let firestore = documentReference.firestore;\n   *   console.log(`Root location for document is ${firestore.formattedName}`);\n   * });\n   */\n\n\n  get firestore() {\n    return this._firestore;\n  }\n  /**\n   * Creates and returns a new [Query]{@link Query} with the additional filter\n   * that documents must contain the specified field and that its value should\n   * satisfy the relation constraint provided.\n   *\n   * Returns a new Query that constrains the value of a Document property.\n   *\n   * This function returns a new (immutable) instance of the Query (rather than\n   * modify the existing instance) to impose the filter.\n   *\n   * @param {string|FieldPath} fieldPath The name of a property value to compare.\n   * @param {string} opStr A comparison operation in the form of a string\n   * (e.g., \"<\").\n   * @param {*} value The value to which to compare the field for inclusion in\n   * a query.\n   * @returns {Query} The created Query.\n   *\n   * @example\n   * let collectionRef = firestore.collection('col');\n   *\n   * collectionRef.where('foo', '==', 'bar').get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   */\n\n\n  where(fieldPath, opStr, value) {\n    path_1.validateFieldPath('fieldPath', fieldPath);\n    opStr = validateQueryOperator('opStr', opStr, value);\n    validateQueryValue('value', value, this._allowUndefined);\n\n    if (this._queryOptions.startAt || this._queryOptions.endAt) {\n      throw new Error('Cannot specify a where() filter after calling startAt(), ' + 'startAfter(), endBefore() or endAt().');\n    }\n\n    const path = path_1.FieldPath.fromArgument(fieldPath);\n\n    if (path_1.FieldPath.documentId().isEqual(path)) {\n      if (opStr === 'array-contains' || opStr === 'array-contains-any') {\n        throw new Error(`Invalid Query. You can't perform '${opStr}' ` + 'queries on FieldPath.documentId().');\n      }\n\n      if (opStr === 'in' || opStr === 'not-in') {\n        if (!Array.isArray(value) || value.length === 0) {\n          throw new Error(`Invalid Query. A non-empty array is required for '${opStr}' filters.`);\n        }\n\n        value = value.map(el => this.validateReference(el));\n      } else {\n        value = this.validateReference(value);\n      }\n    }\n\n    const fieldFilter = new FieldFilter(this._serializer, path, comparisonOperators[opStr], value);\n\n    const options = this._queryOptions.with({\n      fieldFilters: this._queryOptions.fieldFilters.concat(fieldFilter)\n    });\n\n    return new Query(this._firestore, options);\n  }\n  /**\n   * Creates and returns a new [Query]{@link Query} instance that applies a\n   * field mask to the result and returns only the specified subset of fields.\n   * You can specify a list of field paths to return, or use an empty list to\n   * only return the references of matching documents.\n   *\n   * Queries that contain field masks cannot be listened to via `onSnapshot()`\n   * listeners.\n   *\n   * This function returns a new (immutable) instance of the Query (rather than\n   * modify the existing instance) to impose the field mask.\n   *\n   * @param {...(string|FieldPath)} fieldPaths The field paths to return.\n   * @returns {Query} The created Query.\n   *\n   * @example\n   * let collectionRef = firestore.collection('col');\n   * let documentRef = collectionRef.doc('doc');\n   *\n   * return documentRef.set({x:10, y:5}).then(() => {\n   *   return collectionRef.where('x', '>', 5).select('y').get();\n   * }).then((res) => {\n   *   console.log(`y is ${res.docs[0].get('y')}.`);\n   * });\n   */\n\n\n  select(...fieldPaths) {\n    const fields = [];\n\n    if (fieldPaths.length === 0) {\n      fields.push({\n        fieldPath: path_1.FieldPath.documentId().formattedName\n      });\n    } else {\n      for (let i = 0; i < fieldPaths.length; ++i) {\n        path_1.validateFieldPath(i, fieldPaths[i]);\n        fields.push({\n          fieldPath: path_1.FieldPath.fromArgument(fieldPaths[i]).formattedName\n        });\n      }\n    } // By specifying a field mask, the query result no longer conforms to type\n    // `T`. We there return `Query<DocumentData>`;\n\n\n    const options = this._queryOptions.with({\n      projection: {\n        fields\n      }\n    });\n\n    return new Query(this._firestore, options);\n  }\n  /**\n   * Creates and returns a new [Query]{@link Query} that's additionally sorted\n   * by the specified field, optionally in descending order instead of\n   * ascending.\n   *\n   * This function returns a new (immutable) instance of the Query (rather than\n   * modify the existing instance) to impose the field mask.\n   *\n   * @param {string|FieldPath} fieldPath The field to sort by.\n   * @param {string=} directionStr Optional direction to sort by ('asc' or\n   * 'desc'). If not specified, order will be ascending.\n   * @returns {Query} The created Query.\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '>', 42);\n   *\n   * query.orderBy('foo', 'desc').get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   */\n\n\n  orderBy(fieldPath, directionStr) {\n    path_1.validateFieldPath('fieldPath', fieldPath);\n    directionStr = validateQueryOrder('directionStr', directionStr);\n\n    if (this._queryOptions.startAt || this._queryOptions.endAt) {\n      throw new Error('Cannot specify an orderBy() constraint after calling ' + 'startAt(), startAfter(), endBefore() or endAt().');\n    }\n\n    const newOrder = new FieldOrder(path_1.FieldPath.fromArgument(fieldPath), directionOperators[directionStr || 'asc']);\n\n    const options = this._queryOptions.with({\n      fieldOrders: this._queryOptions.fieldOrders.concat(newOrder)\n    });\n\n    return new Query(this._firestore, options);\n  }\n  /**\n   * Creates and returns a new [Query]{@link Query} that only returns the\n   * first matching documents.\n   *\n   * This function returns a new (immutable) instance of the Query (rather than\n   * modify the existing instance) to impose the limit.\n   *\n   * @param {number} limit The maximum number of items to return.\n   * @returns {Query} The created Query.\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '>', 42);\n   *\n   * query.limit(1).get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   */\n\n\n  limit(limit) {\n    validate_1.validateInteger('limit', limit);\n\n    const options = this._queryOptions.with({\n      limit,\n      limitType: LimitType.First\n    });\n\n    return new Query(this._firestore, options);\n  }\n  /**\n   * Creates and returns a new [Query]{@link Query} that only returns the\n   * last matching documents.\n   *\n   * You must specify at least one orderBy clause for limitToLast queries,\n   * otherwise an exception will be thrown during execution.\n   *\n   * Results for limitToLast queries cannot be streamed via the `stream()` API.\n   *\n   * @param limit The maximum number of items to return.\n   * @return The created Query.\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '>', 42);\n   *\n   * query.limitToLast(1).get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Last matching document is ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   */\n\n\n  limitToLast(limit) {\n    validate_1.validateInteger('limitToLast', limit);\n\n    const options = this._queryOptions.with({\n      limit,\n      limitType: LimitType.Last\n    });\n\n    return new Query(this._firestore, options);\n  }\n  /**\n   * Specifies the offset of the returned results.\n   *\n   * This function returns a new (immutable) instance of the\n   * [Query]{@link Query} (rather than modify the existing instance)\n   * to impose the offset.\n   *\n   * @param {number} offset The offset to apply to the Query results\n   * @returns {Query} The created Query.\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '>', 42);\n   *\n   * query.limit(10).offset(20).get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   */\n\n\n  offset(offset) {\n    validate_1.validateInteger('offset', offset);\n\n    const options = this._queryOptions.with({\n      offset\n    });\n\n    return new Query(this._firestore, options);\n  }\n  /**\n   * Returns true if this `Query` is equal to the provided value.\n   *\n   * @param {*} other The value to compare against.\n   * @return {boolean} true if this `Query` is equal to the provided value.\n   */\n\n\n  isEqual(other) {\n    if (this === other) {\n      return true;\n    }\n\n    return other instanceof Query && this._queryOptions.isEqual(other._queryOptions);\n  }\n  /**\n   * Computes the backend ordering semantics for DocumentSnapshot cursors.\n   *\n   * @private\n   * @internal\n   * @param cursorValuesOrDocumentSnapshot The snapshot of the document or the\n   * set of field values to use as the boundary.\n   * @returns The implicit ordering semantics.\n   */\n\n\n  createImplicitOrderBy(cursorValuesOrDocumentSnapshot) {\n    // Add an implicit orderBy if the only cursor value is a DocumentSnapshot\n    // or a DocumentReference.\n    if (cursorValuesOrDocumentSnapshot.length !== 1 || !(cursorValuesOrDocumentSnapshot[0] instanceof document_1.DocumentSnapshot || cursorValuesOrDocumentSnapshot[0] instanceof DocumentReference)) {\n      return this._queryOptions.fieldOrders;\n    }\n\n    const fieldOrders = this._queryOptions.fieldOrders.slice(); // If no explicit ordering is specified, use the first inequality to\n    // define an implicit order.\n\n\n    if (fieldOrders.length === 0) {\n      for (const fieldFilter of this._queryOptions.fieldFilters) {\n        if (fieldFilter.isInequalityFilter()) {\n          fieldOrders.push(new FieldOrder(fieldFilter.field));\n          break;\n        }\n      }\n    }\n\n    const hasDocumentId = !!fieldOrders.find(fieldOrder => path_1.FieldPath.documentId().isEqual(fieldOrder.field));\n\n    if (!hasDocumentId) {\n      // Add implicit sorting by name, using the last specified direction.\n      const lastDirection = fieldOrders.length === 0 ? directionOperators.ASC : fieldOrders[fieldOrders.length - 1].direction;\n      fieldOrders.push(new FieldOrder(path_1.FieldPath.documentId(), lastDirection));\n    }\n\n    return fieldOrders;\n  }\n  /**\n   * Builds a Firestore 'Position' proto message.\n   *\n   * @private\n   * @internal\n   * @param {Array.<FieldOrder>} fieldOrders The field orders to use for this\n   * cursor.\n   * @param {Array.<DocumentSnapshot|*>} cursorValuesOrDocumentSnapshot The\n   * snapshot of the document or the set of field values to use as the boundary.\n   * @param before Whether the query boundary lies just before or after the\n   * provided data.\n   * @returns {Object} The proto message.\n   */\n\n\n  createCursor(fieldOrders, cursorValuesOrDocumentSnapshot, before) {\n    let fieldValues;\n\n    if (cursorValuesOrDocumentSnapshot.length === 1 && cursorValuesOrDocumentSnapshot[0] instanceof document_1.DocumentSnapshot) {\n      fieldValues = Query._extractFieldValues(cursorValuesOrDocumentSnapshot[0], fieldOrders);\n    } else {\n      fieldValues = cursorValuesOrDocumentSnapshot;\n    }\n\n    if (fieldValues.length > fieldOrders.length) {\n      throw new Error('Too many cursor values specified. The specified ' + 'values must match the orderBy() constraints of the query.');\n    }\n\n    const options = {\n      values: [],\n      before\n    };\n\n    for (let i = 0; i < fieldValues.length; ++i) {\n      let fieldValue = fieldValues[i];\n\n      if (path_1.FieldPath.documentId().isEqual(fieldOrders[i].field)) {\n        fieldValue = this.validateReference(fieldValue);\n      }\n\n      validateQueryValue(i, fieldValue, this._allowUndefined);\n      options.values.push(this._serializer.encodeValue(fieldValue));\n    }\n\n    return options;\n  }\n  /**\n   * Validates that a value used with FieldValue.documentId() is either a\n   * string or a DocumentReference that is part of the query`s result set.\n   * Throws a validation error or returns a DocumentReference that can\n   * directly be used in the Query.\n   *\n   * @param val The value to validate.\n   * @throws If the value cannot be used for this query.\n   * @return If valid, returns a DocumentReference that can be used with the\n   * query.\n   * @private\n   * @internal\n   */\n\n\n  validateReference(val) {\n    const basePath = this._queryOptions.allDescendants ? this._queryOptions.parentPath : this._queryOptions.parentPath.append(this._queryOptions.collectionId);\n    let reference;\n\n    if (typeof val === 'string') {\n      const path = basePath.append(val);\n\n      if (this._queryOptions.allDescendants) {\n        if (!path.isDocument) {\n          throw new Error('When querying a collection group and ordering by ' + 'FieldPath.documentId(), the corresponding value must result in ' + `a valid document path, but '${val}' is not because it ` + 'contains an odd number of segments.');\n        }\n      } else if (val.indexOf('/') !== -1) {\n        throw new Error('When querying a collection and ordering by FieldPath.documentId(), ' + `the corresponding value must be a plain document ID, but '${val}' ` + 'contains a slash.');\n      }\n\n      reference = new DocumentReference(this._firestore, basePath.append(val), this._queryOptions.converter);\n    } else if (val instanceof DocumentReference) {\n      reference = val;\n\n      if (!basePath.isPrefixOf(reference._path)) {\n        throw new Error(`\"${reference.path}\" is not part of the query result set and ` + 'cannot be used as a query boundary.');\n      }\n    } else {\n      throw new Error('The corresponding value for FieldPath.documentId() must be a ' + `string or a DocumentReference, but was \"${val}\".`);\n    }\n\n    if (!this._queryOptions.allDescendants && reference._path.parent().compareTo(basePath) !== 0) {\n      throw new Error('Only a direct child can be used as a query boundary. ' + `Found: \"${reference.path}\".`);\n    }\n\n    return reference;\n  }\n  /**\n   * Creates and returns a new [Query]{@link Query} that starts at the provided\n   * set of field values relative to the order of the query. The order of the\n   * provided values must match the order of the order by clauses of the query.\n   *\n   * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n   * of the document the query results should start at or the field values to\n   * start this query at, in order of the query's order by.\n   * @returns {Query} A query with the new starting point.\n   *\n   * @example\n   * let query = firestore.collection('col');\n   *\n   * query.orderBy('foo').startAt(42).get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   */\n\n\n  startAt(...fieldValuesOrDocumentSnapshot) {\n    validate_1.validateMinNumberOfArguments('Query.startAt', fieldValuesOrDocumentSnapshot, 1);\n    const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n    const startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);\n\n    const options = this._queryOptions.with({\n      fieldOrders,\n      startAt\n    });\n\n    return new Query(this._firestore, options);\n  }\n  /**\n   * Creates and returns a new [Query]{@link Query} that starts after the\n   * provided set of field values relative to the order of the query. The order\n   * of the provided values must match the order of the order by clauses of the\n   * query.\n   *\n   * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n   * of the document the query results should start after or the field values to\n   * start this query after, in order of the query's order by.\n   * @returns {Query} A query with the new starting point.\n   *\n   * @example\n   * let query = firestore.collection('col');\n   *\n   * query.orderBy('foo').startAfter(42).get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   */\n\n\n  startAfter(...fieldValuesOrDocumentSnapshot) {\n    validate_1.validateMinNumberOfArguments('Query.startAfter', fieldValuesOrDocumentSnapshot, 1);\n    const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n    const startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);\n\n    const options = this._queryOptions.with({\n      fieldOrders,\n      startAt\n    });\n\n    return new Query(this._firestore, options);\n  }\n  /**\n   * Creates and returns a new [Query]{@link Query} that ends before the set of\n   * field values relative to the order of the query. The order of the provided\n   * values must match the order of the order by clauses of the query.\n   *\n   * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n   * of the document the query results should end before or the field values to\n   * end this query before, in order of the query's order by.\n   * @returns {Query} A query with the new ending point.\n   *\n   * @example\n   * let query = firestore.collection('col');\n   *\n   * query.orderBy('foo').endBefore(42).get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   */\n\n\n  endBefore(...fieldValuesOrDocumentSnapshot) {\n    validate_1.validateMinNumberOfArguments('Query.endBefore', fieldValuesOrDocumentSnapshot, 1);\n    const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n    const endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);\n\n    const options = this._queryOptions.with({\n      fieldOrders,\n      endAt\n    });\n\n    return new Query(this._firestore, options);\n  }\n  /**\n   * Creates and returns a new [Query]{@link Query} that ends at the provided\n   * set of field values relative to the order of the query. The order of the\n   * provided values must match the order of the order by clauses of the query.\n   *\n   * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n   * of the document the query results should end at or the field values to end\n   * this query at, in order of the query's order by.\n   * @returns {Query} A query with the new ending point.\n   *\n   * @example\n   * let query = firestore.collection('col');\n   *\n   * query.orderBy('foo').endAt(42).get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   */\n\n\n  endAt(...fieldValuesOrDocumentSnapshot) {\n    validate_1.validateMinNumberOfArguments('Query.endAt', fieldValuesOrDocumentSnapshot, 1);\n    const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n    const endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);\n\n    const options = this._queryOptions.with({\n      fieldOrders,\n      endAt\n    });\n\n    return new Query(this._firestore, options);\n  }\n  /**\n   * Executes the query and returns the results as a\n   * [QuerySnapshot]{@link QuerySnapshot}.\n   *\n   * @returns {Promise.<QuerySnapshot>} A Promise that resolves with the results\n   * of the Query.\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * query.get().then(querySnapshot => {\n   *   querySnapshot.forEach(documentSnapshot => {\n   *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n   *   });\n   * });\n   */\n\n\n  get() {\n    return this._get();\n  }\n  /**\n   * Internal get() method that accepts an optional transaction id.\n   *\n   * @private\n   * @internal\n   * @param {bytes=} transactionId A transaction ID.\n   */\n\n\n  _get(transactionId) {\n    const docs = []; // Capture the error stack to preserve stack tracing across async calls.\n\n    const stack = Error().stack;\n    return new Promise((resolve, reject) => {\n      let readTime;\n\n      this._stream(transactionId).on('error', err => {\n        reject(util_1.wrapError(err, stack));\n      }).on('data', result => {\n        readTime = result.readTime;\n\n        if (result.document) {\n          docs.push(result.document);\n        }\n      }).on('end', () => {\n        if (this._queryOptions.limitType === LimitType.Last) {\n          // The results for limitToLast queries need to be flipped since\n          // we reversed the ordering constraints before sending the query\n          // to the backend.\n          docs.reverse();\n        }\n\n        resolve(new QuerySnapshot(this, readTime, docs.length, () => docs, () => {\n          const changes = [];\n\n          for (let i = 0; i < docs.length; ++i) {\n            changes.push(new document_change_1.DocumentChange('added', docs[i], -1, i));\n          }\n\n          return changes;\n        }));\n      });\n    });\n  }\n  /**\n   * Executes the query and streams the results as\n   * [QueryDocumentSnapshots]{@link QueryDocumentSnapshot}.\n   *\n   * @returns {Stream.<QueryDocumentSnapshot>} A stream of\n   * QueryDocumentSnapshots.\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * let count = 0;\n   *\n   * query.stream().on('data', (documentSnapshot) => {\n   *   console.log(`Found document with name '${documentSnapshot.id}'`);\n   *   ++count;\n   * }).on('end', () => {\n   *   console.log(`Total count is ${count}`);\n   * });\n   */\n\n\n  stream() {\n    if (this._queryOptions.limitType === LimitType.Last) {\n      throw new Error('Query results for queries that include limitToLast() ' + 'constraints cannot be streamed. Use Query.get() instead.');\n    }\n\n    const responseStream = this._stream();\n\n    const transform = new stream_1.Transform({\n      objectMode: true,\n\n      transform(chunk, encoding, callback) {\n        callback(undefined, chunk.document);\n      }\n\n    });\n    responseStream.pipe(transform);\n    responseStream.on('error', e => transform.destroy(e));\n    return transform;\n  }\n  /**\n   * Converts a QueryCursor to its proto representation.\n   *\n   * @param cursor The original cursor value\n   * @private\n   * @internal\n   */\n\n\n  toCursor(cursor) {\n    if (cursor) {\n      return cursor.before ? {\n        before: true,\n        values: cursor.values\n      } : {\n        values: cursor.values\n      };\n    }\n\n    return undefined;\n  }\n  /**\n   * Internal method for serializing a query to its RunQuery proto\n   * representation with an optional transaction id or read time.\n   *\n   * @param transactionIdOrReadTime A transaction ID or the read time at which\n   * to execute the query.\n   * @private\n   * @internal\n   * @returns Serialized JSON for the query.\n   */\n\n\n  toProto(transactionIdOrReadTime) {\n    const projectId = this.firestore.projectId;\n\n    const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(projectId);\n\n    const structuredQuery = this.toStructuredQuery(); // For limitToLast queries, the structured query has to be translated to a version with\n    // reversed ordered, and flipped startAt/endAt to work properly.\n\n    if (this._queryOptions.limitType === LimitType.Last) {\n      if (!this._queryOptions.hasFieldOrders()) {\n        throw new Error('limitToLast() queries require specifying at least one orderBy() clause.');\n      }\n\n      structuredQuery.orderBy = this._queryOptions.fieldOrders.map(order => {\n        // Flip the orderBy directions since we want the last results\n        const dir = order.direction === 'DESCENDING' ? 'ASCENDING' : 'DESCENDING';\n        return new FieldOrder(order.field, dir).toProto();\n      }); // Swap the cursors to match the now-flipped query ordering.\n\n      structuredQuery.startAt = this._queryOptions.endAt ? this.toCursor({\n        values: this._queryOptions.endAt.values,\n        before: !this._queryOptions.endAt.before\n      }) : undefined;\n      structuredQuery.endAt = this._queryOptions.startAt ? this.toCursor({\n        values: this._queryOptions.startAt.values,\n        before: !this._queryOptions.startAt.before\n      }) : undefined;\n    }\n\n    const runQueryRequest = {\n      parent: parentPath.formattedName,\n      structuredQuery\n    };\n\n    if (transactionIdOrReadTime instanceof Uint8Array) {\n      runQueryRequest.transaction = transactionIdOrReadTime;\n    } else if (transactionIdOrReadTime instanceof timestamp_1.Timestamp) {\n      runQueryRequest.readTime = transactionIdOrReadTime.toProto().timestampValue;\n    }\n\n    return runQueryRequest;\n  }\n  /**\n   * Converts current Query to an IBundledQuery.\n   *\n   * @private\n   * @internal\n   */\n\n\n  _toBundledQuery() {\n    const projectId = this.firestore.projectId;\n\n    const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(projectId);\n\n    const structuredQuery = this.toStructuredQuery();\n    const bundledQuery = {\n      parent: parentPath.formattedName,\n      structuredQuery\n    };\n\n    if (this._queryOptions.limitType === LimitType.First) {\n      bundledQuery.limitType = 'FIRST';\n    } else if (this._queryOptions.limitType === LimitType.Last) {\n      bundledQuery.limitType = 'LAST';\n    }\n\n    return bundledQuery;\n  }\n\n  toStructuredQuery() {\n    const structuredQuery = {\n      from: [{}]\n    };\n\n    if (this._queryOptions.allDescendants) {\n      structuredQuery.from[0].allDescendants = true;\n    } // Kindless queries select all descendant documents, so we remove the\n    // collectionId field.\n\n\n    if (!this._queryOptions.kindless) {\n      structuredQuery.from[0].collectionId = this._queryOptions.collectionId;\n    }\n\n    if (this._queryOptions.fieldFilters.length === 1) {\n      structuredQuery.where = this._queryOptions.fieldFilters[0].toProto();\n    } else if (this._queryOptions.fieldFilters.length > 1) {\n      const filters = [];\n\n      for (const fieldFilter of this._queryOptions.fieldFilters) {\n        filters.push(fieldFilter.toProto());\n      }\n\n      structuredQuery.where = {\n        compositeFilter: {\n          op: 'AND',\n          filters\n        }\n      };\n    }\n\n    if (this._queryOptions.hasFieldOrders()) {\n      structuredQuery.orderBy = this._queryOptions.fieldOrders.map(o => o.toProto());\n    }\n\n    structuredQuery.startAt = this.toCursor(this._queryOptions.startAt);\n    structuredQuery.endAt = this.toCursor(this._queryOptions.endAt);\n\n    if (this._queryOptions.limit) {\n      structuredQuery.limit = {\n        value: this._queryOptions.limit\n      };\n    }\n\n    structuredQuery.offset = this._queryOptions.offset;\n    structuredQuery.select = this._queryOptions.projection;\n    return structuredQuery;\n  }\n  /**\n   * Internal streaming method that accepts an optional transaction ID.\n   *\n   * @param transactionId A transaction ID.\n   * @private\n   * @internal\n   * @returns A stream of document results.\n   */\n\n\n  _stream(transactionId) {\n    const tag = util_1.requestTag();\n    let lastReceivedDocument = null;\n    const stream = new stream_1.Transform({\n      objectMode: true,\n      transform: (proto, enc, callback) => {\n        const readTime = timestamp_1.Timestamp.fromProto(proto.readTime);\n\n        if (proto.document) {\n          const document = this.firestore.snapshot_(proto.document, proto.readTime);\n          const finalDoc = new document_1.DocumentSnapshotBuilder(document.ref.withConverter(this._queryOptions.converter)); // Recreate the QueryDocumentSnapshot with the DocumentReference\n          // containing the original converter.\n\n          finalDoc.fieldsProto = document._fieldsProto;\n          finalDoc.readTime = document.readTime;\n          finalDoc.createTime = document.createTime;\n          finalDoc.updateTime = document.updateTime;\n          lastReceivedDocument = finalDoc.build();\n          callback(undefined, {\n            document: lastReceivedDocument,\n            readTime\n          });\n        } else {\n          callback(undefined, {\n            readTime\n          });\n        }\n      }\n    });\n    this.firestore.initializeIfNeeded(tag).then(async () => {\n      // `toProto()` might throw an exception. We rely on the behavior of an\n      // async function to convert this exception into the rejected Promise we\n      // catch below.\n      let request = this.toProto(transactionId);\n      let streamActive;\n\n      do {\n        streamActive = new util_1.Deferred();\n        const backendStream = await this._firestore.requestStream('runQuery', request, tag);\n        backendStream.on('error', err => {\n          backendStream.unpipe(stream); // If a non-transactional query failed, attempt to restart.\n          // Transactional queries are retried via the transaction runner.\n\n          if (!transactionId && !util_1.isPermanentRpcError(err, 'runQuery')) {\n            logger_1.logger('Query._stream', tag, 'Query failed with retryable stream error:', err);\n\n            if (lastReceivedDocument) {\n              // Restart the query but use the last document we received as the\n              // query cursor. Note that we do not use backoff here. The call to\n              // `requestStream()` will backoff should the restart fail before\n              // delivering any results.\n              if (this._queryOptions.requireConsistency) {\n                request = this.startAfter(lastReceivedDocument).toProto(lastReceivedDocument.readTime);\n              } else {\n                request = this.startAfter(lastReceivedDocument).toProto();\n              }\n            }\n\n            streamActive.resolve(\n            /* active= */\n            true);\n          } else {\n            logger_1.logger('Query._stream', tag, 'Query failed with stream error:', err);\n            stream.destroy(err);\n            streamActive.resolve(\n            /* active= */\n            false);\n          }\n        });\n        backendStream.on('end', () => {\n          streamActive.resolve(\n          /* active= */\n          false);\n        });\n        backendStream.resume();\n        backendStream.pipe(stream);\n      } while (await streamActive.promise);\n    }).catch(e => stream.destroy(e));\n    return stream;\n  }\n  /**\n   * Attaches a listener for QuerySnapshot events.\n   *\n   * @param {querySnapshotCallback} onNext A callback to be called every time\n   * a new [QuerySnapshot]{@link QuerySnapshot} is available.\n   * @param {errorCallback=} onError A callback to be called if the listen\n   * fails or is cancelled. No further callbacks will occur.\n   *\n   * @returns {function()} An unsubscribe function that can be called to cancel\n   * the snapshot listener.\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * let unsubscribe = query.onSnapshot(querySnapshot => {\n   *   console.log(`Received query snapshot of size ${querySnapshot.size}`);\n   * }, err => {\n   *   console.log(`Encountered error: ${err}`);\n   * });\n   *\n   * // Remove this listener.\n   * unsubscribe();\n   */\n\n\n  onSnapshot(onNext, onError) {\n    validate_1.validateFunction('onNext', onNext);\n    validate_1.validateFunction('onError', onError, {\n      optional: true\n    });\n    const watch = new (require('./watch').QueryWatch)(this.firestore, this, this._queryOptions.converter);\n    return watch.onSnapshot((readTime, size, docs, changes) => {\n      onNext(new QuerySnapshot(this, readTime, size, docs, changes));\n    }, onError || console.error);\n  }\n  /**\n   * Returns a function that can be used to sort QueryDocumentSnapshots\n   * according to the sort criteria of this query.\n   *\n   * @private\n   * @internal\n   */\n\n\n  comparator() {\n    return (doc1, doc2) => {\n      // Add implicit sorting by name, using the last specified direction.\n      const lastDirection = this._queryOptions.hasFieldOrders() ? this._queryOptions.fieldOrders[this._queryOptions.fieldOrders.length - 1].direction : 'ASCENDING';\n\n      const orderBys = this._queryOptions.fieldOrders.concat(new FieldOrder(path_1.FieldPath.documentId(), lastDirection));\n\n      for (const orderBy of orderBys) {\n        let comp;\n\n        if (path_1.FieldPath.documentId().isEqual(orderBy.field)) {\n          comp = doc1.ref._path.compareTo(doc2.ref._path);\n        } else {\n          const v1 = doc1.protoField(orderBy.field);\n          const v2 = doc2.protoField(orderBy.field);\n\n          if (v1 === undefined || v2 === undefined) {\n            throw new Error('Trying to compare documents on fields that ' + \"don't exist. Please include the fields you are ordering on \" + 'in your select() call.');\n          }\n\n          comp = order_1.compare(v1, v2);\n        }\n\n        if (comp !== 0) {\n          const direction = orderBy.direction === 'ASCENDING' ? 1 : -1;\n          return direction * comp;\n        }\n      }\n\n      return 0;\n    };\n  }\n  /**\n   * Applies a custom data converter to this Query, allowing you to use your\n   * own custom model objects with Firestore. When you call get() on the\n   * returned Query, the provided converter will convert between Firestore\n   * data and your custom type U.\n   *\n   * Using the converter allows you to specify generic type arguments when\n   * storing and retrieving objects from Firestore.\n   *\n   * Passing in `null` as the converter parameter removes the current\n   * converter.\n   *\n   * @example\n   * class Post {\n   *   constructor(readonly title: string, readonly author: string) {}\n   *\n   *   toString(): string {\n   *     return this.title + ', by ' + this.author;\n   *   }\n   * }\n   *\n   * const postConverter = {\n   *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n   *     return {title: post.title, author: post.author};\n   *   },\n   *   fromFirestore(\n   *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n   *   ): Post {\n   *     const data = snapshot.data();\n   *     return new Post(data.title, data.author);\n   *   }\n   * };\n   *\n   * const postSnap = await Firestore()\n   *   .collection('posts')\n   *   .withConverter(postConverter)\n   *   .doc().get();\n   * const post = postSnap.data();\n   * if (post !== undefined) {\n   *   post.title; // string\n   *   post.toString(); // Should be defined\n   *   post.someNonExistentProperty; // TS error\n   * }\n   *\n   * @param {FirestoreDataConverter | null} converter Converts objects to and\n   * from Firestore. Passing in `null` removes the current converter.\n   * @return A Query<U> that uses the provided converter.\n   */\n\n\n  withConverter(converter) {\n    return new Query(this.firestore, this._queryOptions.withConverter(converter !== null && converter !== void 0 ? converter : types_1.defaultConverter()));\n  }\n\n}\n\nexports.Query = Query;\n/**\n * A CollectionReference object can be used for adding documents, getting\n * document references, and querying for documents (using the methods\n * inherited from [Query]{@link Query}).\n *\n * @class CollectionReference\n * @extends Query\n */\n\nclass CollectionReference extends Query {\n  /**\n   * @hideconstructor\n   *\n   * @param firestore The Firestore Database client.\n   * @param path The Path of this collection.\n   */\n  constructor(firestore, path, converter) {\n    super(firestore, QueryOptions.forCollectionQuery(path, converter));\n  }\n  /**\n   * Returns a resource path for this collection.\n   * @private\n   * @internal\n   */\n\n\n  get _resourcePath() {\n    return this._queryOptions.parentPath.append(this._queryOptions.collectionId);\n  }\n  /**\n   * The last path element of the referenced collection.\n   *\n   * @type {string}\n   * @name CollectionReference#id\n   * @readonly\n   *\n   * @example\n   * let collectionRef = firestore.collection('col/doc/subcollection');\n   * console.log(`ID of the subcollection: ${collectionRef.id}`);\n   */\n\n\n  get id() {\n    return this._queryOptions.collectionId;\n  }\n  /**\n   * A reference to the containing Document if this is a subcollection, else\n   * null.\n   *\n   * @type {DocumentReference|null}\n   * @name CollectionReference#parent\n   * @readonly\n   *\n   * @example\n   * let collectionRef = firestore.collection('col/doc/subcollection');\n   * let documentRef = collectionRef.parent;\n   * console.log(`Parent name: ${documentRef.path}`);\n   */\n\n\n  get parent() {\n    if (this._queryOptions.parentPath.isDocument) {\n      return new DocumentReference(this.firestore, this._queryOptions.parentPath);\n    }\n\n    return null;\n  }\n  /**\n   * A string representing the path of the referenced collection (relative\n   * to the root of the database).\n   *\n   * @type {string}\n   * @name CollectionReference#path\n   * @readonly\n   *\n   * @example\n   * let collectionRef = firestore.collection('col/doc/subcollection');\n   * console.log(`Path of the subcollection: ${collectionRef.path}`);\n   */\n\n\n  get path() {\n    return this._resourcePath.relativeName;\n  }\n  /**\n   * Retrieves the list of documents in this collection.\n   *\n   * The document references returned may include references to \"missing\n   * documents\", i.e. document locations that have no document present but\n   * which contain subcollections with documents. Attempting to read such a\n   * document reference (e.g. via `.get()` or `.onSnapshot()`) will return a\n   * `DocumentSnapshot` whose `.exists` property is false.\n   *\n   * @return {Promise<DocumentReference[]>} The list of documents in this\n   * collection.\n   *\n   * @example\n   * let collectionRef = firestore.collection('col');\n   *\n   * return collectionRef.listDocuments().then(documentRefs => {\n   *    return firestore.getAll(...documentRefs);\n   * }).then(documentSnapshots => {\n   *    for (let documentSnapshot of documentSnapshots) {\n   *       if (documentSnapshot.exists) {\n   *         console.log(`Found document with data: ${documentSnapshot.id}`);\n   *       } else {\n   *         console.log(`Found missing document: ${documentSnapshot.id}`);\n   *       }\n   *    }\n   * });\n   */\n\n\n  listDocuments() {\n    const tag = util_1.requestTag();\n    return this.firestore.initializeIfNeeded(tag).then(() => {\n      const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(this.firestore.projectId);\n\n      const request = {\n        parent: parentPath.formattedName,\n        collectionId: this.id,\n        showMissing: true,\n        // Setting `pageSize` to an arbitrarily large value lets the backend cap\n        // the page size (currently to 300). Note that the backend rejects\n        // MAX_INT32 (b/146883794).\n        pageSize: Math.pow(2, 16) - 1,\n        mask: {\n          fieldPaths: []\n        }\n      };\n      return this.firestore.request('listDocuments', request, tag).then(documents => {\n        // Note that the backend already orders these documents by name,\n        // so we do not need to manually sort them.\n        return documents.map(doc => {\n          const path = path_1.QualifiedResourcePath.fromSlashSeparatedString(doc.name);\n          return this.doc(path.id);\n        });\n      });\n    });\n  }\n  /**\n   * Gets a [DocumentReference]{@link DocumentReference} instance that\n   * refers to the document at the specified path. If no path is specified, an\n   * automatically-generated unique ID will be used for the returned\n   * DocumentReference.\n   *\n   * @param {string=} documentPath A slash-separated path to a document.\n   * @returns {DocumentReference} The `DocumentReference`\n   * instance.\n   *\n   * @example\n   * let collectionRef = firestore.collection('col');\n   * let documentRefWithName = collectionRef.doc('doc');\n   * let documentRefWithAutoId = collectionRef.doc();\n   * console.log(`Reference with name: ${documentRefWithName.path}`);\n   * console.log(`Reference with auto-id: ${documentRefWithAutoId.path}`);\n   */\n\n\n  doc(documentPath) {\n    if (arguments.length === 0) {\n      documentPath = util_1.autoId();\n    } else {\n      path_1.validateResourcePath('documentPath', documentPath);\n    }\n\n    const path = this._resourcePath.append(documentPath);\n\n    if (!path.isDocument) {\n      throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\n    }\n\n    return new DocumentReference(this.firestore, path, this._queryOptions.converter);\n  }\n  /**\n   * Add a new document to this collection with the specified data, assigning\n   * it a document ID automatically.\n   *\n   * @param {DocumentData} data An Object containing the data for the new\n   * document.\n   * @returns {Promise.<DocumentReference>} A Promise resolved with a\n   * [DocumentReference]{@link DocumentReference} pointing to the\n   * newly created document.\n   *\n   * @example\n   * let collectionRef = firestore.collection('col');\n   * collectionRef.add({foo: 'bar'}).then(documentReference => {\n   *   console.log(`Added document with name: ${documentReference.id}`);\n   * });\n   */\n\n\n  add(data) {\n    const firestoreData = this._queryOptions.converter.toFirestore(data);\n\n    write_batch_1.validateDocumentData('data', firestoreData,\n    /*allowDeletes=*/\n    false, this._allowUndefined);\n    const documentRef = this.doc();\n    return documentRef.create(data).then(() => documentRef);\n  }\n  /**\n   * Returns true if this `CollectionReference` is equal to the provided value.\n   *\n   * @param {*} other The value to compare against.\n   * @return {boolean} true if this `CollectionReference` is equal to the\n   * provided value.\n   */\n\n\n  isEqual(other) {\n    return this === other || other instanceof CollectionReference && super.isEqual(other);\n  }\n  /**\n   * Applies a custom data converter to this CollectionReference, allowing you\n   * to use your own custom model objects with Firestore. When you call add() on\n   * the returned CollectionReference instance, the provided converter will\n   * convert between Firestore data and your custom type U.\n   *\n   * Using the converter allows you to specify generic type arguments when\n   * storing and retrieving objects from Firestore.\n   *\n   * Passing in `null` as the converter parameter removes the current\n   * converter.\n   *\n   * @example\n   * class Post {\n   *   constructor(readonly title: string, readonly author: string) {}\n   *\n   *   toString(): string {\n   *     return this.title + ', by ' + this.author;\n   *   }\n   * }\n   *\n   * const postConverter = {\n   *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n   *     return {title: post.title, author: post.author};\n   *   },\n   *   fromFirestore(\n   *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n   *   ): Post {\n   *     const data = snapshot.data();\n   *     return new Post(data.title, data.author);\n   *   }\n   * };\n   *\n   * const postSnap = await Firestore()\n   *   .collection('posts')\n   *   .withConverter(postConverter)\n   *   .doc().get();\n   * const post = postSnap.data();\n   * if (post !== undefined) {\n   *   post.title; // string\n   *   post.toString(); // Should be defined\n   *   post.someNonExistentProperty; // TS error\n   * }\n   *\n   * @param {FirestoreDataConverter | null} converter Converts objects to and\n   * from Firestore. Passing in `null` removes the current converter.\n   * @return A CollectionReference<U> that uses the provided converter.\n   */\n\n\n  withConverter(converter) {\n    return new CollectionReference(this.firestore, this._resourcePath, converter !== null && converter !== void 0 ? converter : types_1.defaultConverter());\n  }\n\n}\n\nexports.CollectionReference = CollectionReference;\n/**\n * Validates the input string as a field order direction.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Order direction to validate.\n * @throws when the direction is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\n\nfunction validateQueryOrder(arg, op) {\n  // For backwards compatibility, we support both lower and uppercase values.\n  op = typeof op === 'string' ? op.toLowerCase() : op;\n  validate_1.validateEnumValue(arg, op, Object.keys(directionOperators), {\n    optional: true\n  });\n  return op;\n}\n\nexports.validateQueryOrder = validateQueryOrder;\n/**\n * Validates the input string as a field comparison operator.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Field comparison operator to validate.\n * @param fieldValue Value that is used in the filter.\n * @throws when the comparison operation is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\n\nfunction validateQueryOperator(arg, op, fieldValue) {\n  // For backwards compatibility, we support both `=` and `==` for \"equals\".\n  if (op === '=') {\n    op = '==';\n  }\n\n  validate_1.validateEnumValue(arg, op, Object.keys(comparisonOperators));\n\n  if (typeof fieldValue === 'number' && isNaN(fieldValue) && op !== '==' && op !== '!=') {\n    throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on NaN.\");\n  }\n\n  if (fieldValue === null && op !== '==' && op !== '!=') {\n    throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on Null.\");\n  }\n\n  return op;\n}\n\nexports.validateQueryOperator = validateQueryOperator;\n/**\n * Validates that 'value' is a DocumentReference.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @return the DocumentReference if valid\n */\n\nfunction validateDocumentReference(arg, value) {\n  if (!(value instanceof DocumentReference)) {\n    throw new Error(validate_1.invalidArgumentMessage(arg, 'DocumentReference'));\n  }\n\n  return value;\n}\n\nexports.validateDocumentReference = validateDocumentReference;\n/**\n * Validates that 'value' can be used as a query value.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\n\nfunction validateQueryValue(arg, value, allowUndefined) {\n  serializer_1.validateUserInput(arg, value, 'query constraint', {\n    allowDeletes: 'none',\n    allowTransforms: false,\n    allowUndefined\n  });\n}\n/**\n * Verifies equality for an array of objects using the `isEqual` interface.\n *\n * @private\n * @internal\n * @param left Array of objects supporting `isEqual`.\n * @param right Array of objects supporting `isEqual`.\n * @return True if arrays are equal.\n */\n\n\nfunction isArrayEqual(left, right) {\n  if (left.length !== right.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.length; ++i) {\n    if (!left[i].isEqual(right[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Returns the first non-undefined value or `undefined` if no such value exists.\n * @private\n * @internal\n */\n\n\nfunction coalesce(...values) {\n  return values.find(value => value !== undefined);\n}","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/@google-cloud/firestore/build/src/reference.js"],"names":["Object","defineProperty","exports","value","stream_1","require","deepEqual","document_1","document_change_1","logger_1","order_1","path_1","serializer_1","timestamp_1","types_1","util_1","validate_1","write_batch_1","directionOperators","asc","desc","comparisonOperators","in","DocumentReference","constructor","_firestore","_path","_converter","defaultConverter","formattedName","projectId","firestore","toQualifiedResourcePath","path","relativeName","id","_resourcePath","parent","CollectionReference","get","getAll","then","result","collection","collectionPath","validateResourcePath","append","isCollection","Error","listCollections","tag","requestTag","initializeIfNeeded","request","pageSize","Math","pow","collectionIds","collections","sort","collectionId","push","create","data","writeBatch","WriteBatch","commit","writeResult","delete","precondition","set","options","update","dataOrField","preconditionOrValues","validateMinNumberOfArguments","arguments","onSnapshot","onNext","onError","validateFunction","optional","watch","DocumentWatch","readTime","size","docs","document","ref","DocumentSnapshotBuilder","build","console","error","isEqual","other","toProto","referenceValue","withConverter","converter","FieldOrder","field","direction","fieldPath","FieldFilter","serializer","op","isInequalityFilter","isNaN","unaryFilter","fieldFilter","encodeValue","QuerySnapshot","_query","_readTime","_size","changes","_materializedDocs","_materializedChanges","_docs","_changes","query","empty","docChanges","forEach","callback","thisArg","doc","call","isArrayEqual","LimitType","QueryOptions","parentPath","allDescendants","fieldFilters","fieldOrders","startAt","endAt","limit","limitType","offset","projection","kindless","requireConsistency","forCollectionGroupQuery","ResourcePath","EMPTY","forCollectionQuery","collectionRef","forKindlessAllDescendants","with","settings","coalesce","hasFieldOrders","length","Query","_queryOptions","_serializer","Serializer","_allowUndefined","_settings","ignoreUndefinedProperties","_extractFieldValues","documentSnapshot","fieldValues","fieldOrder","FieldPath","documentId","fieldValue","undefined","where","opStr","validateFieldPath","validateQueryOperator","validateQueryValue","fromArgument","Array","isArray","map","el","validateReference","concat","select","fieldPaths","fields","i","orderBy","directionStr","validateQueryOrder","newOrder","validateInteger","First","limitToLast","Last","createImplicitOrderBy","cursorValuesOrDocumentSnapshot","DocumentSnapshot","slice","hasDocumentId","find","lastDirection","ASC","createCursor","before","values","val","basePath","reference","isDocument","indexOf","isPrefixOf","compareTo","fieldValuesOrDocumentSnapshot","startAfter","endBefore","_get","transactionId","stack","Promise","resolve","reject","_stream","on","err","wrapError","reverse","DocumentChange","stream","responseStream","transform","Transform","objectMode","chunk","encoding","pipe","e","destroy","toCursor","cursor","transactionIdOrReadTime","structuredQuery","toStructuredQuery","order","dir","runQueryRequest","Uint8Array","transaction","Timestamp","timestampValue","_toBundledQuery","bundledQuery","from","filters","compositeFilter","o","lastReceivedDocument","proto","enc","fromProto","snapshot_","finalDoc","fieldsProto","_fieldsProto","createTime","updateTime","streamActive","Deferred","backendStream","requestStream","unpipe","isPermanentRpcError","logger","resume","promise","catch","QueryWatch","comparator","doc1","doc2","orderBys","comp","v1","protoField","v2","compare","listDocuments","showMissing","mask","documents","QualifiedResourcePath","fromSlashSeparatedString","name","documentPath","autoId","add","firestoreData","toFirestore","validateDocumentData","documentRef","arg","toLowerCase","validateEnumValue","keys","validateDocumentReference","invalidArgumentMessage","allowUndefined","validateUserInput","allowDeletes","allowTransforms","left","right"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,mBAAD,CAAjC;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMO,YAAY,GAAGP,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAMQ,WAAW,GAAGR,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMS,OAAO,GAAGT,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMU,MAAM,GAAGV,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMW,UAAU,GAAGX,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMY,aAAa,GAAGZ,OAAO,CAAC,eAAD,CAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMa,kBAAkB,GAAG;AACvBC,EAAAA,GAAG,EAAE,WADkB;AAEvBC,EAAAA,IAAI,EAAE;AAFiB,CAA3B;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG;AACxB,OAAK,WADmB;AAExB,QAAM,oBAFkB;AAGxB,QAAM,OAHkB;AAIxB,QAAM,WAJkB;AAKxB,OAAK,cALmB;AAMxB,QAAM,uBANkB;AAOxB,oBAAkB,gBAPM;AAQxBC,EAAAA,EAAE,EAAE,IARoB;AASxB,YAAU,QATc;AAUxB,wBAAsB;AAVE,CAA5B;AAYA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAN,CAAwB;AACpB;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,UAAD,EAAaC,KAAb,EAAoBC,UAAU,GAAGb,OAAO,CAACc,gBAAR,EAAjC,EAA6D;AACpE,SAAKH,UAAL,GAAkBA,UAAlB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACqB,MAAbE,aAAa,GAAG;AAChB,UAAMC,SAAS,GAAG,KAAKC,SAAL,CAAeD,SAAjC;AACA,WAAO,KAAKJ,KAAL,CAAWM,uBAAX,CAAmCF,SAAnC,EAA8CD,aAArD;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACiB,MAATE,SAAS,GAAG;AACZ,WAAO,KAAKN,UAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACY,MAAJQ,IAAI,GAAG;AACP,WAAO,KAAKP,KAAL,CAAWQ,YAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACU,MAAFC,EAAE,GAAG;AACL,WAAO,KAAKT,KAAL,CAAWS,EAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACqB,MAAbC,aAAa,GAAG;AAChB,WAAO,KAAKV,KAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,MAANW,MAAM,GAAG;AACT,WAAO,IAAIC,mBAAJ,CAAwB,KAAKb,UAA7B,EAAyC,KAAKC,KAAL,CAAWW,MAAX,EAAzC,EAA8D,KAAKV,UAAnE,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIY,EAAAA,GAAG,GAAG;AACF,WAAO,KAAKd,UAAL,CAAgBe,MAAhB,CAAuB,IAAvB,EAA6BC,IAA7B,CAAkC,CAAC,CAACC,MAAD,CAAD,KAAcA,MAAhD,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,UAAU,CAACC,cAAD,EAAiB;AACvBjC,IAAAA,MAAM,CAACkC,oBAAP,CAA4B,gBAA5B,EAA8CD,cAA9C;;AACA,UAAMX,IAAI,GAAG,KAAKP,KAAL,CAAWoB,MAAX,CAAkBF,cAAlB,CAAb;;AACA,QAAI,CAACX,IAAI,CAACc,YAAV,EAAwB;AACpB,YAAM,IAAIC,KAAJ,CAAW,4EAA2EJ,cAAe,4DAArG,CAAN;AACH;;AACD,WAAO,IAAIN,mBAAJ,CAAwB,KAAKb,UAA7B,EAAyCQ,IAAzC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIgB,EAAAA,eAAe,GAAG;AACd,UAAMC,GAAG,GAAGnC,MAAM,CAACoC,UAAP,EAAZ;AACA,WAAO,KAAKpB,SAAL,CAAeqB,kBAAf,CAAkCF,GAAlC,EAAuCT,IAAvC,CAA4C,MAAM;AACrD,YAAMY,OAAO,GAAG;AACZhB,QAAAA,MAAM,EAAE,KAAKR,aADD;AAEZ;AACA;AACA;AACAyB,QAAAA,QAAQ,EAAEC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB;AALhB,OAAhB;AAOA,aAAO,KAAK/B,UAAL,CACF4B,OADE,CACM,mBADN,EAC2BA,OAD3B,EACoCH,GADpC,EAEFT,IAFE,CAEGgB,aAAa,IAAI;AACvB,cAAMC,WAAW,GAAG,EAApB,CADuB,CAEvB;AACA;;AACAD,QAAAA,aAAa,CAACE,IAAd;;AACA,aAAK,MAAMC,YAAX,IAA2BH,aAA3B,EAA0C;AACtCC,UAAAA,WAAW,CAACG,IAAZ,CAAiB,KAAKlB,UAAL,CAAgBiB,YAAhB,CAAjB;AACH;;AACD,eAAOF,WAAP;AACH,OAXM,CAAP;AAYH,KApBM,CAAP;AAqBH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACII,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,UAAMC,UAAU,GAAG,IAAI/C,aAAa,CAACgD,UAAlB,CAA6B,KAAKxC,UAAlC,CAAnB;AACA,WAAOuC,UAAU,CACZF,MADE,CACK,IADL,EACWC,IADX,EAEFG,MAFE,GAGFzB,IAHE,CAGG,CAAC,CAAC0B,WAAD,CAAD,KAAmBA,WAHtB,CAAP;AAIH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,YAAD,EAAe;AACjB,UAAML,UAAU,GAAG,IAAI/C,aAAa,CAACgD,UAAlB,CAA6B,KAAKxC,UAAlC,CAAnB;AACA,WAAOuC,UAAU,CACZI,MADE,CACK,IADL,EACWC,YADX,EAEFH,MAFE,GAGFzB,IAHE,CAGG,CAAC,CAAC0B,WAAD,CAAD,KAAmBA,WAHtB,CAAP;AAIH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,GAAG,CAACP,IAAD,EAAOQ,OAAP,EAAgB;AACf,UAAMP,UAAU,GAAG,IAAI/C,aAAa,CAACgD,UAAlB,CAA6B,KAAKxC,UAAlC,CAAnB;AACA,WAAOuC,UAAU,CACZM,GADE,CACE,IADF,EACQP,IADR,EACcQ,OADd,EAEFL,MAFE,GAGFzB,IAHE,CAGG,CAAC,CAAC0B,WAAD,CAAD,KAAmBA,WAHtB,CAAP;AAIH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACa,MAALK,KAAK,GAAG;AACR,WAAO,KAAKP,KAAL,KAAe,CAAtB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACY,MAAJ7B,IAAI,GAAG;AACP,WAAO,KAAK6B,KAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACgB,MAAR9B,QAAQ,GAAG;AACX,WAAO,KAAK6B,SAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIS,EAAAA,UAAU,GAAG;AACT,QAAI,KAAKL,oBAAT,EAA+B;AAC3B,aAAO,KAAKA,oBAAZ;AACH;;AACD,SAAKA,oBAAL,GAA4B,KAAKE,QAAL,EAA5B;AACA,SAAKA,QAAL,GAAgB,IAAhB;AACA,WAAO,KAAKF,oBAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIM,EAAAA,OAAO,CAACC,QAAD,EAAWC,OAAX,EAAoB;AACvB7G,IAAAA,UAAU,CAACgE,gBAAX,CAA4B,UAA5B,EAAwC4C,QAAxC;;AACA,SAAK,MAAME,GAAX,IAAkB,KAAKxC,IAAvB,EAA6B;AACzBsC,MAAAA,QAAQ,CAACG,IAAT,CAAcF,OAAd,EAAuBC,GAAvB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIjC,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACX;AACA;AACA,QAAI,SAASA,KAAb,EAAoB;AAChB,aAAO,IAAP;AACH;;AACD,QAAI,EAAEA,KAAK,YAAYiB,aAAnB,CAAJ,EAAuC;AACnC,aAAO,KAAP;AACH;;AACD,QAAI,KAAKG,KAAL,KAAepB,KAAK,CAACoB,KAAzB,EAAgC;AAC5B,aAAO,KAAP;AACH;;AACD,QAAI,CAAC,KAAKF,MAAL,CAAYnB,OAAZ,CAAoBC,KAAK,CAACkB,MAA1B,CAAL,EAAwC;AACpC,aAAO,KAAP;AACH;;AACD,QAAI,KAAKI,iBAAL,IAA0B,CAAC,KAAKC,oBAApC,EAA0D;AACtD;AACA,aAAQW,YAAY,CAAC,KAAK1C,IAAN,EAAYQ,KAAK,CAACR,IAAlB,CAAZ,IACJ0C,YAAY,CAAC,KAAKN,UAAL,EAAD,EAAoB5B,KAAK,CAAC4B,UAAN,EAApB,CADhB;AAEH,KAnBU,CAoBX;;;AACA,WAAQM,YAAY,CAAC,KAAKN,UAAL,EAAD,EAAoB5B,KAAK,CAAC4B,UAAN,EAApB,CAAZ,IACJM,YAAY,CAAC,KAAK1C,IAAN,EAAYQ,KAAK,CAACR,IAAlB,CADhB;AAEH;;AA5Me;;AA8MpBpF,OAAO,CAAC6G,aAAR,GAAwBA,aAAxB;AACA;AACA;AACA;AACA;;AACA,IAAIkB,SAAJ;;AACA,CAAC,UAAUA,SAAV,EAAqB;AAClBA,EAAAA,SAAS,CAACA,SAAS,CAAC,OAAD,CAAT,GAAqB,CAAtB,CAAT,GAAoC,OAApC;AACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,MAAD,CAAT,GAAoB,CAArB,CAAT,GAAmC,MAAnC;AACH,CAHD,EAGGA,SAAS,KAAKA,SAAS,GAAG,EAAjB,CAHZ;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,YAAN,CAAmB;AACf1G,EAAAA,WAAW,CAAC2G,UAAD,EAAavE,YAAb,EAA2BsC,SAA3B,EAAsCkC,cAAtC,EAAsDC,YAAtD,EAAoEC,WAApE,EAAiFC,OAAjF,EAA0FC,KAA1F,EAAiGC,KAAjG,EAAwGC,SAAxG,EAAmHC,MAAnH,EAA2HC,UAA3H,EACX;AACA;AACAC,EAAAA,QAAQ,GAAG,KAHA,EAIX;AACA;AACA;AACAC,EAAAA,kBAAkB,GAAG,IAPV,EAOgB;AACvB,SAAKX,UAAL,GAAkBA,UAAlB;AACA,SAAKvE,YAAL,GAAoBA,YAApB;AACA,SAAKsC,SAAL,GAAiBA,SAAjB;AACA,SAAKkC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACkC,SAAvBC,uBAAuB,CAACnF,YAAD,EAAesC,SAAS,GAAGpF,OAAO,CAACc,gBAAR,EAA3B,EAAuD;AACjF,WAAO,IAAIsG,YAAJ;AACP;AAAgBvH,IAAAA,MAAM,CAACqI,YAAP,CAAoBC,KAD7B,EACoCrF,YADpC,EACkDsC,SADlD;AAEP;AAAoB,QAFb;AAGP;AAAkB,MAHX;AAIP;AAAiB,MAJV,CAAP;AAKH;AACD;AACJ;AACA;AACA;AACA;;;AAC6B,SAAlBgD,kBAAkB,CAACC,aAAD,EAAgBjD,SAAS,GAAGpF,OAAO,CAACc,gBAAR,EAA5B,EAAwD;AAC7E,WAAO,IAAIsG,YAAJ,CAAiBiB,aAAa,CAAC9G,MAAd,EAAjB,EAAyC8G,aAAa,CAAChH,EAAvD,EAA2D+D,SAA3D;AACP;AAAoB,SADb;AAEP;AAAkB,MAFX;AAGP;AAAiB,MAHV,CAAP;AAIH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACoC,SAAzBkD,yBAAyB,CAAC/G,MAAD,EAASF,EAAT,EAAa2G,kBAAkB,GAAG,IAAlC,EAAwC;AACpE,QAAIvE,OAAO,GAAG,IAAI2D,YAAJ,CAAiB7F,MAAjB,EAAyBF,EAAzB,EAA6BrB,OAAO,CAACc,gBAAR,EAA7B;AACd;AAAoB,QADN;AAEd;AAAkB,MAFJ;AAGd;AAAiB,MAHH,CAAd;AAIA2C,IAAAA,OAAO,GAAGA,OAAO,CAAC8E,IAAR,CAAa;AACnBR,MAAAA,QAAQ,EAAE,IADS;AAEnBC,MAAAA;AAFmB,KAAb,CAAV;AAIA,WAAOvE,OAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACI8E,EAAAA,IAAI,CAACC,QAAD,EAAW;AACX,WAAO,IAAIpB,YAAJ,CAAiBqB,QAAQ,CAACD,QAAQ,CAACnB,UAAV,EAAsB,KAAKA,UAA3B,CAAzB,EAAiEoB,QAAQ,CAACD,QAAQ,CAAC1F,YAAV,EAAwB,KAAKA,YAA7B,CAAzE,EAAqH,KAAKsC,SAA1H,EAAqIqD,QAAQ,CAACD,QAAQ,CAAClB,cAAV,EAA0B,KAAKA,cAA/B,CAA7I,EAA6LmB,QAAQ,CAACD,QAAQ,CAACjB,YAAV,EAAwB,KAAKA,YAA7B,CAArM,EAAiPkB,QAAQ,CAACD,QAAQ,CAAChB,WAAV,EAAuB,KAAKA,WAA5B,CAAzP,EAAmSiB,QAAQ,CAACD,QAAQ,CAACf,OAAV,EAAmB,KAAKA,OAAxB,CAA3S,EAA6UgB,QAAQ,CAACD,QAAQ,CAACd,KAAV,EAAiB,KAAKA,KAAtB,CAArV,EAAmXe,QAAQ,CAACD,QAAQ,CAACb,KAAV,EAAiB,KAAKA,KAAtB,CAA3X,EAAyZc,QAAQ,CAACD,QAAQ,CAACZ,SAAV,EAAqB,KAAKA,SAA1B,CAAja,EAAuca,QAAQ,CAACD,QAAQ,CAACX,MAAV,EAAkB,KAAKA,MAAvB,CAA/c,EAA+eY,QAAQ,CAACD,QAAQ,CAACV,UAAV,EAAsB,KAAKA,UAA3B,CAAvf,EAA+hBW,QAAQ,CAACD,QAAQ,CAACT,QAAV,EAAoB,KAAKA,QAAzB,CAAviB,EAA2kBU,QAAQ,CAACD,QAAQ,CAACR,kBAAV,EAA8B,KAAKA,kBAAnC,CAAnlB,CAAP;AACH;;AACD7C,EAAAA,aAAa,CAACC,SAAD,EAAY;AACrB,WAAO,IAAIgC,YAAJ,CAAiB,KAAKC,UAAtB,EAAkC,KAAKvE,YAAvC,EAAqDsC,SAArD,EAAgE,KAAKkC,cAArE,EAAqF,KAAKC,YAA1F,EAAwG,KAAKC,WAA7G,EAA0H,KAAKC,OAA/H,EAAwI,KAAKC,KAA7I,EAAoJ,KAAKC,KAAzJ,EAAgK,KAAKC,SAArK,EAAgL,KAAKC,MAArL,EAA6L,KAAKC,UAAlM,CAAP;AACH;;AACDY,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKlB,WAAL,CAAiBmB,MAAjB,GAA0B,CAAjC;AACH;;AACD5D,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACX,QAAI,SAASA,KAAb,EAAoB;AAChB,aAAO,IAAP;AACH;;AACD,WAAQA,KAAK,YAAYoC,YAAjB,IACJ,KAAKC,UAAL,CAAgBtC,OAAhB,CAAwBC,KAAK,CAACqC,UAA9B,CADI,IAEJ,KAAKvE,YAAL,KAAsBkC,KAAK,CAAClC,YAFxB,IAGJ,KAAKsC,SAAL,KAAmBJ,KAAK,CAACI,SAHrB,IAIJ,KAAKkC,cAAL,KAAwBtC,KAAK,CAACsC,cAJ1B,IAKJ,KAAKK,KAAL,KAAe3C,KAAK,CAAC2C,KALjB,IAMJ,KAAKE,MAAL,KAAgB7C,KAAK,CAAC6C,MANlB,IAOJrI,SAAS,CAAC,KAAK+H,YAAN,EAAoBvC,KAAK,CAACuC,YAA1B,CAPL,IAQJ/H,SAAS,CAAC,KAAKgI,WAAN,EAAmBxC,KAAK,CAACwC,WAAzB,CARL,IASJhI,SAAS,CAAC,KAAKiI,OAAN,EAAezC,KAAK,CAACyC,OAArB,CATL,IAUJjI,SAAS,CAAC,KAAKkI,KAAN,EAAa1C,KAAK,CAAC0C,KAAnB,CAVL,IAWJlI,SAAS,CAAC,KAAKsI,UAAN,EAAkB9C,KAAK,CAAC8C,UAAxB,CAXL,IAYJ,KAAKC,QAAL,KAAkB/C,KAAK,CAAC+C,QAZpB,IAaJ,KAAKC,kBAAL,KAA4BhD,KAAK,CAACgD,kBAbtC;AAcH;;AAjGc;;AAmGnB5I,OAAO,CAACgI,YAAR,GAAuBA,YAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMwB,KAAN,CAAY;AACR;AACJ;AACA;AACA;AACA;AACA;AACIlI,EAAAA,WAAW,CAACC,UAAD,EAAakI,aAAb,EAA4B;AACnC,SAAKlI,UAAL,GAAkBA,UAAlB;AACA,SAAKkI,aAAL,GAAqBA,aAArB;AACA,SAAKC,WAAL,GAAmB,IAAIhJ,YAAY,CAACiJ,UAAjB,CAA4BpI,UAA5B,CAAnB;AACA,SAAKqI,eAAL,GACI,CAAC,CAAC,KAAKrI,UAAL,CAAgBsI,SAAhB,CAA0BC,yBADhC;AAEH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC8B,SAAnBC,mBAAmB,CAACC,gBAAD,EAAmB5B,WAAnB,EAAgC;AACtD,UAAM6B,WAAW,GAAG,EAApB;;AACA,SAAK,MAAMC,UAAX,IAAyB9B,WAAzB,EAAsC;AAClC,UAAI3H,MAAM,CAAC0J,SAAP,CAAiBC,UAAjB,GAA8BzE,OAA9B,CAAsCuE,UAAU,CAAChE,KAAjD,CAAJ,EAA6D;AACzD+D,QAAAA,WAAW,CAACtG,IAAZ,CAAiBqG,gBAAgB,CAAC1E,GAAlC;AACH,OAFD,MAGK;AACD,cAAM+E,UAAU,GAAGL,gBAAgB,CAAC3H,GAAjB,CAAqB6H,UAAU,CAAChE,KAAhC,CAAnB;;AACA,YAAImE,UAAU,KAAKC,SAAnB,EAA8B;AAC1B,gBAAM,IAAIxH,KAAJ,CAAW,UAASoH,UAAU,CAAChE,KAAM,iDAA3B,GACZ,mEADY,GAEZ,oCAFE,CAAN;AAGH,SAJD,MAKK;AACD+D,UAAAA,WAAW,CAACtG,IAAZ,CAAiB0G,UAAjB;AACH;AACJ;AACJ;;AACD,WAAOJ,WAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACiB,MAATpI,SAAS,GAAG;AACZ,WAAO,KAAKN,UAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIgJ,EAAAA,KAAK,CAACnE,SAAD,EAAYoE,KAAZ,EAAmBvK,KAAnB,EAA0B;AAC3BQ,IAAAA,MAAM,CAACgK,iBAAP,CAAyB,WAAzB,EAAsCrE,SAAtC;AACAoE,IAAAA,KAAK,GAAGE,qBAAqB,CAAC,OAAD,EAAUF,KAAV,EAAiBvK,KAAjB,CAA7B;AACA0K,IAAAA,kBAAkB,CAAC,OAAD,EAAU1K,KAAV,EAAiB,KAAK2J,eAAtB,CAAlB;;AACA,QAAI,KAAKH,aAAL,CAAmBpB,OAAnB,IAA8B,KAAKoB,aAAL,CAAmBnB,KAArD,EAA4D;AACxD,YAAM,IAAIxF,KAAJ,CAAU,8DACZ,uCADE,CAAN;AAEH;;AACD,UAAMf,IAAI,GAAGtB,MAAM,CAAC0J,SAAP,CAAiBS,YAAjB,CAA8BxE,SAA9B,CAAb;;AACA,QAAI3F,MAAM,CAAC0J,SAAP,CAAiBC,UAAjB,GAA8BzE,OAA9B,CAAsC5D,IAAtC,CAAJ,EAAiD;AAC7C,UAAIyI,KAAK,KAAK,gBAAV,IAA8BA,KAAK,KAAK,oBAA5C,EAAkE;AAC9D,cAAM,IAAI1H,KAAJ,CAAW,qCAAoC0H,KAAM,IAA3C,GACZ,oCADE,CAAN;AAEH;;AACD,UAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,QAAhC,EAA0C;AACtC,YAAI,CAACK,KAAK,CAACC,OAAN,CAAc7K,KAAd,CAAD,IAAyBA,KAAK,CAACsJ,MAAN,KAAiB,CAA9C,EAAiD;AAC7C,gBAAM,IAAIzG,KAAJ,CAAW,qDAAoD0H,KAAM,YAArE,CAAN;AACH;;AACDvK,QAAAA,KAAK,GAAGA,KAAK,CAAC8K,GAAN,CAAUC,EAAE,IAAI,KAAKC,iBAAL,CAAuBD,EAAvB,CAAhB,CAAR;AACH,OALD,MAMK;AACD/K,QAAAA,KAAK,GAAG,KAAKgL,iBAAL,CAAuBhL,KAAvB,CAAR;AACH;AACJ;;AACD,UAAM0G,WAAW,GAAG,IAAIN,WAAJ,CAAgB,KAAKqD,WAArB,EAAkC3H,IAAlC,EAAwCZ,mBAAmB,CAACqJ,KAAD,CAA3D,EAAoEvK,KAApE,CAApB;;AACA,UAAMoE,OAAO,GAAG,KAAKoF,aAAL,CAAmBN,IAAnB,CAAwB;AACpChB,MAAAA,YAAY,EAAE,KAAKsB,aAAL,CAAmBtB,YAAnB,CAAgC+C,MAAhC,CAAuCvE,WAAvC;AADsB,KAAxB,CAAhB;;AAGA,WAAO,IAAI6C,KAAJ,CAAU,KAAKjI,UAAf,EAA2B8C,OAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI8G,EAAAA,MAAM,CAAC,GAAGC,UAAJ,EAAgB;AAClB,UAAMC,MAAM,GAAG,EAAf;;AACA,QAAID,UAAU,CAAC7B,MAAX,KAAsB,CAA1B,EAA6B;AACzB8B,MAAAA,MAAM,CAAC1H,IAAP,CAAY;AAAEyC,QAAAA,SAAS,EAAE3F,MAAM,CAAC0J,SAAP,CAAiBC,UAAjB,GAA8BzI;AAA3C,OAAZ;AACH,KAFD,MAGK;AACD,WAAK,IAAI2J,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAAC7B,MAA/B,EAAuC,EAAE+B,CAAzC,EAA4C;AACxC7K,QAAAA,MAAM,CAACgK,iBAAP,CAAyBa,CAAzB,EAA4BF,UAAU,CAACE,CAAD,CAAtC;AACAD,QAAAA,MAAM,CAAC1H,IAAP,CAAY;AACRyC,UAAAA,SAAS,EAAE3F,MAAM,CAAC0J,SAAP,CAAiBS,YAAjB,CAA8BQ,UAAU,CAACE,CAAD,CAAxC,EAA6C3J;AADhD,SAAZ;AAGH;AACJ,KAZiB,CAalB;AACA;;;AACA,UAAM0C,OAAO,GAAG,KAAKoF,aAAL,CAAmBN,IAAnB,CAAwB;AACpCT,MAAAA,UAAU,EAAE;AAAE2C,QAAAA;AAAF;AADwB,KAAxB,CAAhB;;AAGA,WAAO,IAAI7B,KAAJ,CAAU,KAAKjI,UAAf,EAA2B8C,OAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIkH,EAAAA,OAAO,CAACnF,SAAD,EAAYoF,YAAZ,EAA0B;AAC7B/K,IAAAA,MAAM,CAACgK,iBAAP,CAAyB,WAAzB,EAAsCrE,SAAtC;AACAoF,IAAAA,YAAY,GAAGC,kBAAkB,CAAC,cAAD,EAAiBD,YAAjB,CAAjC;;AACA,QAAI,KAAK/B,aAAL,CAAmBpB,OAAnB,IAA8B,KAAKoB,aAAL,CAAmBnB,KAArD,EAA4D;AACxD,YAAM,IAAIxF,KAAJ,CAAU,0DACZ,kDADE,CAAN;AAEH;;AACD,UAAM4I,QAAQ,GAAG,IAAIzF,UAAJ,CAAexF,MAAM,CAAC0J,SAAP,CAAiBS,YAAjB,CAA8BxE,SAA9B,CAAf,EAAyDpF,kBAAkB,CAACwK,YAAY,IAAI,KAAjB,CAA3E,CAAjB;;AACA,UAAMnH,OAAO,GAAG,KAAKoF,aAAL,CAAmBN,IAAnB,CAAwB;AACpCf,MAAAA,WAAW,EAAE,KAAKqB,aAAL,CAAmBrB,WAAnB,CAA+B8C,MAA/B,CAAsCQ,QAAtC;AADuB,KAAxB,CAAhB;;AAGA,WAAO,IAAIlC,KAAJ,CAAU,KAAKjI,UAAf,EAA2B8C,OAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIkE,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACTzH,IAAAA,UAAU,CAAC6K,eAAX,CAA2B,OAA3B,EAAoCpD,KAApC;;AACA,UAAMlE,OAAO,GAAG,KAAKoF,aAAL,CAAmBN,IAAnB,CAAwB;AACpCZ,MAAAA,KADoC;AAEpCC,MAAAA,SAAS,EAAET,SAAS,CAAC6D;AAFe,KAAxB,CAAhB;;AAIA,WAAO,IAAIpC,KAAJ,CAAU,KAAKjI,UAAf,EAA2B8C,OAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIwH,EAAAA,WAAW,CAACtD,KAAD,EAAQ;AACfzH,IAAAA,UAAU,CAAC6K,eAAX,CAA2B,aAA3B,EAA0CpD,KAA1C;;AACA,UAAMlE,OAAO,GAAG,KAAKoF,aAAL,CAAmBN,IAAnB,CAAwB;AAAEZ,MAAAA,KAAF;AAASC,MAAAA,SAAS,EAAET,SAAS,CAAC+D;AAA9B,KAAxB,CAAhB;;AACA,WAAO,IAAItC,KAAJ,CAAU,KAAKjI,UAAf,EAA2B8C,OAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIoE,EAAAA,MAAM,CAACA,MAAD,EAAS;AACX3H,IAAAA,UAAU,CAAC6K,eAAX,CAA2B,QAA3B,EAAqClD,MAArC;;AACA,UAAMpE,OAAO,GAAG,KAAKoF,aAAL,CAAmBN,IAAnB,CAAwB;AAAEV,MAAAA;AAAF,KAAxB,CAAhB;;AACA,WAAO,IAAIe,KAAJ,CAAU,KAAKjI,UAAf,EAA2B8C,OAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIsB,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACX,QAAI,SAASA,KAAb,EAAoB;AAChB,aAAO,IAAP;AACH;;AACD,WAAQA,KAAK,YAAY4D,KAAjB,IAA0B,KAAKC,aAAL,CAAmB9D,OAAnB,CAA2BC,KAAK,CAAC6D,aAAjC,CAAlC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIsC,EAAAA,qBAAqB,CAACC,8BAAD,EAAiC;AAClD;AACA;AACA,QAAIA,8BAA8B,CAACzC,MAA/B,KAA0C,CAA1C,IACA,EAAEyC,8BAA8B,CAAC,CAAD,CAA9B,YAA6C3L,UAAU,CAAC4L,gBAAxD,IACED,8BAA8B,CAAC,CAAD,CAA9B,YAA6C3K,iBADjD,CADJ,EAEyE;AACrE,aAAO,KAAKoI,aAAL,CAAmBrB,WAA1B;AACH;;AACD,UAAMA,WAAW,GAAG,KAAKqB,aAAL,CAAmBrB,WAAnB,CAA+B8D,KAA/B,EAApB,CARkD,CASlD;AACA;;;AACA,QAAI9D,WAAW,CAACmB,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,WAAK,MAAM5C,WAAX,IAA0B,KAAK8C,aAAL,CAAmBtB,YAA7C,EAA2D;AACvD,YAAIxB,WAAW,CAACH,kBAAZ,EAAJ,EAAsC;AAClC4B,UAAAA,WAAW,CAACzE,IAAZ,CAAiB,IAAIsC,UAAJ,CAAeU,WAAW,CAACT,KAA3B,CAAjB;AACA;AACH;AACJ;AACJ;;AACD,UAAMiG,aAAa,GAAG,CAAC,CAAC/D,WAAW,CAACgE,IAAZ,CAAiBlC,UAAU,IAAIzJ,MAAM,CAAC0J,SAAP,CAAiBC,UAAjB,GAA8BzE,OAA9B,CAAsCuE,UAAU,CAAChE,KAAjD,CAA/B,CAAxB;;AACA,QAAI,CAACiG,aAAL,EAAoB;AAChB;AACA,YAAME,aAAa,GAAGjE,WAAW,CAACmB,MAAZ,KAAuB,CAAvB,GAChBvI,kBAAkB,CAACsL,GADH,GAEhBlE,WAAW,CAACA,WAAW,CAACmB,MAAZ,GAAqB,CAAtB,CAAX,CAAoCpD,SAF1C;AAGAiC,MAAAA,WAAW,CAACzE,IAAZ,CAAiB,IAAIsC,UAAJ,CAAexF,MAAM,CAAC0J,SAAP,CAAiBC,UAAjB,EAAf,EAA8CiC,aAA9C,CAAjB;AACH;;AACD,WAAOjE,WAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACImE,EAAAA,YAAY,CAACnE,WAAD,EAAc4D,8BAAd,EAA8CQ,MAA9C,EAAsD;AAC9D,QAAIvC,WAAJ;;AACA,QAAI+B,8BAA8B,CAACzC,MAA/B,KAA0C,CAA1C,IACAyC,8BAA8B,CAAC,CAAD,CAA9B,YAA6C3L,UAAU,CAAC4L,gBAD5D,EAC8E;AAC1EhC,MAAAA,WAAW,GAAGT,KAAK,CAACO,mBAAN,CAA0BiC,8BAA8B,CAAC,CAAD,CAAxD,EAA6D5D,WAA7D,CAAd;AACH,KAHD,MAIK;AACD6B,MAAAA,WAAW,GAAG+B,8BAAd;AACH;;AACD,QAAI/B,WAAW,CAACV,MAAZ,GAAqBnB,WAAW,CAACmB,MAArC,EAA6C;AACzC,YAAM,IAAIzG,KAAJ,CAAU,qDACZ,2DADE,CAAN;AAEH;;AACD,UAAMuB,OAAO,GAAG;AAAEoI,MAAAA,MAAM,EAAE,EAAV;AAAcD,MAAAA;AAAd,KAAhB;;AACA,SAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,WAAW,CAACV,MAAhC,EAAwC,EAAE+B,CAA1C,EAA6C;AACzC,UAAIjB,UAAU,GAAGJ,WAAW,CAACqB,CAAD,CAA5B;;AACA,UAAI7K,MAAM,CAAC0J,SAAP,CAAiBC,UAAjB,GAA8BzE,OAA9B,CAAsCyC,WAAW,CAACkD,CAAD,CAAX,CAAepF,KAArD,CAAJ,EAAiE;AAC7DmE,QAAAA,UAAU,GAAG,KAAKY,iBAAL,CAAuBZ,UAAvB,CAAb;AACH;;AACDM,MAAAA,kBAAkB,CAACW,CAAD,EAAIjB,UAAJ,EAAgB,KAAKT,eAArB,CAAlB;AACAvF,MAAAA,OAAO,CAACoI,MAAR,CAAe9I,IAAf,CAAoB,KAAK+F,WAAL,CAAiB9C,WAAjB,CAA6ByD,UAA7B,CAApB;AACH;;AACD,WAAOhG,OAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI4G,EAAAA,iBAAiB,CAACyB,GAAD,EAAM;AACnB,UAAMC,QAAQ,GAAG,KAAKlD,aAAL,CAAmBvB,cAAnB,GACX,KAAKuB,aAAL,CAAmBxB,UADR,GAEX,KAAKwB,aAAL,CAAmBxB,UAAnB,CAA8BrF,MAA9B,CAAqC,KAAK6G,aAAL,CAAmB/F,YAAxD,CAFN;AAGA,QAAIkJ,SAAJ;;AACA,QAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AACzB,YAAM3K,IAAI,GAAG4K,QAAQ,CAAC/J,MAAT,CAAgB8J,GAAhB,CAAb;;AACA,UAAI,KAAKjD,aAAL,CAAmBvB,cAAvB,EAAuC;AACnC,YAAI,CAACnG,IAAI,CAAC8K,UAAV,EAAsB;AAClB,gBAAM,IAAI/J,KAAJ,CAAU,sDACZ,iEADY,GAEX,+BAA8B4J,GAAI,sBAFvB,GAGZ,qCAHE,CAAN;AAIH;AACJ,OAPD,MAQK,IAAIA,GAAG,CAACI,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EAA6B;AAC9B,cAAM,IAAIhK,KAAJ,CAAU,wEACX,6DAA4D4J,GAAI,IADrD,GAEZ,mBAFE,CAAN;AAGH;;AACDE,MAAAA,SAAS,GAAG,IAAIvL,iBAAJ,CAAsB,KAAKE,UAA3B,EAAuCoL,QAAQ,CAAC/J,MAAT,CAAgB8J,GAAhB,CAAvC,EAA6D,KAAKjD,aAAL,CAAmBzD,SAAhF,CAAZ;AACH,KAhBD,MAiBK,IAAI0G,GAAG,YAAYrL,iBAAnB,EAAsC;AACvCuL,MAAAA,SAAS,GAAGF,GAAZ;;AACA,UAAI,CAACC,QAAQ,CAACI,UAAT,CAAoBH,SAAS,CAACpL,KAA9B,CAAL,EAA2C;AACvC,cAAM,IAAIsB,KAAJ,CAAW,IAAG8J,SAAS,CAAC7K,IAAK,4CAAnB,GACZ,qCADE,CAAN;AAEH;AACJ,KANI,MAOA;AACD,YAAM,IAAIe,KAAJ,CAAU,kEACX,2CAA0C4J,GAAI,IAD7C,CAAN;AAEH;;AACD,QAAI,CAAC,KAAKjD,aAAL,CAAmBvB,cAApB,IACA0E,SAAS,CAACpL,KAAV,CAAgBW,MAAhB,GAAyB6K,SAAzB,CAAmCL,QAAnC,MAAiD,CADrD,EACwD;AACpD,YAAM,IAAI7J,KAAJ,CAAU,0DACX,WAAU8J,SAAS,CAAC7K,IAAK,IADxB,CAAN;AAEH;;AACD,WAAO6K,SAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIvE,EAAAA,OAAO,CAAC,GAAG4E,6BAAJ,EAAmC;AACtCnM,IAAAA,UAAU,CAAC2D,4BAAX,CAAwC,eAAxC,EAAyDwI,6BAAzD,EAAwF,CAAxF;AACA,UAAM7E,WAAW,GAAG,KAAK2D,qBAAL,CAA2BkB,6BAA3B,CAApB;AACA,UAAM5E,OAAO,GAAG,KAAKkE,YAAL,CAAkBnE,WAAlB,EAA+B6E,6BAA/B,EAA8D,IAA9D,CAAhB;;AACA,UAAM5I,OAAO,GAAG,KAAKoF,aAAL,CAAmBN,IAAnB,CAAwB;AAAEf,MAAAA,WAAF;AAAeC,MAAAA;AAAf,KAAxB,CAAhB;;AACA,WAAO,IAAImB,KAAJ,CAAU,KAAKjI,UAAf,EAA2B8C,OAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI6I,EAAAA,UAAU,CAAC,GAAGD,6BAAJ,EAAmC;AACzCnM,IAAAA,UAAU,CAAC2D,4BAAX,CAAwC,kBAAxC,EAA4DwI,6BAA5D,EAA2F,CAA3F;AACA,UAAM7E,WAAW,GAAG,KAAK2D,qBAAL,CAA2BkB,6BAA3B,CAApB;AACA,UAAM5E,OAAO,GAAG,KAAKkE,YAAL,CAAkBnE,WAAlB,EAA+B6E,6BAA/B,EAA8D,KAA9D,CAAhB;;AACA,UAAM5I,OAAO,GAAG,KAAKoF,aAAL,CAAmBN,IAAnB,CAAwB;AAAEf,MAAAA,WAAF;AAAeC,MAAAA;AAAf,KAAxB,CAAhB;;AACA,WAAO,IAAImB,KAAJ,CAAU,KAAKjI,UAAf,EAA2B8C,OAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI8I,EAAAA,SAAS,CAAC,GAAGF,6BAAJ,EAAmC;AACxCnM,IAAAA,UAAU,CAAC2D,4BAAX,CAAwC,iBAAxC,EAA2DwI,6BAA3D,EAA0F,CAA1F;AACA,UAAM7E,WAAW,GAAG,KAAK2D,qBAAL,CAA2BkB,6BAA3B,CAApB;AACA,UAAM3E,KAAK,GAAG,KAAKiE,YAAL,CAAkBnE,WAAlB,EAA+B6E,6BAA/B,EAA8D,IAA9D,CAAd;;AACA,UAAM5I,OAAO,GAAG,KAAKoF,aAAL,CAAmBN,IAAnB,CAAwB;AAAEf,MAAAA,WAAF;AAAeE,MAAAA;AAAf,KAAxB,CAAhB;;AACA,WAAO,IAAIkB,KAAJ,CAAU,KAAKjI,UAAf,EAA2B8C,OAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIiE,EAAAA,KAAK,CAAC,GAAG2E,6BAAJ,EAAmC;AACpCnM,IAAAA,UAAU,CAAC2D,4BAAX,CAAwC,aAAxC,EAAuDwI,6BAAvD,EAAsF,CAAtF;AACA,UAAM7E,WAAW,GAAG,KAAK2D,qBAAL,CAA2BkB,6BAA3B,CAApB;AACA,UAAM3E,KAAK,GAAG,KAAKiE,YAAL,CAAkBnE,WAAlB,EAA+B6E,6BAA/B,EAA8D,KAA9D,CAAd;;AACA,UAAM5I,OAAO,GAAG,KAAKoF,aAAL,CAAmBN,IAAnB,CAAwB;AAAEf,MAAAA,WAAF;AAAeE,MAAAA;AAAf,KAAxB,CAAhB;;AACA,WAAO,IAAIkB,KAAJ,CAAU,KAAKjI,UAAf,EAA2B8C,OAA3B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIhC,EAAAA,GAAG,GAAG;AACF,WAAO,KAAK+K,IAAL,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,IAAI,CAACC,aAAD,EAAgB;AAChB,UAAMjI,IAAI,GAAG,EAAb,CADgB,CAEhB;;AACA,UAAMkI,KAAK,GAAGxK,KAAK,GAAGwK,KAAtB;AACA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAIvI,QAAJ;;AACA,WAAKwI,OAAL,CAAaL,aAAb,EACKM,EADL,CACQ,OADR,EACiBC,GAAG,IAAI;AACpBH,QAAAA,MAAM,CAAC5M,MAAM,CAACgN,SAAP,CAAiBD,GAAjB,EAAsBN,KAAtB,CAAD,CAAN;AACH,OAHD,EAIKK,EAJL,CAIQ,MAJR,EAIgBnL,MAAM,IAAI;AACtB0C,QAAAA,QAAQ,GAAG1C,MAAM,CAAC0C,QAAlB;;AACA,YAAI1C,MAAM,CAAC6C,QAAX,EAAqB;AACjBD,UAAAA,IAAI,CAACzB,IAAL,CAAUnB,MAAM,CAAC6C,QAAjB;AACH;AACJ,OATD,EAUKsI,EAVL,CAUQ,KAVR,EAUe,MAAM;AACjB,YAAI,KAAKlE,aAAL,CAAmBjB,SAAnB,KAAiCT,SAAS,CAAC+D,IAA/C,EAAqD;AACjD;AACA;AACA;AACA1G,UAAAA,IAAI,CAAC0I,OAAL;AACH;;AACDN,QAAAA,OAAO,CAAC,IAAI3G,aAAJ,CAAkB,IAAlB,EAAwB3B,QAAxB,EAAkCE,IAAI,CAACmE,MAAvC,EAA+C,MAAMnE,IAArD,EAA2D,MAAM;AACrE,gBAAM6B,OAAO,GAAG,EAAhB;;AACA,eAAK,IAAIqE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlG,IAAI,CAACmE,MAAzB,EAAiC,EAAE+B,CAAnC,EAAsC;AAClCrE,YAAAA,OAAO,CAACtD,IAAR,CAAa,IAAIrD,iBAAiB,CAACyN,cAAtB,CAAqC,OAArC,EAA8C3I,IAAI,CAACkG,CAAD,CAAlD,EAAuD,CAAC,CAAxD,EAA2DA,CAA3D,CAAb;AACH;;AACD,iBAAOrE,OAAP;AACH,SANO,CAAD,CAAP;AAOH,OAxBD;AAyBH,KA3BM,CAAP;AA4BH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI+G,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKvE,aAAL,CAAmBjB,SAAnB,KAAiCT,SAAS,CAAC+D,IAA/C,EAAqD;AACjD,YAAM,IAAIhJ,KAAJ,CAAU,0DACZ,0DADE,CAAN;AAEH;;AACD,UAAMmL,cAAc,GAAG,KAAKP,OAAL,EAAvB;;AACA,UAAMQ,SAAS,GAAG,IAAIhO,QAAQ,CAACiO,SAAb,CAAuB;AACrCC,MAAAA,UAAU,EAAE,IADyB;;AAErCF,MAAAA,SAAS,CAACG,KAAD,EAAQC,QAAR,EAAkB5G,QAAlB,EAA4B;AACjCA,QAAAA,QAAQ,CAAC4C,SAAD,EAAY+D,KAAK,CAAChJ,QAAlB,CAAR;AACH;;AAJoC,KAAvB,CAAlB;AAMA4I,IAAAA,cAAc,CAACM,IAAf,CAAoBL,SAApB;AACAD,IAAAA,cAAc,CAACN,EAAf,CAAkB,OAAlB,EAA2Ba,CAAC,IAAIN,SAAS,CAACO,OAAV,CAAkBD,CAAlB,CAAhC;AACA,WAAON,SAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIQ,EAAAA,QAAQ,CAACC,MAAD,EAAS;AACb,QAAIA,MAAJ,EAAY;AACR,aAAOA,MAAM,CAACnC,MAAP,GACD;AAAEA,QAAAA,MAAM,EAAE,IAAV;AAAgBC,QAAAA,MAAM,EAAEkC,MAAM,CAAClC;AAA/B,OADC,GAED;AAAEA,QAAAA,MAAM,EAAEkC,MAAM,CAAClC;AAAjB,OAFN;AAGH;;AACD,WAAOnC,SAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzE,EAAAA,OAAO,CAAC+I,uBAAD,EAA0B;AAC7B,UAAMhN,SAAS,GAAG,KAAKC,SAAL,CAAeD,SAAjC;;AACA,UAAMqG,UAAU,GAAG,KAAKwB,aAAL,CAAmBxB,UAAnB,CAA8BnG,uBAA9B,CAAsDF,SAAtD,CAAnB;;AACA,UAAMiN,eAAe,GAAG,KAAKC,iBAAL,EAAxB,CAH6B,CAI7B;AACA;;AACA,QAAI,KAAKrF,aAAL,CAAmBjB,SAAnB,KAAiCT,SAAS,CAAC+D,IAA/C,EAAqD;AACjD,UAAI,CAAC,KAAKrC,aAAL,CAAmBH,cAAnB,EAAL,EAA0C;AACtC,cAAM,IAAIxG,KAAJ,CAAU,yEAAV,CAAN;AACH;;AACD+L,MAAAA,eAAe,CAACtD,OAAhB,GAA0B,KAAK9B,aAAL,CAAmBrB,WAAnB,CAA+B2C,GAA/B,CAAmCgE,KAAK,IAAI;AAClE;AACA,cAAMC,GAAG,GAAGD,KAAK,CAAC5I,SAAN,KAAoB,YAApB,GAAmC,WAAnC,GAAiD,YAA7D;AACA,eAAO,IAAIF,UAAJ,CAAe8I,KAAK,CAAC7I,KAArB,EAA4B8I,GAA5B,EAAiCnJ,OAAjC,EAAP;AACH,OAJyB,CAA1B,CAJiD,CASjD;;AACAgJ,MAAAA,eAAe,CAACxG,OAAhB,GAA0B,KAAKoB,aAAL,CAAmBnB,KAAnB,GACpB,KAAKoG,QAAL,CAAc;AACZjC,QAAAA,MAAM,EAAE,KAAKhD,aAAL,CAAmBnB,KAAnB,CAAyBmE,MADrB;AAEZD,QAAAA,MAAM,EAAE,CAAC,KAAK/C,aAAL,CAAmBnB,KAAnB,CAAyBkE;AAFtB,OAAd,CADoB,GAKpBlC,SALN;AAMAuE,MAAAA,eAAe,CAACvG,KAAhB,GAAwB,KAAKmB,aAAL,CAAmBpB,OAAnB,GAClB,KAAKqG,QAAL,CAAc;AACZjC,QAAAA,MAAM,EAAE,KAAKhD,aAAL,CAAmBpB,OAAnB,CAA2BoE,MADvB;AAEZD,QAAAA,MAAM,EAAE,CAAC,KAAK/C,aAAL,CAAmBpB,OAAnB,CAA2BmE;AAFxB,OAAd,CADkB,GAKlBlC,SALN;AAMH;;AACD,UAAM2E,eAAe,GAAG;AACpB9M,MAAAA,MAAM,EAAE8F,UAAU,CAACtG,aADC;AAEpBkN,MAAAA;AAFoB,KAAxB;;AAIA,QAAID,uBAAuB,YAAYM,UAAvC,EAAmD;AAC/CD,MAAAA,eAAe,CAACE,WAAhB,GAA8BP,uBAA9B;AACH,KAFD,MAGK,IAAIA,uBAAuB,YAAYjO,WAAW,CAACyO,SAAnD,EAA8D;AAC/DH,MAAAA,eAAe,CAAC/J,QAAhB,GACI0J,uBAAuB,CAAC/I,OAAxB,GAAkCwJ,cADtC;AAEH;;AACD,WAAOJ,eAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIK,EAAAA,eAAe,GAAG;AACd,UAAM1N,SAAS,GAAG,KAAKC,SAAL,CAAeD,SAAjC;;AACA,UAAMqG,UAAU,GAAG,KAAKwB,aAAL,CAAmBxB,UAAnB,CAA8BnG,uBAA9B,CAAsDF,SAAtD,CAAnB;;AACA,UAAMiN,eAAe,GAAG,KAAKC,iBAAL,EAAxB;AACA,UAAMS,YAAY,GAAG;AACjBpN,MAAAA,MAAM,EAAE8F,UAAU,CAACtG,aADF;AAEjBkN,MAAAA;AAFiB,KAArB;;AAIA,QAAI,KAAKpF,aAAL,CAAmBjB,SAAnB,KAAiCT,SAAS,CAAC6D,KAA/C,EAAsD;AAClD2D,MAAAA,YAAY,CAAC/G,SAAb,GAAyB,OAAzB;AACH,KAFD,MAGK,IAAI,KAAKiB,aAAL,CAAmBjB,SAAnB,KAAiCT,SAAS,CAAC+D,IAA/C,EAAqD;AACtDyD,MAAAA,YAAY,CAAC/G,SAAb,GAAyB,MAAzB;AACH;;AACD,WAAO+G,YAAP;AACH;;AACDT,EAAAA,iBAAiB,GAAG;AAChB,UAAMD,eAAe,GAAG;AACpBW,MAAAA,IAAI,EAAE,CAAC,EAAD;AADc,KAAxB;;AAGA,QAAI,KAAK/F,aAAL,CAAmBvB,cAAvB,EAAuC;AACnC2G,MAAAA,eAAe,CAACW,IAAhB,CAAqB,CAArB,EAAwBtH,cAAxB,GAAyC,IAAzC;AACH,KANe,CAOhB;AACA;;;AACA,QAAI,CAAC,KAAKuB,aAAL,CAAmBd,QAAxB,EAAkC;AAC9BkG,MAAAA,eAAe,CAACW,IAAhB,CAAqB,CAArB,EAAwB9L,YAAxB,GAAuC,KAAK+F,aAAL,CAAmB/F,YAA1D;AACH;;AACD,QAAI,KAAK+F,aAAL,CAAmBtB,YAAnB,CAAgCoB,MAAhC,KAA2C,CAA/C,EAAkD;AAC9CsF,MAAAA,eAAe,CAACtE,KAAhB,GAAwB,KAAKd,aAAL,CAAmBtB,YAAnB,CAAgC,CAAhC,EAAmCtC,OAAnC,EAAxB;AACH,KAFD,MAGK,IAAI,KAAK4D,aAAL,CAAmBtB,YAAnB,CAAgCoB,MAAhC,GAAyC,CAA7C,EAAgD;AACjD,YAAMkG,OAAO,GAAG,EAAhB;;AACA,WAAK,MAAM9I,WAAX,IAA0B,KAAK8C,aAAL,CAAmBtB,YAA7C,EAA2D;AACvDsH,QAAAA,OAAO,CAAC9L,IAAR,CAAagD,WAAW,CAACd,OAAZ,EAAb;AACH;;AACDgJ,MAAAA,eAAe,CAACtE,KAAhB,GAAwB;AACpBmF,QAAAA,eAAe,EAAE;AACbnJ,UAAAA,EAAE,EAAE,KADS;AAEbkJ,UAAAA;AAFa;AADG,OAAxB;AAMH;;AACD,QAAI,KAAKhG,aAAL,CAAmBH,cAAnB,EAAJ,EAAyC;AACrCuF,MAAAA,eAAe,CAACtD,OAAhB,GAA0B,KAAK9B,aAAL,CAAmBrB,WAAnB,CAA+B2C,GAA/B,CAAmC4E,CAAC,IAAIA,CAAC,CAAC9J,OAAF,EAAxC,CAA1B;AACH;;AACDgJ,IAAAA,eAAe,CAACxG,OAAhB,GAA0B,KAAKqG,QAAL,CAAc,KAAKjF,aAAL,CAAmBpB,OAAjC,CAA1B;AACAwG,IAAAA,eAAe,CAACvG,KAAhB,GAAwB,KAAKoG,QAAL,CAAc,KAAKjF,aAAL,CAAmBnB,KAAjC,CAAxB;;AACA,QAAI,KAAKmB,aAAL,CAAmBlB,KAAvB,EAA8B;AAC1BsG,MAAAA,eAAe,CAACtG,KAAhB,GAAwB;AAAEtI,QAAAA,KAAK,EAAE,KAAKwJ,aAAL,CAAmBlB;AAA5B,OAAxB;AACH;;AACDsG,IAAAA,eAAe,CAACpG,MAAhB,GAAyB,KAAKgB,aAAL,CAAmBhB,MAA5C;AACAoG,IAAAA,eAAe,CAAC1D,MAAhB,GAAyB,KAAK1B,aAAL,CAAmBf,UAA5C;AACA,WAAOmG,eAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,OAAO,CAACL,aAAD,EAAgB;AACnB,UAAMrK,GAAG,GAAGnC,MAAM,CAACoC,UAAP,EAAZ;AACA,QAAI2M,oBAAoB,GAAG,IAA3B;AACA,UAAM5B,MAAM,GAAG,IAAI9N,QAAQ,CAACiO,SAAb,CAAuB;AAClCC,MAAAA,UAAU,EAAE,IADsB;AAElCF,MAAAA,SAAS,EAAE,CAAC2B,KAAD,EAAQC,GAAR,EAAapI,QAAb,KAA0B;AACjC,cAAMxC,QAAQ,GAAGvE,WAAW,CAACyO,SAAZ,CAAsBW,SAAtB,CAAgCF,KAAK,CAAC3K,QAAtC,CAAjB;;AACA,YAAI2K,KAAK,CAACxK,QAAV,EAAoB;AAChB,gBAAMA,QAAQ,GAAG,KAAKxD,SAAL,CAAemO,SAAf,CAAyBH,KAAK,CAACxK,QAA/B,EAAyCwK,KAAK,CAAC3K,QAA/C,CAAjB;AACA,gBAAM+K,QAAQ,GAAG,IAAI5P,UAAU,CAACkF,uBAAf,CAAuCF,QAAQ,CAACC,GAAT,CAAaS,aAAb,CAA2B,KAAK0D,aAAL,CAAmBzD,SAA9C,CAAvC,CAAjB,CAFgB,CAGhB;AACA;;AACAiK,UAAAA,QAAQ,CAACC,WAAT,GAAuB7K,QAAQ,CAAC8K,YAAhC;AACAF,UAAAA,QAAQ,CAAC/K,QAAT,GAAoBG,QAAQ,CAACH,QAA7B;AACA+K,UAAAA,QAAQ,CAACG,UAAT,GAAsB/K,QAAQ,CAAC+K,UAA/B;AACAH,UAAAA,QAAQ,CAACI,UAAT,GAAsBhL,QAAQ,CAACgL,UAA/B;AACAT,UAAAA,oBAAoB,GAAGK,QAAQ,CAACzK,KAAT,EAAvB;AACAkC,UAAAA,QAAQ,CAAC4C,SAAD,EAAY;AAAEjF,YAAAA,QAAQ,EAAEuK,oBAAZ;AAAkC1K,YAAAA;AAAlC,WAAZ,CAAR;AACH,SAXD,MAYK;AACDwC,UAAAA,QAAQ,CAAC4C,SAAD,EAAY;AAAEpF,YAAAA;AAAF,WAAZ,CAAR;AACH;AACJ;AAnBiC,KAAvB,CAAf;AAqBA,SAAKrD,SAAL,CACKqB,kBADL,CACwBF,GADxB,EAEKT,IAFL,CAEU,YAAY;AAClB;AACA;AACA;AACA,UAAIY,OAAO,GAAG,KAAK0C,OAAL,CAAawH,aAAb,CAAd;AACA,UAAIiD,YAAJ;;AACA,SAAG;AACCA,QAAAA,YAAY,GAAG,IAAIzP,MAAM,CAAC0P,QAAX,EAAf;AACA,cAAMC,aAAa,GAAG,MAAM,KAAKjP,UAAL,CAAgBkP,aAAhB,CAA8B,UAA9B,EAA0CtN,OAA1C,EAAmDH,GAAnD,CAA5B;AACAwN,QAAAA,aAAa,CAAC7C,EAAd,CAAiB,OAAjB,EAA0BC,GAAG,IAAI;AAC7B4C,UAAAA,aAAa,CAACE,MAAd,CAAqB1C,MAArB,EAD6B,CAE7B;AACA;;AACA,cAAI,CAACX,aAAD,IAAkB,CAACxM,MAAM,CAAC8P,mBAAP,CAA2B/C,GAA3B,EAAgC,UAAhC,CAAvB,EAAoE;AAChErN,YAAAA,QAAQ,CAACqQ,MAAT,CAAgB,eAAhB,EAAiC5N,GAAjC,EAAsC,2CAAtC,EAAmF4K,GAAnF;;AACA,gBAAIgC,oBAAJ,EAA0B;AACtB;AACA;AACA;AACA;AACA,kBAAI,KAAKnG,aAAL,CAAmBb,kBAAvB,EAA2C;AACvCzF,gBAAAA,OAAO,GAAG,KAAK+J,UAAL,CAAgB0C,oBAAhB,EAAsC/J,OAAtC,CAA8C+J,oBAAoB,CAAC1K,QAAnE,CAAV;AACH,eAFD,MAGK;AACD/B,gBAAAA,OAAO,GAAG,KAAK+J,UAAL,CAAgB0C,oBAAhB,EAAsC/J,OAAtC,EAAV;AACH;AACJ;;AACDyK,YAAAA,YAAY,CAAC9C,OAAb;AAAqB;AAAc,gBAAnC;AACH,WAfD,MAgBK;AACDjN,YAAAA,QAAQ,CAACqQ,MAAT,CAAgB,eAAhB,EAAiC5N,GAAjC,EAAsC,iCAAtC,EAAyE4K,GAAzE;AACAI,YAAAA,MAAM,CAACS,OAAP,CAAeb,GAAf;AACA0C,YAAAA,YAAY,CAAC9C,OAAb;AAAqB;AAAc,iBAAnC;AACH;AACJ,SAzBD;AA0BAgD,QAAAA,aAAa,CAAC7C,EAAd,CAAiB,KAAjB,EAAwB,MAAM;AAC1B2C,UAAAA,YAAY,CAAC9C,OAAb;AAAqB;AAAc,eAAnC;AACH,SAFD;AAGAgD,QAAAA,aAAa,CAACK,MAAd;AACAL,QAAAA,aAAa,CAACjC,IAAd,CAAmBP,MAAnB;AACH,OAlCD,QAkCS,MAAMsC,YAAY,CAACQ,OAlC5B;AAmCH,KA3CD,EA4CKC,KA5CL,CA4CWvC,CAAC,IAAIR,MAAM,CAACS,OAAP,CAAeD,CAAf,CA5ChB;AA6CA,WAAOR,MAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIrJ,EAAAA,UAAU,CAACC,MAAD,EAASC,OAAT,EAAkB;AACxB/D,IAAAA,UAAU,CAACgE,gBAAX,CAA4B,QAA5B,EAAsCF,MAAtC;AACA9D,IAAAA,UAAU,CAACgE,gBAAX,CAA4B,SAA5B,EAAuCD,OAAvC,EAAgD;AAAEE,MAAAA,QAAQ,EAAE;AAAZ,KAAhD;AACA,UAAMC,KAAK,GAAG,KAAK7E,OAAO,CAAC,SAAD,CAAP,CAAmB6Q,UAAxB,EAAoC,KAAKnP,SAAzC,EAAoD,IAApD,EAA0D,KAAK4H,aAAL,CAAmBzD,SAA7E,CAAd;AACA,WAAOhB,KAAK,CAACL,UAAN,CAAiB,CAACO,QAAD,EAAWC,IAAX,EAAiBC,IAAjB,EAAuB6B,OAAvB,KAAmC;AACvDrC,MAAAA,MAAM,CAAC,IAAIiC,aAAJ,CAAkB,IAAlB,EAAwB3B,QAAxB,EAAkCC,IAAlC,EAAwCC,IAAxC,EAA8C6B,OAA9C,CAAD,CAAN;AACH,KAFM,EAEJpC,OAAO,IAAIY,OAAO,CAACC,KAFf,CAAP;AAGH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIuL,EAAAA,UAAU,GAAG;AACT,WAAO,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACnB;AACA,YAAM9E,aAAa,GAAG,KAAK5C,aAAL,CAAmBH,cAAnB,KAChB,KAAKG,aAAL,CAAmBrB,WAAnB,CAA+B,KAAKqB,aAAL,CAAmBrB,WAAnB,CAA+BmB,MAA/B,GAAwC,CAAvE,EAA0EpD,SAD1D,GAEhB,WAFN;;AAGA,YAAMiL,QAAQ,GAAG,KAAK3H,aAAL,CAAmBrB,WAAnB,CAA+B8C,MAA/B,CAAsC,IAAIjF,UAAJ,CAAexF,MAAM,CAAC0J,SAAP,CAAiBC,UAAjB,EAAf,EAA8CiC,aAA9C,CAAtC,CAAjB;;AACA,WAAK,MAAMd,OAAX,IAAsB6F,QAAtB,EAAgC;AAC5B,YAAIC,IAAJ;;AACA,YAAI5Q,MAAM,CAAC0J,SAAP,CAAiBC,UAAjB,GAA8BzE,OAA9B,CAAsC4F,OAAO,CAACrF,KAA9C,CAAJ,EAA0D;AACtDmL,UAAAA,IAAI,GAAGH,IAAI,CAAC5L,GAAL,CAAS9D,KAAT,CAAewL,SAAf,CAAyBmE,IAAI,CAAC7L,GAAL,CAAS9D,KAAlC,CAAP;AACH,SAFD,MAGK;AACD,gBAAM8P,EAAE,GAAGJ,IAAI,CAACK,UAAL,CAAgBhG,OAAO,CAACrF,KAAxB,CAAX;AACA,gBAAMsL,EAAE,GAAGL,IAAI,CAACI,UAAL,CAAgBhG,OAAO,CAACrF,KAAxB,CAAX;;AACA,cAAIoL,EAAE,KAAKhH,SAAP,IAAoBkH,EAAE,KAAKlH,SAA/B,EAA0C;AACtC,kBAAM,IAAIxH,KAAJ,CAAU,gDACZ,6DADY,GAEZ,wBAFE,CAAN;AAGH;;AACDuO,UAAAA,IAAI,GAAG7Q,OAAO,CAACiR,OAAR,CAAgBH,EAAhB,EAAoBE,EAApB,CAAP;AACH;;AACD,YAAIH,IAAI,KAAK,CAAb,EAAgB;AACZ,gBAAMlL,SAAS,GAAGoF,OAAO,CAACpF,SAAR,KAAsB,WAAtB,GAAoC,CAApC,GAAwC,CAAC,CAA3D;AACA,iBAAOA,SAAS,GAAGkL,IAAnB;AACH;AACJ;;AACD,aAAO,CAAP;AACH,KA3BD;AA4BH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItL,EAAAA,aAAa,CAACC,SAAD,EAAY;AACrB,WAAO,IAAIwD,KAAJ,CAAU,KAAK3H,SAAf,EAA0B,KAAK4H,aAAL,CAAmB1D,aAAnB,CAAiCC,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6CA,SAA7C,GAAyDpF,OAAO,CAACc,gBAAR,EAA1F,CAA1B,CAAP;AACH;;AA/6BO;;AAi7BZ1B,OAAO,CAACwJ,KAAR,GAAgBA,KAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMpH,mBAAN,SAAkCoH,KAAlC,CAAwC;AACpC;AACJ;AACA;AACA;AACA;AACA;AACIlI,EAAAA,WAAW,CAACO,SAAD,EAAYE,IAAZ,EAAkBiE,SAAlB,EAA6B;AACpC,UAAMnE,SAAN,EAAiBmG,YAAY,CAACgB,kBAAb,CAAgCjH,IAAhC,EAAsCiE,SAAtC,CAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACqB,MAAb9D,aAAa,GAAG;AAChB,WAAO,KAAKuH,aAAL,CAAmBxB,UAAnB,CAA8BrF,MAA9B,CAAqC,KAAK6G,aAAL,CAAmB/F,YAAxD,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACU,MAAFzB,EAAE,GAAG;AACL,WAAO,KAAKwH,aAAL,CAAmB/F,YAA1B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,MAANvB,MAAM,GAAG;AACT,QAAI,KAAKsH,aAAL,CAAmBxB,UAAnB,CAA8B4E,UAAlC,EAA8C;AAC1C,aAAO,IAAIxL,iBAAJ,CAAsB,KAAKQ,SAA3B,EAAsC,KAAK4H,aAAL,CAAmBxB,UAAzD,CAAP;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACY,MAAJlG,IAAI,GAAG;AACP,WAAO,KAAKG,aAAL,CAAmBF,YAA1B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI0P,EAAAA,aAAa,GAAG;AACZ,UAAM1O,GAAG,GAAGnC,MAAM,CAACoC,UAAP,EAAZ;AACA,WAAO,KAAKpB,SAAL,CAAeqB,kBAAf,CAAkCF,GAAlC,EAAuCT,IAAvC,CAA4C,MAAM;AACrD,YAAM0F,UAAU,GAAG,KAAKwB,aAAL,CAAmBxB,UAAnB,CAA8BnG,uBAA9B,CAAsD,KAAKD,SAAL,CAAeD,SAArE,CAAnB;;AACA,YAAMuB,OAAO,GAAG;AACZhB,QAAAA,MAAM,EAAE8F,UAAU,CAACtG,aADP;AAEZ+B,QAAAA,YAAY,EAAE,KAAKzB,EAFP;AAGZ0P,QAAAA,WAAW,EAAE,IAHD;AAIZ;AACA;AACA;AACAvO,QAAAA,QAAQ,EAAEC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAPhB;AAQZsO,QAAAA,IAAI,EAAE;AAAExG,UAAAA,UAAU,EAAE;AAAd;AARM,OAAhB;AAUA,aAAO,KAAKvJ,SAAL,CACFsB,OADE,CACM,eADN,EACuBA,OADvB,EACgCH,GADhC,EAEFT,IAFE,CAEGsP,SAAS,IAAI;AACnB;AACA;AACA,eAAOA,SAAS,CAAC9G,GAAV,CAAcnD,GAAG,IAAI;AACxB,gBAAM7F,IAAI,GAAGtB,MAAM,CAACqR,qBAAP,CAA6BC,wBAA7B,CAAsDnK,GAAG,CAACoK,IAA1D,CAAb;AACA,iBAAO,KAAKpK,GAAL,CAAS7F,IAAI,CAACE,EAAd,CAAP;AACH,SAHM,CAAP;AAIH,OATM,CAAP;AAUH,KAtBM,CAAP;AAuBH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI2F,EAAAA,GAAG,CAACqK,YAAD,EAAe;AACd,QAAIvN,SAAS,CAAC6E,MAAV,KAAqB,CAAzB,EAA4B;AACxB0I,MAAAA,YAAY,GAAGpR,MAAM,CAACqR,MAAP,EAAf;AACH,KAFD,MAGK;AACDzR,MAAAA,MAAM,CAACkC,oBAAP,CAA4B,cAA5B,EAA4CsP,YAA5C;AACH;;AACD,UAAMlQ,IAAI,GAAG,KAAKG,aAAL,CAAmBU,MAAnB,CAA0BqP,YAA1B,CAAb;;AACA,QAAI,CAAClQ,IAAI,CAAC8K,UAAV,EAAsB;AAClB,YAAM,IAAI/J,KAAJ,CAAW,wEAAuEmP,YAAa,6DAA/F,CAAN;AACH;;AACD,WAAO,IAAI5Q,iBAAJ,CAAsB,KAAKQ,SAA3B,EAAsCE,IAAtC,EAA4C,KAAK0H,aAAL,CAAmBzD,SAA/D,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACImM,EAAAA,GAAG,CAACtO,IAAD,EAAO;AACN,UAAMuO,aAAa,GAAG,KAAK3I,aAAL,CAAmBzD,SAAnB,CAA6BqM,WAA7B,CAAyCxO,IAAzC,CAAtB;;AACA9C,IAAAA,aAAa,CAACuR,oBAAd,CAAmC,MAAnC,EAA2CF,aAA3C;AACA;AAAkB,SADlB,EACyB,KAAKxI,eAD9B;AAEA,UAAM2I,WAAW,GAAG,KAAK3K,GAAL,EAApB;AACA,WAAO2K,WAAW,CAAC3O,MAAZ,CAAmBC,IAAnB,EAAyBtB,IAAzB,CAA8B,MAAMgQ,WAApC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI5M,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACX,WAAQ,SAASA,KAAT,IACHA,KAAK,YAAYxD,mBAAjB,IAAwC,MAAMuD,OAAN,CAAcC,KAAd,CAD7C;AAEH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,aAAa,CAACC,SAAD,EAAY;AACrB,WAAO,IAAI5D,mBAAJ,CAAwB,KAAKP,SAA7B,EAAwC,KAAKK,aAA7C,EAA4D8D,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6CA,SAA7C,GAAyDpF,OAAO,CAACc,gBAAR,EAArH,CAAP;AACH;;AAzOmC;;AA2OxC1B,OAAO,CAACoC,mBAAR,GAA8BA,mBAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASqJ,kBAAT,CAA4B+G,GAA5B,EAAiCjM,EAAjC,EAAqC;AACjC;AACAA,EAAAA,EAAE,GAAG,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAE,CAACkM,WAAH,EAAzB,GAA4ClM,EAAjD;AACAzF,EAAAA,UAAU,CAAC4R,iBAAX,CAA6BF,GAA7B,EAAkCjM,EAAlC,EAAsCzG,MAAM,CAAC6S,IAAP,CAAY3R,kBAAZ,CAAtC,EAAuE;AAAE+D,IAAAA,QAAQ,EAAE;AAAZ,GAAvE;AACA,SAAOwB,EAAP;AACH;;AACDvG,OAAO,CAACyL,kBAAR,GAA6BA,kBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASf,qBAAT,CAA+B8H,GAA/B,EAAoCjM,EAApC,EAAwC8D,UAAxC,EAAoD;AAChD;AACA,MAAI9D,EAAE,KAAK,GAAX,EAAgB;AACZA,IAAAA,EAAE,GAAG,IAAL;AACH;;AACDzF,EAAAA,UAAU,CAAC4R,iBAAX,CAA6BF,GAA7B,EAAkCjM,EAAlC,EAAsCzG,MAAM,CAAC6S,IAAP,CAAYxR,mBAAZ,CAAtC;;AACA,MAAI,OAAOkJ,UAAP,KAAsB,QAAtB,IACA5D,KAAK,CAAC4D,UAAD,CADL,IAEA9D,EAAE,KAAK,IAFP,IAGAA,EAAE,KAAK,IAHX,EAGiB;AACb,UAAM,IAAIzD,KAAJ,CAAU,uEAAV,CAAN;AACH;;AACD,MAAIuH,UAAU,KAAK,IAAf,IAAuB9D,EAAE,KAAK,IAA9B,IAAsCA,EAAE,KAAK,IAAjD,EAAuD;AACnD,UAAM,IAAIzD,KAAJ,CAAU,wEAAV,CAAN;AACH;;AACD,SAAOyD,EAAP;AACH;;AACDvG,OAAO,CAAC0K,qBAAR,GAAgCA,qBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASkI,yBAAT,CAAmCJ,GAAnC,EAAwCvS,KAAxC,EAA+C;AAC3C,MAAI,EAAEA,KAAK,YAAYoB,iBAAnB,CAAJ,EAA2C;AACvC,UAAM,IAAIyB,KAAJ,CAAUhC,UAAU,CAAC+R,sBAAX,CAAkCL,GAAlC,EAAuC,mBAAvC,CAAV,CAAN;AACH;;AACD,SAAOvS,KAAP;AACH;;AACDD,OAAO,CAAC4S,yBAAR,GAAoCA,yBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASjI,kBAAT,CAA4B6H,GAA5B,EAAiCvS,KAAjC,EAAwC6S,cAAxC,EAAwD;AACpDpS,EAAAA,YAAY,CAACqS,iBAAb,CAA+BP,GAA/B,EAAoCvS,KAApC,EAA2C,kBAA3C,EAA+D;AAC3D+S,IAAAA,YAAY,EAAE,MAD6C;AAE3DC,IAAAA,eAAe,EAAE,KAF0C;AAG3DH,IAAAA;AAH2D,GAA/D;AAKH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAShL,YAAT,CAAsBoL,IAAtB,EAA4BC,KAA5B,EAAmC;AAC/B,MAAID,IAAI,CAAC3J,MAAL,KAAgB4J,KAAK,CAAC5J,MAA1B,EAAkC;AAC9B,WAAO,KAAP;AACH;;AACD,OAAK,IAAI+B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4H,IAAI,CAAC3J,MAAzB,EAAiC,EAAE+B,CAAnC,EAAsC;AAClC,QAAI,CAAC4H,IAAI,CAAC5H,CAAD,CAAJ,CAAQ3F,OAAR,CAAgBwN,KAAK,CAAC7H,CAAD,CAArB,CAAL,EAAgC;AAC5B,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASjC,QAAT,CAAkB,GAAGoD,MAArB,EAA6B;AACzB,SAAOA,MAAM,CAACL,IAAP,CAAYnM,KAAK,IAAIA,KAAK,KAAKqK,SAA/B,CAAP;AACH","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"stream\");\nconst deepEqual = require(\"fast-deep-equal\");\nconst document_1 = require(\"./document\");\nconst document_change_1 = require(\"./document-change\");\nconst logger_1 = require(\"./logger\");\nconst order_1 = require(\"./order\");\nconst path_1 = require(\"./path\");\nconst serializer_1 = require(\"./serializer\");\nconst timestamp_1 = require(\"./timestamp\");\nconst types_1 = require(\"./types\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\nconst write_batch_1 = require(\"./write-batch\");\n/**\n * The direction of a `Query.orderBy()` clause is specified as 'desc' or 'asc'\n * (descending or ascending).\n *\n * @private\n * @internal\n */\nconst directionOperators = {\n    asc: 'ASCENDING',\n    desc: 'DESCENDING',\n};\n/**\n * Filter conditions in a `Query.where()` clause are specified using the\n * strings '<', '<=', '==', '!=', '>=', '>', 'array-contains', 'in', 'not-in',\n * and 'array-contains-any'.\n *\n * @private\n * @internal\n */\nconst comparisonOperators = {\n    '<': 'LESS_THAN',\n    '<=': 'LESS_THAN_OR_EQUAL',\n    '==': 'EQUAL',\n    '!=': 'NOT_EQUAL',\n    '>': 'GREATER_THAN',\n    '>=': 'GREATER_THAN_OR_EQUAL',\n    'array-contains': 'ARRAY_CONTAINS',\n    in: 'IN',\n    'not-in': 'NOT_IN',\n    'array-contains-any': 'ARRAY_CONTAINS_ANY',\n};\n/**\n * onSnapshot() callback that receives a QuerySnapshot.\n *\n * @callback querySnapshotCallback\n * @param {QuerySnapshot} snapshot A query snapshot.\n */\n/**\n * onSnapshot() callback that receives a DocumentSnapshot.\n *\n * @callback documentSnapshotCallback\n * @param {DocumentSnapshot} snapshot A document snapshot.\n */\n/**\n * onSnapshot() callback that receives an error.\n *\n * @callback errorCallback\n * @param {Error} err An error from a listen.\n */\n/**\n * A DocumentReference refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist. A DocumentReference can\n * also be used to create a\n * [CollectionReference]{@link CollectionReference} to a\n * subcollection.\n *\n * @class DocumentReference\n */\nclass DocumentReference {\n    /**\n     * @hideconstructor\n     *\n     * @param _firestore The Firestore Database client.\n     * @param _path The Path of this reference.\n     */\n    constructor(_firestore, _path, _converter = types_1.defaultConverter()) {\n        this._firestore = _firestore;\n        this._path = _path;\n        this._converter = _converter;\n    }\n    /**\n     * The string representation of the DocumentReference's location.\n     * @private\n     * @internal\n     * @type {string}\n     * @name DocumentReference#formattedName\n     */\n    get formattedName() {\n        const projectId = this.firestore.projectId;\n        return this._path.toQualifiedResourcePath(projectId).formattedName;\n    }\n    /**\n     * The [Firestore]{@link Firestore} instance for the Firestore\n     * database (useful for performing transactions, etc.).\n     *\n     * @type {Firestore}\n     * @name DocumentReference#firestore\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   let firestore = documentReference.firestore;\n     *   console.log(`Root location for document is ${firestore.formattedName}`);\n     * });\n     */\n    get firestore() {\n        return this._firestore;\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     *\n     * @type {string}\n     * @name DocumentReference#path\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document at '${documentReference.path}'`);\n     * });\n     */\n    get path() {\n        return this._path.relativeName;\n    }\n    /**\n     * The last path element of the referenced document.\n     *\n     * @type {string}\n     * @name DocumentReference#id\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document with name '${documentReference.id}'`);\n     * });\n     */\n    get id() {\n        return this._path.id;\n    }\n    /**\n     * Returns a resource path for this document.\n     * @private\n     * @internal\n     */\n    get _resourcePath() {\n        return this._path;\n    }\n    /**\n     * A reference to the collection to which this DocumentReference belongs.\n     *\n     * @name DocumentReference#parent\n     * @type {CollectionReference}\n     * @readonly\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     * let collectionRef = documentRef.parent;\n     *\n     * collectionRef.where('foo', '==', 'bar').get().then(results => {\n     *   console.log(`Found ${results.size} matches in parent collection`);\n     * }):\n     */\n    get parent() {\n        return new CollectionReference(this._firestore, this._path.parent(), this._converter);\n    }\n    /**\n     * Reads the document referred to by this DocumentReference.\n     *\n     * @returns {Promise.<DocumentSnapshot>} A Promise resolved with a\n     * DocumentSnapshot for the retrieved document on success. For missing\n     * documents, DocumentSnapshot.exists will be false. If the get() fails for\n     * other reasons, the Promise will be rejected.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     console.log('Document retrieved successfully.');\n     *   }\n     * });\n     */\n    get() {\n        return this._firestore.getAll(this).then(([result]) => result);\n    }\n    /**\n     * Gets a [CollectionReference]{@link CollectionReference} instance\n     * that refers to the collection at the specified path.\n     *\n     * @param {string} collectionPath A slash-separated path to a collection.\n     * @returns {CollectionReference} A reference to the new\n     * subcollection.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     * let subcollection = documentRef.collection('subcollection');\n     * console.log(`Path to subcollection: ${subcollection.path}`);\n     */\n    collection(collectionPath) {\n        path_1.validateResourcePath('collectionPath', collectionPath);\n        const path = this._path.append(collectionPath);\n        if (!path.isCollection) {\n            throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\n        }\n        return new CollectionReference(this._firestore, path);\n    }\n    /**\n     * Fetches the subcollections that are direct children of this document.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.listCollections().then(collections => {\n     *   for (let collection of collections) {\n     *     console.log(`Found subcollection with id: ${collection.id}`);\n     *   }\n     * });\n     */\n    listCollections() {\n        const tag = util_1.requestTag();\n        return this.firestore.initializeIfNeeded(tag).then(() => {\n            const request = {\n                parent: this.formattedName,\n                // Setting `pageSize` to an arbitrarily large value lets the backend cap\n                // the page size (currently to 300). Note that the backend rejects\n                // MAX_INT32 (b/146883794).\n                pageSize: Math.pow(2, 16) - 1,\n            };\n            return this._firestore\n                .request('listCollectionIds', request, tag)\n                .then(collectionIds => {\n                const collections = [];\n                // We can just sort this list using the default comparator since it\n                // will only contain collection ids.\n                collectionIds.sort();\n                for (const collectionId of collectionIds) {\n                    collections.push(this.collection(collectionId));\n                }\n                return collections;\n            });\n        });\n    }\n    /**\n     * Create a document with the provided object values. This will fail the write\n     * if a document exists at its location.\n     *\n     * @param {DocumentData} data An object that contains the fields and data to\n     * serialize as the document.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * write time of this create.\n     *\n     * @example\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * documentRef.create({foo: 'bar'}).then((res) => {\n     *   console.log(`Document created at ${res.updateTime}`);\n     * }).catch((err) => {\n     *   console.log(`Failed to create document: ${err}`);\n     * });\n     */\n    create(data) {\n        const writeBatch = new write_batch_1.WriteBatch(this._firestore);\n        return writeBatch\n            .create(this, data)\n            .commit()\n            .then(([writeResult]) => writeResult);\n    }\n    /**\n     * Deletes the document referred to by this `DocumentReference`.\n     *\n     * A delete for a non-existing document is treated as a success (unless\n     * lastUptimeTime is provided).\n     *\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the delete if the\n     * document was last updated at a different time.\n     * @param {boolean=} precondition.exists If set, enforces that the target\n     * document must or must not exist.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * delete time.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.delete().then(() => {\n     *   console.log('Document successfully deleted.');\n     * });\n     */\n    delete(precondition) {\n        const writeBatch = new write_batch_1.WriteBatch(this._firestore);\n        return writeBatch\n            .delete(this, precondition)\n            .commit()\n            .then(([writeResult]) => writeResult);\n    }\n    /**\n     * Writes to the document referred to by this DocumentReference. If the\n     * document does not yet exist, it will be created. If you pass\n     * [SetOptions]{@link SetOptions}, the provided data can be merged into an\n     * existing document.\n     *\n     * @param {T|Partial<T>} data A map of the fields and values for the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge If true, set() merges the values specified\n     * in its data argument. Fields omitted from this set() call remain untouched.\n     * @param {Array.<string|FieldPath>=} options.mergeFields If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * write time of this set.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({foo: 'bar'}).then(res => {\n     *   console.log(`Document written at ${res.updateTime}`);\n     * });\n     */\n    set(data, options) {\n        const writeBatch = new write_batch_1.WriteBatch(this._firestore);\n        return writeBatch\n            .set(this, data, options)\n            .commit()\n            .then(([writeResult]) => writeResult);\n    }\n    /**\n     * Updates fields in the document referred to by this DocumentReference.\n     * If the document doesn't yet exist, the update fails and the returned\n     * Promise will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {UpdateData|string|FieldPath} dataOrField An object containing the\n     * fields and values with which to update the document or the path of the\n     * first field to update.\n     * @param {\n     * ...(*|string|FieldPath|Precondition)} preconditionOrValues An alternating\n     * list of field paths and values to update or a Precondition to restrict\n     * this update.\n     * @returns {Promise.<WriteResult>} A Promise that resolves once the\n     * data has been successfully written to the backend.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update({foo: 'bar'}).then(res => {\n     *   console.log(`Document updated at ${res.updateTime}`);\n     * });\n     */\n    update(dataOrField, ...preconditionOrValues) {\n        // eslint-disable-next-line prefer-rest-params\n        validate_1.validateMinNumberOfArguments('DocumentReference.update', arguments, 1);\n        const writeBatch = new write_batch_1.WriteBatch(this._firestore);\n        return writeBatch\n            .update(this, dataOrField, ...preconditionOrValues)\n            .commit()\n            .then(([writeResult]) => writeResult);\n    }\n    /**\n     * Attaches a listener for DocumentSnapshot events.\n     *\n     * @param {documentSnapshotCallback} onNext A callback to be called every\n     * time a new `DocumentSnapshot` is available.\n     * @param {errorCallback=} onError A callback to be called if the listen fails\n     * or is cancelled. No further callbacks will occur. If unset, errors will be\n     * logged to the console.\n     *\n     * @returns {function()} An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * let unsubscribe = documentRef.onSnapshot(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     console.log(documentSnapshot.data());\n     *   }\n     * }, err => {\n     *   console.log(`Encountered error: ${err}`);\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     */\n    onSnapshot(onNext, onError) {\n        validate_1.validateFunction('onNext', onNext);\n        validate_1.validateFunction('onError', onError, { optional: true });\n        const watch = new (require('./watch').DocumentWatch)(this.firestore, this);\n        return watch.onSnapshot((readTime, size, docs) => {\n            for (const document of docs()) {\n                if (document.ref.path === this.path) {\n                    onNext(document);\n                    return;\n                }\n            }\n            // The document is missing.\n            const ref = new DocumentReference(this._firestore, this._path, this._converter);\n            const document = new document_1.DocumentSnapshotBuilder(ref);\n            document.readTime = readTime;\n            onNext(document.build());\n        }, onError || console.error);\n    }\n    /**\n     * Returns true if this `DocumentReference` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `DocumentReference` is equal to the provided\n     * value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof DocumentReference &&\n                this._firestore === other._firestore &&\n                this._path.isEqual(other._path) &&\n                this._converter === other._converter));\n    }\n    /**\n     * Converts this DocumentReference to the Firestore Proto representation.\n     *\n     * @private\n     * @internal\n     */\n    toProto() {\n        return { referenceValue: this.formattedName };\n    }\n    /**\n     * Applies a custom data converter to this DocumentReference, allowing you to\n     * use your own custom model objects with Firestore. When you call set(),\n     * get(), etc. on the returned DocumentReference instance, the provided\n     * converter will convert between Firestore data and your custom type U.\n     *\n     * Using the converter allows you to specify generic type arguments when\n     * storing and retrieving objects from Firestore.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @example\n     * class Post {\n     *   constructor(readonly title: string, readonly author: string) {}\n     *\n     *   toString(): string {\n     *     return this.title + ', by ' + this.author;\n     *   }\n     * }\n     *\n     * const postConverter = {\n     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n     *     return {title: post.title, author: post.author};\n     *   },\n     *   fromFirestore(\n     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n     *   ): Post {\n     *     const data = snapshot.data();\n     *     return new Post(data.title, data.author);\n     *   }\n     * };\n     *\n     * const postSnap = await Firestore()\n     *   .collection('posts')\n     *   .withConverter(postConverter)\n     *   .doc().get();\n     * const post = postSnap.data();\n     * if (post !== undefined) {\n     *   post.title; // string\n     *   post.toString(); // Should be defined\n     *   post.someNonExistentProperty; // TS error\n     * }\n     *\n     * @param {FirestoreDataConverter | null} converter Converts objects to and\n     * from Firestore. Passing in `null` removes the current converter.\n     * @return A DocumentReference<U> that uses the provided converter.\n     */\n    withConverter(converter) {\n        return new DocumentReference(this.firestore, this._path, converter !== null && converter !== void 0 ? converter : types_1.defaultConverter());\n    }\n}\nexports.DocumentReference = DocumentReference;\n/**\n * A Query order-by field.\n *\n * @private\n * @internal\n * @class\n */\nclass FieldOrder {\n    /**\n     * @param field The name of a document field (member) on which to order query\n     * results.\n     * @param direction One of 'ASCENDING' (default) or 'DESCENDING' to\n     * set the ordering direction to ascending or descending, respectively.\n     */\n    constructor(field, direction = 'ASCENDING') {\n        this.field = field;\n        this.direction = direction;\n    }\n    /**\n     * Generates the proto representation for this field order.\n     * @private\n     * @internal\n     */\n    toProto() {\n        return {\n            field: {\n                fieldPath: this.field.formattedName,\n            },\n            direction: this.direction,\n        };\n    }\n}\nexports.FieldOrder = FieldOrder;\n/**\n * A field constraint for a Query where clause.\n *\n * @private\n * @internal\n * @class\n */\nclass FieldFilter {\n    /**\n     * @param serializer The Firestore serializer\n     * @param field The path of the property value to compare.\n     * @param op A comparison operation.\n     * @param value The value to which to compare the field for inclusion in a\n     * query.\n     */\n    constructor(serializer, field, op, value) {\n        this.serializer = serializer;\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    /**\n     * Returns whether this FieldFilter uses an equals comparison.\n     *\n     * @private\n     * @internal\n     */\n    isInequalityFilter() {\n        switch (this.op) {\n            case 'GREATER_THAN':\n            case 'GREATER_THAN_OR_EQUAL':\n            case 'LESS_THAN':\n            case 'LESS_THAN_OR_EQUAL':\n                return true;\n            default:\n                return false;\n        }\n    }\n    /**\n     * Generates the proto representation for this field filter.\n     *\n     * @private\n     * @internal\n     */\n    toProto() {\n        if (typeof this.value === 'number' && isNaN(this.value)) {\n            return {\n                unaryFilter: {\n                    field: {\n                        fieldPath: this.field.formattedName,\n                    },\n                    op: this.op === 'EQUAL' ? 'IS_NAN' : 'IS_NOT_NAN',\n                },\n            };\n        }\n        if (this.value === null) {\n            return {\n                unaryFilter: {\n                    field: {\n                        fieldPath: this.field.formattedName,\n                    },\n                    op: this.op === 'EQUAL' ? 'IS_NULL' : 'IS_NOT_NULL',\n                },\n            };\n        }\n        return {\n            fieldFilter: {\n                field: {\n                    fieldPath: this.field.formattedName,\n                },\n                op: this.op,\n                value: this.serializer.encodeValue(this.value),\n            },\n        };\n    }\n}\n/**\n * A QuerySnapshot contains zero or more\n * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} objects\n * representing the results of a query. The documents can be accessed as an\n * array via the [documents]{@link QuerySnapshot#documents} property\n * or enumerated using the [forEach]{@link QuerySnapshot#forEach}\n * method. The number of documents can be determined via the\n * [empty]{@link QuerySnapshot#empty} and\n * [size]{@link QuerySnapshot#size} properties.\n *\n * @class QuerySnapshot\n */\nclass QuerySnapshot {\n    /**\n     * @hideconstructor\n     *\n     * @param _query The originating query.\n     * @param _readTime The time when this query snapshot was obtained.\n     * @param _size The number of documents in the result set.\n     * @param docs A callback returning a sorted array of documents matching\n     * this query\n     * @param changes A callback returning a sorted array of document change\n     * events for this snapshot.\n     */\n    constructor(_query, _readTime, _size, docs, changes) {\n        this._query = _query;\n        this._readTime = _readTime;\n        this._size = _size;\n        this._materializedDocs = null;\n        this._materializedChanges = null;\n        this._docs = null;\n        this._changes = null;\n        this._docs = docs;\n        this._changes = changes;\n    }\n    /**\n     * The query on which you called get() or onSnapshot() in order to get this\n     * QuerySnapshot.\n     *\n     * @type {Query}\n     * @name QuerySnapshot#query\n     * @readonly\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.limit(10).get().then(querySnapshot => {\n     *   console.log(`Returned first batch of results`);\n     *   let query = querySnapshot.query;\n     *   return query.offset(10).get();\n     * }).then(() => {\n     *   console.log(`Returned second batch of results`);\n     * });\n     */\n    get query() {\n        return this._query;\n    }\n    /**\n     * An array of all the documents in this QuerySnapshot.\n     *\n     * @type {Array.<QueryDocumentSnapshot>}\n     * @name QuerySnapshot#docs\n     * @readonly\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   let docs = querySnapshot.docs;\n     *   for (let doc of docs) {\n     *     console.log(`Document found at path: ${doc.ref.path}`);\n     *   }\n     * });\n     */\n    get docs() {\n        if (this._materializedDocs) {\n            return this._materializedDocs;\n        }\n        this._materializedDocs = this._docs();\n        this._docs = null;\n        return this._materializedDocs;\n    }\n    /**\n     * True if there are no documents in the QuerySnapshot.\n     *\n     * @type {boolean}\n     * @name QuerySnapshot#empty\n     * @readonly\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   if (querySnapshot.empty) {\n     *     console.log('No documents found.');\n     *   }\n     * });\n     */\n    get empty() {\n        return this._size === 0;\n    }\n    /**\n     * The number of documents in the QuerySnapshot.\n     *\n     * @type {number}\n     * @name QuerySnapshot#size\n     * @readonly\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   console.log(`Found ${querySnapshot.size} documents.`);\n     * });\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * The time this query snapshot was obtained.\n     *\n     * @type {Timestamp}\n     * @name QuerySnapshot#readTime\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then((querySnapshot) => {\n     *   let readTime = querySnapshot.readTime;\n     *   console.log(`Query results returned at '${readTime.toDate()}'`);\n     * });\n     */\n    get readTime() {\n        return this._readTime;\n    }\n    /**\n     * Returns an array of the documents changes since the last snapshot. If\n     * this is the first snapshot, all documents will be in the list as added\n     * changes.\n     *\n     * @return {Array.<DocumentChange>}\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.onSnapshot(querySnapshot => {\n     *   let changes = querySnapshot.docChanges();\n     *   for (let change of changes) {\n     *     console.log(`A document was ${change.type}.`);\n     *   }\n     * });\n     */\n    docChanges() {\n        if (this._materializedChanges) {\n            return this._materializedChanges;\n        }\n        this._materializedChanges = this._changes();\n        this._changes = null;\n        return this._materializedChanges;\n    }\n    /**\n     * Enumerates all of the documents in the QuerySnapshot. This is a convenience\n     * method for running the same callback on each {@link QueryDocumentSnapshot}\n     * that is returned.\n     *\n     * @param {function} callback A callback to be called with a\n     * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} for each document in\n     * the snapshot.\n     * @param {*=} thisArg The `this` binding for the callback..\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Document found at path: ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    forEach(callback, thisArg) {\n        validate_1.validateFunction('callback', callback);\n        for (const doc of this.docs) {\n            callback.call(thisArg, doc);\n        }\n    }\n    /**\n     * Returns true if the document data in this `QuerySnapshot` is equal to the\n     * provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `QuerySnapshot` is equal to the provided\n     * value.\n     */\n    isEqual(other) {\n        // Since the read time is different on every query read, we explicitly\n        // ignore all metadata in this comparison.\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof QuerySnapshot)) {\n            return false;\n        }\n        if (this._size !== other._size) {\n            return false;\n        }\n        if (!this._query.isEqual(other._query)) {\n            return false;\n        }\n        if (this._materializedDocs && !this._materializedChanges) {\n            // If we have only materialized the documents, we compare them first.\n            return (isArrayEqual(this.docs, other.docs) &&\n                isArrayEqual(this.docChanges(), other.docChanges()));\n        }\n        // Otherwise, we compare the changes first as we expect there to be fewer.\n        return (isArrayEqual(this.docChanges(), other.docChanges()) &&\n            isArrayEqual(this.docs, other.docs));\n    }\n}\nexports.QuerySnapshot = QuerySnapshot;\n/*!\n * Denotes whether a provided limit is applied to the beginning or the end of\n * the result set.\n */\nvar LimitType;\n(function (LimitType) {\n    LimitType[LimitType[\"First\"] = 0] = \"First\";\n    LimitType[LimitType[\"Last\"] = 1] = \"Last\";\n})(LimitType || (LimitType = {}));\n/**\n * Internal class representing custom Query options.\n *\n * These options are immutable. Modified options can be created using `with()`.\n * @private\n * @internal\n */\nclass QueryOptions {\n    constructor(parentPath, collectionId, converter, allDescendants, fieldFilters, fieldOrders, startAt, endAt, limit, limitType, offset, projection, \n    // Whether to select all documents under `parentPath`. By default, only\n    // collections that match `collectionId` are selected.\n    kindless = false, \n    // Whether to require consistent documents when restarting the query. By\n    // default, restarting the query uses the readTime offset of the original\n    // query to provide consistent results.\n    requireConsistency = true) {\n        this.parentPath = parentPath;\n        this.collectionId = collectionId;\n        this.converter = converter;\n        this.allDescendants = allDescendants;\n        this.fieldFilters = fieldFilters;\n        this.fieldOrders = fieldOrders;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.limit = limit;\n        this.limitType = limitType;\n        this.offset = offset;\n        this.projection = projection;\n        this.kindless = kindless;\n        this.requireConsistency = requireConsistency;\n    }\n    /**\n     * Returns query options for a collection group query.\n     * @private\n     * @internal\n     */\n    static forCollectionGroupQuery(collectionId, converter = types_1.defaultConverter()) {\n        return new QueryOptions(\n        /*parentPath=*/ path_1.ResourcePath.EMPTY, collectionId, converter, \n        /*allDescendants=*/ true, \n        /*fieldFilters=*/ [], \n        /*fieldOrders=*/ []);\n    }\n    /**\n     * Returns query options for a single-collection query.\n     * @private\n     * @internal\n     */\n    static forCollectionQuery(collectionRef, converter = types_1.defaultConverter()) {\n        return new QueryOptions(collectionRef.parent(), collectionRef.id, converter, \n        /*allDescendants=*/ false, \n        /*fieldFilters=*/ [], \n        /*fieldOrders=*/ []);\n    }\n    /**\n     * Returns query options for a query that fetches all descendants under the\n     * specified reference.\n     *\n     * @private\n     * @internal\n     */\n    static forKindlessAllDescendants(parent, id, requireConsistency = true) {\n        let options = new QueryOptions(parent, id, types_1.defaultConverter(), \n        /*allDescendants=*/ true, \n        /*fieldFilters=*/ [], \n        /*fieldOrders=*/ []);\n        options = options.with({\n            kindless: true,\n            requireConsistency,\n        });\n        return options;\n    }\n    /**\n     * Returns the union of the current and the provided options.\n     * @private\n     * @internal\n     */\n    with(settings) {\n        return new QueryOptions(coalesce(settings.parentPath, this.parentPath), coalesce(settings.collectionId, this.collectionId), this.converter, coalesce(settings.allDescendants, this.allDescendants), coalesce(settings.fieldFilters, this.fieldFilters), coalesce(settings.fieldOrders, this.fieldOrders), coalesce(settings.startAt, this.startAt), coalesce(settings.endAt, this.endAt), coalesce(settings.limit, this.limit), coalesce(settings.limitType, this.limitType), coalesce(settings.offset, this.offset), coalesce(settings.projection, this.projection), coalesce(settings.kindless, this.kindless), coalesce(settings.requireConsistency, this.requireConsistency));\n    }\n    withConverter(converter) {\n        return new QueryOptions(this.parentPath, this.collectionId, converter, this.allDescendants, this.fieldFilters, this.fieldOrders, this.startAt, this.endAt, this.limit, this.limitType, this.offset, this.projection);\n    }\n    hasFieldOrders() {\n        return this.fieldOrders.length > 0;\n    }\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        return (other instanceof QueryOptions &&\n            this.parentPath.isEqual(other.parentPath) &&\n            this.collectionId === other.collectionId &&\n            this.converter === other.converter &&\n            this.allDescendants === other.allDescendants &&\n            this.limit === other.limit &&\n            this.offset === other.offset &&\n            deepEqual(this.fieldFilters, other.fieldFilters) &&\n            deepEqual(this.fieldOrders, other.fieldOrders) &&\n            deepEqual(this.startAt, other.startAt) &&\n            deepEqual(this.endAt, other.endAt) &&\n            deepEqual(this.projection, other.projection) &&\n            this.kindless === other.kindless &&\n            this.requireConsistency === other.requireConsistency);\n    }\n}\nexports.QueryOptions = QueryOptions;\n/**\n * A Query refers to a query which you can read or stream from. You can also\n * construct refined Query objects by adding filters and ordering.\n *\n * @class Query\n */\nclass Query {\n    /**\n     * @hideconstructor\n     *\n     * @param _firestore The Firestore Database client.\n     * @param _queryOptions Options that define the query.\n     */\n    constructor(_firestore, _queryOptions) {\n        this._firestore = _firestore;\n        this._queryOptions = _queryOptions;\n        this._serializer = new serializer_1.Serializer(_firestore);\n        this._allowUndefined =\n            !!this._firestore._settings.ignoreUndefinedProperties;\n    }\n    /**\n     * Extracts field values from the DocumentSnapshot based on the provided\n     * field order.\n     *\n     * @private\n     * @internal\n     * @param documentSnapshot The document to extract the fields from.\n     * @param fieldOrders The field order that defines what fields we should\n     * extract.\n     * @return {Array.<*>} The field values to use.\n     * @private\n     * @internal\n     */\n    static _extractFieldValues(documentSnapshot, fieldOrders) {\n        const fieldValues = [];\n        for (const fieldOrder of fieldOrders) {\n            if (path_1.FieldPath.documentId().isEqual(fieldOrder.field)) {\n                fieldValues.push(documentSnapshot.ref);\n            }\n            else {\n                const fieldValue = documentSnapshot.get(fieldOrder.field);\n                if (fieldValue === undefined) {\n                    throw new Error(`Field \"${fieldOrder.field}\" is missing in the provided DocumentSnapshot. ` +\n                        'Please provide a document that contains values for all specified ' +\n                        'orderBy() and where() constraints.');\n                }\n                else {\n                    fieldValues.push(fieldValue);\n                }\n            }\n        }\n        return fieldValues;\n    }\n    /**\n     * The [Firestore]{@link Firestore} instance for the Firestore\n     * database (useful for performing transactions, etc.).\n     *\n     * @type {Firestore}\n     * @name Query#firestore\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   let firestore = documentReference.firestore;\n     *   console.log(`Root location for document is ${firestore.formattedName}`);\n     * });\n     */\n    get firestore() {\n        return this._firestore;\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} with the additional filter\n     * that documents must contain the specified field and that its value should\n     * satisfy the relation constraint provided.\n     *\n     * Returns a new Query that constrains the value of a Document property.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the filter.\n     *\n     * @param {string|FieldPath} fieldPath The name of a property value to compare.\n     * @param {string} opStr A comparison operation in the form of a string\n     * (e.g., \"<\").\n     * @param {*} value The value to which to compare the field for inclusion in\n     * a query.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.where('foo', '==', 'bar').get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    where(fieldPath, opStr, value) {\n        path_1.validateFieldPath('fieldPath', fieldPath);\n        opStr = validateQueryOperator('opStr', opStr, value);\n        validateQueryValue('value', value, this._allowUndefined);\n        if (this._queryOptions.startAt || this._queryOptions.endAt) {\n            throw new Error('Cannot specify a where() filter after calling startAt(), ' +\n                'startAfter(), endBefore() or endAt().');\n        }\n        const path = path_1.FieldPath.fromArgument(fieldPath);\n        if (path_1.FieldPath.documentId().isEqual(path)) {\n            if (opStr === 'array-contains' || opStr === 'array-contains-any') {\n                throw new Error(`Invalid Query. You can't perform '${opStr}' ` +\n                    'queries on FieldPath.documentId().');\n            }\n            if (opStr === 'in' || opStr === 'not-in') {\n                if (!Array.isArray(value) || value.length === 0) {\n                    throw new Error(`Invalid Query. A non-empty array is required for '${opStr}' filters.`);\n                }\n                value = value.map(el => this.validateReference(el));\n            }\n            else {\n                value = this.validateReference(value);\n            }\n        }\n        const fieldFilter = new FieldFilter(this._serializer, path, comparisonOperators[opStr], value);\n        const options = this._queryOptions.with({\n            fieldFilters: this._queryOptions.fieldFilters.concat(fieldFilter),\n        });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} instance that applies a\n     * field mask to the result and returns only the specified subset of fields.\n     * You can specify a list of field paths to return, or use an empty list to\n     * only return the references of matching documents.\n     *\n     * Queries that contain field masks cannot be listened to via `onSnapshot()`\n     * listeners.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the field mask.\n     *\n     * @param {...(string|FieldPath)} fieldPaths The field paths to return.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     * let documentRef = collectionRef.doc('doc');\n     *\n     * return documentRef.set({x:10, y:5}).then(() => {\n     *   return collectionRef.where('x', '>', 5).select('y').get();\n     * }).then((res) => {\n     *   console.log(`y is ${res.docs[0].get('y')}.`);\n     * });\n     */\n    select(...fieldPaths) {\n        const fields = [];\n        if (fieldPaths.length === 0) {\n            fields.push({ fieldPath: path_1.FieldPath.documentId().formattedName });\n        }\n        else {\n            for (let i = 0; i < fieldPaths.length; ++i) {\n                path_1.validateFieldPath(i, fieldPaths[i]);\n                fields.push({\n                    fieldPath: path_1.FieldPath.fromArgument(fieldPaths[i]).formattedName,\n                });\n            }\n        }\n        // By specifying a field mask, the query result no longer conforms to type\n        // `T`. We there return `Query<DocumentData>`;\n        const options = this._queryOptions.with({\n            projection: { fields },\n        });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that's additionally sorted\n     * by the specified field, optionally in descending order instead of\n     * ascending.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the field mask.\n     *\n     * @param {string|FieldPath} fieldPath The field to sort by.\n     * @param {string=} directionStr Optional direction to sort by ('asc' or\n     * 'desc'). If not specified, order will be ascending.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.orderBy('foo', 'desc').get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    orderBy(fieldPath, directionStr) {\n        path_1.validateFieldPath('fieldPath', fieldPath);\n        directionStr = validateQueryOrder('directionStr', directionStr);\n        if (this._queryOptions.startAt || this._queryOptions.endAt) {\n            throw new Error('Cannot specify an orderBy() constraint after calling ' +\n                'startAt(), startAfter(), endBefore() or endAt().');\n        }\n        const newOrder = new FieldOrder(path_1.FieldPath.fromArgument(fieldPath), directionOperators[directionStr || 'asc']);\n        const options = this._queryOptions.with({\n            fieldOrders: this._queryOptions.fieldOrders.concat(newOrder),\n        });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that only returns the\n     * first matching documents.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the limit.\n     *\n     * @param {number} limit The maximum number of items to return.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limit(1).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    limit(limit) {\n        validate_1.validateInteger('limit', limit);\n        const options = this._queryOptions.with({\n            limit,\n            limitType: LimitType.First,\n        });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that only returns the\n     * last matching documents.\n     *\n     * You must specify at least one orderBy clause for limitToLast queries,\n     * otherwise an exception will be thrown during execution.\n     *\n     * Results for limitToLast queries cannot be streamed via the `stream()` API.\n     *\n     * @param limit The maximum number of items to return.\n     * @return The created Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limitToLast(1).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Last matching document is ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    limitToLast(limit) {\n        validate_1.validateInteger('limitToLast', limit);\n        const options = this._queryOptions.with({ limit, limitType: LimitType.Last });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Specifies the offset of the returned results.\n     *\n     * This function returns a new (immutable) instance of the\n     * [Query]{@link Query} (rather than modify the existing instance)\n     * to impose the offset.\n     *\n     * @param {number} offset The offset to apply to the Query results\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limit(10).offset(20).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    offset(offset) {\n        validate_1.validateInteger('offset', offset);\n        const options = this._queryOptions.with({ offset });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Returns true if this `Query` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `Query` is equal to the provided value.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        return (other instanceof Query && this._queryOptions.isEqual(other._queryOptions));\n    }\n    /**\n     * Computes the backend ordering semantics for DocumentSnapshot cursors.\n     *\n     * @private\n     * @internal\n     * @param cursorValuesOrDocumentSnapshot The snapshot of the document or the\n     * set of field values to use as the boundary.\n     * @returns The implicit ordering semantics.\n     */\n    createImplicitOrderBy(cursorValuesOrDocumentSnapshot) {\n        // Add an implicit orderBy if the only cursor value is a DocumentSnapshot\n        // or a DocumentReference.\n        if (cursorValuesOrDocumentSnapshot.length !== 1 ||\n            !(cursorValuesOrDocumentSnapshot[0] instanceof document_1.DocumentSnapshot ||\n                cursorValuesOrDocumentSnapshot[0] instanceof DocumentReference)) {\n            return this._queryOptions.fieldOrders;\n        }\n        const fieldOrders = this._queryOptions.fieldOrders.slice();\n        // If no explicit ordering is specified, use the first inequality to\n        // define an implicit order.\n        if (fieldOrders.length === 0) {\n            for (const fieldFilter of this._queryOptions.fieldFilters) {\n                if (fieldFilter.isInequalityFilter()) {\n                    fieldOrders.push(new FieldOrder(fieldFilter.field));\n                    break;\n                }\n            }\n        }\n        const hasDocumentId = !!fieldOrders.find(fieldOrder => path_1.FieldPath.documentId().isEqual(fieldOrder.field));\n        if (!hasDocumentId) {\n            // Add implicit sorting by name, using the last specified direction.\n            const lastDirection = fieldOrders.length === 0\n                ? directionOperators.ASC\n                : fieldOrders[fieldOrders.length - 1].direction;\n            fieldOrders.push(new FieldOrder(path_1.FieldPath.documentId(), lastDirection));\n        }\n        return fieldOrders;\n    }\n    /**\n     * Builds a Firestore 'Position' proto message.\n     *\n     * @private\n     * @internal\n     * @param {Array.<FieldOrder>} fieldOrders The field orders to use for this\n     * cursor.\n     * @param {Array.<DocumentSnapshot|*>} cursorValuesOrDocumentSnapshot The\n     * snapshot of the document or the set of field values to use as the boundary.\n     * @param before Whether the query boundary lies just before or after the\n     * provided data.\n     * @returns {Object} The proto message.\n     */\n    createCursor(fieldOrders, cursorValuesOrDocumentSnapshot, before) {\n        let fieldValues;\n        if (cursorValuesOrDocumentSnapshot.length === 1 &&\n            cursorValuesOrDocumentSnapshot[0] instanceof document_1.DocumentSnapshot) {\n            fieldValues = Query._extractFieldValues(cursorValuesOrDocumentSnapshot[0], fieldOrders);\n        }\n        else {\n            fieldValues = cursorValuesOrDocumentSnapshot;\n        }\n        if (fieldValues.length > fieldOrders.length) {\n            throw new Error('Too many cursor values specified. The specified ' +\n                'values must match the orderBy() constraints of the query.');\n        }\n        const options = { values: [], before };\n        for (let i = 0; i < fieldValues.length; ++i) {\n            let fieldValue = fieldValues[i];\n            if (path_1.FieldPath.documentId().isEqual(fieldOrders[i].field)) {\n                fieldValue = this.validateReference(fieldValue);\n            }\n            validateQueryValue(i, fieldValue, this._allowUndefined);\n            options.values.push(this._serializer.encodeValue(fieldValue));\n        }\n        return options;\n    }\n    /**\n     * Validates that a value used with FieldValue.documentId() is either a\n     * string or a DocumentReference that is part of the query`s result set.\n     * Throws a validation error or returns a DocumentReference that can\n     * directly be used in the Query.\n     *\n     * @param val The value to validate.\n     * @throws If the value cannot be used for this query.\n     * @return If valid, returns a DocumentReference that can be used with the\n     * query.\n     * @private\n     * @internal\n     */\n    validateReference(val) {\n        const basePath = this._queryOptions.allDescendants\n            ? this._queryOptions.parentPath\n            : this._queryOptions.parentPath.append(this._queryOptions.collectionId);\n        let reference;\n        if (typeof val === 'string') {\n            const path = basePath.append(val);\n            if (this._queryOptions.allDescendants) {\n                if (!path.isDocument) {\n                    throw new Error('When querying a collection group and ordering by ' +\n                        'FieldPath.documentId(), the corresponding value must result in ' +\n                        `a valid document path, but '${val}' is not because it ` +\n                        'contains an odd number of segments.');\n                }\n            }\n            else if (val.indexOf('/') !== -1) {\n                throw new Error('When querying a collection and ordering by FieldPath.documentId(), ' +\n                    `the corresponding value must be a plain document ID, but '${val}' ` +\n                    'contains a slash.');\n            }\n            reference = new DocumentReference(this._firestore, basePath.append(val), this._queryOptions.converter);\n        }\n        else if (val instanceof DocumentReference) {\n            reference = val;\n            if (!basePath.isPrefixOf(reference._path)) {\n                throw new Error(`\"${reference.path}\" is not part of the query result set and ` +\n                    'cannot be used as a query boundary.');\n            }\n        }\n        else {\n            throw new Error('The corresponding value for FieldPath.documentId() must be a ' +\n                `string or a DocumentReference, but was \"${val}\".`);\n        }\n        if (!this._queryOptions.allDescendants &&\n            reference._path.parent().compareTo(basePath) !== 0) {\n            throw new Error('Only a direct child can be used as a query boundary. ' +\n                `Found: \"${reference.path}\".`);\n        }\n        return reference;\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that starts at the provided\n     * set of field values relative to the order of the query. The order of the\n     * provided values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should start at or the field values to\n     * start this query at, in order of the query's order by.\n     * @returns {Query} A query with the new starting point.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').startAt(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    startAt(...fieldValuesOrDocumentSnapshot) {\n        validate_1.validateMinNumberOfArguments('Query.startAt', fieldValuesOrDocumentSnapshot, 1);\n        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n        const startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);\n        const options = this._queryOptions.with({ fieldOrders, startAt });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that starts after the\n     * provided set of field values relative to the order of the query. The order\n     * of the provided values must match the order of the order by clauses of the\n     * query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should start after or the field values to\n     * start this query after, in order of the query's order by.\n     * @returns {Query} A query with the new starting point.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').startAfter(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    startAfter(...fieldValuesOrDocumentSnapshot) {\n        validate_1.validateMinNumberOfArguments('Query.startAfter', fieldValuesOrDocumentSnapshot, 1);\n        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n        const startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);\n        const options = this._queryOptions.with({ fieldOrders, startAt });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that ends before the set of\n     * field values relative to the order of the query. The order of the provided\n     * values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should end before or the field values to\n     * end this query before, in order of the query's order by.\n     * @returns {Query} A query with the new ending point.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').endBefore(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    endBefore(...fieldValuesOrDocumentSnapshot) {\n        validate_1.validateMinNumberOfArguments('Query.endBefore', fieldValuesOrDocumentSnapshot, 1);\n        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n        const endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);\n        const options = this._queryOptions.with({ fieldOrders, endAt });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that ends at the provided\n     * set of field values relative to the order of the query. The order of the\n     * provided values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should end at or the field values to end\n     * this query at, in order of the query's order by.\n     * @returns {Query} A query with the new ending point.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').endAt(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    endAt(...fieldValuesOrDocumentSnapshot) {\n        validate_1.validateMinNumberOfArguments('Query.endAt', fieldValuesOrDocumentSnapshot, 1);\n        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n        const endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);\n        const options = this._queryOptions.with({ fieldOrders, endAt });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Executes the query and returns the results as a\n     * [QuerySnapshot]{@link QuerySnapshot}.\n     *\n     * @returns {Promise.<QuerySnapshot>} A Promise that resolves with the results\n     * of the Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    get() {\n        return this._get();\n    }\n    /**\n     * Internal get() method that accepts an optional transaction id.\n     *\n     * @private\n     * @internal\n     * @param {bytes=} transactionId A transaction ID.\n     */\n    _get(transactionId) {\n        const docs = [];\n        // Capture the error stack to preserve stack tracing across async calls.\n        const stack = Error().stack;\n        return new Promise((resolve, reject) => {\n            let readTime;\n            this._stream(transactionId)\n                .on('error', err => {\n                reject(util_1.wrapError(err, stack));\n            })\n                .on('data', result => {\n                readTime = result.readTime;\n                if (result.document) {\n                    docs.push(result.document);\n                }\n            })\n                .on('end', () => {\n                if (this._queryOptions.limitType === LimitType.Last) {\n                    // The results for limitToLast queries need to be flipped since\n                    // we reversed the ordering constraints before sending the query\n                    // to the backend.\n                    docs.reverse();\n                }\n                resolve(new QuerySnapshot(this, readTime, docs.length, () => docs, () => {\n                    const changes = [];\n                    for (let i = 0; i < docs.length; ++i) {\n                        changes.push(new document_change_1.DocumentChange('added', docs[i], -1, i));\n                    }\n                    return changes;\n                }));\n            });\n        });\n    }\n    /**\n     * Executes the query and streams the results as\n     * [QueryDocumentSnapshots]{@link QueryDocumentSnapshot}.\n     *\n     * @returns {Stream.<QueryDocumentSnapshot>} A stream of\n     * QueryDocumentSnapshots.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let count = 0;\n     *\n     * query.stream().on('data', (documentSnapshot) => {\n     *   console.log(`Found document with name '${documentSnapshot.id}'`);\n     *   ++count;\n     * }).on('end', () => {\n     *   console.log(`Total count is ${count}`);\n     * });\n     */\n    stream() {\n        if (this._queryOptions.limitType === LimitType.Last) {\n            throw new Error('Query results for queries that include limitToLast() ' +\n                'constraints cannot be streamed. Use Query.get() instead.');\n        }\n        const responseStream = this._stream();\n        const transform = new stream_1.Transform({\n            objectMode: true,\n            transform(chunk, encoding, callback) {\n                callback(undefined, chunk.document);\n            },\n        });\n        responseStream.pipe(transform);\n        responseStream.on('error', e => transform.destroy(e));\n        return transform;\n    }\n    /**\n     * Converts a QueryCursor to its proto representation.\n     *\n     * @param cursor The original cursor value\n     * @private\n     * @internal\n     */\n    toCursor(cursor) {\n        if (cursor) {\n            return cursor.before\n                ? { before: true, values: cursor.values }\n                : { values: cursor.values };\n        }\n        return undefined;\n    }\n    /**\n     * Internal method for serializing a query to its RunQuery proto\n     * representation with an optional transaction id or read time.\n     *\n     * @param transactionIdOrReadTime A transaction ID or the read time at which\n     * to execute the query.\n     * @private\n     * @internal\n     * @returns Serialized JSON for the query.\n     */\n    toProto(transactionIdOrReadTime) {\n        const projectId = this.firestore.projectId;\n        const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(projectId);\n        const structuredQuery = this.toStructuredQuery();\n        // For limitToLast queries, the structured query has to be translated to a version with\n        // reversed ordered, and flipped startAt/endAt to work properly.\n        if (this._queryOptions.limitType === LimitType.Last) {\n            if (!this._queryOptions.hasFieldOrders()) {\n                throw new Error('limitToLast() queries require specifying at least one orderBy() clause.');\n            }\n            structuredQuery.orderBy = this._queryOptions.fieldOrders.map(order => {\n                // Flip the orderBy directions since we want the last results\n                const dir = order.direction === 'DESCENDING' ? 'ASCENDING' : 'DESCENDING';\n                return new FieldOrder(order.field, dir).toProto();\n            });\n            // Swap the cursors to match the now-flipped query ordering.\n            structuredQuery.startAt = this._queryOptions.endAt\n                ? this.toCursor({\n                    values: this._queryOptions.endAt.values,\n                    before: !this._queryOptions.endAt.before,\n                })\n                : undefined;\n            structuredQuery.endAt = this._queryOptions.startAt\n                ? this.toCursor({\n                    values: this._queryOptions.startAt.values,\n                    before: !this._queryOptions.startAt.before,\n                })\n                : undefined;\n        }\n        const runQueryRequest = {\n            parent: parentPath.formattedName,\n            structuredQuery,\n        };\n        if (transactionIdOrReadTime instanceof Uint8Array) {\n            runQueryRequest.transaction = transactionIdOrReadTime;\n        }\n        else if (transactionIdOrReadTime instanceof timestamp_1.Timestamp) {\n            runQueryRequest.readTime =\n                transactionIdOrReadTime.toProto().timestampValue;\n        }\n        return runQueryRequest;\n    }\n    /**\n     * Converts current Query to an IBundledQuery.\n     *\n     * @private\n     * @internal\n     */\n    _toBundledQuery() {\n        const projectId = this.firestore.projectId;\n        const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(projectId);\n        const structuredQuery = this.toStructuredQuery();\n        const bundledQuery = {\n            parent: parentPath.formattedName,\n            structuredQuery,\n        };\n        if (this._queryOptions.limitType === LimitType.First) {\n            bundledQuery.limitType = 'FIRST';\n        }\n        else if (this._queryOptions.limitType === LimitType.Last) {\n            bundledQuery.limitType = 'LAST';\n        }\n        return bundledQuery;\n    }\n    toStructuredQuery() {\n        const structuredQuery = {\n            from: [{}],\n        };\n        if (this._queryOptions.allDescendants) {\n            structuredQuery.from[0].allDescendants = true;\n        }\n        // Kindless queries select all descendant documents, so we remove the\n        // collectionId field.\n        if (!this._queryOptions.kindless) {\n            structuredQuery.from[0].collectionId = this._queryOptions.collectionId;\n        }\n        if (this._queryOptions.fieldFilters.length === 1) {\n            structuredQuery.where = this._queryOptions.fieldFilters[0].toProto();\n        }\n        else if (this._queryOptions.fieldFilters.length > 1) {\n            const filters = [];\n            for (const fieldFilter of this._queryOptions.fieldFilters) {\n                filters.push(fieldFilter.toProto());\n            }\n            structuredQuery.where = {\n                compositeFilter: {\n                    op: 'AND',\n                    filters,\n                },\n            };\n        }\n        if (this._queryOptions.hasFieldOrders()) {\n            structuredQuery.orderBy = this._queryOptions.fieldOrders.map(o => o.toProto());\n        }\n        structuredQuery.startAt = this.toCursor(this._queryOptions.startAt);\n        structuredQuery.endAt = this.toCursor(this._queryOptions.endAt);\n        if (this._queryOptions.limit) {\n            structuredQuery.limit = { value: this._queryOptions.limit };\n        }\n        structuredQuery.offset = this._queryOptions.offset;\n        structuredQuery.select = this._queryOptions.projection;\n        return structuredQuery;\n    }\n    /**\n     * Internal streaming method that accepts an optional transaction ID.\n     *\n     * @param transactionId A transaction ID.\n     * @private\n     * @internal\n     * @returns A stream of document results.\n     */\n    _stream(transactionId) {\n        const tag = util_1.requestTag();\n        let lastReceivedDocument = null;\n        const stream = new stream_1.Transform({\n            objectMode: true,\n            transform: (proto, enc, callback) => {\n                const readTime = timestamp_1.Timestamp.fromProto(proto.readTime);\n                if (proto.document) {\n                    const document = this.firestore.snapshot_(proto.document, proto.readTime);\n                    const finalDoc = new document_1.DocumentSnapshotBuilder(document.ref.withConverter(this._queryOptions.converter));\n                    // Recreate the QueryDocumentSnapshot with the DocumentReference\n                    // containing the original converter.\n                    finalDoc.fieldsProto = document._fieldsProto;\n                    finalDoc.readTime = document.readTime;\n                    finalDoc.createTime = document.createTime;\n                    finalDoc.updateTime = document.updateTime;\n                    lastReceivedDocument = finalDoc.build();\n                    callback(undefined, { document: lastReceivedDocument, readTime });\n                }\n                else {\n                    callback(undefined, { readTime });\n                }\n            },\n        });\n        this.firestore\n            .initializeIfNeeded(tag)\n            .then(async () => {\n            // `toProto()` might throw an exception. We rely on the behavior of an\n            // async function to convert this exception into the rejected Promise we\n            // catch below.\n            let request = this.toProto(transactionId);\n            let streamActive;\n            do {\n                streamActive = new util_1.Deferred();\n                const backendStream = await this._firestore.requestStream('runQuery', request, tag);\n                backendStream.on('error', err => {\n                    backendStream.unpipe(stream);\n                    // If a non-transactional query failed, attempt to restart.\n                    // Transactional queries are retried via the transaction runner.\n                    if (!transactionId && !util_1.isPermanentRpcError(err, 'runQuery')) {\n                        logger_1.logger('Query._stream', tag, 'Query failed with retryable stream error:', err);\n                        if (lastReceivedDocument) {\n                            // Restart the query but use the last document we received as the\n                            // query cursor. Note that we do not use backoff here. The call to\n                            // `requestStream()` will backoff should the restart fail before\n                            // delivering any results.\n                            if (this._queryOptions.requireConsistency) {\n                                request = this.startAfter(lastReceivedDocument).toProto(lastReceivedDocument.readTime);\n                            }\n                            else {\n                                request = this.startAfter(lastReceivedDocument).toProto();\n                            }\n                        }\n                        streamActive.resolve(/* active= */ true);\n                    }\n                    else {\n                        logger_1.logger('Query._stream', tag, 'Query failed with stream error:', err);\n                        stream.destroy(err);\n                        streamActive.resolve(/* active= */ false);\n                    }\n                });\n                backendStream.on('end', () => {\n                    streamActive.resolve(/* active= */ false);\n                });\n                backendStream.resume();\n                backendStream.pipe(stream);\n            } while (await streamActive.promise);\n        })\n            .catch(e => stream.destroy(e));\n        return stream;\n    }\n    /**\n     * Attaches a listener for QuerySnapshot events.\n     *\n     * @param {querySnapshotCallback} onNext A callback to be called every time\n     * a new [QuerySnapshot]{@link QuerySnapshot} is available.\n     * @param {errorCallback=} onError A callback to be called if the listen\n     * fails or is cancelled. No further callbacks will occur.\n     *\n     * @returns {function()} An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   console.log(`Received query snapshot of size ${querySnapshot.size}`);\n     * }, err => {\n     *   console.log(`Encountered error: ${err}`);\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     */\n    onSnapshot(onNext, onError) {\n        validate_1.validateFunction('onNext', onNext);\n        validate_1.validateFunction('onError', onError, { optional: true });\n        const watch = new (require('./watch').QueryWatch)(this.firestore, this, this._queryOptions.converter);\n        return watch.onSnapshot((readTime, size, docs, changes) => {\n            onNext(new QuerySnapshot(this, readTime, size, docs, changes));\n        }, onError || console.error);\n    }\n    /**\n     * Returns a function that can be used to sort QueryDocumentSnapshots\n     * according to the sort criteria of this query.\n     *\n     * @private\n     * @internal\n     */\n    comparator() {\n        return (doc1, doc2) => {\n            // Add implicit sorting by name, using the last specified direction.\n            const lastDirection = this._queryOptions.hasFieldOrders()\n                ? this._queryOptions.fieldOrders[this._queryOptions.fieldOrders.length - 1].direction\n                : 'ASCENDING';\n            const orderBys = this._queryOptions.fieldOrders.concat(new FieldOrder(path_1.FieldPath.documentId(), lastDirection));\n            for (const orderBy of orderBys) {\n                let comp;\n                if (path_1.FieldPath.documentId().isEqual(orderBy.field)) {\n                    comp = doc1.ref._path.compareTo(doc2.ref._path);\n                }\n                else {\n                    const v1 = doc1.protoField(orderBy.field);\n                    const v2 = doc2.protoField(orderBy.field);\n                    if (v1 === undefined || v2 === undefined) {\n                        throw new Error('Trying to compare documents on fields that ' +\n                            \"don't exist. Please include the fields you are ordering on \" +\n                            'in your select() call.');\n                    }\n                    comp = order_1.compare(v1, v2);\n                }\n                if (comp !== 0) {\n                    const direction = orderBy.direction === 'ASCENDING' ? 1 : -1;\n                    return direction * comp;\n                }\n            }\n            return 0;\n        };\n    }\n    /**\n     * Applies a custom data converter to this Query, allowing you to use your\n     * own custom model objects with Firestore. When you call get() on the\n     * returned Query, the provided converter will convert between Firestore\n     * data and your custom type U.\n     *\n     * Using the converter allows you to specify generic type arguments when\n     * storing and retrieving objects from Firestore.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @example\n     * class Post {\n     *   constructor(readonly title: string, readonly author: string) {}\n     *\n     *   toString(): string {\n     *     return this.title + ', by ' + this.author;\n     *   }\n     * }\n     *\n     * const postConverter = {\n     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n     *     return {title: post.title, author: post.author};\n     *   },\n     *   fromFirestore(\n     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n     *   ): Post {\n     *     const data = snapshot.data();\n     *     return new Post(data.title, data.author);\n     *   }\n     * };\n     *\n     * const postSnap = await Firestore()\n     *   .collection('posts')\n     *   .withConverter(postConverter)\n     *   .doc().get();\n     * const post = postSnap.data();\n     * if (post !== undefined) {\n     *   post.title; // string\n     *   post.toString(); // Should be defined\n     *   post.someNonExistentProperty; // TS error\n     * }\n     *\n     * @param {FirestoreDataConverter | null} converter Converts objects to and\n     * from Firestore. Passing in `null` removes the current converter.\n     * @return A Query<U> that uses the provided converter.\n     */\n    withConverter(converter) {\n        return new Query(this.firestore, this._queryOptions.withConverter(converter !== null && converter !== void 0 ? converter : types_1.defaultConverter()));\n    }\n}\nexports.Query = Query;\n/**\n * A CollectionReference object can be used for adding documents, getting\n * document references, and querying for documents (using the methods\n * inherited from [Query]{@link Query}).\n *\n * @class CollectionReference\n * @extends Query\n */\nclass CollectionReference extends Query {\n    /**\n     * @hideconstructor\n     *\n     * @param firestore The Firestore Database client.\n     * @param path The Path of this collection.\n     */\n    constructor(firestore, path, converter) {\n        super(firestore, QueryOptions.forCollectionQuery(path, converter));\n    }\n    /**\n     * Returns a resource path for this collection.\n     * @private\n     * @internal\n     */\n    get _resourcePath() {\n        return this._queryOptions.parentPath.append(this._queryOptions.collectionId);\n    }\n    /**\n     * The last path element of the referenced collection.\n     *\n     * @type {string}\n     * @name CollectionReference#id\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * console.log(`ID of the subcollection: ${collectionRef.id}`);\n     */\n    get id() {\n        return this._queryOptions.collectionId;\n    }\n    /**\n     * A reference to the containing Document if this is a subcollection, else\n     * null.\n     *\n     * @type {DocumentReference|null}\n     * @name CollectionReference#parent\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * let documentRef = collectionRef.parent;\n     * console.log(`Parent name: ${documentRef.path}`);\n     */\n    get parent() {\n        if (this._queryOptions.parentPath.isDocument) {\n            return new DocumentReference(this.firestore, this._queryOptions.parentPath);\n        }\n        return null;\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     *\n     * @type {string}\n     * @name CollectionReference#path\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * console.log(`Path of the subcollection: ${collectionRef.path}`);\n     */\n    get path() {\n        return this._resourcePath.relativeName;\n    }\n    /**\n     * Retrieves the list of documents in this collection.\n     *\n     * The document references returned may include references to \"missing\n     * documents\", i.e. document locations that have no document present but\n     * which contain subcollections with documents. Attempting to read such a\n     * document reference (e.g. via `.get()` or `.onSnapshot()`) will return a\n     * `DocumentSnapshot` whose `.exists` property is false.\n     *\n     * @return {Promise<DocumentReference[]>} The list of documents in this\n     * collection.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * return collectionRef.listDocuments().then(documentRefs => {\n     *    return firestore.getAll(...documentRefs);\n     * }).then(documentSnapshots => {\n     *    for (let documentSnapshot of documentSnapshots) {\n     *       if (documentSnapshot.exists) {\n     *         console.log(`Found document with data: ${documentSnapshot.id}`);\n     *       } else {\n     *         console.log(`Found missing document: ${documentSnapshot.id}`);\n     *       }\n     *    }\n     * });\n     */\n    listDocuments() {\n        const tag = util_1.requestTag();\n        return this.firestore.initializeIfNeeded(tag).then(() => {\n            const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(this.firestore.projectId);\n            const request = {\n                parent: parentPath.formattedName,\n                collectionId: this.id,\n                showMissing: true,\n                // Setting `pageSize` to an arbitrarily large value lets the backend cap\n                // the page size (currently to 300). Note that the backend rejects\n                // MAX_INT32 (b/146883794).\n                pageSize: Math.pow(2, 16) - 1,\n                mask: { fieldPaths: [] },\n            };\n            return this.firestore\n                .request('listDocuments', request, tag)\n                .then(documents => {\n                // Note that the backend already orders these documents by name,\n                // so we do not need to manually sort them.\n                return documents.map(doc => {\n                    const path = path_1.QualifiedResourcePath.fromSlashSeparatedString(doc.name);\n                    return this.doc(path.id);\n                });\n            });\n        });\n    }\n    /**\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\n     * refers to the document at the specified path. If no path is specified, an\n     * automatically-generated unique ID will be used for the returned\n     * DocumentReference.\n     *\n     * @param {string=} documentPath A slash-separated path to a document.\n     * @returns {DocumentReference} The `DocumentReference`\n     * instance.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     * let documentRefWithName = collectionRef.doc('doc');\n     * let documentRefWithAutoId = collectionRef.doc();\n     * console.log(`Reference with name: ${documentRefWithName.path}`);\n     * console.log(`Reference with auto-id: ${documentRefWithAutoId.path}`);\n     */\n    doc(documentPath) {\n        if (arguments.length === 0) {\n            documentPath = util_1.autoId();\n        }\n        else {\n            path_1.validateResourcePath('documentPath', documentPath);\n        }\n        const path = this._resourcePath.append(documentPath);\n        if (!path.isDocument) {\n            throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\n        }\n        return new DocumentReference(this.firestore, path, this._queryOptions.converter);\n    }\n    /**\n     * Add a new document to this collection with the specified data, assigning\n     * it a document ID automatically.\n     *\n     * @param {DocumentData} data An Object containing the data for the new\n     * document.\n     * @returns {Promise.<DocumentReference>} A Promise resolved with a\n     * [DocumentReference]{@link DocumentReference} pointing to the\n     * newly created document.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document with name: ${documentReference.id}`);\n     * });\n     */\n    add(data) {\n        const firestoreData = this._queryOptions.converter.toFirestore(data);\n        write_batch_1.validateDocumentData('data', firestoreData, \n        /*allowDeletes=*/ false, this._allowUndefined);\n        const documentRef = this.doc();\n        return documentRef.create(data).then(() => documentRef);\n    }\n    /**\n     * Returns true if this `CollectionReference` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `CollectionReference` is equal to the\n     * provided value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof CollectionReference && super.isEqual(other)));\n    }\n    /**\n     * Applies a custom data converter to this CollectionReference, allowing you\n     * to use your own custom model objects with Firestore. When you call add() on\n     * the returned CollectionReference instance, the provided converter will\n     * convert between Firestore data and your custom type U.\n     *\n     * Using the converter allows you to specify generic type arguments when\n     * storing and retrieving objects from Firestore.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @example\n     * class Post {\n     *   constructor(readonly title: string, readonly author: string) {}\n     *\n     *   toString(): string {\n     *     return this.title + ', by ' + this.author;\n     *   }\n     * }\n     *\n     * const postConverter = {\n     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n     *     return {title: post.title, author: post.author};\n     *   },\n     *   fromFirestore(\n     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n     *   ): Post {\n     *     const data = snapshot.data();\n     *     return new Post(data.title, data.author);\n     *   }\n     * };\n     *\n     * const postSnap = await Firestore()\n     *   .collection('posts')\n     *   .withConverter(postConverter)\n     *   .doc().get();\n     * const post = postSnap.data();\n     * if (post !== undefined) {\n     *   post.title; // string\n     *   post.toString(); // Should be defined\n     *   post.someNonExistentProperty; // TS error\n     * }\n     *\n     * @param {FirestoreDataConverter | null} converter Converts objects to and\n     * from Firestore. Passing in `null` removes the current converter.\n     * @return A CollectionReference<U> that uses the provided converter.\n     */\n    withConverter(converter) {\n        return new CollectionReference(this.firestore, this._resourcePath, converter !== null && converter !== void 0 ? converter : types_1.defaultConverter());\n    }\n}\nexports.CollectionReference = CollectionReference;\n/**\n * Validates the input string as a field order direction.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Order direction to validate.\n * @throws when the direction is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\nfunction validateQueryOrder(arg, op) {\n    // For backwards compatibility, we support both lower and uppercase values.\n    op = typeof op === 'string' ? op.toLowerCase() : op;\n    validate_1.validateEnumValue(arg, op, Object.keys(directionOperators), { optional: true });\n    return op;\n}\nexports.validateQueryOrder = validateQueryOrder;\n/**\n * Validates the input string as a field comparison operator.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Field comparison operator to validate.\n * @param fieldValue Value that is used in the filter.\n * @throws when the comparison operation is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\nfunction validateQueryOperator(arg, op, fieldValue) {\n    // For backwards compatibility, we support both `=` and `==` for \"equals\".\n    if (op === '=') {\n        op = '==';\n    }\n    validate_1.validateEnumValue(arg, op, Object.keys(comparisonOperators));\n    if (typeof fieldValue === 'number' &&\n        isNaN(fieldValue) &&\n        op !== '==' &&\n        op !== '!=') {\n        throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on NaN.\");\n    }\n    if (fieldValue === null && op !== '==' && op !== '!=') {\n        throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on Null.\");\n    }\n    return op;\n}\nexports.validateQueryOperator = validateQueryOperator;\n/**\n * Validates that 'value' is a DocumentReference.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @return the DocumentReference if valid\n */\nfunction validateDocumentReference(arg, value) {\n    if (!(value instanceof DocumentReference)) {\n        throw new Error(validate_1.invalidArgumentMessage(arg, 'DocumentReference'));\n    }\n    return value;\n}\nexports.validateDocumentReference = validateDocumentReference;\n/**\n * Validates that 'value' can be used as a query value.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\nfunction validateQueryValue(arg, value, allowUndefined) {\n    serializer_1.validateUserInput(arg, value, 'query constraint', {\n        allowDeletes: 'none',\n        allowTransforms: false,\n        allowUndefined,\n    });\n}\n/**\n * Verifies equality for an array of objects using the `isEqual` interface.\n *\n * @private\n * @internal\n * @param left Array of objects supporting `isEqual`.\n * @param right Array of objects supporting `isEqual`.\n * @return True if arrays are equal.\n */\nfunction isArrayEqual(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (let i = 0; i < left.length; ++i) {\n        if (!left[i].isEqual(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns the first non-undefined value or `undefined` if no such value exists.\n * @private\n * @internal\n */\nfunction coalesce(...values) {\n    return values.find(value => value !== undefined);\n}\n//# sourceMappingURL=reference.js.map"]},"metadata":{},"sourceType":"script"}