{"ast":null,"code":"/*! firebase-admin v9.11.1 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppCheckTokenVerifier = void 0;\n\nvar validator = require(\"../utils/validator\");\n\nvar util = require(\"../utils/index\");\n\nvar app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\n\nvar jwt_1 = require(\"../utils/jwt\");\n\nvar APP_CHECK_ISSUER = 'https://firebaseappcheck.googleapis.com/';\nvar JWKS_URL = 'https://firebaseappcheck.googleapis.com/v1beta/jwks';\n/**\n * Class for verifying Firebase App Check tokens.\n *\n * @internal\n */\n\nvar AppCheckTokenVerifier = function () {\n  function AppCheckTokenVerifier(app) {\n    this.app = app;\n    this.signatureVerifier = jwt_1.PublicKeySignatureVerifier.withJwksUrl(JWKS_URL);\n  }\n  /**\n   * Verifies the format and signature of a Firebase App Check token.\n   *\n   * @param token The Firebase Auth JWT token to verify.\n   * @return A promise fulfilled with the decoded claims of the Firebase App Check token.\n   */\n\n\n  AppCheckTokenVerifier.prototype.verifyToken = function (token) {\n    var _this = this;\n\n    if (!validator.isString(token)) {\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'App check token must be a non-null string.');\n    }\n\n    return this.ensureProjectId().then(function (projectId) {\n      return _this.decodeAndVerify(token, projectId);\n    }).then(function (decoded) {\n      var decodedAppCheckToken = decoded.payload; // eslint-disable-next-line @typescript-eslint/camelcase\n\n      decodedAppCheckToken.app_id = decodedAppCheckToken.sub;\n      return decodedAppCheckToken;\n    });\n  };\n\n  AppCheckTokenVerifier.prototype.ensureProjectId = function () {\n    return util.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-credential', 'Must initialize app with a cert credential or set your Firebase project ID as the ' + 'GOOGLE_CLOUD_PROJECT environment variable to verify an App Check token.');\n      }\n\n      return projectId;\n    });\n  };\n\n  AppCheckTokenVerifier.prototype.decodeAndVerify = function (token, projectId) {\n    var _this = this;\n\n    return this.safeDecode(token).then(function (decodedToken) {\n      _this.verifyContent(decodedToken, projectId);\n\n      return _this.verifySignature(token).then(function () {\n        return decodedToken;\n      });\n    });\n  };\n\n  AppCheckTokenVerifier.prototype.safeDecode = function (jwtToken) {\n    return jwt_1.decodeJwt(jwtToken).catch(function () {\n      var errorMessage = 'Decoding App Check token failed. Make sure you passed ' + 'the entire string JWT which represents the Firebase App Check token.';\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n    });\n  };\n  /**\n   * Verifies the content of a Firebase App Check JWT.\n   *\n   * @param fullDecodedToken The decoded JWT.\n   * @param projectId The Firebase Project Id.\n   */\n\n\n  AppCheckTokenVerifier.prototype.verifyContent = function (fullDecodedToken, projectId) {\n    var header = fullDecodedToken.header;\n    var payload = fullDecodedToken.payload;\n    var projectIdMatchMessage = ' Make sure the App Check token comes from the same ' + 'Firebase project as the service account used to authenticate this SDK.';\n    var scopedProjectId = \"projects/\" + projectId;\n    var errorMessage;\n\n    if (header.alg !== jwt_1.ALGORITHM_RS256) {\n      errorMessage = 'The provided App Check token has incorrect algorithm. Expected \"' + jwt_1.ALGORITHM_RS256 + '\" but got ' + '\"' + header.alg + '\".';\n    } else if (!validator.isNonEmptyArray(payload.aud) || !payload.aud.includes(scopedProjectId)) {\n      errorMessage = 'The provided App Check token has incorrect \"aud\" (audience) claim. Expected \"' + scopedProjectId + '\" but got \"' + payload.aud + '\".' + projectIdMatchMessage;\n    } else if (typeof payload.iss !== 'string' || !payload.iss.startsWith(APP_CHECK_ISSUER)) {\n      errorMessage = 'The provided App Check token has incorrect \"iss\" (issuer) claim.';\n    } else if (typeof payload.sub !== 'string') {\n      errorMessage = 'The provided App Check token has no \"sub\" (subject) claim.';\n    } else if (payload.sub === '') {\n      errorMessage = 'The provided App Check token has an empty string \"sub\" (subject) claim.';\n    }\n\n    if (errorMessage) {\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n    }\n  };\n\n  AppCheckTokenVerifier.prototype.verifySignature = function (jwtToken) {\n    var _this = this;\n\n    return this.signatureVerifier.verify(jwtToken).catch(function (error) {\n      throw _this.mapJwtErrorToAppCheckError(error);\n    });\n  };\n  /**\n   * Maps JwtError to FirebaseAppCheckError\n   *\n   * @param error JwtError to be mapped.\n   * @returns FirebaseAppCheckError instance.\n   */\n\n\n  AppCheckTokenVerifier.prototype.mapJwtErrorToAppCheckError = function (error) {\n    if (error.code === jwt_1.JwtErrorCode.TOKEN_EXPIRED) {\n      var errorMessage = 'The provided App Check token has expired. Get a fresh App Check token' + ' from your client app and try again.';\n      return new app_check_api_client_internal_1.FirebaseAppCheckError('app-check-token-expired', errorMessage);\n    } else if (error.code === jwt_1.JwtErrorCode.INVALID_SIGNATURE) {\n      var errorMessage = 'The provided App Check token has invalid signature.';\n      return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n    } else if (error.code === jwt_1.JwtErrorCode.NO_MATCHING_KID) {\n      var errorMessage = 'The provided App Check token has \"kid\" claim which does not ' + 'correspond to a known public key. Most likely the provided App Check token ' + 'is expired, so get a fresh token from your client app and try again.';\n      return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n    }\n\n    return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', error.message);\n  };\n\n  return AppCheckTokenVerifier;\n}();\n\nexports.AppCheckTokenVerifier = AppCheckTokenVerifier;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/firebase-admin/lib/app-check/token-verifier.js"],"names":["Object","defineProperty","exports","value","AppCheckTokenVerifier","validator","require","util","app_check_api_client_internal_1","jwt_1","APP_CHECK_ISSUER","JWKS_URL","app","signatureVerifier","PublicKeySignatureVerifier","withJwksUrl","prototype","verifyToken","token","_this","isString","FirebaseAppCheckError","ensureProjectId","then","projectId","decodeAndVerify","decoded","decodedAppCheckToken","payload","app_id","sub","findProjectId","isNonEmptyString","safeDecode","decodedToken","verifyContent","verifySignature","jwtToken","decodeJwt","catch","errorMessage","fullDecodedToken","header","projectIdMatchMessage","scopedProjectId","alg","ALGORITHM_RS256","isNonEmptyArray","aud","includes","iss","startsWith","verify","error","mapJwtErrorToAppCheckError","code","JwtErrorCode","TOKEN_EXPIRED","INVALID_SIGNATURE","NO_MATCHING_KID","message"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.11.1 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppCheckTokenVerifier = void 0;\nvar validator = require(\"../utils/validator\");\nvar util = require(\"../utils/index\");\nvar app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\nvar jwt_1 = require(\"../utils/jwt\");\nvar APP_CHECK_ISSUER = 'https://firebaseappcheck.googleapis.com/';\nvar JWKS_URL = 'https://firebaseappcheck.googleapis.com/v1beta/jwks';\n/**\n * Class for verifying Firebase App Check tokens.\n *\n * @internal\n */\nvar AppCheckTokenVerifier = /** @class */ (function () {\n    function AppCheckTokenVerifier(app) {\n        this.app = app;\n        this.signatureVerifier = jwt_1.PublicKeySignatureVerifier.withJwksUrl(JWKS_URL);\n    }\n    /**\n     * Verifies the format and signature of a Firebase App Check token.\n     *\n     * @param token The Firebase Auth JWT token to verify.\n     * @return A promise fulfilled with the decoded claims of the Firebase App Check token.\n     */\n    AppCheckTokenVerifier.prototype.verifyToken = function (token) {\n        var _this = this;\n        if (!validator.isString(token)) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'App check token must be a non-null string.');\n        }\n        return this.ensureProjectId()\n            .then(function (projectId) {\n            return _this.decodeAndVerify(token, projectId);\n        })\n            .then(function (decoded) {\n            var decodedAppCheckToken = decoded.payload;\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            decodedAppCheckToken.app_id = decodedAppCheckToken.sub;\n            return decodedAppCheckToken;\n        });\n    };\n    AppCheckTokenVerifier.prototype.ensureProjectId = function () {\n        return util.findProjectId(this.app)\n            .then(function (projectId) {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-credential', 'Must initialize app with a cert credential or set your Firebase project ID as the ' +\n                    'GOOGLE_CLOUD_PROJECT environment variable to verify an App Check token.');\n            }\n            return projectId;\n        });\n    };\n    AppCheckTokenVerifier.prototype.decodeAndVerify = function (token, projectId) {\n        var _this = this;\n        return this.safeDecode(token)\n            .then(function (decodedToken) {\n            _this.verifyContent(decodedToken, projectId);\n            return _this.verifySignature(token)\n                .then(function () { return decodedToken; });\n        });\n    };\n    AppCheckTokenVerifier.prototype.safeDecode = function (jwtToken) {\n        return jwt_1.decodeJwt(jwtToken)\n            .catch(function () {\n            var errorMessage = 'Decoding App Check token failed. Make sure you passed ' +\n                'the entire string JWT which represents the Firebase App Check token.';\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n        });\n    };\n    /**\n     * Verifies the content of a Firebase App Check JWT.\n     *\n     * @param fullDecodedToken The decoded JWT.\n     * @param projectId The Firebase Project Id.\n     */\n    AppCheckTokenVerifier.prototype.verifyContent = function (fullDecodedToken, projectId) {\n        var header = fullDecodedToken.header;\n        var payload = fullDecodedToken.payload;\n        var projectIdMatchMessage = ' Make sure the App Check token comes from the same ' +\n            'Firebase project as the service account used to authenticate this SDK.';\n        var scopedProjectId = \"projects/\" + projectId;\n        var errorMessage;\n        if (header.alg !== jwt_1.ALGORITHM_RS256) {\n            errorMessage = 'The provided App Check token has incorrect algorithm. Expected \"' +\n                jwt_1.ALGORITHM_RS256 + '\" but got ' + '\"' + header.alg + '\".';\n        }\n        else if (!validator.isNonEmptyArray(payload.aud) || !payload.aud.includes(scopedProjectId)) {\n            errorMessage = 'The provided App Check token has incorrect \"aud\" (audience) claim. Expected \"' +\n                scopedProjectId + '\" but got \"' + payload.aud + '\".' + projectIdMatchMessage;\n        }\n        else if (typeof payload.iss !== 'string' || !payload.iss.startsWith(APP_CHECK_ISSUER)) {\n            errorMessage = 'The provided App Check token has incorrect \"iss\" (issuer) claim.';\n        }\n        else if (typeof payload.sub !== 'string') {\n            errorMessage = 'The provided App Check token has no \"sub\" (subject) claim.';\n        }\n        else if (payload.sub === '') {\n            errorMessage = 'The provided App Check token has an empty string \"sub\" (subject) claim.';\n        }\n        if (errorMessage) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n        }\n    };\n    AppCheckTokenVerifier.prototype.verifySignature = function (jwtToken) {\n        var _this = this;\n        return this.signatureVerifier.verify(jwtToken)\n            .catch(function (error) {\n            throw _this.mapJwtErrorToAppCheckError(error);\n        });\n    };\n    /**\n     * Maps JwtError to FirebaseAppCheckError\n     *\n     * @param error JwtError to be mapped.\n     * @returns FirebaseAppCheckError instance.\n     */\n    AppCheckTokenVerifier.prototype.mapJwtErrorToAppCheckError = function (error) {\n        if (error.code === jwt_1.JwtErrorCode.TOKEN_EXPIRED) {\n            var errorMessage = 'The provided App Check token has expired. Get a fresh App Check token' +\n                ' from your client app and try again.';\n            return new app_check_api_client_internal_1.FirebaseAppCheckError('app-check-token-expired', errorMessage);\n        }\n        else if (error.code === jwt_1.JwtErrorCode.INVALID_SIGNATURE) {\n            var errorMessage = 'The provided App Check token has invalid signature.';\n            return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n        }\n        else if (error.code === jwt_1.JwtErrorCode.NO_MATCHING_KID) {\n            var errorMessage = 'The provided App Check token has \"kid\" claim which does not ' +\n                'correspond to a known public key. Most likely the provided App Check token ' +\n                'is expired, so get a fresh token from your client app and try again.';\n            return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n        }\n        return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', error.message);\n    };\n    return AppCheckTokenVerifier;\n}());\nexports.AppCheckTokenVerifier = AppCheckTokenVerifier;\n"]},"metadata":{},"sourceType":"script"}