{"ast":null,"code":"const {\n  randomBytes\n} = require('crypto');\n\nconst {\n  createSecretKey\n} = require('../../help/key_object');\n\nconst base64url = require('../../help/base64url');\n\nconst {\n  THUMBPRINT_MATERIAL,\n  PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS,\n  KEY_MANAGEMENT_DECRYPT,\n  KEY_MANAGEMENT_ENCRYPT,\n  KEYOBJECT\n} = require('../../help/consts');\n\nconst Key = require('./base');\n\nconst OCT_PUBLIC = new Set();\nObject.freeze(OCT_PUBLIC);\nconst OCT_PRIVATE = new Set(['k']);\nObject.freeze(OCT_PRIVATE); // Octet sequence Key Type\n\nclass OctKey extends Key {\n  constructor(...args) {\n    super(...args);\n    Object.defineProperties(this, {\n      kty: {\n        value: 'oct',\n        enumerable: true\n      },\n      length: {\n        value: this[KEYOBJECT] ? this[KEYOBJECT].symmetricKeySize * 8 : undefined\n      },\n      k: {\n        enumerable: false,\n\n        get() {\n          if (this[KEYOBJECT]) {\n            Object.defineProperty(this, 'k', {\n              value: base64url.encodeBuffer(this[KEYOBJECT].export()),\n              configurable: false\n            });\n          } else {\n            Object.defineProperty(this, 'k', {\n              value: undefined,\n              configurable: false\n            });\n          }\n\n          return this.k;\n        },\n\n        configurable: true\n      }\n    });\n  }\n\n  static get [PUBLIC_MEMBERS]() {\n    return OCT_PUBLIC;\n  }\n\n  static get [PRIVATE_MEMBERS]() {\n    return OCT_PRIVATE;\n  } // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n\n\n  [THUMBPRINT_MATERIAL]() {\n    if (!this[KEYOBJECT]) {\n      throw new TypeError('reference \"oct\" keys without \"k\" cannot have their thumbprint calculated');\n    }\n\n    return {\n      k: this.k,\n      kty: 'oct'\n    };\n  }\n\n  [KEY_MANAGEMENT_ENCRYPT]() {\n    return new Set([...this.algorithms('wrapKey'), ...this.algorithms('deriveKey')]);\n  }\n\n  [KEY_MANAGEMENT_DECRYPT]() {\n    return this[KEY_MANAGEMENT_ENCRYPT]();\n  }\n\n  algorithms(...args) {\n    if (!this[KEYOBJECT]) {\n      return new Set();\n    }\n\n    return Key.prototype.algorithms.call(this, ...args);\n  }\n\n  static async generate(...args) {\n    return this.generateSync(...args);\n  }\n\n  static generateSync(len = 256, privat = true) {\n    if (!privat) {\n      throw new TypeError('\"oct\" keys cannot be generated as public');\n    }\n\n    if (!Number.isSafeInteger(len) || !len || len % 8 !== 0) {\n      throw new TypeError('invalid bit length');\n    }\n\n    return createSecretKey(randomBytes(len / 8));\n  }\n\n}\n\nmodule.exports = OctKey;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/jwk/key/oct.js"],"names":["randomBytes","require","createSecretKey","base64url","THUMBPRINT_MATERIAL","PUBLIC_MEMBERS","PRIVATE_MEMBERS","KEY_MANAGEMENT_DECRYPT","KEY_MANAGEMENT_ENCRYPT","KEYOBJECT","Key","OCT_PUBLIC","Set","Object","freeze","OCT_PRIVATE","OctKey","constructor","args","defineProperties","kty","value","enumerable","length","symmetricKeySize","undefined","k","get","defineProperty","encodeBuffer","export","configurable","TypeError","algorithms","prototype","call","generate","generateSync","len","privat","Number","isSafeInteger","module","exports"],"mappings":"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","sourcesContent":["const { randomBytes } = require('crypto')\n\nconst { createSecretKey } = require('../../help/key_object')\nconst base64url = require('../../help/base64url')\nconst {\n  THUMBPRINT_MATERIAL, PUBLIC_MEMBERS, PRIVATE_MEMBERS,\n  KEY_MANAGEMENT_DECRYPT, KEY_MANAGEMENT_ENCRYPT, KEYOBJECT\n} = require('../../help/consts')\n\nconst Key = require('./base')\n\nconst OCT_PUBLIC = new Set()\nObject.freeze(OCT_PUBLIC)\nconst OCT_PRIVATE = new Set(['k'])\nObject.freeze(OCT_PRIVATE)\n\n// Octet sequence Key Type\nclass OctKey extends Key {\n  constructor (...args) {\n    super(...args)\n    Object.defineProperties(this, {\n      kty: {\n        value: 'oct',\n        enumerable: true\n      },\n      length: {\n        value: this[KEYOBJECT] ? this[KEYOBJECT].symmetricKeySize * 8 : undefined\n      },\n      k: {\n        enumerable: false,\n        get () {\n          if (this[KEYOBJECT]) {\n            Object.defineProperty(this, 'k', {\n              value: base64url.encodeBuffer(this[KEYOBJECT].export()),\n              configurable: false\n            })\n          } else {\n            Object.defineProperty(this, 'k', {\n              value: undefined,\n              configurable: false\n            })\n          }\n\n          return this.k\n        },\n        configurable: true\n      }\n    })\n  }\n\n  static get [PUBLIC_MEMBERS] () {\n    return OCT_PUBLIC\n  }\n\n  static get [PRIVATE_MEMBERS] () {\n    return OCT_PRIVATE\n  }\n\n  // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n  [THUMBPRINT_MATERIAL] () {\n    if (!this[KEYOBJECT]) {\n      throw new TypeError('reference \"oct\" keys without \"k\" cannot have their thumbprint calculated')\n    }\n    return { k: this.k, kty: 'oct' }\n  }\n\n  [KEY_MANAGEMENT_ENCRYPT] () {\n    return new Set([\n      ...this.algorithms('wrapKey'),\n      ...this.algorithms('deriveKey')\n    ])\n  }\n\n  [KEY_MANAGEMENT_DECRYPT] () {\n    return this[KEY_MANAGEMENT_ENCRYPT]()\n  }\n\n  algorithms (...args) {\n    if (!this[KEYOBJECT]) {\n      return new Set()\n    }\n\n    return Key.prototype.algorithms.call(this, ...args)\n  }\n\n  static async generate (...args) {\n    return this.generateSync(...args)\n  }\n\n  static generateSync (len = 256, privat = true) {\n    if (!privat) {\n      throw new TypeError('\"oct\" keys cannot be generated as public')\n    }\n    if (!Number.isSafeInteger(len) || !len || len % 8 !== 0) {\n      throw new TypeError('invalid bit length')\n    }\n\n    return createSecretKey(randomBytes(len / 8))\n  }\n}\n\nmodule.exports = OctKey\n"]},"metadata":{},"sourceType":"script"}