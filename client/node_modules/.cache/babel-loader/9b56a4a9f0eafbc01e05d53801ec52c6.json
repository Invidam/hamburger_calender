{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { APIv2, updateAPIHeader } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { getToday } from \"../../tools/time\";\n\nconst verifyToken = async () => {\n  const {\n    token\n  } = LocalStroage.accessToken().get();\n  const response = await APIv2.auth().verifyToken(token); //await API.post(\"/api/jwt/verify\", { token });\n\n  return response.data.decode;\n};\n\nexport const useLogin = () => {\n  _s();\n\n  const [user, setUser] = useState();\n  const [isTokenLoading, setLoadInToken] = useState(true);\n  const [isLoginLoading, setLoadInLoading] = useState(false);\n  const [isLoginHookLoading, setLoad] = useState(true);\n  useEffect(() => {\n    console.log(\"[login]TOKEN\", isTokenLoading, \"LOGIN\", isLoginLoading, \"RESULT: \", isTokenLoading || isLoginLoading);\n    setLoad(isTokenLoading || isLoginLoading);\n  }, [isTokenLoading, isLoginLoading]);\n\n  const setUserInToken = async () => {\n    try {\n      if (LocalStroage.accessToken().isEmpty()) {\n        console.log(\"user FIND! \");\n        LocalStroage.accessToken().set(undefined); // throw new Error(\"access_token not exists.\");\n\n        console.log(\"TOKEN\", isTokenLoading, \"LOGIN\", isLoginLoading, \"RESULT: \", isTokenLoading || isLoginLoading);\n        setLoadInToken(false);\n      } else {\n        // setLoadInToken(true);\n        const {\n          username\n        } = await verifyToken();\n        console.log(\"user find! \", username);\n        setLoadInToken(false);\n        setUser(username);\n      }\n    } catch (error) {\n      alert(error);\n      setLoadInToken(false);\n      setUser(undefined);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"USE EFFECT APPROACH\");\n    setUserInToken();\n  }, [user]);\n\n  const setDataInLocal = user => {\n    try {\n      console.log(\"TOKEN START\");\n      const date = getToday();\n      updateAPIHeader();\n\n      if (!LocalStroage.recordTime(\"wakeTime\").isEmpty()) {\n        const wakeTime = LocalStroage.recordTime(\"wakeTime\").get();\n        APIv2.recordTime(user, date, \"wakeTime\").edit(wakeTime);\n        LocalStroage.recordTime(\"wakeTime\").remove();\n      }\n\n      if (!LocalStroage.recordTime(\"bedTime\").isEmpty()) {\n        const bedTime = LocalStroage.recordTime(\"bedTime\").get();\n        APIv2.recordTime(user, date, \"bedTime\").edit(bedTime);\n        LocalStroage.recordTime(\"bedTime\").remove();\n      }\n\n      if (!LocalStroage.workList().isEmpty()) {\n        const workList = LocalStroage.workList(\"workList\").get();\n        APIv2.workList(user, date).edit(workList);\n        LocalStroage.workList().remove();\n      }\n\n      if (!LocalStroage.todoList().isEmpty()) {\n        console.log(\"IS EMPTY TODO \");\n        const todoList = LocalStroage.todoList(\"todoList\").get();\n        APIv2.todoList(user).edit(todoList);\n        LocalStroage.todoList().remove();\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const authenticated = user != null;\n\n  const login = async (userInfo, socialType) => {\n    // setUser(signIn({ email, password }));\n    try {\n      setLoadInLoading(true); // const response = await API.post(`/auth/login/${socialType}`, {\n      //   userInfo,\n      // });\n\n      const response = await APIv2.auth().login(socialType, userInfo);\n      const {\n        access_token,\n        username\n      } = response.data;\n      LocalStroage.accessToken().set(access_token);\n      setUser(username);\n      console.log(\"login success ~~~~~~~~~~~\");\n\n      if (!LocalStroage.accessToken().isEmpty()) {\n        setDataInLocal(username);\n        setLoadInLoading(false);\n      }\n    } catch (error) {\n      setLoadInLoading(false);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    LocalStroage.accessToken().remove();\n    updateAPIHeader();\n  };\n\n  return [user, setUser, authenticated, login, logout, isLoginHookLoading];\n};\n\n_s(useLogin, \"zaolDfkYhAHWdwkUXw0VE4l/Opw=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useLogin.js"],"names":["useEffect","useState","APIv2","updateAPIHeader","LocalStroage","getToday","verifyToken","token","accessToken","get","response","auth","data","decode","useLogin","user","setUser","isTokenLoading","setLoadInToken","isLoginLoading","setLoadInLoading","isLoginHookLoading","setLoad","console","log","setUserInToken","isEmpty","set","undefined","username","error","alert","setDataInLocal","date","recordTime","wakeTime","edit","remove","bedTime","workList","todoList","authenticated","login","userInfo","socialType","access_token","logout"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { APIv2, updateAPIHeader } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { getToday } from \"../../tools/time\";\n\nconst verifyToken = async () => {\n  const { token } = LocalStroage.accessToken().get();\n  const response = await APIv2.auth().verifyToken(token); //await API.post(\"/api/jwt/verify\", { token });\n  return response.data.decode;\n};\n\nexport const useLogin = () => {\n  const [user, setUser] = useState();\n  const [isTokenLoading, setLoadInToken] = useState(true);\n  const [isLoginLoading, setLoadInLoading] = useState(false);\n  const [isLoginHookLoading, setLoad] = useState(true);\n  useEffect(() => {\n    console.log(\n      \"[login]TOKEN\",\n      isTokenLoading,\n      \"LOGIN\",\n      isLoginLoading,\n      \"RESULT: \",\n      isTokenLoading || isLoginLoading\n    );\n    setLoad(isTokenLoading || isLoginLoading);\n  }, [isTokenLoading, isLoginLoading]);\n  const setUserInToken = async () => {\n    try {\n      if (LocalStroage.accessToken().isEmpty()) {\n        console.log(\"user FIND! \");\n        LocalStroage.accessToken().set(undefined);\n        // throw new Error(\"access_token not exists.\");\n        console.log(\n          \"TOKEN\",\n          isTokenLoading,\n          \"LOGIN\",\n          isLoginLoading,\n          \"RESULT: \",\n          isTokenLoading || isLoginLoading\n        );\n        setLoadInToken(false);\n      } else {\n        // setLoadInToken(true);\n        const { username } = await verifyToken();\n        console.log(\"user find! \", username);\n        setLoadInToken(false);\n        setUser(username);\n      }\n    } catch (error) {\n      alert(error);\n      setLoadInToken(false);\n      setUser(undefined);\n    }\n  };\n  useEffect(() => {\n    console.log(\"USE EFFECT APPROACH\");\n    setUserInToken();\n  }, [user]);\n  const setDataInLocal = (user) => {\n    try {\n      console.log(\"TOKEN START\");\n      const date = getToday();\n      updateAPIHeader();\n      if (!LocalStroage.recordTime(\"wakeTime\").isEmpty()) {\n        const wakeTime = LocalStroage.recordTime(\"wakeTime\").get();\n        APIv2.recordTime(user, date, \"wakeTime\").edit(wakeTime);\n        LocalStroage.recordTime(\"wakeTime\").remove();\n      }\n      if (!LocalStroage.recordTime(\"bedTime\").isEmpty()) {\n        const bedTime = LocalStroage.recordTime(\"bedTime\").get();\n        APIv2.recordTime(user, date, \"bedTime\").edit(bedTime);\n        LocalStroage.recordTime(\"bedTime\").remove();\n      }\n      if (!LocalStroage.workList().isEmpty()) {\n        const workList = LocalStroage.workList(\"workList\").get();\n        APIv2.workList(user, date).edit(workList);\n        LocalStroage.workList().remove();\n      }\n      if (!LocalStroage.todoList().isEmpty()) {\n        console.log(\"IS EMPTY TODO \");\n        const todoList = LocalStroage.todoList(\"todoList\").get();\n        APIv2.todoList(user).edit(todoList);\n        LocalStroage.todoList().remove();\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  const authenticated = user != null;\n  const login = async (userInfo, socialType) => {\n    // setUser(signIn({ email, password }));\n    try {\n      setLoadInLoading(true);\n      // const response = await API.post(`/auth/login/${socialType}`, {\n      //   userInfo,\n      // });\n      const response = await APIv2.auth().login(socialType, userInfo);\n      const { access_token, username } = response.data;\n      LocalStroage.accessToken().set(access_token);\n      setUser(username);\n      console.log(\"login success ~~~~~~~~~~~\");\n      if (!LocalStroage.accessToken().isEmpty()) {\n        setDataInLocal(username);\n        setLoadInLoading(false);\n      }\n    } catch (error) {\n      setLoadInLoading(false);\n      throw error;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    LocalStroage.accessToken().remove();\n    updateAPIHeader();\n  };\n\n  return [user, setUser, authenticated, login, logout, isLoginHookLoading];\n};\n"]},"metadata":{},"sourceType":"module"}