{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { API } from \"../../../tools/axiosSetting\";\nexport const usePushWork = ({\n  user,\n  date,\n  idx,\n  workList,\n  setWorkList,\n  callback\n}) => {\n  _s();\n\n  const [workColor, setColor] = useState();\n  const [workName, setWorkName] = useState();\n  const [workTime, setWorkTime] = useState();\n\n  const hexToRgba = color => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n\n  const onChangeWorkColor = color => {\n    if (!color) {} else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n\n    setColor(color);\n  };\n\n  const onChangeWorkName = name => setWorkName(name);\n\n  const onChangeWorkTime = time => setWorkTime(parseInt(time));\n\n  const validator = workObj => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n\n  const pushWork = async workObj => {\n    var _workList$;\n\n    if (!workList || ((_workList$ = workList[0]) === null || _workList$ === void 0 ? void 0 : _workList$.workTime) === -1) setWorkList([workObj]);else setWorkList([...workList, workObj]);\n    const response = await API.put(`/api/${user}/${date}/worklist/worklist`, {\n      value: workObj,\n      idx\n    });\n    console.log(\"PUSH RESPONSE\", response);\n  };\n\n  const getErrText = workObj => {\n    let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${!workTime + !workColor > 0 && !workName ? \", \" : \"\"}${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${workColor ? \"\" : \"WorkColor\"} ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n    return errText;\n  };\n\n  const onSubmitWork = event => {\n    try {\n      event.preventDefault(); // const workName = event.target.workName.value;\n      // const workTime = parseInt(event.target.workTime.value);\n\n      const workObj = {\n        workName,\n        workTime,\n        workColor\n      };\n      let willUpdate = true;\n      if (typeof validator === \"function\") willUpdate = validator(workObj);\n\n      if (willUpdate) {\n        callback();\n        console.log(\"work:ist: \", workList);\n        pushWork(workObj);\n      } else {\n        throw new Error(getErrText(workObj));\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return {\n    onChangeWorkColor,\n    onChangeWorkName,\n    onChangeWorkTime,\n    onSubmitWork\n  };\n};\n\n_s(usePushWork, \"s6cUyFsU/WjXfCqWvMkOQ/lz0wk=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/work/usePushWork.js"],"names":["useState","API","usePushWork","user","date","idx","workList","setWorkList","callback","workColor","setColor","workName","setWorkName","workTime","setWorkTime","hexToRgba","color","r","parseInt","substr","g","b","onChangeWorkColor","onChangeWorkName","name","onChangeWorkTime","time","validator","workObj","pushWork","response","put","value","console","log","getErrText","errText","onSubmitWork","event","preventDefault","willUpdate","Error","error","alert"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { API } from \"../../../tools/axiosSetting\";\n\nexport const usePushWork = ({\n  user,\n  date,\n  idx,\n  workList,\n  setWorkList,\n  callback,\n}) => {\n  const [workColor, setColor] = useState();\n  const [workName, setWorkName] = useState();\n  const [workTime, setWorkTime] = useState();\n  const hexToRgba = (color) => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n\n  const onChangeWorkColor = (color) => {\n    if (!color) {\n    } else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n    setColor(color);\n  };\n  const onChangeWorkName = (name) => setWorkName(name);\n  const onChangeWorkTime = (time) => setWorkTime(parseInt(time));\n  const validator = (workObj) => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n  const pushWork = async (workObj) => {\n    if (!workList || workList[0]?.workTime === -1) setWorkList([workObj]);\n    else setWorkList([...workList, workObj]);\n    const response = await API.put(`/api/${user}/${date}/worklist/worklist`, {\n      value: workObj,\n      idx,\n    });\n    console.log(\"PUSH RESPONSE\", response);\n  };\n  const getErrText = (workObj) => {\n    let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${\n      !workTime + !workColor > 0 && !workName ? \", \" : \"\"\n    }${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${\n      workColor ? \"\" : \"WorkColor\"\n    } ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n    return errText;\n  };\n  const onSubmitWork = (event) => {\n    try {\n      event.preventDefault();\n      // const workName = event.target.workName.value;\n      // const workTime = parseInt(event.target.workTime.value);\n      const workObj = { workName, workTime, workColor };\n      let willUpdate = true;\n      if (typeof validator === \"function\") willUpdate = validator(workObj);\n      if (willUpdate) {\n        callback();\n        console.log(\"work:ist: \", workList);\n        pushWork(workObj);\n      } else {\n        throw new Error(getErrText(workObj));\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  return {\n    onChangeWorkColor,\n    onChangeWorkName,\n    onChangeWorkTime,\n    onSubmitWork,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}