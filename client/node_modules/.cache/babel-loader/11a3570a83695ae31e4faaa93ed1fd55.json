{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const useEditTime = (recordTime, setTime, isWake, callback) => {\n  _s();\n\n  const [hour, setHour] = useState(recordTime.hour);\n  const [minute, setMinute] = useState(recordTime.minute);\n\n  const validator = timeObj => {\n    return timeObj.hour && timeObj.minute;\n  };\n\n  const onChangeHour = hour => setHour(hour);\n\n  const onChangeMinute = minute => setMinute(parseInt(minute));\n\n  const getErrText = () => `${isWake ? \"WakeTime\" : \"BedTime\"} is not entered.`;\n\n  const editTime = async timeObj => await setTime(timeObj).edit();\n\n  const onEditRecordTime = event => {\n    try {\n      event.preventDefault();\n      const timeObj = {\n        hour,\n        minute\n      };\n      let willUpdate = true;\n      if (typeof validator === \"function\") willUpdate = validator(timeObj);\n\n      if (willUpdate) {\n        callback();\n        editTime(timeObj);\n      } else {\n        throw new Error(getErrText());\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return {\n    onChangeHour,\n    onChangeMinute,\n    onEditRecordTime\n  };\n};\n\n_s(useEditTime, \"8Y8JHU7rTUZAoBP4SHevqYs85ew=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/time/useEditTime.js"],"names":["useState","useEditTime","recordTime","setTime","isWake","callback","hour","setHour","minute","setMinute","validator","timeObj","onChangeHour","onChangeMinute","parseInt","getErrText","editTime","edit","onEditRecordTime","event","preventDefault","willUpdate","Error","error","alert"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,UAAD,EAAaC,OAAb,EAAsBC,MAAtB,EAA8BC,QAA9B,KAA2C;AAAA;;AACpE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAACE,UAAU,CAACI,IAAZ,CAAhC;AACA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAACE,UAAU,CAACM,MAAZ,CAApC;;AACA,QAAME,SAAS,GAAIC,OAAD,IAAa;AAC7B,WAAOA,OAAO,CAACL,IAAR,IAAgBK,OAAO,CAACH,MAA/B;AACD,GAFD;;AAGA,QAAMI,YAAY,GAAIN,IAAD,IAAUC,OAAO,CAACD,IAAD,CAAtC;;AACA,QAAMO,cAAc,GAAIL,MAAD,IAAYC,SAAS,CAACK,QAAQ,CAACN,MAAD,CAAT,CAA5C;;AACA,QAAMO,UAAU,GAAG,MAAO,GAAEX,MAAM,GAAG,UAAH,GAAgB,SAAU,kBAA5D;;AACA,QAAMY,QAAQ,GAAG,MAAOL,OAAP,IAAmB,MAAMR,OAAO,CAACQ,OAAD,CAAP,CAAiBM,IAAjB,EAA1C;;AACA,QAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC,QAAI;AACFA,MAAAA,KAAK,CAACC,cAAN;AACA,YAAMT,OAAO,GAAG;AAAEL,QAAAA,IAAF;AAAQE,QAAAA;AAAR,OAAhB;AACA,UAAIa,UAAU,GAAG,IAAjB;AACA,UAAI,OAAOX,SAAP,KAAqB,UAAzB,EAAqCW,UAAU,GAAGX,SAAS,CAACC,OAAD,CAAtB;;AACrC,UAAIU,UAAJ,EAAgB;AACdhB,QAAAA,QAAQ;AACRW,QAAAA,QAAQ,CAACL,OAAD,CAAR;AACD,OAHD,MAGO;AACL,cAAM,IAAIW,KAAJ,CAAUP,UAAU,EAApB,CAAN;AACD;AACF,KAXD,CAWE,OAAOQ,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,GAfD;;AAgBA,SAAO;AAAEX,IAAAA,YAAF;AAAgBC,IAAAA,cAAhB;AAAgCK,IAAAA;AAAhC,GAAP;AACD,CA3BM;;GAAMjB,W","sourcesContent":["import { useState } from \"react\";\n\nexport const useEditTime = (recordTime, setTime, isWake, callback) => {\n  const [hour, setHour] = useState(recordTime.hour);\n  const [minute, setMinute] = useState(recordTime.minute);\n  const validator = (timeObj) => {\n    return timeObj.hour && timeObj.minute;\n  };\n  const onChangeHour = (hour) => setHour(hour);\n  const onChangeMinute = (minute) => setMinute(parseInt(minute));\n  const getErrText = () => `${isWake ? \"WakeTime\" : \"BedTime\"} is not entered.`;\n  const editTime = async (timeObj) => await setTime(timeObj).edit();\n  const onEditRecordTime = (event) => {\n    try {\n      event.preventDefault();\n      const timeObj = { hour, minute };\n      let willUpdate = true;\n      if (typeof validator === \"function\") willUpdate = validator(timeObj);\n      if (willUpdate) {\n        callback();\n        editTime(timeObj);\n      } else {\n        throw new Error(getErrText());\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  return { onChangeHour, onChangeMinute, onEditRecordTime };\n};\n"]},"metadata":{},"sourceType":"module"}