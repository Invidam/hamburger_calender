{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/worklist/element/timeBtn/TimeDisplayBtn.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useDeleteWork } from \"../../../../hooks/useDeleteWork\";\nimport { useEditTime } from \"../../../../hooks/useEditTime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst customStyles = {\n  content: {\n    // top: \"40vh\",\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"rgb(245, 235, 220)\",\n    border: \"none\"\n  },\n  overlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(0,0,0,0.4)\"\n  }\n};\nexport const TimeRecordDisplay = ({\n  recordTime,\n  isWake,\n  updateRecrodTime\n}) => {\n  _s();\n\n  const [editModalIsOpen, setEditModalIsOpen] = useState(false);\n\n  const openEditModal = () => {\n    setEditModalIsOpen(true);\n    console.log(\"OPEN\");\n  };\n\n  const closeEditModal = event => setEditModalIsOpen(false);\n\n  const {\n    onEditRecrodTime\n  } = useEditTime(recordTime, updateRecrodTime, isWake, closeEditModal);\n\n  const editTimeWindow = /*#__PURE__*/_jsxDEV(EditTimeWindow, {\n    recordTime: recordTime,\n    isWake: isWake,\n    onEditTime: onEditTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n\n  const editModal = /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: editModalIsOpen,\n    onRequestClose: closeEditModal,\n    style: customStyles,\n    contentLabel: \"Example Modal\",\n    overlayClassName: \"Overlay\",\n    children: [editWorkWindow, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"modalWindow__btn\",\n      onClick: event => onDeleteWork(event, idx),\n      children: \"DELETE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"modalWindow__close modalWindow__btn\",\n      onClick: closeEditModal,\n      children: \"CLOSE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: isWake ? \"workList__wakeTime-display workList__time-display workList__time workList__wakeTime\" : \"workList__bedTime-display workList__time-display workList__time workList__bedTime\",\n    onClick: openEditModal,\n    children: [isWake ? \"Wake at \" : \"Sleep at \", recordTime.hour < 10 ? \"0\" + recordTime.hour : recordTime.hour, \":\", recordTime.minute < 10 ? \"0\" + recordTime.minute : recordTime.minute]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TimeRecordDisplay, \"+CNJqdITo9wHCUcmDtUlztnVN1U=\", false, function () {\n  return [useEditTime];\n});\n\n_c = TimeRecordDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeRecordDisplay\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/worklist/element/timeBtn/TimeDisplayBtn.js"],"names":["useState","Modal","useDeleteWork","useEditTime","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","backgroundColor","border","overlay","position","TimeRecordDisplay","recordTime","isWake","updateRecrodTime","editModalIsOpen","setEditModalIsOpen","openEditModal","console","log","closeEditModal","event","onEditRecrodTime","editTimeWindow","onEditTime","editModal","editWorkWindow","onDeleteWork","idx","hour","minute"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,WAAT,QAA4B,+BAA5B;;AACAF,KAAK,CAACG,aAAN,CAAoB,OAApB;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,GAAG,EAAE,KAFE;AAGPC,IAAAA,IAAI,EAAE,KAHC;AAIPC,IAAAA,KAAK,EAAE,MAJA;AAKPC,IAAAA,MAAM,EAAE,MALD;AAMPC,IAAAA,WAAW,EAAE,MANN;AAOPC,IAAAA,SAAS,EAAE,uBAPJ;AAQPC,IAAAA,eAAe,EAAE,oBARV;AASPC,IAAAA,MAAM,EAAE;AATD,GADU;AAYnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE,OADH;AAEPT,IAAAA,GAAG,EAAE,CAFE;AAGPC,IAAAA,IAAI,EAAE,CAHC;AAIPC,IAAAA,KAAK,EAAE,CAJA;AAKPC,IAAAA,MAAM,EAAE,CALD;AAMPG,IAAAA,eAAe,EAAE;AANV;AAZU,CAArB;AAqBA,OAAO,MAAMI,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,MAAd;AAAsBC,EAAAA;AAAtB,CAAD,KAA8C;AAAA;;AAC7E,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCtB,QAAQ,CAAC,KAAD,CAAtD;;AACA,QAAMuB,aAAa,GAAG,MAAM;AAC1BD,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,GAHD;;AAIA,QAAMC,cAAc,GAAIC,KAAD,IAAWL,kBAAkB,CAAC,KAAD,CAApD;;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAuBzB,WAAW,CACtCe,UADsC,EAEtCE,gBAFsC,EAGtCD,MAHsC,EAItCO,cAJsC,CAAxC;;AAMA,QAAMG,cAAc,gBAClB,QAAC,cAAD;AACE,IAAA,UAAU,EAAEX,UADd;AAEE,IAAA,MAAM,EAAEC,MAFV;AAGE,IAAA,UAAU,EAAEW;AAHd;AAAA;AAAA;AAAA;AAAA,UADF;;AAOA,QAAMC,SAAS,gBACb,QAAC,KAAD;AACE,IAAA,MAAM,EAAEV,eADV;AAEE,IAAA,cAAc,EAAEK,cAFlB;AAGE,IAAA,KAAK,EAAErB,YAHT;AAIE,IAAA,YAAY,EAAC,eAJf;AAKE,IAAA,gBAAgB,EAAC,SALnB;AAAA,eAOG2B,cAPH,eAQE;AACE,MAAA,SAAS,EAAC,kBADZ;AAEE,MAAA,OAAO,EAAGL,KAAD,IAAWM,YAAY,CAACN,KAAD,EAAQO,GAAR,CAFlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,eAcE;AACE,MAAA,SAAS,EAAC,qCADZ;AAEE,MAAA,OAAO,EAAER,cAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAuBA,sBACE;AACE,IAAA,SAAS,EACPP,MAAM,GACF,qFADE,GAEF,mFAJR;AAME,IAAA,OAAO,EAAEI,aANX;AAAA,eAQGJ,MAAM,GAAG,UAAH,GAAgB,WARzB,EASGD,UAAU,CAACiB,IAAX,GAAkB,EAAlB,GAAuB,MAAMjB,UAAU,CAACiB,IAAxC,GAA+CjB,UAAU,CAACiB,IAT7D,OAUGjB,UAAU,CAACkB,MAAX,GAAoB,EAApB,GAAyB,MAAMlB,UAAU,CAACkB,MAA1C,GAAmDlB,UAAU,CAACkB,MAVjE;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAzDM;;GAAMnB,iB;UAOkBd,W;;;KAPlBc,iB","sourcesContent":["import { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useDeleteWork } from \"../../../../hooks/useDeleteWork\";\nimport { useEditTime } from \"../../../../hooks/useEditTime\";\nModal.setAppElement(\"#root\");\nconst customStyles = {\n  content: {\n    // top: \"40vh\",\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"rgb(245, 235, 220)\",\n    border: \"none\",\n  },\n  overlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(0,0,0,0.4)\",\n  },\n};\nexport const TimeRecordDisplay = ({ recordTime, isWake, updateRecrodTime }) => {\n  const [editModalIsOpen, setEditModalIsOpen] = useState(false);\n  const openEditModal = () => {\n    setEditModalIsOpen(true);\n    console.log(\"OPEN\");\n  };\n  const closeEditModal = (event) => setEditModalIsOpen(false);\n  const { onEditRecrodTime } = useEditTime(\n    recordTime,\n    updateRecrodTime,\n    isWake,\n    closeEditModal\n  );\n  const editTimeWindow = (\n    <EditTimeWindow\n      recordTime={recordTime}\n      isWake={isWake}\n      onEditTime={onEditTime}\n    />\n  );\n  const editModal = (\n    <Modal\n      isOpen={editModalIsOpen}\n      onRequestClose={closeEditModal}\n      style={customStyles}\n      contentLabel=\"Example Modal\"\n      overlayClassName=\"Overlay\"\n    >\n      {editWorkWindow}\n      <button\n        className=\"modalWindow__btn\"\n        onClick={(event) => onDeleteWork(event, idx)}\n      >\n        DELETE\n      </button>\n      <button\n        className=\"modalWindow__close modalWindow__btn\"\n        onClick={closeEditModal}\n      >\n        CLOSE\n      </button>\n    </Modal>\n  );\n  return (\n    <li\n      className={\n        isWake\n          ? \"workList__wakeTime-display workList__time-display workList__time workList__wakeTime\"\n          : \"workList__bedTime-display workList__time-display workList__time workList__bedTime\"\n      }\n      onClick={openEditModal}\n    >\n      {isWake ? \"Wake at \" : \"Sleep at \"}\n      {recordTime.hour < 10 ? \"0\" + recordTime.hour : recordTime.hour}:\n      {recordTime.minute < 10 ? \"0\" + recordTime.minute : recordTime.minute}\n    </li>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}