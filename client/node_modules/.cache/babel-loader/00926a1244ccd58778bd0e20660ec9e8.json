{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/worklist/element/timeBtn/TimeDisplayBtn.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useDeleteTime } from \"../../../../hooks/workList/time/useDeleteTime\"; // import { useDeleteWork } from \"../../../../hooks/workList/work/useDeleteWork\";\n\nimport { useEditTime } from \"../../../../hooks/workList/time/useEditTime\";\nimport { getDifference, makeDisplayTime, timeObjToStr } from \"../../../../tools/time\";\nimport { EditTimeWindow } from \"../../window/time/EditTimeWindow\"; // import {EditTimeWindow} from \".\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nconst customStyles = {\n  content: {\n    // top: \"40vh\",\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"rgb(245, 235, 220)\",\n    border: \"none\"\n  },\n  overlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(0,0,0,0.4)\"\n  }\n};\nexport const TimeRecordDisplay = ({\n  recordTime,\n  isWake,\n  setTime,\n  targetTime\n}) => {\n  _s();\n\n  const [editModalIsOpen, setEditModalIsOpen] = useState(false);\n\n  const openEditModal = () => setEditModalIsOpen(true);\n\n  const closeEditModal = event => setEditModalIsOpen(false);\n\n  const editTimeHook = useEditTime(recordTime, setTime, isWake, closeEditModal);\n  const {\n    onDeleteTime\n  } = useDeleteTime(recordTime, setTime, closeEditModal);\n\n  const editTimeWindow = /*#__PURE__*/_jsxDEV(EditTimeWindow, {\n    recordTime: recordTime,\n    isWake: isWake,\n    editTimeHook: editTimeHook\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n\n  const editModal = /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: editModalIsOpen,\n    onRequestClose: closeEditModal,\n    style: customStyles,\n    contentLabel: \"Example Modal\",\n    overlayClassName: \"Overlay\",\n    children: [editTimeWindow, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"modalWindow__btn\",\n      onClick: event => onDeleteTime(event),\n      children: \"DELETE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"modalWindow__close modalWindow__btn\",\n      onClick: closeEditModal,\n      children: \"CLOSE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n\n  const targetElement = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tooltip-box__target\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-box__key\",\n      children: \"TargetTime:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-box__value\",\n      children: timeObjToStr(targetTime)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n\n  const valueElement = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tooltip-box__target\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-box__key\",\n      children: isWake ? \"WakeTime: \" : \"BedTime: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-box__value\",\n      children: [makeDisplayTime(recordTime.hour), \": \", makeDisplayTime(recordTime.minute)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n\n  const diffTime = getDifference(targetTime, recordTime);\n\n  const diffElement = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tooltip-box__target\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-box__key\",\n      children: \"Difference:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"tooltip-box__value\",\n      children: [makeDisplayTime(diffTime.hour), \": \", makeDisplayTime(diffTime.minute)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this); // <span className=\"tooltip_box__value\">{`${isWake ? \"Wake\" : \"Bed\"}Time: ${\n  //   recordTime.hour\n  // }: ${recordTime.minute}`}</span>;\n\n\n  const tooltipBox = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tooltip-content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tooltip-box\",\n      children: [targetTime.hour !== -1 ? targetElement : \"\", valueElement, targetTime.hour !== -1 ? diffElement : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      className: isWake ? \"workList__wakeTime-display workList__time-display workList__time workList__wakeTime tooltip\" : \"workList__bedTime-display workList__time-display workList__time workList__bedTime tooltip\",\n      onClick: openEditModal,\n      children: [isWake ? \"Wake at \" : \"Sleep at \", makeDisplayTime(recordTime.hour), \": \", makeDisplayTime(recordTime.minute), tooltipBox]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), editModal]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TimeRecordDisplay, \"+YUx5sfcWnQfjfCmxMOplmkaH2Y=\", false, function () {\n  return [useEditTime, useDeleteTime];\n});\n\n_c = TimeRecordDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeRecordDisplay\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/worklist/element/timeBtn/TimeDisplayBtn.js"],"names":["useState","Modal","useDeleteTime","useEditTime","getDifference","makeDisplayTime","timeObjToStr","EditTimeWindow","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","backgroundColor","border","overlay","position","TimeRecordDisplay","recordTime","isWake","setTime","targetTime","editModalIsOpen","setEditModalIsOpen","openEditModal","closeEditModal","event","editTimeHook","onDeleteTime","editTimeWindow","editModal","targetElement","valueElement","hour","minute","diffTime","diffElement","tooltipBox"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useDeleteTime } from \"../../../../hooks/workList/time/useDeleteTime\";\n// import { useDeleteWork } from \"../../../../hooks/workList/work/useDeleteWork\";\nimport { useEditTime } from \"../../../../hooks/workList/time/useEditTime\";\nimport {\n  getDifference,\n  makeDisplayTime,\n  timeObjToStr,\n} from \"../../../../tools/time\";\nimport { EditTimeWindow } from \"../../window/time/EditTimeWindow\";\n// import {EditTimeWindow} from \".\"\n\nModal.setAppElement(\"#root\");\nconst customStyles = {\n  content: {\n    // top: \"40vh\",\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"rgb(245, 235, 220)\",\n    border: \"none\",\n  },\n  overlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(0,0,0,0.4)\",\n  },\n};\nexport const TimeRecordDisplay = ({\n  recordTime,\n  isWake,\n  setTime,\n  targetTime,\n}) => {\n  const [editModalIsOpen, setEditModalIsOpen] = useState(false);\n  const openEditModal = () => setEditModalIsOpen(true);\n\n  const closeEditModal = (event) => setEditModalIsOpen(false);\n  const editTimeHook = useEditTime(recordTime, setTime, isWake, closeEditModal);\n  const { onDeleteTime } = useDeleteTime(recordTime, setTime, closeEditModal);\n  const editTimeWindow = (\n    <EditTimeWindow\n      recordTime={recordTime}\n      isWake={isWake}\n      editTimeHook={editTimeHook}\n    />\n  );\n  const editModal = (\n    <Modal\n      isOpen={editModalIsOpen}\n      onRequestClose={closeEditModal}\n      style={customStyles}\n      contentLabel=\"Example Modal\"\n      overlayClassName=\"Overlay\"\n    >\n      {editTimeWindow}\n      <button\n        className=\"modalWindow__btn\"\n        onClick={(event) => onDeleteTime(event)}\n      >\n        DELETE\n      </button>\n      <button\n        className=\"modalWindow__close modalWindow__btn\"\n        onClick={closeEditModal}\n      >\n        CLOSE\n      </button>\n    </Modal>\n  );\n  const targetElement = (\n    <div className=\"tooltip-box__target\">\n      <span className=\"tooltip-box__key\">TargetTime:</span>\n      <span className=\"tooltip-box__value\">{timeObjToStr(targetTime)}</span>\n    </div>\n  );\n  const valueElement = (\n    <div className=\"tooltip-box__target\">\n      <span className=\"tooltip-box__key\">\n        {isWake ? \"WakeTime: \" : \"BedTime: \"}\n      </span>\n      <span className=\"tooltip-box__value\">\n        {makeDisplayTime(recordTime.hour)}: {makeDisplayTime(recordTime.minute)}\n      </span>\n    </div>\n  );\n  const diffTime = getDifference(targetTime, recordTime);\n  const diffElement = (\n    <div className=\"tooltip-box__target\">\n      <span className=\"tooltip-box__key\">Difference:</span>\n      <span className=\"tooltip-box__value\">\n        {makeDisplayTime(diffTime.hour)}: {makeDisplayTime(diffTime.minute)}\n      </span>\n    </div>\n  );\n  // <span className=\"tooltip_box__value\">{`${isWake ? \"Wake\" : \"Bed\"}Time: ${\n  //   recordTime.hour\n  // }: ${recordTime.minute}`}</span>;\n  const tooltipBox = (\n    <div className=\"tooltip-content\">\n      <div className=\"tooltip-box\">\n        {targetTime.hour !== -1 ? targetElement : \"\"}\n        {valueElement}\n        {targetTime.hour !== -1 ? diffElement : \"\"}\n      </div>\n    </div>\n  );\n  return (\n    <div>\n      <li\n        className={\n          isWake\n            ? \"workList__wakeTime-display workList__time-display workList__time workList__wakeTime tooltip\"\n            : \"workList__bedTime-display workList__time-display workList__time workList__bedTime tooltip\"\n        }\n        onClick={openEditModal}\n      >\n        {isWake ? \"Wake at \" : \"Sleep at \"}\n        {makeDisplayTime(recordTime.hour)}: {makeDisplayTime(recordTime.minute)}\n        {tooltipBox}\n      </li>\n      {editModal}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}