{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/App.js\",\n    _s = $RefreshSig$();\n\n// import logo from './logo.svg';\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport Calendar from \"react-calendar\";\nimport \"./css/App.css\";\nimport { WorkListTemplate } from \"./components/worklist/WorkListTemplate\";\nimport { useAxios } from \"./hooks/example/useAxios\"; // import \"react-calendar/dist/Calendar.css\";\n\nimport \"./css/calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getToday = () => {\n  const offset = new Date().getTimezoneOffset() * 60000;\n  console.log(\"OFFSET: \", offset);\n  const today = new Date(Date.now() - offset);\n  return today;\n};\n\nfunction App() {\n  _s();\n\n  const [value, onChange] = useState(getToday());\n\n  const clickDay = (event, value) => alert(\"Clicked day: \", value);\n\n  const changeFormatYYYYMMDD = date => date.toISOString().slice(0, 10);\n\n  const mark = [\"2021-09-12\", \"2021-09-13\", \"2021-09-14\"];\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hamburger App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), changeFormatYYYYMMDD(value)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"article\", {\n        children: /*#__PURE__*/_jsxDEV(Calendar, {\n          className: \"caldendar\",\n          onChange: onChange,\n          value: value,\n          locale: \"en\",\n          calendarType: \"US\",\n          onClickDay: (value, event) => console.log(\"Clic123ked day: \", value),\n          tileClassName: ({\n            date,\n            view\n          }) => {\n            console.log(date);\n            if (mark.find(markedDate => markedDate === changeFormatYYYYMMDD(date))) return \"highlight\"; //data: Sun Sep 12 2021 00:00:00 GMT+0900 (한국 표준시)\n            // if (mark.find((x) => x === date.format(\"DD-MM-YYYY\"))) {\n            //   return \"highlight\";\n            // }\n          } //DB에 있는 날짜는 체크표시 해야함.\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n        children: /*#__PURE__*/_jsxDEV(WorkListTemplate, {\n          date: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: \"footer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ki0Mhm7BrRWEjVlcI8kKy7SCFwM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/App.js"],"names":["axios","useState","Calendar","WorkListTemplate","useAxios","getToday","offset","Date","getTimezoneOffset","console","log","today","now","App","value","onChange","clickDay","event","alert","changeFormatYYYYMMDD","date","toISOString","slice","mark","view","find","markedDate"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,eAAP;AACA,SAASC,gBAAT,QAAiC,wCAAjC;AACA,SAASC,QAAT,QAAyB,0BAAzB,C,CACA;;AACA,OAAO,oBAAP;;;AACA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,MAAM,GAAG,IAAIC,IAAJ,GAAWC,iBAAX,KAAiC,KAAhD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,MAAxB;AACA,QAAMK,KAAK,GAAG,IAAIJ,IAAJ,CAASA,IAAI,CAACK,GAAL,KAAaN,MAAtB,CAAd;AACA,SAAOK,KAAP;AACD,CALD;;AAMA,SAASE,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAACI,QAAQ,EAAT,CAAlC;;AACA,QAAMW,QAAQ,GAAG,CAACC,KAAD,EAAQH,KAAR,KAAkBI,KAAK,CAAC,eAAD,EAAkBJ,KAAlB,CAAxC;;AACA,QAAMK,oBAAoB,GAAIC,IAAD,IAAUA,IAAI,CAACC,WAAL,GAAmBC,KAAnB,CAAyB,CAAzB,EAA4B,EAA5B,CAAvC;;AACA,QAAMC,IAAI,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,CAAb;AACA,sBACE;AAAA,4BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGJ,oBAAoB,CAACL,KAAD,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAA,8BACE;AAAA,+BACE,QAAC,QAAD;AACE,UAAA,SAAS,EAAC,WADZ;AAEE,UAAA,QAAQ,EAAEC,QAFZ;AAGE,UAAA,KAAK,EAAED,KAHT;AAIE,UAAA,MAAM,EAAE,IAJV;AAKE,UAAA,YAAY,EAAE,IALhB;AAME,UAAA,UAAU,EAAE,CAACA,KAAD,EAAQG,KAAR,KACVR,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCI,KAAhC,CAPJ;AASE,UAAA,aAAa,EAAE,CAAC;AAAEM,YAAAA,IAAF;AAAQI,YAAAA;AAAR,WAAD,KAAoB;AACjCf,YAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;AACA,gBACEG,IAAI,CAACE,IAAL,CACGC,UAAD,IAAgBA,UAAU,KAAKP,oBAAoB,CAACC,IAAD,CADrD,CADF,EAKE,OAAO,WAAP,CAP+B,CAQjC;AACA;AACA;AACA;AACD,WArBH,CAsBE;;AAtBF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eA2BE;AAAA,+BACE,QAAC,gBAAD;AAAkB,UAAA,IAAI,EAAEN;AAAxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA3BF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAoCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD;;GA7CQD,G;;KAAAA,G;AA+CT,eAAeA,GAAf","sourcesContent":["// import logo from './logo.svg';\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport Calendar from \"react-calendar\";\nimport \"./css/App.css\";\nimport { WorkListTemplate } from \"./components/worklist/WorkListTemplate\";\nimport { useAxios } from \"./hooks/example/useAxios\";\n// import \"react-calendar/dist/Calendar.css\";\nimport \"./css/calendar.css\";\nconst getToday = () => {\n  const offset = new Date().getTimezoneOffset() * 60000;\n  console.log(\"OFFSET: \", offset);\n  const today = new Date(Date.now() - offset);\n  return today;\n};\nfunction App() {\n  const [value, onChange] = useState(getToday());\n  const clickDay = (event, value) => alert(\"Clicked day: \", value);\n  const changeFormatYYYYMMDD = (date) => date.toISOString().slice(0, 10);\n  const mark = [\"2021-09-12\", \"2021-09-13\", \"2021-09-14\"];\n  return (\n    <main>\n      <header>\n        <h1>Hamburger App</h1>\n        {changeFormatYYYYMMDD(value)}\n      </header>\n      <section>\n        <article>\n          <Calendar\n            className=\"caldendar\"\n            onChange={onChange}\n            value={value}\n            locale={\"en\"}\n            calendarType={\"US\"}\n            onClickDay={(value, event) =>\n              console.log(\"Clic123ked day: \", value)\n            }\n            tileClassName={({ date, view }) => {\n              console.log(date);\n              if (\n                mark.find(\n                  (markedDate) => markedDate === changeFormatYYYYMMDD(date)\n                )\n              )\n                return \"highlight\";\n              //data: Sun Sep 12 2021 00:00:00 GMT+0900 (한국 표준시)\n              // if (mark.find((x) => x === date.format(\"DD-MM-YYYY\"))) {\n              //   return \"highlight\";\n              // }\n            }}\n            //DB에 있는 날짜는 체크표시 해야함.\n          />\n        </article>\n        <article>\n          <WorkListTemplate date={value} />\n        </article>\n      </section>\n      <footer>footer</footer>\n    </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}