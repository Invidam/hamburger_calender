{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport isEmail from \"validator/lib/isEmail\";\nimport { API } from \"../../tools/API\";\nconst baseUrl = \"https://github.com/login/oauth/authorize\";\nconst authConfig = {\n  client_id: \"44089da06c95a868c4cb\",\n  allow_signup: false,\n  scope: \"read:user user:email\"\n};\nconsole.log(\"COMPARE: \", process.env.GH_CLIENT_ID, \"44089da06c95a868c4cb\");\nexport const useAttemptLogin = async (login, history) => {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmitNotSocial = async event => {\n    try {\n      event.preventDefault();\n      const userInfo = {\n        email,\n        password\n      };\n      if (!isEmail(email)) throw new Error(\"Entered Email form is wrong\");\n      if (!password) throw new Error(\"Password is empty\");\n      await login(userInfo, \"notSocial\");\n      history.push(\"/\");\n    } catch (error) {\n      alert(error);\n      setEmail(\"\");\n      setPassword(\"\");\n      history.push(\"/login\");\n    }\n  };\n\n  const getGithubAuthUrl = async () => await API.auth().getGithubAuthUrl();\n\n  const authUrl = await getGithubAuthUrl();\n  return {\n    email,\n    setEmail,\n    password,\n    setPassword,\n    handleSubmitNotSocial,\n    authUrl\n  };\n};\n\n_s(useAttemptLogin, \"3B3pqDcVnkT+z/sPK6Z9zQsLP+s=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/src/hooks/user/useAttemptLogin.js"],"names":["useState","isEmail","API","baseUrl","authConfig","client_id","allow_signup","scope","console","log","process","env","GH_CLIENT_ID","useAttemptLogin","login","history","email","setEmail","password","setPassword","handleSubmitNotSocial","event","preventDefault","userInfo","Error","push","error","alert","getGithubAuthUrl","auth","authUrl"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,MAAMC,OAAO,GAAG,0CAAhB;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAE,sBADM;AAEjBC,EAAAA,YAAY,EAAE,KAFG;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAAnB;AAKAC,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,OAAO,CAACC,GAAR,CAAYC,YAArC,EAAmD,sBAAnD;AAEA,OAAO,MAAMC,eAAe,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAAA;;AACvD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMoB,qBAAqB,GAAG,MAAOC,KAAP,IAAiB;AAC7C,QAAI;AACFA,MAAAA,KAAK,CAACC,cAAN;AACA,YAAMC,QAAQ,GAAG;AAAEP,QAAAA,KAAF;AAASE,QAAAA;AAAT,OAAjB;AACA,UAAI,CAACjB,OAAO,CAACe,KAAD,CAAZ,EAAqB,MAAM,IAAIQ,KAAJ,CAAU,6BAAV,CAAN;AACrB,UAAI,CAACN,QAAL,EAAe,MAAM,IAAIM,KAAJ,CAAU,mBAAV,CAAN;AACf,YAAMV,KAAK,CAACS,QAAD,EAAW,WAAX,CAAX;AACAR,MAAAA,OAAO,CAACU,IAAR,CAAa,GAAb;AACD,KAPD,CAOE,OAAOC,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACAT,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAJ,MAAAA,OAAO,CAACU,IAAR,CAAa,QAAb;AACD;AACF,GAdD;;AAeA,QAAMG,gBAAgB,GAAG,YAAY,MAAM1B,GAAG,CAAC2B,IAAJ,GAAWD,gBAAX,EAA3C;;AACA,QAAME,OAAO,GAAG,MAAMF,gBAAgB,EAAtC;AACA,SAAO;AACLZ,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLC,IAAAA,QAHK;AAILC,IAAAA,WAJK;AAKLC,IAAAA,qBALK;AAMLU,IAAAA;AANK,GAAP;AAQD,CA7BM;;GAAMjB,e","sourcesContent":["import { useState } from \"react\";\nimport isEmail from \"validator/lib/isEmail\";\nimport { API } from \"../../tools/API\";\nconst baseUrl = \"https://github.com/login/oauth/authorize\";\nconst authConfig = {\n  client_id: \"44089da06c95a868c4cb\",\n  allow_signup: false,\n  scope: \"read:user user:email\",\n};\nconsole.log(\"COMPARE: \", process.env.GH_CLIENT_ID, \"44089da06c95a868c4cb\");\n\nexport const useAttemptLogin = async (login, history) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmitNotSocial = async (event) => {\n    try {\n      event.preventDefault();\n      const userInfo = { email, password };\n      if (!isEmail(email)) throw new Error(\"Entered Email form is wrong\");\n      if (!password) throw new Error(\"Password is empty\");\n      await login(userInfo, \"notSocial\");\n      history.push(\"/\");\n    } catch (error) {\n      alert(error);\n      setEmail(\"\");\n      setPassword(\"\");\n      history.push(\"/login\");\n    }\n  };\n  const getGithubAuthUrl = async () => await API.auth().getGithubAuthUrl();\n  const authUrl = await getGithubAuthUrl();\n  return {\n    email,\n    setEmail,\n    password,\n    setPassword,\n    handleSubmitNotSocial,\n    authUrl,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}