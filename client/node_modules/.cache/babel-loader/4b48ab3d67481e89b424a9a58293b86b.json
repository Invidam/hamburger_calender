{"ast":null,"code":"let encode;\nlet encodeBuffer;\n\nif (Buffer.isEncoding('base64url')) {\n  encode = (input, encoding = 'utf8') => Buffer.from(input, encoding).toString('base64url');\n\n  encodeBuffer = buf => buf.toString('base64url');\n} else {\n  const fromBase64 = base64 => base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n\n  encode = (input, encoding = 'utf8') => fromBase64(Buffer.from(input, encoding).toString('base64'));\n\n  encodeBuffer = buf => fromBase64(buf.toString('base64'));\n}\n\nconst decodeToBuffer = input => {\n  return Buffer.from(input, 'base64');\n};\n\nconst decode = (input, encoding = 'utf8') => {\n  return decodeToBuffer(input).toString(encoding);\n};\n\nconst b64uJSON = {\n  encode: input => {\n    return encode(JSON.stringify(input));\n  },\n  decode: (input, encoding = 'utf8') => {\n    return JSON.parse(decode(input, encoding));\n  }\n};\n\nb64uJSON.decode.try = (input, encoding = 'utf8') => {\n  try {\n    return b64uJSON.decode(input, encoding);\n  } catch (err) {\n    return decode(input, encoding);\n  }\n};\n\nconst bnToBuf = bn => {\n  let hex = BigInt(bn).toString(16);\n\n  if (hex.length % 2) {\n    hex = `0${hex}`;\n  }\n\n  const len = hex.length / 2;\n  const u8 = new Uint8Array(len);\n  let i = 0;\n  let j = 0;\n\n  while (i < len) {\n    u8[i] = parseInt(hex.slice(j, j + 2), 16);\n    i += 1;\n    j += 2;\n  }\n\n  return u8;\n};\n\nconst encodeBigInt = bn => encodeBuffer(Buffer.from(bnToBuf(bn)));\n\nmodule.exports.decode = decode;\nmodule.exports.decodeToBuffer = decodeToBuffer;\nmodule.exports.encode = encode;\nmodule.exports.encodeBuffer = encodeBuffer;\nmodule.exports.JSON = b64uJSON;\nmodule.exports.encodeBigInt = encodeBigInt;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/help/base64url.js"],"names":["encode","encodeBuffer","Buffer","isEncoding","input","encoding","from","toString","buf","fromBase64","base64","replace","decodeToBuffer","decode","b64uJSON","JSON","stringify","parse","try","err","bnToBuf","bn","hex","BigInt","length","len","u8","Uint8Array","i","j","parseInt","slice","encodeBigInt","module","exports"],"mappings":"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","sourcesContent":["let encode\nlet encodeBuffer\nif (Buffer.isEncoding('base64url')) {\n  encode = (input, encoding = 'utf8') => Buffer.from(input, encoding).toString('base64url')\n  encodeBuffer = (buf) => buf.toString('base64url')\n} else {\n  const fromBase64 = (base64) => base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  encode = (input, encoding = 'utf8') => fromBase64(Buffer.from(input, encoding).toString('base64'))\n  encodeBuffer = (buf) => fromBase64(buf.toString('base64'))\n}\n\nconst decodeToBuffer = (input) => {\n  return Buffer.from(input, 'base64')\n}\n\nconst decode = (input, encoding = 'utf8') => {\n  return decodeToBuffer(input).toString(encoding)\n}\n\nconst b64uJSON = {\n  encode: (input) => {\n    return encode(JSON.stringify(input))\n  },\n  decode: (input, encoding = 'utf8') => {\n    return JSON.parse(decode(input, encoding))\n  }\n}\n\nb64uJSON.decode.try = (input, encoding = 'utf8') => {\n  try {\n    return b64uJSON.decode(input, encoding)\n  } catch (err) {\n    return decode(input, encoding)\n  }\n}\n\nconst bnToBuf = (bn) => {\n  let hex = BigInt(bn).toString(16)\n  if (hex.length % 2) {\n    hex = `0${hex}`\n  }\n\n  const len = hex.length / 2\n  const u8 = new Uint8Array(len)\n\n  let i = 0\n  let j = 0\n  while (i < len) {\n    u8[i] = parseInt(hex.slice(j, j + 2), 16)\n    i += 1\n    j += 2\n  }\n\n  return u8\n}\n\nconst encodeBigInt = (bn) => encodeBuffer(Buffer.from(bnToBuf(bn)))\n\nmodule.exports.decode = decode\nmodule.exports.decodeToBuffer = decodeToBuffer\nmodule.exports.encode = encode\nmodule.exports.encodeBuffer = encodeBuffer\nmodule.exports.JSON = b64uJSON\nmodule.exports.encodeBigInt = encodeBigInt\n"]},"metadata":{},"sourceType":"script"}