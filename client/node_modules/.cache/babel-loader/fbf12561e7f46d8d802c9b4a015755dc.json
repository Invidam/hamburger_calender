{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleProtobufTimestampFromProto3JSON = exports.googleProtobufTimestampToProto3JSON = void 0;\n\nfunction googleProtobufTimestampToProto3JSON(obj) {\n  // seconds is an instance of Long so it won't be undefined\n  const durationSeconds = obj.seconds;\n  const durationMilliseconds = typeof obj.nanos === 'number' && obj.nanos > 0 ? Math.floor(obj.nanos / 1000000) : 0;\n  return new Date(durationSeconds * 1000 + durationMilliseconds).toISOString();\n}\n\nexports.googleProtobufTimestampToProto3JSON = googleProtobufTimestampToProto3JSON;\n\nfunction googleProtobufTimestampFromProto3JSON(json) {\n  const match = json.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/);\n\n  if (!match) {\n    throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);\n  }\n\n  const date = new Date(json);\n  const millisecondsSinceEpoch = date.getTime();\n  const seconds = Math.floor(millisecondsSinceEpoch / 1000);\n  const nanos = millisecondsSinceEpoch % 1000 * 1000000;\n  const result = {};\n\n  if (seconds !== 0) {\n    result.seconds = seconds;\n  }\n\n  if (nanos !== 0) {\n    result.nanos = nanos;\n  }\n\n  return result;\n}\n\nexports.googleProtobufTimestampFromProto3JSON = googleProtobufTimestampFromProto3JSON;","map":{"version":3,"sources":["../../typescript/src/timestamp.ts"],"names":[],"mappings":"cAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAUA,SAAgB,mCAAhB,CACE,GADF,EACmC;AAEjC;AACA,QAAM,eAAe,GAAG,GAAG,CAAC,OAA5B;AACA,QAAM,oBAAoB,GACxB,OAAO,GAAG,CAAC,KAAX,KAAqB,QAArB,IAAiC,GAAG,CAAC,KAAJ,GAAY,CAA7C,GACI,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,KAAJ,GAAY,OAAvB,CADJ,GAEI,CAHN;AAIA,SAAO,IAAI,IAAJ,CAAS,eAAe,GAAG,IAAlB,GAAyB,oBAAlC,EAAwD,WAAxD,EAAP;AACD;;AAVD,OAAA,CAAA,mCAAA,GAAA,mCAAA;;AAYA,SAAgB,qCAAhB,CAAsD,IAAtD,EAAkE;AAChE,QAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,gDAAX,CAAd;;AACA,MAAI,CAAC,KAAL,EAAY;AACV,UAAM,IAAI,KAAJ,CACJ,yDAAyD,IAAI,qCADzD,CAAN;AAGD;;AAED,QAAM,IAAI,GAAG,IAAI,IAAJ,CAAS,IAAT,CAAb;AACA,QAAM,sBAAsB,GAAG,IAAI,CAAC,OAAL,EAA/B;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,sBAAsB,GAAG,IAApC,CAAhB;AACA,QAAM,KAAK,GAAI,sBAAsB,GAAG,IAA1B,GAAkC,OAAhD;AAEA,QAAM,MAAM,GAAoB,EAAhC;;AACA,MAAI,OAAO,KAAK,CAAhB,EAAmB;AACjB,IAAA,MAAM,CAAC,OAAP,GAAiB,OAAjB;AACD;;AACD,MAAI,KAAK,KAAK,CAAd,EAAiB;AACf,IAAA,MAAM,CAAC,KAAP,GAAe,KAAf;AACD;;AACD,SAAO,MAAP;AACD;;AArBD,OAAA,CAAA,qCAAA,GAAA,qCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.googleProtobufTimestampFromProto3JSON = exports.googleProtobufTimestampToProto3JSON = void 0;\nfunction googleProtobufTimestampToProto3JSON(obj) {\n    // seconds is an instance of Long so it won't be undefined\n    const durationSeconds = obj.seconds;\n    const durationMilliseconds = typeof obj.nanos === 'number' && obj.nanos > 0\n        ? Math.floor(obj.nanos / 1000000)\n        : 0;\n    return new Date(durationSeconds * 1000 + durationMilliseconds).toISOString();\n}\nexports.googleProtobufTimestampToProto3JSON = googleProtobufTimestampToProto3JSON;\nfunction googleProtobufTimestampFromProto3JSON(json) {\n    const match = json.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/);\n    if (!match) {\n        throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);\n    }\n    const date = new Date(json);\n    const millisecondsSinceEpoch = date.getTime();\n    const seconds = Math.floor(millisecondsSinceEpoch / 1000);\n    const nanos = (millisecondsSinceEpoch % 1000) * 1000000;\n    const result = {};\n    if (seconds !== 0) {\n        result.seconds = seconds;\n    }\n    if (nanos !== 0) {\n        result.nanos = nanos;\n    }\n    return result;\n}\nexports.googleProtobufTimestampFromProto3JSON = googleProtobufTimestampFromProto3JSON;\n//# sourceMappingURL=timestamp.js.map"]},"metadata":{},"sourceType":"script"}