{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Impersonated = void 0;\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass Impersonated extends oauth2client_1.OAuth2Client {\n  /**\n   * Impersonated service account credentials.\n   *\n   * Create a new access token by impersonating another service account.\n   *\n   * Impersonated Credentials allowing credentials issued to a user or\n   * service account to impersonate another. The source project using\n   * Impersonated Credentials must enable the \"IAMCredentials\" API.\n   * Also, the target service account must grant the orginating principal\n   * the \"Service Account Token Creator\" IAM role.\n   *\n   * @param {object} options - The configuration object.\n   * @param {object} [options.sourceClient] the source credential used as to\n   * acquire the impersonated credentials.\n   * @param {string} [options.targetPrincipal] the service account to\n   * impersonate.\n   * @param {string[]} [options.delegates] the chained list of delegates\n   * required to grant the final access_token. If set, the sequence of\n   * identities must have \"Service Account Token Creator\" capability granted to\n   * the preceding identity. For example, if set to [serviceAccountB,\n   * serviceAccountC], the sourceCredential must have the Token Creator role on\n   * serviceAccountB. serviceAccountB must have the Token Creator on\n   * serviceAccountC. Finally, C must have Token Creator on target_principal.\n   * If left unset, sourceCredential must have that role on targetPrincipal.\n   * @param {string[]} [options.targetScopes] scopes to request during the\n   * authorization grant.\n   * @param {number} [options.lifetime] number of seconds the delegated\n   * credential should be valid for up to 3600 seconds by default, or 43,200\n   * seconds by extending the token's lifetime, see:\n   * https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-oauth\n   * @param {string} [options.endpoint] api endpoint override.\n   */\n  constructor(options = {}) {\n    var _a, _b, _c, _d, _e, _f;\n\n    super(options);\n    this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'impersonated-placeholder'\n    };\n    this.sourceClient = (_a = options.sourceClient) !== null && _a !== void 0 ? _a : new oauth2client_1.OAuth2Client();\n    this.targetPrincipal = (_b = options.targetPrincipal) !== null && _b !== void 0 ? _b : '';\n    this.delegates = (_c = options.delegates) !== null && _c !== void 0 ? _c : [];\n    this.targetScopes = (_d = options.targetScopes) !== null && _d !== void 0 ? _d : [];\n    this.lifetime = (_e = options.lifetime) !== null && _e !== void 0 ? _e : 3600;\n    this.endpoint = (_f = options.endpoint) !== null && _f !== void 0 ? _f : 'https://iamcredentials.googleapis.com';\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken Unused parameter\n   */\n\n\n  async refreshToken(refreshToken) {\n    var _a, _b, _c, _d, _e, _f;\n\n    try {\n      await this.sourceClient.getAccessToken();\n      const name = 'projects/-/serviceAccounts/' + this.targetPrincipal;\n      const u = `${this.endpoint}/v1/${name}:generateAccessToken`;\n      const body = {\n        delegates: this.delegates,\n        scope: this.targetScopes,\n        lifetime: this.lifetime + 's'\n      };\n      const res = await this.sourceClient.request({\n        url: u,\n        data: body,\n        method: 'POST'\n      });\n      const tokenResponse = res.data;\n      this.credentials.access_token = tokenResponse.accessToken;\n      this.credentials.expiry_date = Date.parse(tokenResponse.expireTime);\n      return {\n        tokens: this.credentials,\n        res\n      };\n    } catch (error) {\n      const status = (_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.status;\n      const message = (_f = (_e = (_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.message;\n\n      if (status && message) {\n        error.message = `${status}: unable to impersonate: ${message}`;\n        throw error;\n      } else {\n        error.message = `unable to impersonate: ${error}`;\n        throw error;\n      }\n    }\n  }\n\n}\n\nexports.Impersonated = Impersonated;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/google-auth-library/build/src/auth/impersonated.js"],"names":["Object","defineProperty","exports","value","Impersonated","oauth2client_1","require","OAuth2Client","constructor","options","_a","_b","_c","_d","_e","_f","credentials","expiry_date","refresh_token","sourceClient","targetPrincipal","delegates","targetScopes","lifetime","endpoint","refreshToken","getAccessToken","name","u","body","scope","res","request","url","data","method","tokenResponse","access_token","accessToken","Date","parse","expireTime","tokens","error","status","response","message"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Impersonated = void 0;\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Impersonated extends oauth2client_1.OAuth2Client {\n    /**\n     * Impersonated service account credentials.\n     *\n     * Create a new access token by impersonating another service account.\n     *\n     * Impersonated Credentials allowing credentials issued to a user or\n     * service account to impersonate another. The source project using\n     * Impersonated Credentials must enable the \"IAMCredentials\" API.\n     * Also, the target service account must grant the orginating principal\n     * the \"Service Account Token Creator\" IAM role.\n     *\n     * @param {object} options - The configuration object.\n     * @param {object} [options.sourceClient] the source credential used as to\n     * acquire the impersonated credentials.\n     * @param {string} [options.targetPrincipal] the service account to\n     * impersonate.\n     * @param {string[]} [options.delegates] the chained list of delegates\n     * required to grant the final access_token. If set, the sequence of\n     * identities must have \"Service Account Token Creator\" capability granted to\n     * the preceding identity. For example, if set to [serviceAccountB,\n     * serviceAccountC], the sourceCredential must have the Token Creator role on\n     * serviceAccountB. serviceAccountB must have the Token Creator on\n     * serviceAccountC. Finally, C must have Token Creator on target_principal.\n     * If left unset, sourceCredential must have that role on targetPrincipal.\n     * @param {string[]} [options.targetScopes] scopes to request during the\n     * authorization grant.\n     * @param {number} [options.lifetime] number of seconds the delegated\n     * credential should be valid for up to 3600 seconds by default, or 43,200\n     * seconds by extending the token's lifetime, see:\n     * https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-oauth\n     * @param {string} [options.endpoint] api endpoint override.\n     */\n    constructor(options = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        super(options);\n        this.credentials = {\n            expiry_date: 1,\n            refresh_token: 'impersonated-placeholder',\n        };\n        this.sourceClient = (_a = options.sourceClient) !== null && _a !== void 0 ? _a : new oauth2client_1.OAuth2Client();\n        this.targetPrincipal = (_b = options.targetPrincipal) !== null && _b !== void 0 ? _b : '';\n        this.delegates = (_c = options.delegates) !== null && _c !== void 0 ? _c : [];\n        this.targetScopes = (_d = options.targetScopes) !== null && _d !== void 0 ? _d : [];\n        this.lifetime = (_e = options.lifetime) !== null && _e !== void 0 ? _e : 3600;\n        this.endpoint = (_f = options.endpoint) !== null && _f !== void 0 ? _f : 'https://iamcredentials.googleapis.com';\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n    async refreshToken(refreshToken) {\n        var _a, _b, _c, _d, _e, _f;\n        try {\n            await this.sourceClient.getAccessToken();\n            const name = 'projects/-/serviceAccounts/' + this.targetPrincipal;\n            const u = `${this.endpoint}/v1/${name}:generateAccessToken`;\n            const body = {\n                delegates: this.delegates,\n                scope: this.targetScopes,\n                lifetime: this.lifetime + 's',\n            };\n            const res = await this.sourceClient.request({\n                url: u,\n                data: body,\n                method: 'POST',\n            });\n            const tokenResponse = res.data;\n            this.credentials.access_token = tokenResponse.accessToken;\n            this.credentials.expiry_date = Date.parse(tokenResponse.expireTime);\n            return {\n                tokens: this.credentials,\n                res,\n            };\n        }\n        catch (error) {\n            const status = (_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.status;\n            const message = (_f = (_e = (_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.message;\n            if (status && message) {\n                error.message = `${status}: unable to impersonate: ${message}`;\n                throw error;\n            }\n            else {\n                error.message = `unable to impersonate: ${error}`;\n                throw error;\n            }\n        }\n    }\n}\nexports.Impersonated = Impersonated;\n//# sourceMappingURL=impersonated.js.map"]},"metadata":{},"sourceType":"script"}