{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport qs from \"qs\";\nimport { useState } from \"react\";\nexport const useAttemptLogin = (login, history) => {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmitNotSocial = async event => {\n    try {\n      event.preventDefault();\n      login({\n        email,\n        password\n      });\n      history.push(\"/\");\n    } catch (error) {\n      alert(error);\n      setEmail(\"\");\n      setPassword(\"\");\n    }\n  };\n\n  const baseUrl = \"https://github.com/login/oauth/authorize\";\n  const authConfig = {\n    client_id: \"44089da06c95a868c4cb\",\n    allow_signup: false,\n    scope: \"read:user user:email\"\n  };\n  const authUrl = baseUrl + \"?\" + qs.stringify(authConfig);\n  return {\n    email,\n    setEmail,\n    password,\n    setPassword,\n    handleSubmitNotSocial,\n    authUrl\n  };\n};\n\n_s(useAttemptLogin, \"3B3pqDcVnkT+z/sPK6Z9zQsLP+s=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useAttemptLogin.js"],"names":["qs","useState","useAttemptLogin","login","history","email","setEmail","password","setPassword","handleSubmitNotSocial","event","preventDefault","push","error","alert","baseUrl","authConfig","client_id","allow_signup","scope","authUrl","stringify"],"mappings":";;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAAA;;AACjD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;;AACA,QAAMQ,qBAAqB,GAAG,MAAOC,KAAP,IAAiB;AAC7C,QAAI;AACFA,MAAAA,KAAK,CAACC,cAAN;AACAR,MAAAA,KAAK,CAAC;AAAEE,QAAAA,KAAF;AAASE,QAAAA;AAAT,OAAD,CAAL;AACAH,MAAAA,OAAO,CAACQ,IAAR,CAAa,GAAb;AACD,KAJD,CAIE,OAAOC,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACAP,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,WAAW,CAAC,EAAD,CAAX;AACD;AACF,GAVD;;AAWA,QAAMO,OAAO,GAAG,0CAAhB;AACA,QAAMC,UAAU,GAAG;AACjBC,IAAAA,SAAS,EAAE,sBADM;AAEjBC,IAAAA,YAAY,EAAE,KAFG;AAGjBC,IAAAA,KAAK,EAAE;AAHU,GAAnB;AAKA,QAAMC,OAAO,GAAGL,OAAO,GAAG,GAAV,GAAgBf,EAAE,CAACqB,SAAH,CAAaL,UAAb,CAAhC;AACA,SAAO;AACLX,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLC,IAAAA,QAHK;AAILC,IAAAA,WAJK;AAKLC,IAAAA,qBALK;AAMLW,IAAAA;AANK,GAAP;AAQD,CA7BM;;GAAMlB,e","sourcesContent":["import qs from \"qs\";\nimport { useState } from \"react\";\n\nexport const useAttemptLogin = (login, history) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const handleSubmitNotSocial = async (event) => {\n    try {\n      event.preventDefault();\n      login({ email, password });\n      history.push(\"/\");\n    } catch (error) {\n      alert(error);\n      setEmail(\"\");\n      setPassword(\"\");\n    }\n  };\n  const baseUrl = \"https://github.com/login/oauth/authorize\";\n  const authConfig = {\n    client_id: \"44089da06c95a868c4cb\",\n    allow_signup: false,\n    scope: \"read:user user:email\",\n  };\n  const authUrl = baseUrl + \"?\" + qs.stringify(authConfig);\n  return {\n    email,\n    setEmail,\n    password,\n    setPassword,\n    handleSubmitNotSocial,\n    authUrl,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}