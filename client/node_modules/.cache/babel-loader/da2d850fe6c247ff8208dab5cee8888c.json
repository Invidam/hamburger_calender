{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/worklist/element/grade/WorkListGrade.js\",\n    _s = $RefreshSig$();\n\nimport { useWorkListGrade } from \"../../../../hooks/workList/useWorkListGrade\";\nimport { GradeStarList } from \"./GradeStarList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WorkListGrade = ({\n  user,\n  date\n}) => {\n  _s();\n\n  const [grade, difference, target, value, isGradeLoading, updateInfo] = useWorkListGrade(user, date);\n\n  const getGradeSum = () => grade ? Object.values(grade).reduce((prev, value) => prev += value, 0) : 0;\n\n  const gradeSum = getGradeSum();\n  console.log(\"SUM : \", gradeSum); // const gradeElement = makeStar(getGradeSum()).map((elem, idx) => (\n  //   <div key={idx}> {elem}</div>\n  // ));\n\n  const tooltipElement = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grade-tooltip-content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grade-tooltip-box\",\n      children: \"test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n\n  const getGradeBtn = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: updateInfo,\n    children: \" Get Grade! \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 23\n  }, this);\n\n  const displayGrade = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tooltip\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(GradeStarList, {\n      gradeSum: gradeSum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), tooltipElement, \" | update\", \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n\n  return grade ? displayGrade : getGradeBtn;\n};\n\n_s(WorkListGrade, \"OdxERPs4OLF945g2+zvNVozDjcs=\", false, function () {\n  return [useWorkListGrade];\n});\n\n_c = WorkListGrade;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkListGrade\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/worklist/element/grade/WorkListGrade.js"],"names":["useWorkListGrade","GradeStarList","WorkListGrade","user","date","grade","difference","target","value","isGradeLoading","updateInfo","getGradeSum","Object","values","reduce","prev","gradeSum","console","log","tooltipElement","getGradeBtn","displayGrade"],"mappings":";;;AAAA,SAASA,gBAAT,QAAiC,6CAAjC;AACA,SAASC,aAAT,QAA8B,iBAA9B;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAoB;AAAA;;AAC/C,QAAM,CAACC,KAAD,EAAQC,UAAR,EAAoBC,MAApB,EAA4BC,KAA5B,EAAmCC,cAAnC,EAAmDC,UAAnD,IACJV,gBAAgB,CAACG,IAAD,EAAOC,IAAP,CADlB;;AAEA,QAAMO,WAAW,GAAG,MAClBN,KAAK,GACDO,MAAM,CAACC,MAAP,CAAcR,KAAd,EAAqBS,MAArB,CAA4B,CAACC,IAAD,EAAOP,KAAP,KAAkBO,IAAI,IAAIP,KAAtD,EAA8D,CAA9D,CADC,GAED,CAHN;;AAIA,QAAMQ,QAAQ,GAAGL,WAAW,EAA5B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,QAAtB,EAR+C,CAS/C;AACA;AACA;;AACA,QAAMG,cAAc,gBAClB;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;;AAMA,QAAMC,WAAW,gBAAG;AAAQ,IAAA,OAAO,EAAEV,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAApB;;AACA,QAAMW,YAAY,gBAChB;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,eACG,GADH,eAEE,QAAC,aAAD;AAAe,MAAA,QAAQ,EAAEL;AAAzB;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGG,cAHH,eAG4B,GAH5B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAOA,SAAOd,KAAK,GAAGgB,YAAH,GAAkBD,WAA9B;AACD,CA3BM;;GAAMlB,a;UAETF,gB;;;KAFSE,a","sourcesContent":["import { useWorkListGrade } from \"../../../../hooks/workList/useWorkListGrade\";\nimport { GradeStarList } from \"./GradeStarList\";\n\nexport const WorkListGrade = ({ user, date }) => {\n  const [grade, difference, target, value, isGradeLoading, updateInfo] =\n    useWorkListGrade(user, date);\n  const getGradeSum = () =>\n    grade\n      ? Object.values(grade).reduce((prev, value) => (prev += value), 0)\n      : 0;\n  const gradeSum = getGradeSum();\n  console.log(\"SUM : \", gradeSum);\n  // const gradeElement = makeStar(getGradeSum()).map((elem, idx) => (\n  //   <div key={idx}> {elem}</div>\n  // ));\n  const tooltipElement = (\n    <div className=\"grade-tooltip-content\">\n      <div className=\"grade-tooltip-box\">test</div>\n    </div>\n  );\n\n  const getGradeBtn = <button onClick={updateInfo}> Get Grade! </button>;\n  const displayGrade = (\n    <div className=\"tooltip\">\n      {\" \"}\n      <GradeStarList gradeSum={gradeSum} />\n      {tooltipElement} | update{\" \"}\n    </div>\n  );\n  return grade ? displayGrade : getGradeBtn;\n};\n"]},"metadata":{},"sourceType":"module"}