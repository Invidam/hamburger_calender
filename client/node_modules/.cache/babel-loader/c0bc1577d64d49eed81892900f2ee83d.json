{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const useEditSetting = () => {\n  _s();\n\n  const [targetWorkTime, setTargetWorkTime] = useState();\n  const [targetWakeTime, setTargetWakeTime] = useState();\n  const [targetBedTime, setTargetBedTime] = useState();\n\n  const onChangeTargetWorkTime = workTime => setTargetWorkTime(parseInt(workTime));\n\n  const onChangeTargetWakeTime = wakeTime => setTargetWakeTime(parseInt(wakeTime));\n\n  const onChangeTargetBedTime = bedTime => setTargetBedTime(parseInt(bedTime));\n\n  const validator = targetTimeObj => {\n    return targetTimeObj.targetWorkTime && targetTimeObj.targetWakeTime && targetTimeObj.targetBedTime;\n  };\n\n  const onEditTargetTime = event => {\n    event.preventDefault();\n    let willUpdate = true;\n    const targetTimeObj = {\n      targetWorkTime,\n      targetWakeTime,\n      targetBedTime\n    };\n    if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n\n    if (willUpdate) {\n      console.log(\"SUBMIT: \", targetTimeObj);\n    } else {\n      let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${!targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"}${targetWakeTime ? \"\" : \"TargetWakeTime\"}${!targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"}${targetBedTime ? \"\" : \"TargetBedtime\"} ${!targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n\n  return {\n    targetWorkTime,\n    targetWakeTime,\n    targetBedTime,\n    onChangeTargetWorkTime,\n    onChangeTargetWakeTime,\n    onChangeTargetBedTime,\n    onEditTargetTime\n  };\n};\n\n_s(useEditSetting, \"X76pEPqUyiXZYGIC6iPUxOJxKBY=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useEditSetting.js"],"names":["useState","useEditSetting","targetWorkTime","setTargetWorkTime","targetWakeTime","setTargetWakeTime","targetBedTime","setTargetBedTime","onChangeTargetWorkTime","workTime","parseInt","onChangeTargetWakeTime","wakeTime","onChangeTargetBedTime","bedTime","validator","targetTimeObj","onEditTargetTime","event","preventDefault","willUpdate","console","log","errText","alert"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAClC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCH,QAAQ,EAApD;AACA,QAAM,CAACI,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,EAApD;AACA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,EAAlD;;AAEA,QAAMQ,sBAAsB,GAAIC,QAAD,IAC7BN,iBAAiB,CAACO,QAAQ,CAACD,QAAD,CAAT,CADnB;;AAEA,QAAME,sBAAsB,GAAIC,QAAD,IAC7BP,iBAAiB,CAACK,QAAQ,CAACE,QAAD,CAAT,CADnB;;AAEA,QAAMC,qBAAqB,GAAIC,OAAD,IAC5BP,gBAAgB,CAACG,QAAQ,CAACI,OAAD,CAAT,CADlB;;AAGA,QAAMC,SAAS,GAAIC,aAAD,IAAmB;AACnC,WACEA,aAAa,CAACd,cAAd,IACAc,aAAa,CAACZ,cADd,IAEAY,aAAa,CAACV,aAHhB;AAKD,GAND;;AAOA,QAAMW,gBAAgB,GAAIC,KAAD,IAAW;AAClCA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,UAAU,GAAG,IAAjB;AACA,UAAMJ,aAAa,GAAG;AAAEd,MAAAA,cAAF;AAAkBE,MAAAA,cAAlB;AAAkCE,MAAAA;AAAlC,KAAtB;AACA,QAAI,OAAOS,SAAP,KAAqB,UAAzB,EAAqCK,UAAU,GAAGL,SAAS,CAACC,aAAD,CAAtB;;AACrC,QAAII,UAAJ,EAAgB;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBN,aAAxB;AACD,KAFD,MAEO;AACL,UAAIO,OAAO,GAAI,WAAUrB,cAAc,GAAG,EAAH,GAAQ,gBAAiB,GAC9D,CAACE,cAAD,GAAkB,CAACE,aAAnB,GAAmC,CAAnC,IAAwC,CAACJ,cAAzC,GAA0D,IAA1D,GAAiE,EAClE,GAAEE,cAAc,GAAG,EAAH,GAAQ,gBAAiB,GACxC,CAACE,aAAD,GAAiB,CAAjB,IAAsB,CAACF,cAAvB,GAAwC,IAAxC,GAA+C,EAChD,GAAEE,aAAa,GAAG,EAAH,GAAQ,eAAgB,IACtC,CAACJ,cAAD,GAAkB,CAACE,cAAnB,GAAoC,CAACE,aAArC,GAAqD,CAArD,GAAyD,KAAzD,GAAiE,IAClE,eAND;AAOAkB,MAAAA,KAAK,CAACD,OAAD,CAAL;AACD;AACF,GAjBD;;AAkBA,SAAO;AACLrB,IAAAA,cADK;AAELE,IAAAA,cAFK;AAGLE,IAAAA,aAHK;AAILE,IAAAA,sBAJK;AAKLG,IAAAA,sBALK;AAMLE,IAAAA,qBANK;AAOLI,IAAAA;AAPK,GAAP;AASD,CA9CM;;GAAMhB,c","sourcesContent":["import { useState } from \"react\";\n\nexport const useEditSetting = () => {\n  const [targetWorkTime, setTargetWorkTime] = useState();\n  const [targetWakeTime, setTargetWakeTime] = useState();\n  const [targetBedTime, setTargetBedTime] = useState();\n\n  const onChangeTargetWorkTime = (workTime) =>\n    setTargetWorkTime(parseInt(workTime));\n  const onChangeTargetWakeTime = (wakeTime) =>\n    setTargetWakeTime(parseInt(wakeTime));\n  const onChangeTargetBedTime = (bedTime) =>\n    setTargetBedTime(parseInt(bedTime));\n\n  const validator = (targetTimeObj) => {\n    return (\n      targetTimeObj.targetWorkTime &&\n      targetTimeObj.targetWakeTime &&\n      targetTimeObj.targetBedTime\n    );\n  };\n  const onEditTargetTime = (event) => {\n    event.preventDefault();\n    let willUpdate = true;\n    const targetTimeObj = { targetWorkTime, targetWakeTime, targetBedTime };\n    if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n    if (willUpdate) {\n      console.log(\"SUBMIT: \", targetTimeObj);\n    } else {\n      let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${\n        !targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"\n      }${targetWakeTime ? \"\" : \"TargetWakeTime\"}${\n        !targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"\n      }${targetBedTime ? \"\" : \"TargetBedtime\"} ${\n        !targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"\n      } not entered.`;\n      alert(errText);\n    }\n  };\n  return {\n    targetWorkTime,\n    targetWakeTime,\n    targetBedTime,\n    onChangeTargetWorkTime,\n    onChangeTargetWakeTime,\n    onChangeTargetBedTime,\n    onEditTargetTime,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}