{"ast":null,"code":"const JWT = require('jose').JWT;\n\nconst {\n  ArgumentError\n} = require('../errors');\n\nconst {\n  JwksClient\n} = require('../JwksClient');\n\nconst supportedAlg = require('./config');\n\nconst handleSigningKeyError = (err, cb) => {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  } // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n\n\n  if (err) {\n    return cb(err);\n  }\n};\n\nmodule.exports.passportJwtSecret = function (options) {\n  if (options === null || options === undefined) {\n    throw new ArgumentError('An options object must be provided when initializing passportJwtSecret');\n  }\n\n  if (!options.jwksUri) {\n    throw new ArgumentError('No JWKS provided. Please provide a jwksUri');\n  }\n\n  const client = new JwksClient(options);\n  const onError = options.handleSigningKeyError || handleSigningKeyError;\n  return function secretProvider(req, rawJwtToken, cb) {\n    let decoded;\n\n    try {\n      decoded = JWT.decode(rawJwtToken, {\n        complete: true\n      });\n    } catch (err) {\n      decoded = null;\n    }\n\n    if (!decoded || !supportedAlg.includes(decoded.header.alg)) {\n      return cb(null, null);\n    }\n\n    client.getSigningKey(decoded.header.kid).then(key => {\n      cb(null, key.publicKey || key.rsaPublicKey);\n    }).catch(err => {\n      onError(err, newError => cb(newError, null));\n    });\n  };\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jwks-rsa/src/integrations/passport.js"],"names":["JWT","require","ArgumentError","JwksClient","supportedAlg","handleSigningKeyError","err","cb","name","module","exports","passportJwtSecret","options","undefined","jwksUri","client","onError","secretProvider","req","rawJwtToken","decoded","decode","complete","includes","header","alg","getSigningKey","kid","then","key","publicKey","rsaPublicKey","catch","newError"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,GAA5B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAoBD,OAAO,CAAC,WAAD,CAAjC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAiBF,OAAO,CAAC,eAAD,CAA9B;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,UAAD,CAA5B;;AAEA,MAAMI,qBAAqB,GAAG,CAACC,GAAD,EAAMC,EAAN,KAAa;AACzC;AACA,MAAID,GAAG,IAAIA,GAAG,CAACE,IAAJ,KAAa,yBAAxB,EAAmD;AACjD,WAAOD,EAAE,CAAC,IAAD,CAAT;AACD,GAJwC,CAMzC;;;AACA,MAAID,GAAJ,EAAS;AACP,WAAOC,EAAE,CAACD,GAAD,CAAT;AACD;AACF,CAVD;;AAYAG,MAAM,CAACC,OAAP,CAAeC,iBAAf,GAAmC,UAAUC,OAAV,EAAmB;AACpD,MAAIA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKC,SAApC,EAA+C;AAC7C,UAAM,IAAIX,aAAJ,CAAkB,wEAAlB,CAAN;AACD;;AAED,MAAI,CAACU,OAAO,CAACE,OAAb,EAAsB;AACpB,UAAM,IAAIZ,aAAJ,CAAkB,4CAAlB,CAAN;AACD;;AAED,QAAMa,MAAM,GAAG,IAAIZ,UAAJ,CAAeS,OAAf,CAAf;AACA,QAAMI,OAAO,GAAGJ,OAAO,CAACP,qBAAR,IAAiCA,qBAAjD;AAEA,SAAO,SAASY,cAAT,CAAwBC,GAAxB,EAA6BC,WAA7B,EAA0CZ,EAA1C,EAA8C;AACnD,QAAIa,OAAJ;;AACA,QAAI;AACFA,MAAAA,OAAO,GAAGpB,GAAG,CAACqB,MAAJ,CAAWF,WAAX,EAAwB;AAAEG,QAAAA,QAAQ,EAAE;AAAZ,OAAxB,CAAV;AACD,KAFD,CAEE,OAAOhB,GAAP,EAAY;AACZc,MAAAA,OAAO,GAAG,IAAV;AACD;;AAED,QAAI,CAACA,OAAD,IAAY,CAAChB,YAAY,CAACmB,QAAb,CAAsBH,OAAO,CAACI,MAAR,CAAeC,GAArC,CAAjB,EAA4D;AAC1D,aAAOlB,EAAE,CAAC,IAAD,EAAO,IAAP,CAAT;AACD;;AAEDQ,IAAAA,MAAM,CAACW,aAAP,CAAqBN,OAAO,CAACI,MAAR,CAAeG,GAApC,EACGC,IADH,CACQC,GAAG,IAAI;AACXtB,MAAAA,EAAE,CAAC,IAAD,EAAOsB,GAAG,CAACC,SAAJ,IAAiBD,GAAG,CAACE,YAA5B,CAAF;AACD,KAHH,EAGKC,KAHL,CAGW1B,GAAG,IAAI;AACdU,MAAAA,OAAO,CAACV,GAAD,EAAO2B,QAAD,IAAc1B,EAAE,CAAC0B,QAAD,EAAW,IAAX,CAAtB,CAAP;AACD,KALH;AAMD,GAlBD;AAmBD,CA/BD","sourcesContent":["const JWT = require('jose').JWT;\nconst { ArgumentError } = require('../errors');\nconst { JwksClient } = require('../JwksClient');\nconst supportedAlg = require('./config');\n\nconst handleSigningKeyError = (err, cb) => {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  }\n\n  // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n  if (err) {\n    return cb(err);\n  }\n};\n\nmodule.exports.passportJwtSecret = function (options) {\n  if (options === null || options === undefined) {\n    throw new ArgumentError('An options object must be provided when initializing passportJwtSecret');\n  }\n\n  if (!options.jwksUri) {\n    throw new ArgumentError('No JWKS provided. Please provide a jwksUri');\n  }\n\n  const client = new JwksClient(options);\n  const onError = options.handleSigningKeyError || handleSigningKeyError;\n\n  return function secretProvider(req, rawJwtToken, cb) {\n    let decoded;\n    try {\n      decoded = JWT.decode(rawJwtToken, { complete: true });\n    } catch (err) {\n      decoded = null;\n    }\n\n    if (!decoded || !supportedAlg.includes(decoded.header.alg)) {\n      return cb(null, null);\n    }\n\n    client.getSigningKey(decoded.header.kid)\n      .then(key => {\n        cb(null, key.publicKey || key.rsaPublicKey);\n      }).catch(err => {\n        onError(err, (newError) => cb(newError, null));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"script"}