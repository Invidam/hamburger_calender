{"ast":null,"code":"import { useState } from \"react\";\nexport const usePushWork = (workList, setWorkList, callback) => {\n  const validator = workObj => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n\n  let workColor;\n\n  const hexToRgba = color => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n\n  const onSubmitColor = color => {\n    if (!color) {} else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n\n    workColor = color;\n  };\n\n  const onSubmitWork = event => {\n    event.preventDefault();\n    const workName = event.target.workName.value;\n    const workTime = parseInt(event.target.workTime.value);\n    const workObj = {\n      workName,\n      workTime,\n      workColor\n    };\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n\n    if (willUpdate) {\n      callback(); // workList.push(workObj);\n\n      setWorkList([...workList, workObj]);\n    } else {\n      let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${!workTime + !workColor > 0 && !workName ? \", \" : \"\"}${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${workColor ? \"\" : \"WorkColor\"} ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n\n  return {\n    workList,\n    onSubmitColor,\n    onSubmitWork\n  };\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/work/usePushWork.js"],"names":["useState","usePushWork","workList","setWorkList","callback","validator","workObj","workName","workTime","workColor","hexToRgba","color","r","parseInt","substr","g","b","onSubmitColor","onSubmitWork","event","preventDefault","target","value","willUpdate","errText","alert"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,WAAX,EAAwBC,QAAxB,KAAqC;AAC9D,QAAMC,SAAS,GAAIC,OAAD,IAAa;AAC7B,WAAOA,OAAO,CAACC,QAAR,IAAoBD,OAAO,CAACE,QAA5B,IAAwCF,OAAO,CAACG,SAAvD;AACD,GAFD;;AAGA,MAAIA,SAAJ;;AACA,QAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B,UAAMC,CAAC,GAAGC,QAAQ,CAACF,KAAK,CAACG,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAAD,EAAqB,EAArB,CAAlB;AACA,UAAMC,CAAC,GAAGF,QAAQ,CAACF,KAAK,CAACG,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAAD,EAAqB,EAArB,CAAlB;AACA,UAAME,CAAC,GAAGH,QAAQ,CAACF,KAAK,CAACG,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAAD,EAAqB,EAArB,CAAlB;AACA,WAAO,UAAUF,CAAV,GAAc,GAAd,GAAoBG,CAApB,GAAwB,GAAxB,GAA8BC,CAA9B,GAAkC,MAAzC;AACD,GALD;;AAMA,QAAMC,aAAa,GAAIN,KAAD,IAAW;AAC/B,QAAI,CAACA,KAAL,EAAY,CACX,CADD,MACO,IAAIA,KAAK,CAACG,MAAN,CAAa,CAAb,EAAgB,CAAhB,MAAuB,GAA3B,EAAgC;AACrCH,MAAAA,KAAK,GAAGD,SAAS,CAACC,KAAD,CAAjB;AACD;;AACDF,IAAAA,SAAS,GAAGE,KAAZ;AACD,GAND;;AAOA,QAAMO,YAAY,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMb,QAAQ,GAAGY,KAAK,CAACE,MAAN,CAAad,QAAb,CAAsBe,KAAvC;AACA,UAAMd,QAAQ,GAAGK,QAAQ,CAACM,KAAK,CAACE,MAAN,CAAab,QAAb,CAAsBc,KAAvB,CAAzB;AACA,UAAMhB,OAAO,GAAG;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBC,MAAAA;AAAtB,KAAhB;AACA,QAAIc,UAAU,GAAG,IAAjB;AACA,QAAI,OAAOlB,SAAP,KAAqB,UAAzB,EAAqCkB,UAAU,GAAGlB,SAAS,CAACC,OAAD,CAAtB;;AACrC,QAAIiB,UAAJ,EAAgB;AACdnB,MAAAA,QAAQ,GADM,CAEd;;AACAD,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcI,OAAd,CAAD,CAAX;AACD,KAJD,MAIO;AACL,UAAIkB,OAAO,GAAI,WAAUjB,QAAQ,GAAG,EAAH,GAAQ,UAAW,GAClD,CAACC,QAAD,GAAY,CAACC,SAAb,GAAyB,CAAzB,IAA8B,CAACF,QAA/B,GAA0C,IAA1C,GAAiD,EAClD,GAAEC,QAAQ,GAAG,EAAH,GAAQ,UAAW,GAAE,CAACC,SAAD,GAAa,CAAb,IAAkB,CAACD,QAAnB,GAA8B,IAA9B,GAAqC,EAAG,GACtEC,SAAS,GAAG,EAAH,GAAQ,WAClB,IAAG,CAACF,QAAD,GAAY,CAACC,QAAb,GAAwB,CAACC,SAAzB,GAAqC,CAArC,GAAyC,KAAzC,GAAiD,IAAK,eAJ1D;AAKAgB,MAAAA,KAAK,CAACD,OAAD,CAAL;AACD;AACF,GAnBD;;AAoBA,SAAO;AAAEtB,IAAAA,QAAF;AAAYe,IAAAA,aAAZ;AAA2BC,IAAAA;AAA3B,GAAP;AACD,CAvCM","sourcesContent":["import { useState } from \"react\";\n\nexport const usePushWork = (workList, setWorkList, callback) => {\n  const validator = (workObj) => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n  let workColor;\n  const hexToRgba = (color) => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n  const onSubmitColor = (color) => {\n    if (!color) {\n    } else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n    workColor = color;\n  };\n  const onSubmitWork = (event) => {\n    event.preventDefault();\n    const workName = event.target.workName.value;\n    const workTime = parseInt(event.target.workTime.value);\n    const workObj = { workName, workTime, workColor };\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n    if (willUpdate) {\n      callback();\n      // workList.push(workObj);\n      setWorkList([...workList, workObj]);\n    } else {\n      let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${\n        !workTime + !workColor > 0 && !workName ? \", \" : \"\"\n      }${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${\n        workColor ? \"\" : \"WorkColor\"\n      } ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n  return { workList, onSubmitColor, onSubmitWork };\n};\n"]},"metadata":{},"sourceType":"module"}