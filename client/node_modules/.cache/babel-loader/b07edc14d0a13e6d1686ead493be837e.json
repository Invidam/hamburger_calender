{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nimport { isEqualYYYYMMDateStr } from \"../../tools/time\";\nlet befDate;\nexport const useDateInfo = (user, date) => {\n  _s();\n\n  const [dateInfo, setDateInfo] = useState();\n  console.log(\"[ui] datainfo\", dateInfo);\n  const [activeDate, setActiveDate] = useState(); // const [isDateInfoLoad, setLoad] = useState(true);\n\n  const getUserInfo = async nextDate => {\n    try {\n      if (user && (!befDate || !isEqualYYYYMMDateStr(befDate, nextDate))) {\n        console.log(\"[ui]GET USER IFNO START\"); // setLoad(true);\n\n        const data = await APIv2.workList(user, nextDate).dataInfo(); // setLoad(false);\n\n        if (!(data === null || data === void 0 ? void 0 : data.data)) throw new Error(\"Cannot found Your Work List\");\n        const response = data.data;\n        console.log(\"[ui] data.data:\", response);\n        setDateInfo(response);\n        console.log(\"[ui] info :\", dateInfo);\n      } else {\n        setDateInfo([]);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    let nextDate = befDate === date ? activeDate ? activeDate : date : date;\n    console.log(\"[ui]BEF: \", befDate, \"CURR: \", nextDate, activeDate, date, user, !befDate || !isEqualYYYYMMDateStr(befDate, nextDate));\n    getUserInfo(nextDate);\n    befDate = nextDate;\n  }, [user, date, activeDate]);\n  useEffect(() => {\n    console.log(\"[ui] ITEM: \", dateInfo);\n  }, [dateInfo]);\n  return [dateInfo, setActiveDate];\n};\n\n_s(useDateInfo, \"jl0BYPnCwOKSsjnPEllP2DbP/JQ=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/calendar/useDateInfo.js"],"names":["useEffect","useState","API","APIv2","isEqualYYYYMMDateStr","befDate","useDateInfo","user","date","dateInfo","setDateInfo","console","log","activeDate","setActiveDate","getUserInfo","nextDate","data","workList","dataInfo","Error","response","error","alert"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,iBAA3B;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,IAAIC,OAAJ;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAAA;;AACzC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,EAAxC;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,QAA7B;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,EAA5C,CAHyC,CAIzC;;AAEA,QAAMc,WAAW,GAAG,MAAOC,QAAP,IAAoB;AACtC,QAAI;AACF,UAAIT,IAAI,KAAK,CAACF,OAAD,IAAY,CAACD,oBAAoB,CAACC,OAAD,EAAUW,QAAV,CAAtC,CAAR,EAAoE;AAClEL,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EADkE,CAElE;;AACA,cAAMK,IAAI,GAAG,MAAMd,KAAK,CAACe,QAAN,CAAeX,IAAf,EAAqBS,QAArB,EAA+BG,QAA/B,EAAnB,CAHkE,CAIlE;;AACA,YAAI,EAACF,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAJ,EAAiB,MAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;AACjB,cAAMC,QAAQ,GAAGJ,IAAI,CAACA,IAAtB;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BS,QAA/B;AACAX,QAAAA,WAAW,CAACW,QAAD,CAAX;AACAV,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,QAA3B;AACD,OAVD,MAUO;AACLC,QAAAA,WAAW,CAAC,EAAD,CAAX;AACD;AACF,KAdD,CAcE,OAAOY,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,GAlBD;;AAmBAtB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,QAAQ,GAAGX,OAAO,KAAKG,IAAZ,GAAoBK,UAAU,GAAGA,UAAH,GAAgBL,IAA9C,GAAsDA,IAArE;AACAG,IAAAA,OAAO,CAACC,GAAR,CACE,WADF,EAEEP,OAFF,EAGE,QAHF,EAIEW,QAJF,EAKEH,UALF,EAMEL,IANF,EAOED,IAPF,EAQE,CAACF,OAAD,IAAY,CAACD,oBAAoB,CAACC,OAAD,EAAUW,QAAV,CARnC;AAUAD,IAAAA,WAAW,CAACC,QAAD,CAAX;AACAX,IAAAA,OAAO,GAAGW,QAAV;AACD,GAdQ,EAcN,CAACT,IAAD,EAAOC,IAAP,EAAaK,UAAb,CAdM,CAAT;AAeAb,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,QAA3B;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAGA,SAAO,CAACA,QAAD,EAAWK,aAAX,CAAP;AACD,CA5CM;;GAAMR,W","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nimport { isEqualYYYYMMDateStr } from \"../../tools/time\";\nlet befDate;\n\nexport const useDateInfo = (user, date) => {\n  const [dateInfo, setDateInfo] = useState();\n  console.log(\"[ui] datainfo\", dateInfo);\n  const [activeDate, setActiveDate] = useState();\n  // const [isDateInfoLoad, setLoad] = useState(true);\n\n  const getUserInfo = async (nextDate) => {\n    try {\n      if (user && (!befDate || !isEqualYYYYMMDateStr(befDate, nextDate))) {\n        console.log(\"[ui]GET USER IFNO START\");\n        // setLoad(true);\n        const data = await APIv2.workList(user, nextDate).dataInfo();\n        // setLoad(false);\n        if (!data?.data) throw new Error(\"Cannot found Your Work List\");\n        const response = data.data;\n        console.log(\"[ui] data.data:\", response);\n        setDateInfo(response);\n        console.log(\"[ui] info :\", dateInfo);\n      } else {\n        setDateInfo([]);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    let nextDate = befDate === date ? (activeDate ? activeDate : date) : date;\n    console.log(\n      \"[ui]BEF: \",\n      befDate,\n      \"CURR: \",\n      nextDate,\n      activeDate,\n      date,\n      user,\n      !befDate || !isEqualYYYYMMDateStr(befDate, nextDate)\n    );\n    getUserInfo(nextDate);\n    befDate = nextDate;\n  }, [user, date, activeDate]);\n  useEffect(() => {\n    console.log(\"[ui] ITEM: \", dateInfo);\n  }, [dateInfo]);\n  return [dateInfo, setActiveDate];\n};\n"]},"metadata":{},"sourceType":"module"}