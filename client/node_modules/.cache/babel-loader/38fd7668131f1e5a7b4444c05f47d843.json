{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nimport { isEqualYYYYMMDateStr } from \"../../tools/time\";\nlet befDate;\nexport const useDateInfo = (user, date) => {\n  _s();\n\n  const [dateInfo, setDateInfo] = useState();\n  const [activeDate, setActiveDate] = useState(); // const [isDateInfoLoad, setLoad] = useState(true);\n\n  const getUserInfo = async nextDate => {\n    try {\n      if (user) {\n        // setLoad(true);\n        const data = await APIv2.workList(user, nextDate).dataInfo(); // setLoad(false);\n\n        if (!(data === null || data === void 0 ? void 0 : data.data)) throw new Error(\"Cannot found Your Work List\");\n        const response = data.data;\n        setDateInfo(response);\n      } else {\n        setDateInfo([]);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    let nextDate = activeDate ? activeDate : date;\n    console.log(befDate, \"CURR: \", nextDate, activeDate, date, user, !befDate || !isEqualYYYYMMDateStr(befDate, nextDate));\n    getUserInfo(nextDate); // if (user) befDate = nextDate;\n    // return () =>\n  }, [user, date, activeDate]);\n  return [dateInfo, setActiveDate];\n};\n\n_s(useDateInfo, \"e5vNjL2S2ttpxWgL+bcoZ4SZUzY=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/calendar/useDateInfo.js"],"names":["useEffect","useState","API","APIv2","isEqualYYYYMMDateStr","befDate","useDateInfo","user","date","dateInfo","setDateInfo","activeDate","setActiveDate","getUserInfo","nextDate","data","workList","dataInfo","Error","response","error","alert","console","log"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,iBAA3B;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,IAAIC,OAAJ;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAAA;;AACzC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,EAAxC;AAEA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,EAA5C,CAHyC,CAIzC;;AAEA,QAAMY,WAAW,GAAG,MAAOC,QAAP,IAAoB;AACtC,QAAI;AACF,UAAIP,IAAJ,EAAU;AACR;AACA,cAAMQ,IAAI,GAAG,MAAMZ,KAAK,CAACa,QAAN,CAAeT,IAAf,EAAqBO,QAArB,EAA+BG,QAA/B,EAAnB,CAFQ,CAGR;;AACA,YAAI,EAACF,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAJ,EAAiB,MAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;AACjB,cAAMC,QAAQ,GAAGJ,IAAI,CAACA,IAAtB;AAEAL,QAAAA,WAAW,CAACS,QAAD,CAAX;AACD,OARD,MAQO;AACLT,QAAAA,WAAW,CAAC,EAAD,CAAX;AACD;AACF,KAZD,CAYE,OAAOU,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,GAhBD;;AAiBApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,QAAQ,GAAGH,UAAU,GAAGA,UAAH,GAAgBH,IAAzC;AACAc,IAAAA,OAAO,CAACC,GAAR,CACElB,OADF,EAEE,QAFF,EAGES,QAHF,EAIEH,UAJF,EAKEH,IALF,EAMED,IANF,EAOE,CAACF,OAAD,IAAY,CAACD,oBAAoB,CAACC,OAAD,EAAUS,QAAV,CAPnC;AASAD,IAAAA,WAAW,CAACC,QAAD,CAAX,CAXc,CAYd;AACA;AACD,GAdQ,EAcN,CAACP,IAAD,EAAOC,IAAP,EAAaG,UAAb,CAdM,CAAT;AAeA,SAAO,CAACF,QAAD,EAAWG,aAAX,CAAP;AACD,CAvCM;;GAAMN,W","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nimport { isEqualYYYYMMDateStr } from \"../../tools/time\";\nlet befDate;\n\nexport const useDateInfo = (user, date) => {\n  const [dateInfo, setDateInfo] = useState();\n\n  const [activeDate, setActiveDate] = useState();\n  // const [isDateInfoLoad, setLoad] = useState(true);\n\n  const getUserInfo = async (nextDate) => {\n    try {\n      if (user) {\n        // setLoad(true);\n        const data = await APIv2.workList(user, nextDate).dataInfo();\n        // setLoad(false);\n        if (!data?.data) throw new Error(\"Cannot found Your Work List\");\n        const response = data.data;\n\n        setDateInfo(response);\n      } else {\n        setDateInfo([]);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    let nextDate = activeDate ? activeDate : date;\n    console.log(\n      befDate,\n      \"CURR: \",\n      nextDate,\n      activeDate,\n      date,\n      user,\n      !befDate || !isEqualYYYYMMDateStr(befDate, nextDate)\n    );\n    getUserInfo(nextDate);\n    // if (user) befDate = nextDate;\n    // return () =>\n  }, [user, date, activeDate]);\n  return [dateInfo, setActiveDate];\n};\n"]},"metadata":{},"sourceType":"module"}