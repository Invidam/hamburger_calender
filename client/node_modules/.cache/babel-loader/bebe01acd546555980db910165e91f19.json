{"ast":null,"code":"export const UTCtoKTC = date => {\n  const offset = new Date().getTimezoneOffset() * 60000;\n  const korDay = new Date(date - offset);\n  return korDay;\n};\n_c = UTCtoKTC;\nexport const changeFormatYYYYMMDD = (date, isKOR) => {\n  if (!isKOR) date = UTCtoKTC(date);\n  return date.toISOString().slice(0, 10);\n};\nexport const getToday = () => {\n  return changeFormatYYYYMMDD(new Date(), true);\n};\nexport const makeDisplayTime = num => num < 10 ? \"0\" + num : num;\nexport const getDifference = (timeObj1, timeObj2) => {\n  const diff = Math.abs(timeObj1.hour * 60 + timeObj1.minute - (timeObj2.hour * 60 + timeObj2.minute));\n  const hour = Math.floor(diff / 60);\n  const minute = diff % 60;\n  return {\n    hour,\n    minute\n  };\n};\nexport const divideDate = date => {\n  const year = date.substr(0, 4);\n  const month = date.substr(5, 2);\n  const day = date.substr(8, 2);\n  const dividedAddress = `${year}/${month}/${day}`;\n  const dividedAddressYYYYMM = `${year}/${month}`;\n  return {\n    year,\n    month,\n    day,\n    dividedAddress,\n    dividedAddressYYYYMM\n  };\n};\nexport const isEqualYYYYMMDateObj = (date1, date2) => date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth();\nexport const isEqualYYYYMMDateStr = (date1, date2) => date1.substr(0, 7) === date2.substr(0, 7);\nexport const getNextDateStr = date => {\n  if (typeof date === \"string\") date = new Date(date);\n  let tomorrow = new Date();\n  tomorrow.setDate(date.getDate() + 1);\n  return changeFormatYYYYMMDD(tomorrow, true);\n};\nexport const getNextDateObj = date => {\n  if (typeof date === \"string\") date = new Date(date);\n  let tomorrow = new Date();\n  tomorrow.setDate(date.getDate() + 1);\n  return changeFormatYYYYMMDD(tomorrow, true);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"UTCtoKTC\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/tools/time.js"],"names":["UTCtoKTC","date","offset","Date","getTimezoneOffset","korDay","changeFormatYYYYMMDD","isKOR","toISOString","slice","getToday","makeDisplayTime","num","getDifference","timeObj1","timeObj2","diff","Math","abs","hour","minute","floor","divideDate","year","substr","month","day","dividedAddress","dividedAddressYYYYMM","isEqualYYYYMMDateObj","date1","date2","getFullYear","getMonth","isEqualYYYYMMDateStr","getNextDateStr","tomorrow","setDate","getDate","getNextDateObj"],"mappings":"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","sourcesContent":["export const UTCtoKTC = (date) => {\n  const offset = new Date().getTimezoneOffset() * 60000;\n  const korDay = new Date(date - offset);\n  return korDay;\n};\n\nexport const changeFormatYYYYMMDD = (date, isKOR) => {\n  if (!isKOR) date = UTCtoKTC(date);\n  return date.toISOString().slice(0, 10);\n};\nexport const getToday = () => {\n  return changeFormatYYYYMMDD(new Date(), true);\n};\nexport const makeDisplayTime = (num) => (num < 10 ? \"0\" + num : num);\n\nexport const getDifference = (timeObj1, timeObj2) => {\n  const diff = Math.abs(\n    timeObj1.hour * 60 +\n      timeObj1.minute -\n      (timeObj2.hour * 60 + timeObj2.minute)\n  );\n  const hour = Math.floor(diff / 60);\n  const minute = diff % 60;\n  return { hour, minute };\n};\n\nexport const divideDate = (date) => {\n  const year = date.substr(0, 4);\n  const month = date.substr(5, 2);\n  const day = date.substr(8, 2);\n  const dividedAddress = `${year}/${month}/${day}`;\n\n  const dividedAddressYYYYMM = `${year}/${month}`;\n  return { year, month, day, dividedAddress, dividedAddressYYYYMM };\n};\n\nexport const isEqualYYYYMMDateObj = (date1, date2) =>\n  date1.getFullYear() === date2.getFullYear() &&\n  date1.getMonth() === date2.getMonth();\nexport const isEqualYYYYMMDateStr = (date1, date2) =>\n  date1.substr(0, 7) === date2.substr(0, 7);\n\nexport const getNextDateStr = (date) => {\n  if (typeof date === \"string\") date = new Date(date);\n  let tomorrow = new Date();\n  tomorrow.setDate(date.getDate() + 1);\n  return changeFormatYYYYMMDD(tomorrow, true);\n};\n\nexport const getNextDateObj = (date) => {\n  if (typeof date === \"string\") date = new Date(date);\n  let tomorrow = new Date();\n  tomorrow.setDate(date.getDate() + 1);\n  return changeFormatYYYYMMDD(tomorrow, true);\n};\n"]},"metadata":{},"sourceType":"module"}