{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { APIv2 } from \"../../../tools/API\";\nimport { LocalStroage } from \"../../../tools/LocalStorage\"; // import { getToday } from \"../../../tools/time\";\n\nexport const isEmptyTimeObj = timeObj => timeObj ? !Object.keys(timeObj).length : true; // !timeObj || timeObj.hour === -1 || timeObj.minute === -1;\n\nconst getEmptyTimeObj = () => {\n  return {};\n};\n\nconst checkTimeObj = timeObj => isEmptyTimeObj(timeObj) ? getEmptyTimeObj() : timeObj; // const getInitList = (user, key) =>\n//   !user && window.localStorage.getItem(key)\n//     ? JSON.parse(window.localStorage.getItem(key))\n//     : null;\n\n\nconst getNowTimeHHMM = () => new Date().toTimeString().split(\":\").slice(0, 2).map(numChar => parseInt(numChar));\n\nexport const useRecordTime = (key, user, date) => {\n  _s();\n\n  // const initVal = getInitList(user, key);\n  const [recordTime, setRecordTime] = useState(\"Loading\");\n\n  const getRecordTime = async () => {\n    try {\n      let resTimeObj;\n\n      if (user) {\n        const data = await APIv2.recordTime(user, date, key).get();\n        resTimeObj = checkTimeObj(data === null || data === void 0 ? void 0 : data.data);\n        console.log(\"USERECORDTIME, data catch\");\n        console.log(\"USERECORDTIME DATA CATCH AFT\");\n        setRecordTime(resTimeObj);\n      } else {\n        resTimeObj = LocalStroage.recordTime(key).get();\n        console.log(\"USERECORDTIME DATA CATCH AFT\");\n        setRecordTime(resTimeObj);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"GET RECORD TIME START\");\n    getRecordTime();\n  }, [date, user]);\n\n  const setTime = timeObj => {\n    timeObj = checkTimeObj(timeObj);\n    return {\n      create: async () => {\n        setRecordTime(timeObj);\n        if (user) await APIv2.recordTime(user, date, key).create(timeObj);else LocalStroage.recordTime(key).set(timeObj);\n      },\n      edit: async () => {\n        setRecordTime(timeObj);\n        if (user) await APIv2.recordTime(user, date, key).edit(timeObj);else LocalStroage.recordTime(key).set(timeObj);\n      },\n      delete: async () => {\n        setRecordTime({});\n        if (user) await APIv2.recordTime(user, date, key).delete(timeObj);else LocalStroage.recordTime(key).set({});\n      }\n    }; //\n    // if (user)\n    //   API.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n    //     value: timeObj,\n    //   });\n    // else window.localStorage.setItem(key, JSON.stringify(timeObj));\n    // setRecordTime(timeObj);\n  };\n\n  const onClick = event => {\n    console.log(\"ONCLICK RECORDTIME\");\n    event.preventDefault();\n    const [hour, minute] = getNowTimeHHMM();\n    const timeObj = {\n      hour,\n      minute\n    };\n    setTime(timeObj).create();\n  };\n\n  return [recordTime, onClick, setTime];\n};\n\n_s(useRecordTime, \"fR2G38H9d3gXRYzGBgdsWhK9PTQ=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/time/useRecordTime.js"],"names":["useState","useEffect","APIv2","LocalStroage","isEmptyTimeObj","timeObj","Object","keys","length","getEmptyTimeObj","checkTimeObj","getNowTimeHHMM","Date","toTimeString","split","slice","map","numChar","parseInt","useRecordTime","key","user","date","recordTime","setRecordTime","getRecordTime","resTimeObj","data","get","console","log","error","alert","setTime","create","set","edit","delete","onClick","event","preventDefault","hour","minute"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { APIv2 } from \"../../../tools/API\";\nimport { LocalStroage } from \"../../../tools/LocalStorage\";\n// import { getToday } from \"../../../tools/time\";\n\nexport const isEmptyTimeObj = (timeObj) =>\n  timeObj ? !Object.keys(timeObj).length : true;\n// !timeObj || timeObj.hour === -1 || timeObj.minute === -1;\n\nconst getEmptyTimeObj = () => {\n  return {};\n};\n\nconst checkTimeObj = (timeObj) =>\n  isEmptyTimeObj(timeObj) ? getEmptyTimeObj() : timeObj;\n// const getInitList = (user, key) =>\n//   !user && window.localStorage.getItem(key)\n//     ? JSON.parse(window.localStorage.getItem(key))\n//     : null;\n\nconst getNowTimeHHMM = () =>\n  new Date()\n    .toTimeString()\n    .split(\":\")\n    .slice(0, 2)\n    .map((numChar) => parseInt(numChar));\nexport const useRecordTime = (key, user, date) => {\n  // const initVal = getInitList(user, key);\n  const [recordTime, setRecordTime] = useState(\"Loading\");\n\n  const getRecordTime = async () => {\n    try {\n      let resTimeObj;\n      if (user) {\n        const data = await APIv2.recordTime(user, date, key).get();\n        resTimeObj = checkTimeObj(data?.data);\n        console.log(\"USERECORDTIME, data catch\");\n        console.log(\"USERECORDTIME DATA CATCH AFT\");\n        setRecordTime(resTimeObj);\n      } else {\n        resTimeObj = LocalStroage.recordTime(key).get();\n        console.log(\"USERECORDTIME DATA CATCH AFT\");\n        setRecordTime(resTimeObj);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    console.log(\"GET RECORD TIME START\");\n    getRecordTime();\n  }, [date, user]);\n\n  const setTime = (timeObj) => {\n    timeObj = checkTimeObj(timeObj);\n    return {\n      create: async () => {\n        setRecordTime(timeObj);\n        if (user) await APIv2.recordTime(user, date, key).create(timeObj);\n        else LocalStroage.recordTime(key).set(timeObj);\n      },\n      edit: async () => {\n        setRecordTime(timeObj);\n        if (user) await APIv2.recordTime(user, date, key).edit(timeObj);\n        else LocalStroage.recordTime(key).set(timeObj);\n      },\n      delete: async () => {\n        setRecordTime({});\n        if (user) await APIv2.recordTime(user, date, key).delete(timeObj);\n        else LocalStroage.recordTime(key).set({});\n      },\n    };\n    //\n    // if (user)\n    //   API.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n    //     value: timeObj,\n    //   });\n    // else window.localStorage.setItem(key, JSON.stringify(timeObj));\n    // setRecordTime(timeObj);\n  };\n  const onClick = (event) => {\n    console.log(\"ONCLICK RECORDTIME\");\n    event.preventDefault();\n    const [hour, minute] = getNowTimeHHMM();\n    const timeObj = { hour, minute };\n    setTime(timeObj).create();\n  };\n  return [recordTime, onClick, setTime];\n};\n"]},"metadata":{},"sourceType":"module"}