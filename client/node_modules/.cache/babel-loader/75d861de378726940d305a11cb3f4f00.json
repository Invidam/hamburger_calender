{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js\",\n    _s = $RefreshSig$();\n\nimport Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, getToday, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport axios from \"axios\";\nimport { useDateInfo } from \"../../hooks/calendar/useDateInfo\";\nimport { LoadingElement } from \"../Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CalendarTemplate = ({\n  user,\n  updateDateHook\n}) => {\n  _s();\n\n  const [dateObj, onUpdateDate] = updateDateHook;\n  const date = changeFormatYYYYMMDD(dateObj);\n  const [mark, isDateInfoLoad, setActiveDate] = useDateInfo(user, date); // console.log(\"DATE INFO: \", dateInfo);\n  // const mark = dateInfo[0];\n\n  console.log(\"[Calendar]\"); // return isDateInfoLoad ? (\n  //   <article>\n  //     {\" \"}\n  //     <LoadingElement text={\"Calendar Loading\"} />\n  //   </article>\n  // ) :\n\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      className: \"caldendar\",\n      onChange: value => onUpdateDate(value),\n      value: dateObj,\n      locale: \"en\",\n      calendarType: \"US\",\n      onClickDay: (dateObj, event) => {\n        const localDateObj = {\n          today: getToday(),\n          clickedDate: UTCtoKTC(dateObj)\n        };\n        localStorage.setItem(\"dateObj\", JSON.stringify(localDateObj));\n      },\n      onActiveStartDateChange: ({\n        activeStartDate,\n        value,\n        view\n      }) => {\n        console.log(\"Changed view to: \", activeStartDate, value, view);\n        setActiveDate(changeFormatYYYYMMDD(activeStartDate));\n      },\n      tileClassName: ({\n        date,\n        view\n      }) => {\n        if (mark && mark.find(markedDate => markedDate === changeFormatYYYYMMDD(date))) return \"highlight\";\n      } //DB에 있는 날짜는 체크표시 해야함.\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CalendarTemplate, \"RkCylyvdMQiEMHrslASaeA7gSXc=\", false, function () {\n  return [useDateInfo];\n});\n\n_c = CalendarTemplate;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarTemplate\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js"],"names":["Calendar","changeFormatYYYYMMDD","getToday","UTCtoKTC","axios","useDateInfo","LoadingElement","CalendarTemplate","user","updateDateHook","dateObj","onUpdateDate","date","mark","isDateInfoLoad","setActiveDate","console","log","value","event","localDateObj","today","clickedDate","localStorage","setItem","JSON","stringify","activeStartDate","view","find","markedDate"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,SAASC,oBAAT,EAA+BC,QAA/B,EAAyCC,QAAzC,QAAyD,kBAAzD;AACA,OAAO,wBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,kCAA5B;AACA,SAASC,cAAT,QAA+B,YAA/B;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA8B;AAAA;;AAC5D,QAAM,CAACC,OAAD,EAAUC,YAAV,IAA0BF,cAAhC;AACA,QAAMG,IAAI,GAAGX,oBAAoB,CAACS,OAAD,CAAjC;AACA,QAAM,CAACG,IAAD,EAAOC,cAAP,EAAuBC,aAAvB,IAAwCV,WAAW,CAACG,IAAD,EAAOI,IAAP,CAAzD,CAH4D,CAI5D;AACA;;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAN4D,CAO5D;AACA;AACA;AACA;AACA;AACA;;AACA,sBACE;AAAA,2BACE,QAAC,QAAD;AACE,MAAA,SAAS,EAAC,WADZ;AAEE,MAAA,QAAQ,EAAGC,KAAD,IAAWP,YAAY,CAACO,KAAD,CAFnC;AAGE,MAAA,KAAK,EAAER,OAHT;AAIE,MAAA,MAAM,EAAE,IAJV;AAKE,MAAA,YAAY,EAAE,IALhB;AAME,MAAA,UAAU,EAAE,CAACA,OAAD,EAAUS,KAAV,KAAoB;AAC9B,cAAMC,YAAY,GAAG;AACnBC,UAAAA,KAAK,EAAEnB,QAAQ,EADI;AAEnBoB,UAAAA,WAAW,EAAEnB,QAAQ,CAACO,OAAD;AAFF,SAArB;AAIAa,QAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeN,YAAf,CAAhC;AACD,OAZH;AAaE,MAAA,uBAAuB,EAAE,CAAC;AAAEO,QAAAA,eAAF;AAAmBT,QAAAA,KAAnB;AAA0BU,QAAAA;AAA1B,OAAD,KAAsC;AAC7DZ,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCU,eAAjC,EAAkDT,KAAlD,EAAyDU,IAAzD;AAEAb,QAAAA,aAAa,CAACd,oBAAoB,CAAC0B,eAAD,CAArB,CAAb;AACD,OAjBH;AAkBE,MAAA,aAAa,EAAE,CAAC;AAAEf,QAAAA,IAAF;AAAQgB,QAAAA;AAAR,OAAD,KAAoB;AACjC,YACEf,IAAI,IACJA,IAAI,CAACgB,IAAL,CAAWC,UAAD,IAAgBA,UAAU,KAAK7B,oBAAoB,CAACW,IAAD,CAA7D,CAFF,EAIE,OAAO,WAAP;AACH,OAxBH,CAyBE;;AAzBF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CA5CM;;GAAML,gB;UAGmCF,W;;;KAHnCE,gB","sourcesContent":["import Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, getToday, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport axios from \"axios\";\nimport { useDateInfo } from \"../../hooks/calendar/useDateInfo\";\nimport { LoadingElement } from \"../Loading\";\nexport const CalendarTemplate = ({ user, updateDateHook }) => {\n  const [dateObj, onUpdateDate] = updateDateHook;\n  const date = changeFormatYYYYMMDD(dateObj);\n  const [mark, isDateInfoLoad, setActiveDate] = useDateInfo(user, date);\n  // console.log(\"DATE INFO: \", dateInfo);\n  // const mark = dateInfo[0];\n  console.log(\"[Calendar]\");\n  // return isDateInfoLoad ? (\n  //   <article>\n  //     {\" \"}\n  //     <LoadingElement text={\"Calendar Loading\"} />\n  //   </article>\n  // ) :\n  return (\n    <article>\n      <Calendar\n        className=\"caldendar\"\n        onChange={(value) => onUpdateDate(value)}\n        value={dateObj}\n        locale={\"en\"}\n        calendarType={\"US\"}\n        onClickDay={(dateObj, event) => {\n          const localDateObj = {\n            today: getToday(),\n            clickedDate: UTCtoKTC(dateObj),\n          };\n          localStorage.setItem(\"dateObj\", JSON.stringify(localDateObj));\n        }}\n        onActiveStartDateChange={({ activeStartDate, value, view }) => {\n          console.log(\"Changed view to: \", activeStartDate, value, view);\n\n          setActiveDate(changeFormatYYYYMMDD(activeStartDate));\n        }}\n        tileClassName={({ date, view }) => {\n          if (\n            mark &&\n            mark.find((markedDate) => markedDate === changeFormatYYYYMMDD(date))\n          )\n            return \"highlight\";\n        }}\n        //DB에 있는 날짜는 체크표시 해야함.\n      />\n    </article>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}