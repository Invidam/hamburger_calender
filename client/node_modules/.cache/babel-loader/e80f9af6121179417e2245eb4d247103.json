{"ast":null,"code":"const {\n  sign: signOneShot,\n  verify: verifyOneShot,\n  createSign,\n  createVerify,\n  getCurves\n} = require('crypto');\n\nconst {\n  derToJose,\n  joseToDer\n} = require('../help/ecdsa_signatures');\n\nconst {\n  KEYOBJECT\n} = require('../help/consts');\n\nconst resolveNodeAlg = require('../help/node_alg');\n\nconst {\n  asInput\n} = require('../help/key_object');\n\nconst {\n  dsaEncodingSupported\n} = require('../help/runtime_support');\n\nlet sign, verify;\n\nif (dsaEncodingSupported) {\n  sign = (jwaAlg, nodeAlg, {\n    [KEYOBJECT]: keyObject\n  }, payload) => {\n    if (typeof payload === 'string') {\n      payload = Buffer.from(payload);\n    }\n\n    return signOneShot(nodeAlg, payload, {\n      key: asInput(keyObject, false),\n      dsaEncoding: 'ieee-p1363'\n    });\n  };\n\n  verify = (jwaAlg, nodeAlg, {\n    [KEYOBJECT]: keyObject\n  }, payload, signature) => {\n    try {\n      return verifyOneShot(nodeAlg, payload, {\n        key: asInput(keyObject, true),\n        dsaEncoding: 'ieee-p1363'\n      }, signature);\n    } catch (err) {\n      return false;\n    }\n  };\n} else {\n  sign = (jwaAlg, nodeAlg, {\n    [KEYOBJECT]: keyObject\n  }, payload) => {\n    return derToJose(createSign(nodeAlg).update(payload).sign(asInput(keyObject, false)), jwaAlg);\n  };\n\n  verify = (jwaAlg, nodeAlg, {\n    [KEYOBJECT]: keyObject\n  }, payload, signature) => {\n    try {\n      return createVerify(nodeAlg).update(payload).verify(asInput(keyObject, true), joseToDer(signature, jwaAlg));\n    } catch (err) {\n      return false;\n    }\n  };\n}\n\nconst crvToAlg = crv => {\n  switch (crv) {\n    case 'P-256':\n      return 'ES256';\n\n    case 'secp256k1':\n      return 'ES256K';\n\n    case 'P-384':\n      return 'ES384';\n\n    case 'P-521':\n      return 'ES512';\n  }\n};\n\nmodule.exports = (JWA, JWK) => {\n  const algs = [];\n\n  if (getCurves().includes('prime256v1')) {\n    algs.push('ES256');\n  }\n\n  if (getCurves().includes('secp256k1')) {\n    algs.push('ES256K');\n  }\n\n  if (getCurves().includes('secp384r1')) {\n    algs.push('ES384');\n  }\n\n  if (getCurves().includes('secp521r1')) {\n    algs.push('ES512');\n  }\n\n  algs.forEach(jwaAlg => {\n    const nodeAlg = resolveNodeAlg(jwaAlg);\n    JWA.sign.set(jwaAlg, sign.bind(undefined, jwaAlg, nodeAlg));\n    JWA.verify.set(jwaAlg, verify.bind(undefined, jwaAlg, nodeAlg));\n\n    JWK.EC.sign[jwaAlg] = key => key.private && JWK.EC.verify[jwaAlg](key);\n\n    JWK.EC.verify[jwaAlg] = key => (key.use === 'sig' || key.use === undefined) && crvToAlg(key.crv) === jwaAlg;\n  });\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/jwa/ecdsa.js"],"names":["sign","signOneShot","verify","verifyOneShot","createSign","createVerify","getCurves","require","derToJose","joseToDer","KEYOBJECT","resolveNodeAlg","asInput","dsaEncodingSupported","jwaAlg","nodeAlg","keyObject","payload","Buffer","from","key","dsaEncoding","signature","err","update","crvToAlg","crv","module","exports","JWA","JWK","algs","includes","push","forEach","set","bind","undefined","EC","private","use"],"mappings":"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","sourcesContent":["const { sign: signOneShot, verify: verifyOneShot, createSign, createVerify, getCurves } = require('crypto')\n\nconst { derToJose, joseToDer } = require('../help/ecdsa_signatures')\nconst { KEYOBJECT } = require('../help/consts')\nconst resolveNodeAlg = require('../help/node_alg')\nconst { asInput } = require('../help/key_object')\nconst { dsaEncodingSupported } = require('../help/runtime_support')\n\nlet sign, verify\n\nif (dsaEncodingSupported) {\n  sign = (jwaAlg, nodeAlg, { [KEYOBJECT]: keyObject }, payload) => {\n    if (typeof payload === 'string') {\n      payload = Buffer.from(payload)\n    }\n    return signOneShot(nodeAlg, payload, { key: asInput(keyObject, false), dsaEncoding: 'ieee-p1363' })\n  }\n  verify = (jwaAlg, nodeAlg, { [KEYOBJECT]: keyObject }, payload, signature) => {\n    try {\n      return verifyOneShot(nodeAlg, payload, { key: asInput(keyObject, true), dsaEncoding: 'ieee-p1363' }, signature)\n    } catch (err) {\n      return false\n    }\n  }\n} else {\n  sign = (jwaAlg, nodeAlg, { [KEYOBJECT]: keyObject }, payload) => {\n    return derToJose(createSign(nodeAlg).update(payload).sign(asInput(keyObject, false)), jwaAlg)\n  }\n  verify = (jwaAlg, nodeAlg, { [KEYOBJECT]: keyObject }, payload, signature) => {\n    try {\n      return createVerify(nodeAlg).update(payload).verify(asInput(keyObject, true), joseToDer(signature, jwaAlg))\n    } catch (err) {\n      return false\n    }\n  }\n}\n\nconst crvToAlg = (crv) => {\n  switch (crv) {\n    case 'P-256':\n      return 'ES256'\n    case 'secp256k1':\n      return 'ES256K'\n    case 'P-384':\n      return 'ES384'\n    case 'P-521':\n      return 'ES512'\n  }\n}\n\nmodule.exports = (JWA, JWK) => {\n  const algs = []\n\n  if (getCurves().includes('prime256v1')) {\n    algs.push('ES256')\n  }\n\n  if (getCurves().includes('secp256k1')) {\n    algs.push('ES256K')\n  }\n\n  if (getCurves().includes('secp384r1')) {\n    algs.push('ES384')\n  }\n\n  if (getCurves().includes('secp521r1')) {\n    algs.push('ES512')\n  }\n\n  algs.forEach((jwaAlg) => {\n    const nodeAlg = resolveNodeAlg(jwaAlg)\n    JWA.sign.set(jwaAlg, sign.bind(undefined, jwaAlg, nodeAlg))\n    JWA.verify.set(jwaAlg, verify.bind(undefined, jwaAlg, nodeAlg))\n    JWK.EC.sign[jwaAlg] = key => key.private && JWK.EC.verify[jwaAlg](key)\n    JWK.EC.verify[jwaAlg] = key => (key.use === 'sig' || key.use === undefined) && crvToAlg(key.crv) === jwaAlg\n  })\n}\n"]},"metadata":{},"sourceType":"script"}