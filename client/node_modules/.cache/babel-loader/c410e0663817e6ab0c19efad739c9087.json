{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/worklist/WorkList.js\",\n    _s = $RefreshSig$();\n\nimport \"../../css/workList/workList.css\";\nimport \"../../css/workList/tooltip.css\";\nimport { TimeRecordDisplay } from \"./element/timeBtn/TimeDisplayBtn\";\nimport { TimeRecordBtn } from \"./element/timeBtn/TimeRecordBtn\";\nimport { EmptyWork } from \"./element/work/EmptyWork\";\nimport { Work } from \"./element/work/Work\";\nimport { isEmptyTimeObj, useRecordTime } from \"../../hooks/workList/time/useRecordTime\";\nimport { isEmptyWork, useWorkList } from \"../../hooks/workList/work/useWorkList\";\nimport { LoadingElement } from \"../Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WorkList = ({\n  user,\n  date,\n  targetSetting\n}) => {\n  _s();\n\n  var _Object$values;\n\n  const {\n    targetWakeTime,\n    targetBedTime,\n    targetWorkTime\n  } = targetSetting;\n  const [wakeTime, onClickWakeTime, setWakeTime, isWakeTimeLoading] = useRecordTime(\"wakeTime\", user, date);\n  const [bedTime, onClickBedTime, setBedTime, isBedTimeLoading] = useRecordTime(\"bedTime\", user, date);\n  const [workList, setWork, isWorkListLoading] = useWorkList(user, date);\n\n  const isLoading = () => isWakeTimeLoading || isBedTimeLoading || isWorkListLoading;\n\n  const addWakeTimeWindow = /*#__PURE__*/_jsxDEV(TimeRecordBtn, {\n    onClick: onClickWakeTime,\n    isWake: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n\n  const addBedTimeWindow = /*#__PURE__*/_jsxDEV(TimeRecordBtn, {\n    onClick: onClickBedTime,\n    isWake: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n\n  const wakeTimeDisplay = /*#__PURE__*/_jsxDEV(TimeRecordDisplay, {\n    recordTime: wakeTime,\n    isWake: true,\n    setTime: setWakeTime,\n    targetTime: targetWakeTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n\n  const bedTimeDisplay = /*#__PURE__*/_jsxDEV(TimeRecordDisplay, {\n    recordTime: bedTime,\n    isWake: false,\n    setTime: setBedTime,\n    targetTime: targetBedTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n\n  console.log(\"[WORKLIST]\", workList);\n  const wakeTimeElement = isEmptyTimeObj(wakeTime) ? addWakeTimeWindow : wakeTimeDisplay;\n  const bedTimeElemnt = isEmptyTimeObj(bedTime) ? addBedTimeWindow : bedTimeDisplay;\n  const workListElement = workList && Object.values(workList).map((workItem, idx) => {\n    return isEmptyWork(workItem) ? undefined : /*#__PURE__*/_jsxDEV(Work, {\n      user: user,\n      date: date,\n      workItem: workItem,\n      setWork: setWork,\n      id: workItem.id,\n      targetTime: targetWorkTime\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this);\n  });\n  const emptyWork = !workList || ((_Object$values = Object.values(workList)) === null || _Object$values === void 0 ? void 0 : _Object$values.length) < 5 ? /*#__PURE__*/_jsxDEV(EmptyWork, {\n    setWork: setWork\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }, this) : \"\";\n  return isLoading() ? /*#__PURE__*/_jsxDEV(LoadingElement, {\n    text: \"WorkList Loading. . .\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"ol\", {\n    children: [wakeTimeElement, workListElement, emptyWork, bedTimeElemnt]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this); // </div>\n};\n\n_s(WorkList, \"171xDVq49rV4G2AMLbT7z40xpX0=\", false, function () {\n  return [useRecordTime, useRecordTime, useWorkList];\n});\n\n_c = WorkList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkList\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/worklist/WorkList.js"],"names":["TimeRecordDisplay","TimeRecordBtn","EmptyWork","Work","isEmptyTimeObj","useRecordTime","isEmptyWork","useWorkList","LoadingElement","WorkList","user","date","targetSetting","targetWakeTime","targetBedTime","targetWorkTime","wakeTime","onClickWakeTime","setWakeTime","isWakeTimeLoading","bedTime","onClickBedTime","setBedTime","isBedTimeLoading","workList","setWork","isWorkListLoading","isLoading","addWakeTimeWindow","addBedTimeWindow","wakeTimeDisplay","bedTimeDisplay","console","log","wakeTimeElement","bedTimeElemnt","workListElement","Object","values","map","workItem","idx","undefined","id","emptyWork","length"],"mappings":"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","sourcesContent":["import \"../../css/workList/workList.css\";\nimport \"../../css/workList/tooltip.css\";\nimport { TimeRecordDisplay } from \"./element/timeBtn/TimeDisplayBtn\";\nimport { TimeRecordBtn } from \"./element/timeBtn/TimeRecordBtn\";\nimport { EmptyWork } from \"./element/work/EmptyWork\";\nimport { Work } from \"./element/work/Work\";\nimport {\n  isEmptyTimeObj,\n  useRecordTime,\n} from \"../../hooks/workList/time/useRecordTime\";\nimport {\n  isEmptyWork,\n  useWorkList,\n} from \"../../hooks/workList/work/useWorkList\";\nimport { LoadingElement } from \"../Loading\";\nexport const WorkList = ({ user, date, targetSetting }) => {\n  const { targetWakeTime, targetBedTime, targetWorkTime } = targetSetting;\n  const [wakeTime, onClickWakeTime, setWakeTime, isWakeTimeLoading] =\n    useRecordTime(\"wakeTime\", user, date);\n  const [bedTime, onClickBedTime, setBedTime, isBedTimeLoading] = useRecordTime(\n    \"bedTime\",\n    user,\n    date\n  );\n  const [workList, setWork, isWorkListLoading] = useWorkList(user, date);\n  const isLoading = () =>\n    isWakeTimeLoading || isBedTimeLoading || isWorkListLoading;\n\n  const addWakeTimeWindow = (\n    <TimeRecordBtn onClick={onClickWakeTime} isWake={true} />\n  );\n  const addBedTimeWindow = (\n    <TimeRecordBtn onClick={onClickBedTime} isWake={false} />\n  );\n  const wakeTimeDisplay = (\n    <TimeRecordDisplay\n      recordTime={wakeTime}\n      isWake={true}\n      setTime={setWakeTime}\n      targetTime={targetWakeTime}\n    />\n  );\n  const bedTimeDisplay = (\n    <TimeRecordDisplay\n      recordTime={bedTime}\n      isWake={false}\n      setTime={setBedTime}\n      targetTime={targetBedTime}\n    />\n  );\n  console.log(\"[WORKLIST]\", workList);\n  const wakeTimeElement = isEmptyTimeObj(wakeTime)\n    ? addWakeTimeWindow\n    : wakeTimeDisplay;\n  const bedTimeElemnt = isEmptyTimeObj(bedTime)\n    ? addBedTimeWindow\n    : bedTimeDisplay;\n  const workListElement =\n    workList &&\n    Object.values(workList).map((workItem, idx) => {\n      return isEmptyWork(workItem) ? undefined : (\n        <Work\n          user={user}\n          date={date}\n          workItem={workItem}\n          setWork={setWork}\n          key={idx}\n          id={workItem.id}\n          targetTime={targetWorkTime}\n        />\n      );\n    });\n  const emptyWork =\n    !workList || Object.values(workList)?.length < 5 ? (\n      <EmptyWork setWork={setWork} />\n    ) : (\n      \"\"\n    );\n\n  return isLoading() ? (\n    <LoadingElement text={\"WorkList Loading. . .\"} />\n  ) : (\n    <ol>\n      {wakeTimeElement}\n      {workListElement}\n      {emptyWork}\n      {bedTimeElemnt}\n    </ol>\n  );\n  // </div>\n};\n"]},"metadata":{},"sourceType":"module"}