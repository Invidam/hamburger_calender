{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { changeFormatYYYYMMDD, getToday } from \"../../tools/time\";\nexport const useSetDate = () => {\n  _s();\n\n  const today = getToday();\n  let localDateObj;\n  if (localStorage.getItem(\"date\")) localDateObj = JSON.parse(localStorage.getItem(\"date\")); // console.log(localDateObj);\n\n  const initVal = changeFormatYYYYMMDD(localDateObj && localDateObj.today === today ? new Date(localDateObj.clickedDate) : new Date()); // console.log(initVal, typeof initVal, new Date());\n\n  const [date, setDate] = useState(initVal);\n\n  const onUpdateDate = dateObj => setDate(changeFormatYYYYMMDD(dateObj));\n\n  return [date, onUpdateDate];\n};\n\n_s(useSetDate, \"D0X8bPrlXe4dOGzCieQgf4RcN2U=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/date/useSetDate.js"],"names":["useState","changeFormatYYYYMMDD","getToday","useSetDate","today","localDateObj","localStorage","getItem","JSON","parse","initVal","Date","clickedDate","date","setDate","onUpdateDate","dateObj"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,oBAAT,EAA+BC,QAA/B,QAA+C,kBAA/C;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAC9B,QAAMC,KAAK,GAAGF,QAAQ,EAAtB;AACA,MAAIG,YAAJ;AACA,MAAIC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAJ,EACEF,YAAY,GAAGG,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAf,CAJ4B,CAK9B;;AACA,QAAMG,OAAO,GAAGT,oBAAoB,CAClCI,YAAY,IAAIA,YAAY,CAACD,KAAb,KAAuBA,KAAvC,GACI,IAAIO,IAAJ,CAASN,YAAY,CAACO,WAAtB,CADJ,GAEI,IAAID,IAAJ,EAH8B,CAApC,CAN8B,CAW9B;;AACA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAACU,OAAD,CAAhC;;AACA,QAAMK,YAAY,GAAIC,OAAD,IAAaF,OAAO,CAACb,oBAAoB,CAACe,OAAD,CAArB,CAAzC;;AACA,SAAO,CAACH,IAAD,EAAOE,YAAP,CAAP;AACD,CAfM;;GAAMZ,U","sourcesContent":["import { useState } from \"react\";\nimport { changeFormatYYYYMMDD, getToday } from \"../../tools/time\";\n\nexport const useSetDate = () => {\n  const today = getToday();\n  let localDateObj;\n  if (localStorage.getItem(\"date\"))\n    localDateObj = JSON.parse(localStorage.getItem(\"date\"));\n  // console.log(localDateObj);\n  const initVal = changeFormatYYYYMMDD(\n    localDateObj && localDateObj.today === today\n      ? new Date(localDateObj.clickedDate)\n      : new Date()\n  );\n  // console.log(initVal, typeof initVal, new Date());\n  const [date, setDate] = useState(initVal);\n  const onUpdateDate = (dateObj) => setDate(changeFormatYYYYMMDD(dateObj));\n  return [date, onUpdateDate];\n};\n"]},"metadata":{},"sourceType":"module"}