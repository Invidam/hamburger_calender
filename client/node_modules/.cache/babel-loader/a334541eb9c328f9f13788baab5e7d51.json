{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport qs from \"qs\";\nimport { useState } from \"react\";\nconst baseUrl = \"https://github.com/login/oauth/authorize\";\nconst authConfig = {\n  client_id: \"44089da06c95a868c4cb\",\n  allow_signup: false,\n  scope: \"read:user user:email\"\n};\nexport const useAttemptLogin = (login, history) => {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmitNotSocial = async event => {\n    try {\n      event.preventDefault();\n      const userInfo = {\n        email,\n        password\n      };\n      await login(userInfo, \"notSocial\");\n      history.push(\"/\");\n    } catch (error) {\n      alert(error);\n      console.log(\"ERR IN ATTEMP CAN FOUD???\");\n      setEmail(\"\");\n      setPassword(\"\");\n      history.push(\"/login\");\n    }\n  };\n\n  const authUrl = baseUrl + \"?\" + qs.stringify(authConfig);\n  return {\n    email,\n    setEmail,\n    password,\n    setPassword,\n    handleSubmitNotSocial,\n    authUrl\n  };\n};\n\n_s(useAttemptLogin, \"3B3pqDcVnkT+z/sPK6Z9zQsLP+s=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useAttemptLogin.js"],"names":["qs","useState","baseUrl","authConfig","client_id","allow_signup","scope","useAttemptLogin","login","history","email","setEmail","password","setPassword","handleSubmitNotSocial","event","preventDefault","userInfo","push","error","alert","console","log","authUrl","stringify"],"mappings":";;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,MAAMC,OAAO,GAAG,0CAAhB;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAE,sBADM;AAEjBC,EAAAA,YAAY,EAAE,KAFG;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAAnB;AAMA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAAA;;AACjD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMa,qBAAqB,GAAG,MAAOC,KAAP,IAAiB;AAC7C,QAAI;AACFA,MAAAA,KAAK,CAACC,cAAN;AACA,YAAMC,QAAQ,GAAG;AAAEP,QAAAA,KAAF;AAASE,QAAAA;AAAT,OAAjB;AACA,YAAMJ,KAAK,CAACS,QAAD,EAAW,WAAX,CAAX;AACAR,MAAAA,OAAO,CAACS,IAAR,CAAa,GAAb;AACD,KALD,CAKE,OAAOC,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAX,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAJ,MAAAA,OAAO,CAACS,IAAR,CAAa,QAAb;AACD;AACF,GAbD;;AAcA,QAAMK,OAAO,GAAGrB,OAAO,GAAG,GAAV,GAAgBF,EAAE,CAACwB,SAAH,CAAarB,UAAb,CAAhC;AACA,SAAO;AACLO,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLC,IAAAA,QAHK;AAILC,IAAAA,WAJK;AAKLC,IAAAA,qBALK;AAMLS,IAAAA;AANK,GAAP;AAQD,CA3BM;;GAAMhB,e","sourcesContent":["import qs from \"qs\";\nimport { useState } from \"react\";\n\nconst baseUrl = \"https://github.com/login/oauth/authorize\";\nconst authConfig = {\n  client_id: \"44089da06c95a868c4cb\",\n  allow_signup: false,\n  scope: \"read:user user:email\",\n};\n\nexport const useAttemptLogin = (login, history) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmitNotSocial = async (event) => {\n    try {\n      event.preventDefault();\n      const userInfo = { email, password };\n      await login(userInfo, \"notSocial\");\n      history.push(\"/\");\n    } catch (error) {\n      alert(error);\n      console.log(\"ERR IN ATTEMP CAN FOUD???\");\n      setEmail(\"\");\n      setPassword(\"\");\n      history.push(\"/login\");\n    }\n  };\n  const authUrl = baseUrl + \"?\" + qs.stringify(authConfig);\n  return {\n    email,\n    setEmail,\n    password,\n    setPassword,\n    handleSubmitNotSocial,\n    authUrl,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}