{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API } from \"../../../tools/axiosSetting\";\nexport const useWorkList = (user, date) => {\n  _s();\n\n  const getEmptyWorkList = () => {\n    return [{\n      workTime: -1\n    }];\n  };\n\n  const isEmptyWorkList = workList => {\n    var _workList$;\n\n    return workList ? ((_workList$ = workList[0]) === null || _workList$ === void 0 ? void 0 : _workList$.workTime) === -1 : true;\n  };\n\n  const checkWorkList = workList => isEmptyWorkList(workList) ? getEmptyWorkList() : workList;\n\n  const getInitList = user => !user && window.localStorage.getItem(\"workList\") ? JSON.parse(window.localStorage.getItem(\"workList\")) : [];\n\n  const initList = getInitList();\n  const [workList, setWorkList] = useState(initList);\n\n  const getWorkList = async () => {\n    let resWorkList;\n\n    if (user) {\n      const data = await API.get(`/api/${user}/${date}/worklist/worklist`);\n      console.log(\"WORKLIST, data: \", data === null || data === void 0 ? void 0 : data.data); // resWorkList = checkWorkList(data?.data);\n    } else {\n      resWorkList = JSON.parse(localStorage.getItem(\"workList\"));\n    }\n\n    setWorkList(resWorkList);\n  };\n\n  useEffect(() => {\n    getWorkList();\n  }, [date, user]);\n\n  const updateWorkList = _workList => {\n    _workList = checkWorkList(_workList);\n    setWorkList(_workList);\n\n    if (user) {// API.post(`/api/${user}/${date}/worklist/worklist`, {\n      //   user: \"TEST\",\n      //   value: _workList,\n      // });\n    } else window.localStorage.setItem(\"workList\", JSON.stringify(_workList));\n  };\n\n  return [workList, updateWorkList];\n};\n\n_s(useWorkList, \"uUnjV6oTVBBPadCGz4VigBOSZFc=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/work/useWorkList.js"],"names":["useEffect","useState","API","useWorkList","user","date","getEmptyWorkList","workTime","isEmptyWorkList","workList","checkWorkList","getInitList","window","localStorage","getItem","JSON","parse","initList","setWorkList","getWorkList","resWorkList","data","get","console","log","updateWorkList","_workList","setItem","stringify"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,QAAoB,6BAApB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAAA;;AACzC,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,WAAO,CAAC;AAAEC,MAAAA,QAAQ,EAAE,CAAC;AAAb,KAAD,CAAP;AACD,GAFD;;AAGA,QAAMC,eAAe,GAAIC,QAAD;AAAA;;AAAA,WACtBA,QAAQ,GAAG,eAAAA,QAAQ,CAAC,CAAD,CAAR,0DAAaF,QAAb,MAA0B,CAAC,CAA9B,GAAkC,IADpB;AAAA,GAAxB;;AAGA,QAAMG,aAAa,GAAID,QAAD,IACpBD,eAAe,CAACC,QAAD,CAAf,GAA4BH,gBAAgB,EAA5C,GAAiDG,QADnD;;AAGA,QAAME,WAAW,GAAIP,IAAD,IAClB,CAACA,IAAD,IAASQ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAT,GACIC,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAX,CADJ,GAEI,EAHN;;AAKA,QAAMG,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM,CAACF,QAAD,EAAWS,WAAX,IAA0BjB,QAAQ,CAACgB,QAAD,CAAxC;;AAEA,QAAME,WAAW,GAAG,YAAY;AAC9B,QAAIC,WAAJ;;AACA,QAAIhB,IAAJ,EAAU;AACR,YAAMiB,IAAI,GAAG,MAAMnB,GAAG,CAACoB,GAAJ,CAAS,QAAOlB,IAAK,IAAGC,IAAK,oBAA7B,CAAnB;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,IAAhC,aAAgCA,IAAhC,uBAAgCA,IAAI,CAAEA,IAAtC,EAFQ,CAGR;AACD,KAJD,MAIO;AACLD,MAAAA,WAAW,GAAGL,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAd;AACD;;AACDI,IAAAA,WAAW,CAACE,WAAD,CAAX;AACD,GAVD;;AAWApB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACd,IAAD,EAAOD,IAAP,CAFM,CAAT;;AAIA,QAAMqB,cAAc,GAAIC,SAAD,IAAe;AACpCA,IAAAA,SAAS,GAAGhB,aAAa,CAACgB,SAAD,CAAzB;AACAR,IAAAA,WAAW,CAACQ,SAAD,CAAX;;AACA,QAAItB,IAAJ,EAAU,CACR;AACA;AACA;AACA;AACD,KALD,MAKOQ,MAAM,CAACC,YAAP,CAAoBc,OAApB,CAA4B,UAA5B,EAAwCZ,IAAI,CAACa,SAAL,CAAeF,SAAf,CAAxC;AACR,GATD;;AAUA,SAAO,CAACjB,QAAD,EAAWgB,cAAX,CAAP;AACD,CA5CM;;GAAMtB,W","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API } from \"../../../tools/axiosSetting\";\n\nexport const useWorkList = (user, date) => {\n  const getEmptyWorkList = () => {\n    return [{ workTime: -1 }];\n  };\n  const isEmptyWorkList = (workList) =>\n    workList ? workList[0]?.workTime === -1 : true;\n\n  const checkWorkList = (workList) =>\n    isEmptyWorkList(workList) ? getEmptyWorkList() : workList;\n\n  const getInitList = (user) =>\n    !user && window.localStorage.getItem(\"workList\")\n      ? JSON.parse(window.localStorage.getItem(\"workList\"))\n      : [];\n\n  const initList = getInitList();\n  const [workList, setWorkList] = useState(initList);\n\n  const getWorkList = async () => {\n    let resWorkList;\n    if (user) {\n      const data = await API.get(`/api/${user}/${date}/worklist/worklist`);\n      console.log(\"WORKLIST, data: \", data?.data);\n      // resWorkList = checkWorkList(data?.data);\n    } else {\n      resWorkList = JSON.parse(localStorage.getItem(\"workList\"));\n    }\n    setWorkList(resWorkList);\n  };\n  useEffect(() => {\n    getWorkList();\n  }, [date, user]);\n\n  const updateWorkList = (_workList) => {\n    _workList = checkWorkList(_workList);\n    setWorkList(_workList);\n    if (user) {\n      // API.post(`/api/${user}/${date}/worklist/worklist`, {\n      //   user: \"TEST\",\n      //   value: _workList,\n      // });\n    } else window.localStorage.setItem(\"workList\", JSON.stringify(_workList));\n  };\n  return [workList, updateWorkList];\n};\n"]},"metadata":{},"sourceType":"module"}