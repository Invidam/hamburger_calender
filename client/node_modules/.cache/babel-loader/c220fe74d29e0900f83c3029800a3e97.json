{"ast":null,"code":"const {\n  ArgumentError\n} = require('../errors');\n\nconst {\n  JwksClient\n} = require('../JwksClient');\n\nconst supportedAlg = require('./config');\n\nmodule.exports.koaJwtSecret = function (options = {}) {\n  if (!options.jwksUri) {\n    throw new ArgumentError('No JWKS provided. Please provide a jwksUri');\n  }\n\n  const client = new JwksClient(options);\n  return function secretProvider({\n    alg,\n    kid\n  } = {}) {\n    return new Promise((resolve, reject) => {\n      if (!supportedAlg.includes(alg)) {\n        return reject(new Error('Missing / invalid token algorithm'));\n      }\n\n      client.getSigningKey(kid).then(key => {\n        resolve(key.publicKey || key.rsaPublicKey);\n      }).catch(err => {\n        if (options.handleSigningKeyError) {\n          return options.handleSigningKeyError(err).then(reject);\n        }\n\n        return reject(err);\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jwks-rsa/src/integrations/koa.js"],"names":["ArgumentError","require","JwksClient","supportedAlg","module","exports","koaJwtSecret","options","jwksUri","client","secretProvider","alg","kid","Promise","resolve","reject","includes","Error","getSigningKey","then","key","publicKey","rsaPublicKey","catch","err","handleSigningKeyError"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,OAAO,CAAC,WAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAiBD,OAAO,CAAC,eAAD,CAA9B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,UAAD,CAA5B;;AAEAG,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8B,UAAUC,OAAO,GAAG,EAApB,EAAwB;AACpD,MAAI,CAACA,OAAO,CAACC,OAAb,EAAsB;AACpB,UAAM,IAAIR,aAAJ,CAAkB,4CAAlB,CAAN;AACD;;AAED,QAAMS,MAAM,GAAG,IAAIP,UAAJ,CAAeK,OAAf,CAAf;AAEA,SAAO,SAASG,cAAT,CAAwB;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAe,EAAvC,EAA2C;AAChD,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAI,CAACZ,YAAY,CAACa,QAAb,CAAsBL,GAAtB,CAAL,EAAiC;AAC/B,eAAOI,MAAM,CAAC,IAAIE,KAAJ,CAAU,mCAAV,CAAD,CAAb;AACD;;AAEDR,MAAAA,MAAM,CAACS,aAAP,CAAqBN,GAArB,EACGO,IADH,CACQC,GAAG,IAAI;AACXN,QAAAA,OAAO,CAACM,GAAG,CAACC,SAAJ,IAAiBD,GAAG,CAACE,YAAtB,CAAP;AACD,OAHH,EAGKC,KAHL,CAGWC,GAAG,IAAI;AACd,YAAIjB,OAAO,CAACkB,qBAAZ,EAAmC;AACjC,iBAAOlB,OAAO,CAACkB,qBAAR,CAA8BD,GAA9B,EAAmCL,IAAnC,CAAwCJ,MAAxC,CAAP;AACD;;AAED,eAAOA,MAAM,CAACS,GAAD,CAAb;AACD,OATH;AAUD,KAfM,CAAP;AAgBD,GAjBD;AAkBD,CAzBD","sourcesContent":["const { ArgumentError } = require('../errors');\nconst { JwksClient } = require('../JwksClient');\nconst supportedAlg = require('./config');\n\nmodule.exports.koaJwtSecret = function (options = {}) {\n  if (!options.jwksUri) {\n    throw new ArgumentError('No JWKS provided. Please provide a jwksUri');\n  }\n\n  const client = new JwksClient(options);\n\n  return function secretProvider({ alg, kid } = {}) {\n    return new Promise((resolve, reject) => {\n      if (!supportedAlg.includes(alg)) {\n        return reject(new Error('Missing / invalid token algorithm'));\n      }\n\n      client.getSigningKey(kid)\n        .then(key => {\n          resolve(key.publicKey || key.rsaPublicKey);\n        }).catch(err => {\n          if (options.handleSigningKeyError) {\n            return options.handleSigningKeyError(err).then(reject);\n          }\n\n          return reject(err);\n        });\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"script"}