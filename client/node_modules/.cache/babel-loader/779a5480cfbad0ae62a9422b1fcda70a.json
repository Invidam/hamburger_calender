{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { APIv2 } from \"../../tools/API\";\nimport { getAddedDateObj, getAddedDateStr } from \"../../tools/time\";\nconst savedListView = new Map();\nexport const useListView = (user, date, setDate) => {\n  _s();\n\n  const getStartDate = date => getAddedDateStr(date, -2);\n\n  const [startDate, setStratDate] = useState(getStartDate(date));\n\n  const getEndDate = startDate => getAddedDateObj(startDate, 4);\n\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState();\n\n  const onClickLeftBtn = () => {\n    savedListView[\"1\"] = 2;\n    setStratDate(getAddedDateStr(startDate, 1));\n  };\n\n  const onClickRightBtn = () => {\n    console.log(savedListView);\n    setStratDate(getAddedDateStr(startDate, -1));\n  };\n\n  useEffect(() => {\n    setStratDate(getStartDate(date));\n  }, [date]);\n\n  const getListView = async () => {\n    try {\n      if (user && startDate) {\n        setLoad(true);\n        const data = await APIv2.listView(user, startDate).get();\n        setLoad(false);\n        if (!(data === null || data === void 0 ? void 0 : data.data)) throw new Error(\"List View cann't found\");\n        console.log(\"DATA : LISTVIEW \", data === null || data === void 0 ? void 0 : data.data);\n        setListView(data === null || data === void 0 ? void 0 : data.data);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    console.log(\"Set list view start L or R\");\n  }, [startDate]);\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    console.log(\"Set list view start\");\n    getListView();\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn\n  };\n};\n\n_s(useListView, \"oyofhKgQWrPM2OCPmitO17XKVBk=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/listView/useListView.js"],"names":["useEffect","useState","APIv2","getAddedDateObj","getAddedDateStr","savedListView","Map","useListView","user","date","setDate","getStartDate","startDate","setStratDate","getEndDate","listView","setListView","isListViewLoading","setLoad","onClickLeftBtn","onClickRightBtn","console","log","getListView","data","get","Error","error","alert"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,kBAAjD;AAEA,MAAMC,aAAa,GAAG,IAAIC,GAAJ,EAAtB;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,OAAb,KAAyB;AAAA;;AAClD,QAAMC,YAAY,GAAIF,IAAD,IAAUL,eAAe,CAACK,IAAD,EAAO,CAAC,CAAR,CAA9C;;AACA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAACU,YAAY,CAACF,IAAD,CAAb,CAA1C;;AACA,QAAMK,UAAU,GAAIF,SAAD,IAAeT,eAAe,CAACS,SAAD,EAAY,CAAZ,CAAjD;;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,EAAxC;AACA,QAAM,CAACgB,iBAAD,EAAoBC,OAApB,IAA+BjB,QAAQ,EAA7C;;AAEA,QAAMkB,cAAc,GAAG,MAAM;AAC3Bd,IAAAA,aAAa,CAAC,GAAD,CAAb,GAAqB,CAArB;AACAQ,IAAAA,YAAY,CAACT,eAAe,CAACQ,SAAD,EAAY,CAAZ,CAAhB,CAAZ;AACD,GAHD;;AAIA,QAAMQ,eAAe,GAAG,MAAM;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAYjB,aAAZ;AACAQ,IAAAA,YAAY,CAACT,eAAe,CAACQ,SAAD,EAAY,CAAC,CAAb,CAAhB,CAAZ;AACD,GAHD;;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,YAAY,CAACF,YAAY,CAACF,IAAD,CAAb,CAAZ;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;;AAGA,QAAMc,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,UAAIf,IAAI,IAAII,SAAZ,EAAuB;AACrBM,QAAAA,OAAO,CAAC,IAAD,CAAP;AACA,cAAMM,IAAI,GAAG,MAAMtB,KAAK,CAACa,QAAN,CAAeP,IAAf,EAAqBI,SAArB,EAAgCa,GAAhC,EAAnB;AACAP,QAAAA,OAAO,CAAC,KAAD,CAAP;AACA,YAAI,EAACM,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAJ,EAAiB,MAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AACjBL,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCE,IAAhC,aAAgCA,IAAhC,uBAAgCA,IAAI,CAAEA,IAAtC;AACAR,QAAAA,WAAW,CAACQ,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAX;AACD;AACF,KATD,CASE,OAAOG,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,GAbD;;AAcA3B,EAAAA,SAAS,CAAC,MAAM;AACd;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD,GAHQ,EAGN,CAACV,SAAD,CAHM,CAAT;AAIAZ,EAAAA,SAAS,CAAC,MAAM;AACd;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAC,IAAAA,WAAW;AACZ,GAJQ,EAIN,CAACX,SAAD,CAJM,CAAT;AAKA,SAAO;AACLK,IAAAA,iBADK;AAELL,IAAAA,SAFK;AAGLG,IAAAA,QAHK;AAILI,IAAAA,cAJK;AAKLC,IAAAA;AALK,GAAP;AAOD,CAjDM;;GAAMb,W","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { APIv2 } from \"../../tools/API\";\nimport { getAddedDateObj, getAddedDateStr } from \"../../tools/time\";\n\nconst savedListView = new Map();\nexport const useListView = (user, date, setDate) => {\n  const getStartDate = (date) => getAddedDateStr(date, -2);\n  const [startDate, setStratDate] = useState(getStartDate(date));\n  const getEndDate = (startDate) => getAddedDateObj(startDate, 4);\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState();\n\n  const onClickLeftBtn = () => {\n    savedListView[\"1\"] = 2;\n    setStratDate(getAddedDateStr(startDate, 1));\n  };\n  const onClickRightBtn = () => {\n    console.log(savedListView);\n    setStratDate(getAddedDateStr(startDate, -1));\n  };\n\n  useEffect(() => {\n    setStratDate(getStartDate(date));\n  }, [date]);\n  const getListView = async () => {\n    try {\n      if (user && startDate) {\n        setLoad(true);\n        const data = await APIv2.listView(user, startDate).get();\n        setLoad(false);\n        if (!data?.data) throw new Error(\"List View cann't found\");\n        console.log(\"DATA : LISTVIEW \", data?.data);\n        setListView(data?.data);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    console.log(\"Set list view start L or R\");\n  }, [startDate]);\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    console.log(\"Set list view start\");\n    getListView();\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}