{"ast":null,"code":"const base64url = require('../help/base64url');\n\nconst errors = require('../errors');\n\nmodule.exports = (token, {\n  complete = false\n} = {}) => {\n  if (typeof token !== 'string' || !token) {\n    throw new TypeError('JWT must be a string');\n  }\n\n  const {\n    0: header,\n    1: payload,\n    2: signature,\n    length\n  } = token.split('.');\n\n  if (length === 5) {\n    throw new TypeError('encrypted JWTs cannot be decoded');\n  }\n\n  if (length !== 3) {\n    throw new errors.JWTMalformed('JWTs must have three components');\n  }\n\n  try {\n    const result = {\n      header: base64url.JSON.decode(header),\n      payload: base64url.JSON.decode(payload),\n      signature\n    };\n    return complete ? result : result.payload;\n  } catch (err) {\n    throw new errors.JWTMalformed('JWT is malformed');\n  }\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/jwt/decode.js"],"names":["base64url","require","errors","module","exports","token","complete","TypeError","header","payload","signature","length","split","JWTMalformed","result","JSON","decode","err"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,mBAAD,CAAzB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,CAACC,KAAD,EAAQ;AAAEC,EAAAA,QAAQ,GAAG;AAAb,IAAuB,EAA/B,KAAsC;AACrD,MAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,CAACA,KAAlC,EAAyC;AACvC,UAAM,IAAIE,SAAJ,CAAc,sBAAd,CAAN;AACD;;AAED,QAAM;AAAE,OAAGC,MAAL;AAAa,OAAGC,OAAhB;AAAyB,OAAGC,SAA5B;AAAuCC,IAAAA;AAAvC,MAAkDN,KAAK,CAACO,KAAN,CAAY,GAAZ,CAAxD;;AAEA,MAAID,MAAM,KAAK,CAAf,EAAkB;AAChB,UAAM,IAAIJ,SAAJ,CAAc,kCAAd,CAAN;AACD;;AAED,MAAII,MAAM,KAAK,CAAf,EAAkB;AAChB,UAAM,IAAIT,MAAM,CAACW,YAAX,CAAwB,iCAAxB,CAAN;AACD;;AAED,MAAI;AACF,UAAMC,MAAM,GAAG;AACbN,MAAAA,MAAM,EAAER,SAAS,CAACe,IAAV,CAAeC,MAAf,CAAsBR,MAAtB,CADK;AAEbC,MAAAA,OAAO,EAAET,SAAS,CAACe,IAAV,CAAeC,MAAf,CAAsBP,OAAtB,CAFI;AAGbC,MAAAA;AAHa,KAAf;AAMA,WAAOJ,QAAQ,GAAGQ,MAAH,GAAYA,MAAM,CAACL,OAAlC;AACD,GARD,CAQE,OAAOQ,GAAP,EAAY;AACZ,UAAM,IAAIf,MAAM,CAACW,YAAX,CAAwB,kBAAxB,CAAN;AACD;AACF,CA1BD","sourcesContent":["const base64url = require('../help/base64url')\nconst errors = require('../errors')\n\nmodule.exports = (token, { complete = false } = {}) => {\n  if (typeof token !== 'string' || !token) {\n    throw new TypeError('JWT must be a string')\n  }\n\n  const { 0: header, 1: payload, 2: signature, length } = token.split('.')\n\n  if (length === 5) {\n    throw new TypeError('encrypted JWTs cannot be decoded')\n  }\n\n  if (length !== 3) {\n    throw new errors.JWTMalformed('JWTs must have three components')\n  }\n\n  try {\n    const result = {\n      header: base64url.JSON.decode(header),\n      payload: base64url.JSON.decode(payload),\n      signature\n    }\n\n    return complete ? result : result.payload\n  } catch (err) {\n    throw new errors.JWTMalformed('JWT is malformed')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}