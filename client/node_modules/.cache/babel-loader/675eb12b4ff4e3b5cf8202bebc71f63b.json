{"ast":null,"code":"/*! firebase-admin v9.11.1 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoSignerErrorCode = exports.CryptoSignerError = exports.cryptoSignerFromApp = exports.IAMSigner = exports.ServiceAccountSigner = void 0;\n\nvar credential_internal_1 = require(\"../credential/credential-internal\");\n\nvar api_request_1 = require(\"./api-request\");\n\nvar validator = require(\"../utils/validator\");\n\nvar ALGORITHM_RS256 = 'RS256';\n/**\n * A CryptoSigner implementation that uses an explicitly specified service account private key to\n * sign data. Performs all operations locally, and does not make any RPC calls.\n */\n\nvar ServiceAccountSigner = function () {\n  /**\n   * Creates a new CryptoSigner instance from the given service account credential.\n   *\n   * @param {ServiceAccountCredential} credential A service account credential.\n   */\n  function ServiceAccountSigner(credential) {\n    this.credential = credential;\n    this.algorithm = ALGORITHM_RS256;\n\n    if (!credential) {\n      throw new CryptoSignerError({\n        code: CryptoSignerErrorCode.INVALID_CREDENTIAL,\n        message: 'INTERNAL ASSERT: Must provide a service account credential to initialize ServiceAccountSigner.'\n      });\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  ServiceAccountSigner.prototype.sign = function (buffer) {\n    var crypto = require('crypto'); // eslint-disable-line @typescript-eslint/no-var-requires\n\n\n    var sign = crypto.createSign('RSA-SHA256');\n    sign.update(buffer);\n    return Promise.resolve(sign.sign(this.credential.privateKey));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ServiceAccountSigner.prototype.getAccountId = function () {\n    return Promise.resolve(this.credential.clientEmail);\n  };\n\n  return ServiceAccountSigner;\n}();\n\nexports.ServiceAccountSigner = ServiceAccountSigner;\n/**\n * A CryptoSigner implementation that uses the remote IAM service to sign data. If initialized without\n * a service account ID, attempts to discover a service account ID by consulting the local Metadata\n * service. This will succeed in managed environments like Google Cloud Functions and App Engine.\n *\n * @see https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signBlob\n * @see https://cloud.google.com/compute/docs/storing-retrieving-metadata\n */\n\nvar IAMSigner = function () {\n  function IAMSigner(httpClient, serviceAccountId) {\n    this.algorithm = ALGORITHM_RS256;\n\n    if (!httpClient) {\n      throw new CryptoSignerError({\n        code: CryptoSignerErrorCode.INVALID_ARGUMENT,\n        message: 'INTERNAL ASSERT: Must provide a HTTP client to initialize IAMSigner.'\n      });\n    }\n\n    if (typeof serviceAccountId !== 'undefined' && !validator.isNonEmptyString(serviceAccountId)) {\n      throw new CryptoSignerError({\n        code: CryptoSignerErrorCode.INVALID_ARGUMENT,\n        message: 'INTERNAL ASSERT: Service account ID must be undefined or a non-empty string.'\n      });\n    }\n\n    this.httpClient = httpClient;\n    this.serviceAccountId = serviceAccountId;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  IAMSigner.prototype.sign = function (buffer) {\n    var _this = this;\n\n    return this.getAccountId().then(function (serviceAccount) {\n      var request = {\n        method: 'POST',\n        url: \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/\" + serviceAccount + \":signBlob\",\n        data: {\n          payload: buffer.toString('base64')\n        }\n      };\n      return _this.httpClient.send(request);\n    }).then(function (response) {\n      // Response from IAM is base64 encoded. Decode it into a buffer and return.\n      return Buffer.from(response.data.signedBlob, 'base64');\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        throw new CryptoSignerError({\n          code: CryptoSignerErrorCode.SERVER_ERROR,\n          message: err.message,\n          cause: err\n        });\n      }\n\n      throw err;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  IAMSigner.prototype.getAccountId = function () {\n    var _this = this;\n\n    if (validator.isNonEmptyString(this.serviceAccountId)) {\n      return Promise.resolve(this.serviceAccountId);\n    }\n\n    var request = {\n      method: 'GET',\n      url: 'http://metadata/computeMetadata/v1/instance/service-accounts/default/email',\n      headers: {\n        'Metadata-Flavor': 'Google'\n      }\n    };\n    var client = new api_request_1.HttpClient();\n    return client.send(request).then(function (response) {\n      if (!response.text) {\n        throw new CryptoSignerError({\n          code: CryptoSignerErrorCode.INTERNAL_ERROR,\n          message: 'HTTP Response missing payload'\n        });\n      }\n\n      _this.serviceAccountId = response.text;\n      return response.text;\n    }).catch(function (err) {\n      throw new CryptoSignerError({\n        code: CryptoSignerErrorCode.INVALID_CREDENTIAL,\n        message: 'Failed to determine service account. Make sure to initialize ' + 'the SDK with a service account credential. Alternatively specify a service ' + (\"account with iam.serviceAccounts.signBlob permission. Original error: \" + err)\n      });\n    });\n  };\n\n  return IAMSigner;\n}();\n\nexports.IAMSigner = IAMSigner;\n/**\n * Creates a new CryptoSigner instance for the given app. If the app has been initialized with a\n * service account credential, creates a ServiceAccountSigner.\n *\n * @param {FirebaseApp} app A FirebaseApp instance.\n * @return {CryptoSigner} A CryptoSigner instance.\n */\n\nfunction cryptoSignerFromApp(app) {\n  var credential = app.options.credential;\n\n  if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n    return new ServiceAccountSigner(credential);\n  }\n\n  return new IAMSigner(new api_request_1.AuthorizedHttpClient(app), app.options.serviceAccountId);\n}\n\nexports.cryptoSignerFromApp = cryptoSignerFromApp;\n/**\n * CryptoSigner error code structure.\n *\n * @param {ErrorInfo} errorInfo The error information (code and message).\n * @constructor\n */\n\nvar CryptoSignerError = function (_super) {\n  __extends(CryptoSignerError, _super);\n\n  function CryptoSignerError(errorInfo) {\n    var _this = _super.call(this, errorInfo.message) || this;\n\n    _this.errorInfo = errorInfo;\n    /* tslint:disable:max-line-length */\n    // Set the prototype explicitly. See the following link for more details:\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n    /* tslint:enable:max-line-length */\n\n    _this.__proto__ = CryptoSignerError.prototype;\n    return _this;\n  }\n\n  Object.defineProperty(CryptoSignerError.prototype, \"code\", {\n    /** @return {string} The error code. */\n    get: function () {\n      return this.errorInfo.code;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CryptoSignerError.prototype, \"message\", {\n    /** @return {string} The error message. */\n    get: function () {\n      return this.errorInfo.message;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CryptoSignerError.prototype, \"cause\", {\n    /** @return {object} The error data. */\n    get: function () {\n      return this.errorInfo.cause;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return CryptoSignerError;\n}(Error);\n\nexports.CryptoSignerError = CryptoSignerError;\n/**\n * Crypto Signer error codes and their default messages.\n */\n\nvar CryptoSignerErrorCode = function () {\n  function CryptoSignerErrorCode() {}\n\n  CryptoSignerErrorCode.INVALID_ARGUMENT = 'invalid-argument';\n  CryptoSignerErrorCode.INTERNAL_ERROR = 'internal-error';\n  CryptoSignerErrorCode.INVALID_CREDENTIAL = 'invalid-credential';\n  CryptoSignerErrorCode.SERVER_ERROR = 'server-error';\n  return CryptoSignerErrorCode;\n}();\n\nexports.CryptoSignerErrorCode = CryptoSignerErrorCode;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/firebase-admin/lib/utils/crypto-signer.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","CryptoSignerErrorCode","CryptoSignerError","cryptoSignerFromApp","IAMSigner","ServiceAccountSigner","credential_internal_1","require","api_request_1","validator","ALGORITHM_RS256","credential","algorithm","code","INVALID_CREDENTIAL","message","sign","buffer","crypto","createSign","update","Promise","resolve","privateKey","getAccountId","clientEmail","httpClient","serviceAccountId","INVALID_ARGUMENT","isNonEmptyString","_this","then","serviceAccount","request","method","url","data","payload","toString","send","response","Buffer","from","signedBlob","catch","err","HttpError","SERVER_ERROR","cause","headers","client","HttpClient","text","INTERNAL_ERROR","app","options","ServiceAccountCredential","AuthorizedHttpClient","_super","errorInfo","call","get","enumerable","configurable","Error"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.11.1 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CryptoSignerErrorCode = exports.CryptoSignerError = exports.cryptoSignerFromApp = exports.IAMSigner = exports.ServiceAccountSigner = void 0;\nvar credential_internal_1 = require(\"../credential/credential-internal\");\nvar api_request_1 = require(\"./api-request\");\nvar validator = require(\"../utils/validator\");\nvar ALGORITHM_RS256 = 'RS256';\n/**\n * A CryptoSigner implementation that uses an explicitly specified service account private key to\n * sign data. Performs all operations locally, and does not make any RPC calls.\n */\nvar ServiceAccountSigner = /** @class */ (function () {\n    /**\n     * Creates a new CryptoSigner instance from the given service account credential.\n     *\n     * @param {ServiceAccountCredential} credential A service account credential.\n     */\n    function ServiceAccountSigner(credential) {\n        this.credential = credential;\n        this.algorithm = ALGORITHM_RS256;\n        if (!credential) {\n            throw new CryptoSignerError({\n                code: CryptoSignerErrorCode.INVALID_CREDENTIAL,\n                message: 'INTERNAL ASSERT: Must provide a service account credential to initialize ServiceAccountSigner.',\n            });\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    ServiceAccountSigner.prototype.sign = function (buffer) {\n        var crypto = require('crypto'); // eslint-disable-line @typescript-eslint/no-var-requires\n        var sign = crypto.createSign('RSA-SHA256');\n        sign.update(buffer);\n        return Promise.resolve(sign.sign(this.credential.privateKey));\n    };\n    /**\n     * @inheritDoc\n     */\n    ServiceAccountSigner.prototype.getAccountId = function () {\n        return Promise.resolve(this.credential.clientEmail);\n    };\n    return ServiceAccountSigner;\n}());\nexports.ServiceAccountSigner = ServiceAccountSigner;\n/**\n * A CryptoSigner implementation that uses the remote IAM service to sign data. If initialized without\n * a service account ID, attempts to discover a service account ID by consulting the local Metadata\n * service. This will succeed in managed environments like Google Cloud Functions and App Engine.\n *\n * @see https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signBlob\n * @see https://cloud.google.com/compute/docs/storing-retrieving-metadata\n */\nvar IAMSigner = /** @class */ (function () {\n    function IAMSigner(httpClient, serviceAccountId) {\n        this.algorithm = ALGORITHM_RS256;\n        if (!httpClient) {\n            throw new CryptoSignerError({\n                code: CryptoSignerErrorCode.INVALID_ARGUMENT,\n                message: 'INTERNAL ASSERT: Must provide a HTTP client to initialize IAMSigner.',\n            });\n        }\n        if (typeof serviceAccountId !== 'undefined' && !validator.isNonEmptyString(serviceAccountId)) {\n            throw new CryptoSignerError({\n                code: CryptoSignerErrorCode.INVALID_ARGUMENT,\n                message: 'INTERNAL ASSERT: Service account ID must be undefined or a non-empty string.',\n            });\n        }\n        this.httpClient = httpClient;\n        this.serviceAccountId = serviceAccountId;\n    }\n    /**\n     * @inheritDoc\n     */\n    IAMSigner.prototype.sign = function (buffer) {\n        var _this = this;\n        return this.getAccountId().then(function (serviceAccount) {\n            var request = {\n                method: 'POST',\n                url: \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/\" + serviceAccount + \":signBlob\",\n                data: { payload: buffer.toString('base64') },\n            };\n            return _this.httpClient.send(request);\n        }).then(function (response) {\n            // Response from IAM is base64 encoded. Decode it into a buffer and return.\n            return Buffer.from(response.data.signedBlob, 'base64');\n        }).catch(function (err) {\n            if (err instanceof api_request_1.HttpError) {\n                throw new CryptoSignerError({\n                    code: CryptoSignerErrorCode.SERVER_ERROR,\n                    message: err.message,\n                    cause: err\n                });\n            }\n            throw err;\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    IAMSigner.prototype.getAccountId = function () {\n        var _this = this;\n        if (validator.isNonEmptyString(this.serviceAccountId)) {\n            return Promise.resolve(this.serviceAccountId);\n        }\n        var request = {\n            method: 'GET',\n            url: 'http://metadata/computeMetadata/v1/instance/service-accounts/default/email',\n            headers: {\n                'Metadata-Flavor': 'Google',\n            },\n        };\n        var client = new api_request_1.HttpClient();\n        return client.send(request).then(function (response) {\n            if (!response.text) {\n                throw new CryptoSignerError({\n                    code: CryptoSignerErrorCode.INTERNAL_ERROR,\n                    message: 'HTTP Response missing payload',\n                });\n            }\n            _this.serviceAccountId = response.text;\n            return response.text;\n        }).catch(function (err) {\n            throw new CryptoSignerError({\n                code: CryptoSignerErrorCode.INVALID_CREDENTIAL,\n                message: 'Failed to determine service account. Make sure to initialize ' +\n                    'the SDK with a service account credential. Alternatively specify a service ' +\n                    (\"account with iam.serviceAccounts.signBlob permission. Original error: \" + err),\n            });\n        });\n    };\n    return IAMSigner;\n}());\nexports.IAMSigner = IAMSigner;\n/**\n * Creates a new CryptoSigner instance for the given app. If the app has been initialized with a\n * service account credential, creates a ServiceAccountSigner.\n *\n * @param {FirebaseApp} app A FirebaseApp instance.\n * @return {CryptoSigner} A CryptoSigner instance.\n */\nfunction cryptoSignerFromApp(app) {\n    var credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n        return new ServiceAccountSigner(credential);\n    }\n    return new IAMSigner(new api_request_1.AuthorizedHttpClient(app), app.options.serviceAccountId);\n}\nexports.cryptoSignerFromApp = cryptoSignerFromApp;\n/**\n * CryptoSigner error code structure.\n *\n * @param {ErrorInfo} errorInfo The error information (code and message).\n * @constructor\n */\nvar CryptoSignerError = /** @class */ (function (_super) {\n    __extends(CryptoSignerError, _super);\n    function CryptoSignerError(errorInfo) {\n        var _this = _super.call(this, errorInfo.message) || this;\n        _this.errorInfo = errorInfo;\n        /* tslint:disable:max-line-length */\n        // Set the prototype explicitly. See the following link for more details:\n        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        /* tslint:enable:max-line-length */\n        _this.__proto__ = CryptoSignerError.prototype;\n        return _this;\n    }\n    Object.defineProperty(CryptoSignerError.prototype, \"code\", {\n        /** @return {string} The error code. */\n        get: function () {\n            return this.errorInfo.code;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CryptoSignerError.prototype, \"message\", {\n        /** @return {string} The error message. */\n        get: function () {\n            return this.errorInfo.message;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CryptoSignerError.prototype, \"cause\", {\n        /** @return {object} The error data. */\n        get: function () {\n            return this.errorInfo.cause;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return CryptoSignerError;\n}(Error));\nexports.CryptoSignerError = CryptoSignerError;\n/**\n * Crypto Signer error codes and their default messages.\n */\nvar CryptoSignerErrorCode = /** @class */ (function () {\n    function CryptoSignerErrorCode() {\n    }\n    CryptoSignerErrorCode.INVALID_ARGUMENT = 'invalid-argument';\n    CryptoSignerErrorCode.INTERNAL_ERROR = 'internal-error';\n    CryptoSignerErrorCode.INVALID_CREDENTIAL = 'invalid-credential';\n    CryptoSignerErrorCode.SERVER_ERROR = 'server-error';\n    return CryptoSignerErrorCode;\n}());\nexports.CryptoSignerErrorCode = CryptoSignerErrorCode;\n"]},"metadata":{},"sourceType":"script"}