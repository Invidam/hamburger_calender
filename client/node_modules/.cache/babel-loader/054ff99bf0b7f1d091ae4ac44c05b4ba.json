{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { APIv2 } from \"../../../tools/API\";\nimport { LocalStroage } from \"../../../tools/LocalStorage\";\nexport const isEmptyWorkList = workList => workList ? !Object.keys(workList).length : true;\nexport const isEmptyWork = workObj => workObj ? !Object.keys(workObj).length : true;\n\nconst getEmptyWorkList = () => {\n  return {};\n};\n\nconst checkWorkList = workList => isEmptyWorkList(workList) ? getEmptyWorkList() : workList; // const getInitList = (user) =>\n//   !user && window.localStorage.getItem(\"workList\")\n//     ? JSON.parse(window.localStorage.getItem(\"workList\"))\n//     : [];\n\n\nexport const useWorkList = (user, date) => {\n  _s();\n\n  // const initList = getInitList();\n  const [isWorkListLoading, setLoad] = useState(false);\n  const [workList, setWorkList] = useState();\n\n  const getWorkList = async () => {\n    try {\n      setLoad(true);\n      let resWorkList;\n\n      if (user) {\n        console.log(\"BEF: \", workList);\n        const data = await APIv2.workList(user, date).get();\n        resWorkList = checkWorkList(data === null || data === void 0 ? void 0 : data.data);\n        console.log(\"USEWORKLIST, data catch\");\n        console.log(\"USEWORKLIST DATA  CATCH  AFT\");\n        setWorkList(resWorkList);\n      } else {\n        resWorkList = LocalStroage.workList().get();\n        console.log(\"USEWORKLIST DATA NO CATCH [][] AFT\");\n        setWorkList(resWorkList);\n      }\n\n      setLoad(false);\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"GET WORKLIST START\");\n    getWorkList();\n  }, [date, user]);\n\n  const setWork = workObj => {\n    console.log(\"SET WRORK START\");\n    const id = workObj.id;\n    const _workList = { ...workList\n    };\n    return {\n      create: async () => {\n        _workList[id] = workObj;\n        setWorkList(_workList);\n        if (user) await APIv2.work(user, date).create(workObj);else LocalStroage.workList().set(_workList);\n      },\n      edit: async () => {\n        _workList[id] = workObj;\n        setWorkList(_workList);\n        if (user) await APIv2.work(user, date).edit(workObj);else LocalStroage.workList().set(_workList);\n      },\n      delete: async () => {\n        if (!delete _workList[id]) throw new Error(\"Cannot Delete WorkItem\");\n        setWorkList(_workList);\n        if (user) await APIv2.work(user, date).delete(workObj);else LocalStroage.workList().set(_workList);\n      }\n    };\n  };\n\n  return [workList, setWork, isWorkListLoading];\n};\n\n_s(useWorkList, \"8wCO8iJWl/s0dsNBZd4ZH58nC/4=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/work/useWorkList.js"],"names":["useEffect","useState","APIv2","LocalStroage","isEmptyWorkList","workList","Object","keys","length","isEmptyWork","workObj","getEmptyWorkList","checkWorkList","useWorkList","user","date","isWorkListLoading","setLoad","setWorkList","getWorkList","resWorkList","console","log","data","get","error","alert","setWork","id","_workList","create","work","set","edit","delete","Error"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { APIv2 } from \"../../../tools/API\";\nimport { LocalStroage } from \"../../../tools/LocalStorage\";\n\nexport const isEmptyWorkList = (workList) =>\n  workList ? !Object.keys(workList).length : true;\nexport const isEmptyWork = (workObj) =>\n  workObj ? !Object.keys(workObj).length : true;\nconst getEmptyWorkList = () => {\n  return {};\n};\nconst checkWorkList = (workList) =>\n  isEmptyWorkList(workList) ? getEmptyWorkList() : workList;\n\n// const getInitList = (user) =>\n//   !user && window.localStorage.getItem(\"workList\")\n//     ? JSON.parse(window.localStorage.getItem(\"workList\"))\n//     : [];\n\nexport const useWorkList = (user, date) => {\n  // const initList = getInitList();\n  const [isWorkListLoading, setLoad] = useState(false);\n  const [workList, setWorkList] = useState();\n  const getWorkList = async () => {\n    try {\n      setLoad(true);\n      let resWorkList;\n      if (user) {\n        console.log(\"BEF: \", workList);\n        const data = await APIv2.workList(user, date).get();\n        resWorkList = checkWorkList(data?.data);\n        console.log(\"USEWORKLIST, data catch\");\n        console.log(\"USEWORKLIST DATA  CATCH  AFT\");\n        setWorkList(resWorkList);\n      } else {\n        resWorkList = LocalStroage.workList().get();\n        console.log(\"USEWORKLIST DATA NO CATCH [][] AFT\");\n        setWorkList(resWorkList);\n      }\n      setLoad(false);\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    console.log(\"GET WORKLIST START\");\n    getWorkList();\n  }, [date, user]);\n\n  const setWork = (workObj) => {\n    console.log(\"SET WRORK START\");\n    const id = workObj.id;\n    const _workList = { ...workList };\n    return {\n      create: async () => {\n        _workList[id] = workObj;\n        setWorkList(_workList);\n        if (user) await APIv2.work(user, date).create(workObj);\n        else LocalStroage.workList().set(_workList);\n      },\n      edit: async () => {\n        _workList[id] = workObj;\n        setWorkList(_workList);\n        if (user) await APIv2.work(user, date).edit(workObj);\n        else LocalStroage.workList().set(_workList);\n      },\n      delete: async () => {\n        if (!delete _workList[id]) throw new Error(\"Cannot Delete WorkItem\");\n        setWorkList(_workList);\n        if (user) await APIv2.work(user, date).delete(workObj);\n        else LocalStroage.workList().set(_workList);\n      },\n    };\n  };\n  return [workList, setWork, isWorkListLoading];\n};\n"]},"metadata":{},"sourceType":"module"}