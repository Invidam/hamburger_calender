{"ast":null,"code":"const {\n  improvedDH\n} = require('../../help/runtime_support');\n\nif (improvedDH) {\n  const {\n    diffieHellman\n  } = require('crypto');\n\n  const {\n    KeyObject\n  } = require('../../help/key_object');\n\n  const importKey = require('../../jwk/import');\n\n  module.exports = ({\n    keyObject: privateKey\n  }, publicKey) => {\n    if (!(publicKey instanceof KeyObject)) {\n      ({\n        keyObject: publicKey\n      } = importKey(publicKey));\n    }\n\n    return diffieHellman({\n      privateKey,\n      publicKey\n    });\n  };\n} else {\n  const {\n    createECDH,\n    constants: {\n      POINT_CONVERSION_UNCOMPRESSED\n    }\n  } = require('crypto');\n\n  const base64url = require('../../help/base64url');\n\n  const crvToCurve = crv => {\n    switch (crv) {\n      case 'P-256':\n        return 'prime256v1';\n\n      case 'P-384':\n        return 'secp384r1';\n\n      case 'P-521':\n        return 'secp521r1';\n    }\n  };\n\n  const UNCOMPRESSED = Buffer.alloc(1, POINT_CONVERSION_UNCOMPRESSED);\n\n  const pubToBuffer = (x, y) => Buffer.concat([UNCOMPRESSED, base64url.decodeToBuffer(x), base64url.decodeToBuffer(y)]);\n\n  module.exports = ({\n    crv,\n    d\n  }, {\n    x,\n    y\n  }) => {\n    const curve = crvToCurve(crv);\n    const exchange = createECDH(curve);\n    exchange.setPrivateKey(base64url.decodeToBuffer(d));\n    return exchange.computeSecret(pubToBuffer(x, y));\n  };\n}","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/jwa/ecdh/compute_secret.js"],"names":["improvedDH","require","diffieHellman","KeyObject","importKey","module","exports","keyObject","privateKey","publicKey","createECDH","constants","POINT_CONVERSION_UNCOMPRESSED","base64url","crvToCurve","crv","UNCOMPRESSED","Buffer","alloc","pubToBuffer","x","y","concat","decodeToBuffer","d","curve","exchange","setPrivateKey","computeSecret"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,OAAO,CAAC,4BAAD,CAA9B;;AAEA,IAAID,UAAJ,EAAgB;AACd,QAAM;AAAEE,IAAAA;AAAF,MAAoBD,OAAO,CAAC,QAAD,CAAjC;;AAEA,QAAM;AAAEE,IAAAA;AAAF,MAAgBF,OAAO,CAAC,uBAAD,CAA7B;;AACA,QAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AAEAI,EAAAA,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,IAAAA,SAAS,EAAEC;AAAb,GAAD,EAA4BC,SAA5B,KAA0C;AACzD,QAAI,EAAEA,SAAS,YAAYN,SAAvB,CAAJ,EAAuC;AACrC,OAAC;AAAEI,QAAAA,SAAS,EAAEE;AAAb,UAA2BL,SAAS,CAACK,SAAD,CAArC;AACD;;AAED,WAAOP,aAAa,CAAC;AAAEM,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAD,CAApB;AACD,GAND;AAOD,CAbD,MAaO;AACL,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAAzB,MAA+DX,OAAO,CAAC,QAAD,CAA5E;;AAEA,QAAMY,SAAS,GAAGZ,OAAO,CAAC,sBAAD,CAAzB;;AAEA,QAAMa,UAAU,GAAIC,GAAD,IAAS;AAC1B,YAAQA,GAAR;AACE,WAAK,OAAL;AACE,eAAO,YAAP;;AACF,WAAK,OAAL;AACE,eAAO,WAAP;;AACF,WAAK,OAAL;AACE,eAAO,WAAP;AANJ;AAQD,GATD;;AAWA,QAAMC,YAAY,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgBN,6BAAhB,CAArB;;AACA,QAAMO,WAAW,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAUJ,MAAM,CAACK,MAAP,CAAc,CAACN,YAAD,EAAeH,SAAS,CAACU,cAAV,CAAyBH,CAAzB,CAAf,EAA4CP,SAAS,CAACU,cAAV,CAAyBF,CAAzB,CAA5C,CAAd,CAA9B;;AAEAhB,EAAAA,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAES,IAAAA,GAAF;AAAOS,IAAAA;AAAP,GAAD,EAAa;AAAEJ,IAAAA,CAAF;AAAKC,IAAAA;AAAL,GAAb,KAA0B;AACzC,UAAMI,KAAK,GAAGX,UAAU,CAACC,GAAD,CAAxB;AACA,UAAMW,QAAQ,GAAGhB,UAAU,CAACe,KAAD,CAA3B;AAEAC,IAAAA,QAAQ,CAACC,aAAT,CAAuBd,SAAS,CAACU,cAAV,CAAyBC,CAAzB,CAAvB;AAEA,WAAOE,QAAQ,CAACE,aAAT,CAAuBT,WAAW,CAACC,CAAD,EAAIC,CAAJ,CAAlC,CAAP;AACD,GAPD;AAQD","sourcesContent":["const { improvedDH } = require('../../help/runtime_support')\n\nif (improvedDH) {\n  const { diffieHellman } = require('crypto')\n\n  const { KeyObject } = require('../../help/key_object')\n  const importKey = require('../../jwk/import')\n\n  module.exports = ({ keyObject: privateKey }, publicKey) => {\n    if (!(publicKey instanceof KeyObject)) {\n      ({ keyObject: publicKey } = importKey(publicKey))\n    }\n\n    return diffieHellman({ privateKey, publicKey })\n  }\n} else {\n  const { createECDH, constants: { POINT_CONVERSION_UNCOMPRESSED } } = require('crypto')\n\n  const base64url = require('../../help/base64url')\n\n  const crvToCurve = (crv) => {\n    switch (crv) {\n      case 'P-256':\n        return 'prime256v1'\n      case 'P-384':\n        return 'secp384r1'\n      case 'P-521':\n        return 'secp521r1'\n    }\n  }\n\n  const UNCOMPRESSED = Buffer.alloc(1, POINT_CONVERSION_UNCOMPRESSED)\n  const pubToBuffer = (x, y) => Buffer.concat([UNCOMPRESSED, base64url.decodeToBuffer(x), base64url.decodeToBuffer(y)])\n\n  module.exports = ({ crv, d }, { x, y }) => {\n    const curve = crvToCurve(crv)\n    const exchange = createECDH(curve)\n\n    exchange.setPrivateKey(base64url.decodeToBuffer(d))\n\n    return exchange.computeSecret(pubToBuffer(x, y))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}