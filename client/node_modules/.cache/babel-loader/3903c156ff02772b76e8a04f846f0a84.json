{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Deque } from \"../../classes/Deque\";\nimport { Node } from \"../../classes/Node\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { getAddedDateStr, getDiffDayInStr, subtractDayInStr } from \"../../tools/time\";\nexport const DISPLAY_LENGTH = 5;\nexport const ARRAY_LENGTH = 11;\n\nconst makeStartDate = date => getAddedDateStr(date, -1 * Math.floor(ARRAY_LENGTH / 2)); // const makeStartDate = (date) => getAddedDateStr(date, -1 * STARTDATEDIFF);\n\n\nconst getStartDate = date => LocalStroage.startDate().isEmpty() ? makeStartDate(date) : LocalStroage.startDate().get();\n\nlet befStartDate;\nlet listDeque;\n\nconst turnDeque = (deque, cnt, isLeft) => {\n  deque.print(\"BEF turn\"); // console.log(\"[listview][deq] \", deque, cnt, isLeft);\n\n  if (isLeft) {\n    // <-- 방향으로 이동\n    while (cnt--) {\n      deque.pop_front();\n      deque.print(\"ING turn L\");\n      deque.push_back(new Node());\n    }\n  } else {\n    while (cnt--) {\n      deque.pop_back();\n      deque.print(\"ING turn R\");\n      deque.push_front(new Node());\n    }\n  }\n};\n\nconst setDeque = (deque, arr, cnt, isLeft) => {\n  if (isLeft) {\n    // <-- 맨앞 요소를 없애고 맨앞에 arr요소들을 넣는다.\n    let idx = 0;\n\n    while (idx < cnt) {\n      deque.pop_back();\n      deque.print(\"ing L set\");\n      deque.push_back(new Node(arr[idx++]));\n    }\n  } else {\n    let idx = 0;\n\n    while (idx < cnt) {\n      deque.pop_front();\n      deque.print(\"ing R set\");\n      deque.push_front(new Node(arr[idx++]));\n    }\n  }\n\n  deque.print(\"AFT set\");\n};\n\nconst getEndDate = startDate => getAddedDateStr(startDate, ARRAY_LENGTH - 1);\n\nconst getDeqNeedDate = (startDate, dateDiff) => {\n  let endDate = getEndDate(startDate);\n  const isLeft = dateDiff > 0;\n\n  if (isLeft) {\n    startDate = getAddedDateStr(endDate, -1 * dateDiff + 1);\n  } else {\n    // 왼쪽 버튼 클릭 배열이 오른쪽 이동 왼쪽 요소들이 필요\n    endDate = startDate;\n    startDate = getAddedDateStr(startDate, dateDiff + 1);\n  }\n\n  return [startDate, endDate];\n}; // getAddedDateStr(startDate, ARRAY_LENGTH - 1);\n\n\nexport const useListView = (user, date, setDate, workList) => {\n  _s();\n\n  // console.log(\"[listview]LIST VIEW RENDERING\");\n  const [startDate, setStratDate] = useState(getStartDate(date));\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState(false);\n\n  const updateStartDate = nextDate => {\n    // console.log(\"[listview]list change\");\n    LocalStroage.startDate().set(nextDate);\n    setStratDate(nextDate);\n  };\n\n  const onClickLeftBtn = () => {\n    const nextDate = getAddedDateStr(startDate, -1);\n    updateStartDate(nextDate);\n  };\n\n  const onClickRightBtn = () => {\n    const nextDate = getAddedDateStr(startDate, 1);\n    updateStartDate(nextDate);\n  };\n\n  const getListView = async (startDate, endDate) => {\n    try {\n      const data = await APIv2.listView(user, startDate, endDate, ARRAY_LENGTH).get();\n      if (!(data === null || data === void 0 ? void 0 : data.data)) throw new Error(\"List View cann't found\"); // console.log(\"[listview][LISTVIEW] GET LIST VIEW:  \", data?.data);\n\n      return data.data;\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const updateListView = async startDate => {\n    if (user && startDate) {\n      setLoad(true);\n      const response = await getListView(startDate, getEndDate(startDate));\n      setLoad(false);\n      listDeque = new Deque(response, DISPLAY_LENGTH);\n      setListView(listDeque.get());\n    }\n  };\n\n  const moveListView = async (startDate, dateDiff) => {\n    if (user && startDate) {\n      const isLeft = dateDiff > 0;\n      turnDeque(listDeque, Math.abs(dateDiff), isLeft);\n      const [needStartDate, needEndDate] = getDeqNeedDate(startDate, dateDiff);\n      setListView(listDeque.get()); // console.log(\"[listview]list :::\", listView);\n\n      const response = await getListView(needStartDate, needEndDate);\n      setDeque(listDeque, response, Math.abs(dateDiff), isLeft); // console.log(\"[listview]lis2222 t :::\", listView);\n    }\n  };\n\n  useEffect(() => {\n    updateStartDate(makeStartDate(date));\n  }, [date]);\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    // console.log(\n    //   \"[listview]Set list view start\",\n    //   listDeque,\n    //   befStartDate,\n    //   startDate\n    // );\n    const dateDiff = subtractDayInStr(befStartDate, startDate);\n    if (!listDeque || !befStartDate || dateDiff > 1 || dateDiff < -1) updateListView(startDate);else moveListView(startDate, dateDiff); // updateListView(startDate);\n\n    befStartDate = startDate;\n    return () => setLoad(false);\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn\n  };\n};\n\n_s(useListView, \"winhrkvjr+81rjeJ0SI6qLAjsAc=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/listView/useListView.js"],"names":["useEffect","useState","Deque","Node","APIv2","LocalStroage","getAddedDateStr","getDiffDayInStr","subtractDayInStr","DISPLAY_LENGTH","ARRAY_LENGTH","makeStartDate","date","Math","floor","getStartDate","startDate","isEmpty","get","befStartDate","listDeque","turnDeque","deque","cnt","isLeft","print","pop_front","push_back","pop_back","push_front","setDeque","arr","idx","getEndDate","getDeqNeedDate","dateDiff","endDate","useListView","user","setDate","workList","setStratDate","listView","setListView","isListViewLoading","setLoad","updateStartDate","nextDate","set","onClickLeftBtn","onClickRightBtn","getListView","data","Error","error","alert","updateListView","response","moveListView","abs","needStartDate","needEndDate"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Deque } from \"../../classes/Deque\";\nimport { Node } from \"../../classes/Node\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport {\n  getAddedDateStr,\n  getDiffDayInStr,\n  subtractDayInStr,\n} from \"../../tools/time\";\nexport const DISPLAY_LENGTH = 5;\nexport const ARRAY_LENGTH = 11;\nconst makeStartDate = (date) =>\n  getAddedDateStr(date, -1 * Math.floor(ARRAY_LENGTH / 2));\n// const makeStartDate = (date) => getAddedDateStr(date, -1 * STARTDATEDIFF);\nconst getStartDate = (date) =>\n  LocalStroage.startDate().isEmpty()\n    ? makeStartDate(date)\n    : LocalStroage.startDate().get();\n\nlet befStartDate;\nlet listDeque;\n\nconst turnDeque = (deque, cnt, isLeft) => {\n  deque.print(\"BEF turn\");\n  // console.log(\"[listview][deq] \", deque, cnt, isLeft);\n  if (isLeft) {\n    // <-- 방향으로 이동\n    while (cnt--) {\n      deque.pop_front();\n      deque.print(\"ING turn L\");\n      deque.push_back(new Node());\n    }\n  } else {\n    while (cnt--) {\n      deque.pop_back();\n      deque.print(\"ING turn R\");\n      deque.push_front(new Node());\n    }\n  }\n};\nconst setDeque = (deque, arr, cnt, isLeft) => {\n  if (isLeft) {\n    // <-- 맨앞 요소를 없애고 맨앞에 arr요소들을 넣는다.\n    let idx = 0;\n    while (idx < cnt) {\n      deque.pop_back();\n      deque.print(\"ing L set\");\n      deque.push_back(new Node(arr[idx++]));\n    }\n  } else {\n    let idx = 0;\n    while (idx < cnt) {\n      deque.pop_front();\n      deque.print(\"ing R set\");\n      deque.push_front(new Node(arr[idx++]));\n    }\n  }\n  deque.print(\"AFT set\");\n};\n\nconst getEndDate = (startDate) => getAddedDateStr(startDate, ARRAY_LENGTH - 1);\nconst getDeqNeedDate = (startDate, dateDiff) => {\n  let endDate = getEndDate(startDate);\n  const isLeft = dateDiff > 0;\n  if (isLeft) {\n    startDate = getAddedDateStr(endDate, -1 * dateDiff + 1);\n  } else {\n    // 왼쪽 버튼 클릭 배열이 오른쪽 이동 왼쪽 요소들이 필요\n    endDate = startDate;\n    startDate = getAddedDateStr(startDate, dateDiff + 1);\n  }\n  return [startDate, endDate];\n};\n// getAddedDateStr(startDate, ARRAY_LENGTH - 1);\nexport const useListView = (user, date, setDate, workList) => {\n  // console.log(\"[listview]LIST VIEW RENDERING\");\n  const [startDate, setStratDate] = useState(getStartDate(date));\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState(false);\n\n  const updateStartDate = (nextDate) => {\n    // console.log(\"[listview]list change\");\n    LocalStroage.startDate().set(nextDate);\n    setStratDate(nextDate);\n  };\n  const onClickLeftBtn = () => {\n    const nextDate = getAddedDateStr(startDate, -1);\n    updateStartDate(nextDate);\n  };\n  const onClickRightBtn = () => {\n    const nextDate = getAddedDateStr(startDate, 1);\n    updateStartDate(nextDate);\n  };\n\n  const getListView = async (startDate, endDate) => {\n    try {\n      const data = await APIv2.listView(\n        user,\n        startDate,\n        endDate,\n        ARRAY_LENGTH\n      ).get();\n      if (!data?.data) throw new Error(\"List View cann't found\");\n      // console.log(\"[listview][LISTVIEW] GET LIST VIEW:  \", data?.data);\n      return data.data;\n    } catch (error) {\n      alert(error);\n    }\n  };\n  const updateListView = async (startDate) => {\n    if (user && startDate) {\n      setLoad(true);\n      const response = await getListView(startDate, getEndDate(startDate));\n      setLoad(false);\n      listDeque = new Deque(response, DISPLAY_LENGTH);\n      setListView(listDeque.get());\n    }\n  };\n  const moveListView = async (startDate, dateDiff) => {\n    if (user && startDate) {\n      const isLeft = dateDiff > 0;\n      turnDeque(listDeque, Math.abs(dateDiff), isLeft);\n      const [needStartDate, needEndDate] = getDeqNeedDate(startDate, dateDiff);\n      setListView(listDeque.get());\n      // console.log(\"[listview]list :::\", listView);\n      const response = await getListView(needStartDate, needEndDate);\n      setDeque(listDeque, response, Math.abs(dateDiff), isLeft);\n      // console.log(\"[listview]lis2222 t :::\", listView);\n    }\n  };\n  useEffect(() => {\n    updateStartDate(makeStartDate(date));\n  }, [date]);\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n\n    // console.log(\n    //   \"[listview]Set list view start\",\n    //   listDeque,\n    //   befStartDate,\n    //   startDate\n    // );\n    const dateDiff = subtractDayInStr(befStartDate, startDate);\n    if (!listDeque || !befStartDate || dateDiff > 1 || dateDiff < -1)\n      updateListView(startDate);\n    else moveListView(startDate, dateDiff);\n    // updateListView(startDate);\n    befStartDate = startDate;\n    return () => setLoad(false);\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}