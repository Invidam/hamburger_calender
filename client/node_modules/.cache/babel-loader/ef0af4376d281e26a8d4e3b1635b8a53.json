{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\"; // import { API } from \"../../../tools/API\";\n\nexport const useEditWork = (workItem, setWork, callback) => {\n  _s();\n\n  const {\n    id\n  } = workItem;\n  const [workColor, setColor] = useState(workItem.workColor);\n  const [workName, setWorkName] = useState(workItem.workName);\n  const [workTime, setWorkTime] = useState(workItem.workTime);\n\n  const hexToRgba = color => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n\n  const onChangeWorkColor = color => {\n    if (!color) {} else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n\n    setColor(color);\n  };\n\n  const onChangeWorkName = name => setWorkName(name);\n\n  const onChangeWorkTime = time => setWorkTime(parseInt(time));\n\n  const validator = workItem => {\n    return workItem.workName && workItem.workTime && workItem.workColor;\n  };\n\n  const editWorkItem = async workItem => await setWork(workItem).edit();\n\n  const getErrText = () => {\n    let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${!workTime + !workColor > 0 && !workName ? \", \" : \"\"}${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${workColor ? \"\" : \"WorkColor\"} ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n    return errText;\n  };\n\n  const onEditWork = event => {\n    try {\n      event.preventDefault();\n      const workItem = {\n        workName,\n        workTime,\n        workColor,\n        id\n      };\n      let willUpdate = true;\n      if (typeof validator === \"function\") willUpdate = validator(workItem);\n\n      if (willUpdate) {\n        callback();\n        editWorkItem(workItem);\n      } else {\n        throw new Error(getErrText());\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return {\n    onChangeWorkColor,\n    onChangeWorkName,\n    onChangeWorkTime,\n    onEditWork\n  };\n};\n\n_s(useEditWork, \"LhyIU8NQ1RJyOWCIbJjp5GziRgk=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/work/useEditWork.js"],"names":["useState","useEditWork","workItem","setWork","callback","id","workColor","setColor","workName","setWorkName","workTime","setWorkTime","hexToRgba","color","r","parseInt","substr","g","b","onChangeWorkColor","onChangeWorkName","name","onChangeWorkTime","time","validator","editWorkItem","edit","getErrText","errText","onEditWork","event","preventDefault","willUpdate","Error","error","alert"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n// import { API } from \"../../../tools/API\";\n\nexport const useEditWork = (workItem, setWork, callback) => {\n  const { id } = workItem;\n  const [workColor, setColor] = useState(workItem.workColor);\n  const [workName, setWorkName] = useState(workItem.workName);\n  const [workTime, setWorkTime] = useState(workItem.workTime);\n\n  const hexToRgba = (color) => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n  const onChangeWorkColor = (color) => {\n    if (!color) {\n    } else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n    setColor(color);\n  };\n  const onChangeWorkName = (name) => setWorkName(name);\n  const onChangeWorkTime = (time) => setWorkTime(parseInt(time));\n  const validator = (workItem) => {\n    return workItem.workName && workItem.workTime && workItem.workColor;\n  };\n  const editWorkItem = async (workItem) => await setWork(workItem).edit();\n\n  const getErrText = () => {\n    let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${\n      !workTime + !workColor > 0 && !workName ? \", \" : \"\"\n    }${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${\n      workColor ? \"\" : \"WorkColor\"\n    } ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n    return errText;\n  };\n  const onEditWork = (event) => {\n    try {\n      event.preventDefault();\n      const workItem = { workName, workTime, workColor, id };\n      let willUpdate = true;\n      if (typeof validator === \"function\") willUpdate = validator(workItem);\n      if (willUpdate) {\n        callback();\n        editWorkItem(workItem);\n      } else {\n        throw new Error(getErrText());\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  return { onChangeWorkColor, onChangeWorkName, onChangeWorkTime, onEditWork };\n};\n"]},"metadata":{},"sourceType":"module"}