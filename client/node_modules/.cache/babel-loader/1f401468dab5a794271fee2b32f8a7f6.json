{"ast":null,"code":"'use strict';\n\nvar {\n  PassThrough\n} = require('stream');\n\nvar debug = require('debug')('retry-request');\n\nvar extend = require('extend');\n\nvar DEFAULTS = {\n  objectMode: false,\n  retries: 2,\n\n  /*\n    The maximum time to delay in seconds. If retryDelayMultiplier results in a\n    delay greater than maxRetryDelay, retries should delay by maxRetryDelay\n    seconds instead.\n  */\n  maxRetryDelay: 64,\n\n  /*\n    The multiplier by which to increase the delay time between the completion of\n    failed requests, and the initiation of the subsequent retrying request.\n  */\n  retryDelayMultiplier: 2,\n\n  /*\n    The length of time to keep retrying in seconds. The last sleep period will\n    be shortened as necessary, so that the last retry runs at deadline (and not\n    considerably beyond it).  The total time starting from when the initial\n    request is sent, after which an error will be returned, regardless of the\n    retrying attempts made meanwhile.\n   */\n  totalTimeout: 600,\n  noResponseRetries: 2,\n  currentRetryAttempt: 0,\n  shouldRetryFn: function (response) {\n    var retryRanges = [// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n    // 1xx - Retry (Informational, request still processing)\n    // 2xx - Do not retry (Success)\n    // 3xx - Do not retry (Redirect)\n    // 4xx - Do not retry (Client errors)\n    // 429 - Retry (\"Too Many Requests\")\n    // 5xx - Retry (Server errors)\n    [100, 199], [429, 429], [500, 599]];\n    var statusCode = response.statusCode;\n    debug(`Response status: ${statusCode}`);\n    var range;\n\n    while (range = retryRanges.shift()) {\n      if (statusCode >= range[0] && statusCode <= range[1]) {\n        // Not a successful status or redirect.\n        return true;\n      }\n    }\n  }\n};\n\nfunction retryRequest(requestOpts, opts, callback) {\n  var streamMode = typeof arguments[arguments.length - 1] !== 'function';\n\n  if (typeof opts === 'function') {\n    callback = opts;\n  }\n\n  var manualCurrentRetryAttemptWasSet = opts && typeof opts.currentRetryAttempt === 'number';\n  opts = extend({}, DEFAULTS, opts);\n\n  if (typeof opts.request === 'undefined') {\n    try {\n      opts.request = require('request');\n    } catch (e) {\n      throw new Error('A request library must be provided to retry-request.');\n    }\n  }\n\n  var currentRetryAttempt = opts.currentRetryAttempt;\n  var numNoResponseAttempts = 0;\n  var streamResponseHandled = false;\n  var retryStream;\n  var requestStream;\n  var delayStream;\n  var activeRequest;\n  var retryRequest = {\n    abort: function () {\n      if (activeRequest && activeRequest.abort) {\n        activeRequest.abort();\n      }\n    }\n  };\n\n  if (streamMode) {\n    retryStream = new PassThrough({\n      objectMode: opts.objectMode\n    });\n    retryStream.abort = resetStreams;\n  }\n\n  var timeOfFirstRequest = Date.now();\n\n  if (currentRetryAttempt > 0) {\n    retryAfterDelay(currentRetryAttempt);\n  } else {\n    makeRequest();\n  }\n\n  if (streamMode) {\n    return retryStream;\n  } else {\n    return retryRequest;\n  }\n\n  function resetStreams() {\n    delayStream = null;\n\n    if (requestStream) {\n      requestStream.abort && requestStream.abort();\n      requestStream.cancel && requestStream.cancel();\n\n      if (requestStream.destroy) {\n        requestStream.destroy();\n      } else if (requestStream.end) {\n        requestStream.end();\n      }\n    }\n  }\n\n  function makeRequest() {\n    currentRetryAttempt++;\n    debug(`Current retry attempt: ${currentRetryAttempt}`);\n\n    if (streamMode) {\n      streamResponseHandled = false;\n      delayStream = new PassThrough({\n        objectMode: opts.objectMode\n      });\n      requestStream = opts.request(requestOpts);\n      setImmediate(function () {\n        retryStream.emit('request');\n      });\n      requestStream // gRPC via google-cloud-node can emit an `error` as well as a `response`\n      // Whichever it emits, we run with-- we can't run with both. That's what\n      // is up with the `streamResponseHandled` tracking.\n      .on('error', function (err) {\n        if (streamResponseHandled) {\n          return;\n        }\n\n        streamResponseHandled = true;\n        onResponse(err);\n      }).on('response', function (resp, body) {\n        if (streamResponseHandled) {\n          return;\n        }\n\n        streamResponseHandled = true;\n        onResponse(null, resp, body);\n      }).on('complete', retryStream.emit.bind(retryStream, 'complete'));\n      requestStream.pipe(delayStream);\n    } else {\n      activeRequest = opts.request(requestOpts, onResponse);\n    }\n  }\n\n  function retryAfterDelay(currentRetryAttempt) {\n    if (streamMode) {\n      resetStreams();\n    }\n\n    var nextRetryDelay = getNextRetryDelay({\n      maxRetryDelay: opts.maxRetryDelay,\n      retryDelayMultiplier: opts.retryDelayMultiplier,\n      retryNumber: currentRetryAttempt,\n      timeOfFirstRequest,\n      totalTimeout: opts.totalTimeout\n    });\n    debug(`Next retry delay: ${nextRetryDelay}`);\n    setTimeout(makeRequest, nextRetryDelay);\n  }\n\n  function onResponse(err, response, body) {\n    // An error such as DNS resolution.\n    if (err) {\n      numNoResponseAttempts++;\n\n      if (numNoResponseAttempts <= opts.noResponseRetries) {\n        retryAfterDelay(numNoResponseAttempts);\n      } else {\n        if (streamMode) {\n          retryStream.emit('error', err);\n          retryStream.end();\n        } else {\n          callback(err, response, body);\n        }\n      }\n\n      return;\n    } // Send the response to see if we should try again.\n    // NOTE: \"currentRetryAttempt\" isn't accurate by default, as it counts\n    // the very first request sent as the first \"retry\". It is only accurate\n    // when a user provides their own \"currentRetryAttempt\" option at\n    // instantiation.\n\n\n    var adjustedCurrentRetryAttempt = manualCurrentRetryAttemptWasSet ? currentRetryAttempt : currentRetryAttempt - 1;\n\n    if (adjustedCurrentRetryAttempt < opts.retries && opts.shouldRetryFn(response)) {\n      retryAfterDelay(currentRetryAttempt);\n      return;\n    } // No more attempts need to be made, just continue on.\n\n\n    if (streamMode) {\n      retryStream.emit('response', response);\n      delayStream.pipe(retryStream);\n      requestStream.on('error', function (err) {\n        retryStream.destroy(err);\n      });\n    } else {\n      callback(err, response, body);\n    }\n  }\n}\n\nmodule.exports = retryRequest;\n\nfunction getNextRetryDelay(config) {\n  var {\n    maxRetryDelay,\n    retryDelayMultiplier,\n    retryNumber,\n    timeOfFirstRequest,\n    totalTimeout\n  } = config;\n  var maxRetryDelayMs = maxRetryDelay * 1000;\n  var totalTimeoutMs = totalTimeout * 1000;\n  var jitter = Math.floor(Math.random() * 1000);\n  var calculatedNextRetryDelay = Math.pow(retryDelayMultiplier, retryNumber) * 1000 + jitter;\n  var maxAllowableDelayMs = totalTimeoutMs - (Date.now() - timeOfFirstRequest);\n  return Math.min(calculatedNextRetryDelay, maxAllowableDelayMs, maxRetryDelayMs);\n}\n\nmodule.exports.getNextRetryDelay = getNextRetryDelay;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/retry-request/index.js"],"names":["PassThrough","require","debug","extend","DEFAULTS","objectMode","retries","maxRetryDelay","retryDelayMultiplier","totalTimeout","noResponseRetries","currentRetryAttempt","shouldRetryFn","response","retryRanges","statusCode","range","shift","retryRequest","requestOpts","opts","callback","streamMode","arguments","length","manualCurrentRetryAttemptWasSet","request","e","Error","numNoResponseAttempts","streamResponseHandled","retryStream","requestStream","delayStream","activeRequest","abort","resetStreams","timeOfFirstRequest","Date","now","retryAfterDelay","makeRequest","cancel","destroy","end","setImmediate","emit","on","err","onResponse","resp","body","bind","pipe","nextRetryDelay","getNextRetryDelay","retryNumber","setTimeout","adjustedCurrentRetryAttempt","module","exports","config","maxRetryDelayMs","totalTimeoutMs","jitter","Math","floor","random","calculatedNextRetryDelay","pow","maxAllowableDelayMs","min"],"mappings":"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","sourcesContent":["'use strict';\n\nvar { PassThrough } = require('stream');\nvar debug = require('debug')('retry-request');\nvar extend = require('extend');\n\nvar DEFAULTS = {\n  objectMode: false,\n  retries: 2,\n\n  /*\n    The maximum time to delay in seconds. If retryDelayMultiplier results in a\n    delay greater than maxRetryDelay, retries should delay by maxRetryDelay\n    seconds instead.\n  */\n  maxRetryDelay: 64, \n\n  /*\n    The multiplier by which to increase the delay time between the completion of\n    failed requests, and the initiation of the subsequent retrying request.\n  */\n  retryDelayMultiplier: 2,\n\n  /*\n    The length of time to keep retrying in seconds. The last sleep period will\n    be shortened as necessary, so that the last retry runs at deadline (and not\n    considerably beyond it).  The total time starting from when the initial\n    request is sent, after which an error will be returned, regardless of the\n    retrying attempts made meanwhile.\n   */\n  totalTimeout: 600,\n\n  noResponseRetries: 2,\n  currentRetryAttempt: 0,\n  shouldRetryFn: function (response) {\n    var retryRanges = [\n      // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n      // 1xx - Retry (Informational, request still processing)\n      // 2xx - Do not retry (Success)\n      // 3xx - Do not retry (Redirect)\n      // 4xx - Do not retry (Client errors)\n      // 429 - Retry (\"Too Many Requests\")\n      // 5xx - Retry (Server errors)\n      [100, 199],\n      [429, 429],\n      [500, 599]\n    ];\n\n    var statusCode = response.statusCode;\n    debug(`Response status: ${statusCode}`);\n\n    var range;\n    while ((range = retryRanges.shift())) {\n      if (statusCode >= range[0] && statusCode <= range[1]) {\n        // Not a successful status or redirect.\n        return true;\n      }\n    }\n  }\n};\n\nfunction retryRequest(requestOpts, opts, callback) {\n  var streamMode = typeof arguments[arguments.length - 1] !== 'function';\n\n  if (typeof opts === 'function') {\n    callback = opts;\n  }\n\n  var manualCurrentRetryAttemptWasSet = opts && typeof opts.currentRetryAttempt === 'number';\n  opts = extend({}, DEFAULTS, opts);\n\n  if (typeof opts.request === 'undefined') {\n    try {\n      opts.request = require('request');\n    } catch (e) {\n      throw new Error('A request library must be provided to retry-request.');\n    }\n  }\n\n  var currentRetryAttempt = opts.currentRetryAttempt;\n\n  var numNoResponseAttempts = 0;\n  var streamResponseHandled = false;\n\n  var retryStream;\n  var requestStream;\n  var delayStream;\n\n  var activeRequest;\n  var retryRequest = {\n    abort: function () {\n      if (activeRequest && activeRequest.abort) {\n        activeRequest.abort();\n      }\n    }\n  };\n\n  if (streamMode) {\n    retryStream = new PassThrough({ objectMode: opts.objectMode });\n    retryStream.abort = resetStreams;\n  }\n\n  var timeOfFirstRequest = Date.now();\n  if (currentRetryAttempt > 0) {\n    retryAfterDelay(currentRetryAttempt);\n  } else {\n    makeRequest();\n  }\n\n  if (streamMode) {\n    return retryStream;\n  } else {\n    return retryRequest;\n  }\n\n  function resetStreams() {\n    delayStream = null;\n\n    if (requestStream) {\n      requestStream.abort && requestStream.abort();\n      requestStream.cancel && requestStream.cancel();\n\n      if (requestStream.destroy) {\n        requestStream.destroy();\n      } else if (requestStream.end) {\n        requestStream.end();\n      }\n    }\n  }\n\n  function makeRequest() {\n    currentRetryAttempt++;\n    debug(`Current retry attempt: ${currentRetryAttempt}`);\n\n    if (streamMode) {\n      streamResponseHandled = false;\n\n      delayStream = new PassThrough({ objectMode: opts.objectMode });\n      requestStream = opts.request(requestOpts);\n\n      setImmediate(function () {\n        retryStream.emit('request');\n      });\n\n      requestStream\n        // gRPC via google-cloud-node can emit an `error` as well as a `response`\n        // Whichever it emits, we run with-- we can't run with both. That's what\n        // is up with the `streamResponseHandled` tracking.\n        .on('error', function (err) {\n          if (streamResponseHandled) {\n            return;\n          }\n\n          streamResponseHandled = true;\n          onResponse(err);\n        })\n        .on('response', function (resp, body) {\n          if (streamResponseHandled) {\n            return;\n          }\n\n          streamResponseHandled = true;\n          onResponse(null, resp, body);\n        })\n        .on('complete', retryStream.emit.bind(retryStream, 'complete'));\n\n      requestStream.pipe(delayStream);\n    } else {\n      activeRequest = opts.request(requestOpts, onResponse);\n    }\n  }\n\n  function retryAfterDelay(currentRetryAttempt) {\n    if (streamMode) {\n      resetStreams();\n    }\n\n    var nextRetryDelay = getNextRetryDelay({\n      maxRetryDelay: opts.maxRetryDelay,\n      retryDelayMultiplier: opts.retryDelayMultiplier,\n      retryNumber: currentRetryAttempt,\n      timeOfFirstRequest,\n      totalTimeout: opts.totalTimeout,\n    });\n    debug(`Next retry delay: ${nextRetryDelay}`);\n\n    setTimeout(makeRequest, nextRetryDelay);\n  }\n\n  function onResponse(err, response, body) {\n    // An error such as DNS resolution.\n    if (err) {\n      numNoResponseAttempts++;\n\n      if (numNoResponseAttempts <= opts.noResponseRetries) {\n        retryAfterDelay(numNoResponseAttempts);\n      } else {\n        if (streamMode) {\n          retryStream.emit('error', err);\n          retryStream.end();\n        } else {\n          callback(err, response, body);\n        }\n      }\n\n      return;\n    }\n\n    // Send the response to see if we should try again.\n    // NOTE: \"currentRetryAttempt\" isn't accurate by default, as it counts\n    // the very first request sent as the first \"retry\". It is only accurate\n    // when a user provides their own \"currentRetryAttempt\" option at\n    // instantiation.\n    var adjustedCurrentRetryAttempt = manualCurrentRetryAttemptWasSet ? currentRetryAttempt : currentRetryAttempt - 1;\n    if (adjustedCurrentRetryAttempt < opts.retries && opts.shouldRetryFn(response)) {\n      retryAfterDelay(currentRetryAttempt);\n      return;\n    }\n\n    // No more attempts need to be made, just continue on.\n    if (streamMode) {\n      retryStream.emit('response', response);\n      delayStream.pipe(retryStream);\n      requestStream.on('error', function (err) {\n        retryStream.destroy(err);\n      });\n    } else {\n      callback(err, response, body);\n    }\n  }\n}\n\nmodule.exports = retryRequest;\n\nfunction getNextRetryDelay(config) {\n  var {\n    maxRetryDelay,\n    retryDelayMultiplier,\n    retryNumber,\n    timeOfFirstRequest,\n    totalTimeout,\n  } = config;\n\n  var maxRetryDelayMs = maxRetryDelay * 1000;\n  var totalTimeoutMs = totalTimeout * 1000;\n\n  var jitter = Math.floor(Math.random() * 1000);\n  var calculatedNextRetryDelay = Math.pow(retryDelayMultiplier, retryNumber) * 1000 + jitter;\n\n  var maxAllowableDelayMs = totalTimeoutMs - (Date.now() - timeOfFirstRequest);\n\n  return Math.min(calculatedNextRetryDelay, maxAllowableDelayMs, maxRetryDelayMs);\n}\n\nmodule.exports.getNextRetryDelay = getNextRetryDelay;\n"]},"metadata":{},"sourceType":"script"}