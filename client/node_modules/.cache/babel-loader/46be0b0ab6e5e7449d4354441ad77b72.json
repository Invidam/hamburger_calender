{"ast":null,"code":"const {\n  createHmac\n} = require('crypto');\n\nconst {\n  KEYOBJECT\n} = require('../help/consts');\n\nconst timingSafeEqual = require('../help/timing_safe_equal');\n\nconst resolveNodeAlg = require('../help/node_alg');\n\nconst {\n  asInput\n} = require('../help/key_object');\n\nconst sign = (jwaAlg, hmacAlg, {\n  [KEYOBJECT]: keyObject\n}, payload) => {\n  const hmac = createHmac(hmacAlg, asInput(keyObject, false));\n  hmac.update(payload);\n  return hmac.digest();\n};\n\nconst verify = (jwaAlg, hmacAlg, key, payload, signature) => {\n  const expected = sign(jwaAlg, hmacAlg, key, payload);\n  const actual = signature;\n  return timingSafeEqual(actual, expected);\n};\n\nmodule.exports = (JWA, JWK) => {\n  ['HS256', 'HS384', 'HS512'].forEach(jwaAlg => {\n    const hmacAlg = resolveNodeAlg(jwaAlg);\n    JWA.sign.set(jwaAlg, sign.bind(undefined, jwaAlg, hmacAlg));\n    JWA.verify.set(jwaAlg, verify.bind(undefined, jwaAlg, hmacAlg));\n\n    JWK.oct.sign[jwaAlg] = JWK.oct.verify[jwaAlg] = key => key.use === 'sig' || key.use === undefined;\n  });\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/jwa/hmac.js"],"names":["createHmac","require","KEYOBJECT","timingSafeEqual","resolveNodeAlg","asInput","sign","jwaAlg","hmacAlg","keyObject","payload","hmac","update","digest","verify","key","signature","expected","actual","module","exports","JWA","JWK","forEach","set","bind","undefined","oct","use"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,OAAO,CAAC,QAAD,CAA9B;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,2BAAD,CAA/B;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAcJ,OAAO,CAAC,oBAAD,CAA3B;;AAEA,MAAMK,IAAI,GAAG,CAACC,MAAD,EAASC,OAAT,EAAkB;AAAE,GAACN,SAAD,GAAaO;AAAf,CAAlB,EAA8CC,OAA9C,KAA0D;AACrE,QAAMC,IAAI,GAAGX,UAAU,CAACQ,OAAD,EAAUH,OAAO,CAACI,SAAD,EAAY,KAAZ,CAAjB,CAAvB;AACAE,EAAAA,IAAI,CAACC,MAAL,CAAYF,OAAZ;AACA,SAAOC,IAAI,CAACE,MAAL,EAAP;AACD,CAJD;;AAMA,MAAMC,MAAM,GAAG,CAACP,MAAD,EAASC,OAAT,EAAkBO,GAAlB,EAAuBL,OAAvB,EAAgCM,SAAhC,KAA8C;AAC3D,QAAMC,QAAQ,GAAGX,IAAI,CAACC,MAAD,EAASC,OAAT,EAAkBO,GAAlB,EAAuBL,OAAvB,CAArB;AACA,QAAMQ,MAAM,GAAGF,SAAf;AAEA,SAAOb,eAAe,CAACe,MAAD,EAASD,QAAT,CAAtB;AACD,CALD;;AAOAE,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B,GAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4BC,OAA5B,CAAqChB,MAAD,IAAY;AAC9C,UAAMC,OAAO,GAAGJ,cAAc,CAACG,MAAD,CAA9B;AACAc,IAAAA,GAAG,CAACf,IAAJ,CAASkB,GAAT,CAAajB,MAAb,EAAqBD,IAAI,CAACmB,IAAL,CAAUC,SAAV,EAAqBnB,MAArB,EAA6BC,OAA7B,CAArB;AACAa,IAAAA,GAAG,CAACP,MAAJ,CAAWU,GAAX,CAAejB,MAAf,EAAuBO,MAAM,CAACW,IAAP,CAAYC,SAAZ,EAAuBnB,MAAvB,EAA+BC,OAA/B,CAAvB;;AACAc,IAAAA,GAAG,CAACK,GAAJ,CAAQrB,IAAR,CAAaC,MAAb,IAAuBe,GAAG,CAACK,GAAJ,CAAQb,MAAR,CAAeP,MAAf,IAAyBQ,GAAG,IAAIA,GAAG,CAACa,GAAJ,KAAY,KAAZ,IAAqBb,GAAG,CAACa,GAAJ,KAAYF,SAAxF;AACD,GALD;AAMD,CAPD","sourcesContent":["const { createHmac } = require('crypto')\n\nconst { KEYOBJECT } = require('../help/consts')\nconst timingSafeEqual = require('../help/timing_safe_equal')\nconst resolveNodeAlg = require('../help/node_alg')\nconst { asInput } = require('../help/key_object')\n\nconst sign = (jwaAlg, hmacAlg, { [KEYOBJECT]: keyObject }, payload) => {\n  const hmac = createHmac(hmacAlg, asInput(keyObject, false))\n  hmac.update(payload)\n  return hmac.digest()\n}\n\nconst verify = (jwaAlg, hmacAlg, key, payload, signature) => {\n  const expected = sign(jwaAlg, hmacAlg, key, payload)\n  const actual = signature\n\n  return timingSafeEqual(actual, expected)\n}\n\nmodule.exports = (JWA, JWK) => {\n  ['HS256', 'HS384', 'HS512'].forEach((jwaAlg) => {\n    const hmacAlg = resolveNodeAlg(jwaAlg)\n    JWA.sign.set(jwaAlg, sign.bind(undefined, jwaAlg, hmacAlg))\n    JWA.verify.set(jwaAlg, verify.bind(undefined, jwaAlg, hmacAlg))\n    JWK.oct.sign[jwaAlg] = JWK.oct.verify[jwaAlg] = key => key.use === 'sig' || key.use === undefined\n  })\n}\n"]},"metadata":{},"sourceType":"script"}