{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/worklist/WorkList.js\",\n    _s = $RefreshSig$();\n\nimport \"../../css/workList.css\";\nimport { useUpdateTime } from \"../../hooks/workList/time/useUpdateTime\";\nimport { useUpdateWork } from \"../../hooks/workList/work/useUpdateWork\";\nimport { TimeRecordDisplay } from \"./element/timeBtn/TimeDisplayBtn\";\nimport { TimeRecordBtn } from \"./element/timeBtn/TimeRecordBtn\";\nimport { EmptyWork } from \"./element/work/EmptyWork\";\nimport { Work } from \"./element/work/Work\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WorkList = () => {\n  _s();\n\n  const [wakeTime, onClickWakeTime, updateWakeTime] = useUpdateTime(\"wakeTime\");\n\n  const addWakeTimeWindow = /*#__PURE__*/_jsxDEV(TimeRecordBtn, {\n    onClick: onClickWakeTime,\n    isWake: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n\n  console.log(\"ERR BEF BEDTIME??\");\n  const [bedTime, onClickBedTime, updateBedTime] = useUpdateTime(\"bedTime\");\n\n  const addBedTimeWindow = /*#__PURE__*/_jsxDEV(TimeRecordBtn, {\n    onClick: onClickBedTime,\n    isWake: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n\n  const wakeTimeDisplay = /*#__PURE__*/_jsxDEV(TimeRecordDisplay, {\n    recordTime: wakeTime,\n    isWake: true,\n    updateRecordTime: updateWakeTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n\n  const bedTimeDisplay = /*#__PURE__*/_jsxDEV(TimeRecordDisplay, {\n    recordTime: bedTime,\n    isWake: false,\n    updateRecordTime: updateBedTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n\n  const [workList, setWorkList] = useUpdateWork([]);\n  console.log(\"wrLIST: \", workList);\n\n  const emptyWork = /*#__PURE__*/_jsxDEV(EmptyWork, {\n    workList: workList,\n    setWorkList: setWorkList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 21\n  }, this);\n\n  const offset = new Date().getTimezoneOffset() * 60000;\n  console.log(\"OFFSET: \", offset);\n  const today = new Date(Date.now() - offset);\n  return /*#__PURE__*/_jsxDEV(\"ol\", {\n    children: [new Date().toISOString(), today.toISOString(), wakeTime ? wakeTimeDisplay : addWakeTimeWindow, workList && workList.map((workItem, idx) => {\n      return /*#__PURE__*/_jsxDEV(Work, {\n        workItem: workItem,\n        workList: workList,\n        setWorkList: setWorkList,\n        idx: idx\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this);\n    }), emptyWork, bedTime ? bedTimeDisplay : addBedTimeWindow]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this) // </div>\n  ;\n};\n\n_s(WorkList, \"Y9hf5hBYbgPstBOCGZKyK06ljTM=\", false, function () {\n  return [useUpdateTime, useUpdateTime, useUpdateWork];\n});\n\n_c = WorkList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkList\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/worklist/WorkList.js"],"names":["useUpdateTime","useUpdateWork","TimeRecordDisplay","TimeRecordBtn","EmptyWork","Work","WorkList","wakeTime","onClickWakeTime","updateWakeTime","addWakeTimeWindow","console","log","bedTime","onClickBedTime","updateBedTime","addBedTimeWindow","wakeTimeDisplay","bedTimeDisplay","workList","setWorkList","emptyWork","offset","Date","getTimezoneOffset","today","now","toISOString","map","workItem","idx"],"mappings":";;;AAAA,OAAO,wBAAP;AACA,SAASA,aAAT,QAA8B,yCAA9B;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,IAAT,QAAqB,qBAArB;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,QAAD,EAAWC,eAAX,EAA4BC,cAA5B,IAA8CT,aAAa,CAAC,UAAD,CAAjE;;AACA,QAAMU,iBAAiB,gBACrB,QAAC,aAAD;AAAe,IAAA,OAAO,EAAEF,eAAxB;AAAyC,IAAA,MAAM,EAAE;AAAjD;AAAA;AAAA;AAAA;AAAA,UADF;;AAGAG,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,QAAM,CAACC,OAAD,EAAUC,cAAV,EAA0BC,aAA1B,IAA2Cf,aAAa,CAAC,SAAD,CAA9D;;AACA,QAAMgB,gBAAgB,gBACpB,QAAC,aAAD;AAAe,IAAA,OAAO,EAAEF,cAAxB;AAAwC,IAAA,MAAM,EAAE;AAAhD;AAAA;AAAA;AAAA;AAAA,UADF;;AAGA,QAAMG,eAAe,gBACnB,QAAC,iBAAD;AACE,IAAA,UAAU,EAAEV,QADd;AAEE,IAAA,MAAM,EAAE,IAFV;AAGE,IAAA,gBAAgB,EAAEE;AAHpB;AAAA;AAAA;AAAA;AAAA,UADF;;AAOA,QAAMS,cAAc,gBAClB,QAAC,iBAAD;AACE,IAAA,UAAU,EAAEL,OADd;AAEE,IAAA,MAAM,EAAE,KAFV;AAGE,IAAA,gBAAgB,EAAEE;AAHpB;AAAA;AAAA;AAAA;AAAA,UADF;;AAOA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BnB,aAAa,CAAC,EAAD,CAA7C;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBO,QAAxB;;AACA,QAAME,SAAS,gBAAG,QAAC,SAAD;AAAW,IAAA,QAAQ,EAAEF,QAArB;AAA+B,IAAA,WAAW,EAAEC;AAA5C;AAAA;AAAA;AAAA;AAAA,UAAlB;;AAEA,QAAME,MAAM,GAAG,IAAIC,IAAJ,GAAWC,iBAAX,KAAiC,KAAhD;AACAb,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBU,MAAxB;AACA,QAAMG,KAAK,GAAG,IAAIF,IAAJ,CAASA,IAAI,CAACG,GAAL,KAAaJ,MAAtB,CAAd;AACA,sBACE;AAAA,eACG,IAAIC,IAAJ,GAAWI,WAAX,EADH,EAEGF,KAAK,CAACE,WAAN,EAFH,EAGGpB,QAAQ,GAAGU,eAAH,GAAqBP,iBAHhC,EAIGS,QAAQ,IACPA,QAAQ,CAACS,GAAT,CAAa,CAACC,QAAD,EAAWC,GAAX,KAAmB;AAC9B,0BACE,QAAC,IAAD;AACE,QAAA,QAAQ,EAAED,QADZ;AAEE,QAAA,QAAQ,EAAEV,QAFZ;AAGE,QAAA,WAAW,EAAEC,WAHf;AAKE,QAAA,GAAG,EAAEU;AALP,SAIOA,GAJP;AAAA;AAAA;AAAA;AAAA,cADF;AASD,KAVD,CALJ,EAgBGT,SAhBH,EAiBGR,OAAO,GAAGK,cAAH,GAAoBF,gBAjB9B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAoBE;AApBF;AAsBD,CArDM;;GAAMV,Q;UACyCN,a,EAKHA,a,EAkBjBC,a;;;KAxBrBK,Q","sourcesContent":["import \"../../css/workList.css\";\nimport { useUpdateTime } from \"../../hooks/workList/time/useUpdateTime\";\nimport { useUpdateWork } from \"../../hooks/workList/work/useUpdateWork\";\nimport { TimeRecordDisplay } from \"./element/timeBtn/TimeDisplayBtn\";\nimport { TimeRecordBtn } from \"./element/timeBtn/TimeRecordBtn\";\nimport { EmptyWork } from \"./element/work/EmptyWork\";\nimport { Work } from \"./element/work/Work\";\nexport const WorkList = () => {\n  const [wakeTime, onClickWakeTime, updateWakeTime] = useUpdateTime(\"wakeTime\");\n  const addWakeTimeWindow = (\n    <TimeRecordBtn onClick={onClickWakeTime} isWake={true} />\n  );\n  console.log(\"ERR BEF BEDTIME??\");\n  const [bedTime, onClickBedTime, updateBedTime] = useUpdateTime(\"bedTime\");\n  const addBedTimeWindow = (\n    <TimeRecordBtn onClick={onClickBedTime} isWake={false} />\n  );\n  const wakeTimeDisplay = (\n    <TimeRecordDisplay\n      recordTime={wakeTime}\n      isWake={true}\n      updateRecordTime={updateWakeTime}\n    />\n  );\n  const bedTimeDisplay = (\n    <TimeRecordDisplay\n      recordTime={bedTime}\n      isWake={false}\n      updateRecordTime={updateBedTime}\n    />\n  );\n  const [workList, setWorkList] = useUpdateWork([]);\n  console.log(\"wrLIST: \", workList);\n  const emptyWork = <EmptyWork workList={workList} setWorkList={setWorkList} />;\n\n  const offset = new Date().getTimezoneOffset() * 60000;\n  console.log(\"OFFSET: \", offset);\n  const today = new Date(Date.now() - offset);\n  return (\n    <ol>\n      {new Date().toISOString()}\n      {today.toISOString()}\n      {wakeTime ? wakeTimeDisplay : addWakeTimeWindow}\n      {workList &&\n        workList.map((workItem, idx) => {\n          return (\n            <Work\n              workItem={workItem}\n              workList={workList}\n              setWorkList={setWorkList}\n              key={idx}\n              idx={idx}\n            />\n          );\n        })}\n      {emptyWork}\n      {bedTime ? bedTimeDisplay : addBedTimeWindow}\n    </ol>\n    // </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}