{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/worklist/WorkList.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useClick } from \"../../hooks/useClick\";\nimport { usePushWork } from \"../../hooks/usePushWork\";\nimport { onRecordTime } from \"./window/AddWindow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet wakeTime, bedTime;\nexport const isUploadWakeTime = () => wakeTime;\nexport const uploadWakeTime = timeObj => {\n  wakeTime = timeObj;\n};\nexport const uploadBedTime = timeObj => {\n  bedTime = timeObj;\n};\nexport const WorkList = () => {\n  _s();\n\n  //   const validatorFun = (workObj) => {\n  //     return workObj.workName && workObj.workTime;\n  //   };\n  // const { workList, onSubmitWork } = usePushWork(validatorFun);\n  const workList = JSON.parse(localStorage.getItem(\"workList\"));\n  console.log(\"In worklist, list: \", workList);\n  const wakeTimeElem = useClick(onRecordTime);\n  const bedTimeElem = useClick(onRecordTime);\n\n  window.onstorage = () => {\n    // When local storage changes, dump the list to\n    // the console.\n    console.log(\"UP!\", JSON.parse(window.localStorage.getItem(\"workList\")));\n  };\n\n  const makeWorkItem = workItem => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [workItem.workName, \" \", workItem.workTime, \"h\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  };\n\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   <button ref={wakeTimeElem}>SUBMIT</button>\n    //   <button ref={bedTimeElem}>SUBMIT</button>\n    //   <form onSubmit={onSubmitWork}>\n    //     <input type=\"text\" name=\"workName\" placeholder=\"추가할 작업명\"></input>\n    //     <input type=\"number\" name=\"workTime\" placeholder=\"작업 시간\"></input>\n    //     <button type=\"submit\">SUBMIT</button>\n    //   </form>\n    _jsxDEV(\"ol\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), workList && workList.map(workItem => {\n        return makeWorkItem(workItem);\n      }), /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this) // </div>\n\n  );\n};\n\n_s(WorkList, \"+TU7yd5qfIU50nBxpfhRpqO27fs=\", false, function () {\n  return [useClick, useClick];\n});\n\n_c = WorkList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkList\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/worklist/WorkList.js"],"names":["useEffect","useClick","usePushWork","onRecordTime","wakeTime","bedTime","isUploadWakeTime","uploadWakeTime","timeObj","uploadBedTime","WorkList","workList","JSON","parse","localStorage","getItem","console","log","wakeTimeElem","bedTimeElem","window","onstorage","makeWorkItem","workItem","workName","workTime","map"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,YAAT,QAA6B,oBAA7B;;AAEA,IAAIC,QAAJ,EAAcC,OAAd;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAMF,QAA/B;AAEP,OAAO,MAAMG,cAAc,GAAIC,OAAD,IAAa;AACzCJ,EAAAA,QAAQ,GAAGI,OAAX;AACD,CAFM;AAIP,OAAO,MAAMC,aAAa,GAAID,OAAD,IAAa;AACxCH,EAAAA,OAAO,GAAGG,OAAV;AACD,CAFM;AAIP,OAAO,MAAME,QAAQ,GAAG,MAAM;AAAA;;AAC5B;AACA;AACA;AACA;AACA,QAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAjB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCN,QAAnC;AACA,QAAMO,YAAY,GAAGjB,QAAQ,CAACE,YAAD,CAA7B;AACA,QAAMgB,WAAW,GAAGlB,QAAQ,CAACE,YAAD,CAA5B;;AACAiB,EAAAA,MAAM,CAACC,SAAP,GAAmB,MAAM;AACvB;AACA;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBL,IAAI,CAACC,KAAL,CAAWO,MAAM,CAACN,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAX,CAAnB;AACD,GAJD;;AAKA,QAAMO,YAAY,GAAIC,QAAD,IAAc;AACjC,wBACE;AAAA,iBACGA,QAAQ,CAACC,QADZ,OACuBD,QAAQ,CAACE,QADhC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAND;;AAQA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA,cADF,EAIGd,QAAQ,IACPA,QAAQ,CAACe,GAAT,CAAcH,QAAD,IAAc;AACzB,eAAOD,YAAY,CAACC,QAAD,CAAnB;AACD,OAFD,CALJ,eAQE;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,CAmBE;;AAnBF;AAqBD,CA3CM;;GAAMb,Q;UAOUT,Q,EACDA,Q;;;KARTS,Q","sourcesContent":["import { useEffect } from \"react\";\nimport { useClick } from \"../../hooks/useClick\";\nimport { usePushWork } from \"../../hooks/usePushWork\";\nimport { onRecordTime } from \"./window/AddWindow\";\n\nlet wakeTime, bedTime;\n\nexport const isUploadWakeTime = () => wakeTime;\n\nexport const uploadWakeTime = (timeObj) => {\n  wakeTime = timeObj;\n};\n\nexport const uploadBedTime = (timeObj) => {\n  bedTime = timeObj;\n};\n\nexport const WorkList = () => {\n  //   const validatorFun = (workObj) => {\n  //     return workObj.workName && workObj.workTime;\n  //   };\n  // const { workList, onSubmitWork } = usePushWork(validatorFun);\n  const workList = JSON.parse(localStorage.getItem(\"workList\"));\n  console.log(\"In worklist, list: \", workList);\n  const wakeTimeElem = useClick(onRecordTime);\n  const bedTimeElem = useClick(onRecordTime);\n  window.onstorage = () => {\n    // When local storage changes, dump the list to\n    // the console.\n    console.log(\"UP!\", JSON.parse(window.localStorage.getItem(\"workList\")));\n  };\n  const makeWorkItem = (workItem) => {\n    return (\n      <li>\n        {workItem.workName} {workItem.workTime}h\n      </li>\n    );\n  };\n\n  return (\n    // <div>\n    //   <button ref={wakeTimeElem}>SUBMIT</button>\n    //   <button ref={bedTimeElem}>SUBMIT</button>\n    //   <form onSubmit={onSubmitWork}>\n    //     <input type=\"text\" name=\"workName\" placeholder=\"추가할 작업명\"></input>\n    //     <input type=\"number\" name=\"workTime\" placeholder=\"작업 시간\"></input>\n    //     <button type=\"submit\">SUBMIT</button>\n    //   </form>\n    <ol>\n      <li>\n        {/* {isUploadWakeTime() Wake Up at {wakeTime.hour}:{wakeTime.minute}} */}\n      </li>\n      {workList &&\n        workList.map((workItem) => {\n          return makeWorkItem(workItem);\n        })}\n      <li>{/* Sleep at {bedTime.hour}:{bedTime.minute} */}</li>\n    </ol>\n    // </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}