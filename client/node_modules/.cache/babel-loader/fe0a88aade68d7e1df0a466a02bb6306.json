{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { API } from \"../../tools/axiosSetting\";\nexport const useEditSetting = ({\n  user,\n  history,\n  location\n}) => {\n  _s();\n\n  const [targetWorkTime, setTargetWorkTime] = useState();\n  const [targetWakeTime, setTargetWakeTime] = useState();\n  const [targetBedTime, setTargetBedTime] = useState();\n\n  const onChangeTargetWorkTime = workTime => setTargetWorkTime(parseInt(workTime));\n\n  const onChangeTargetWakeTime = wakeTime => setTargetWakeTime(parseInt(wakeTime));\n\n  const onChangeTargetBedTime = bedTime => setTargetBedTime(parseInt(bedTime));\n\n  const getAndUpdateSetting = async () => {\n    const data = await API.get(`/api/${user}/${date}/worklist/worklist`);\n    console.log(\"SETTING DATA: \", data);\n  };\n\n  useEffect(() => {\n    getAndUpdateSetting();\n  }, [user]);\n\n  const validator = targetTimeObj => {\n    return targetTimeObj.targetWorkTime && targetTimeObj.targetWakeTime && targetTimeObj.targetBedTime;\n  };\n\n  const onEditTargetTime = event => {\n    event.preventDefault();\n    let willUpdate = true;\n    const targetTimeObj = {\n      targetWorkTime,\n      targetWakeTime,\n      targetBedTime\n    };\n    if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n\n    if (willUpdate) {\n      console.log(\"SUBMIT: \", targetTimeObj);\n      API.post(`/auth/setting`, {\n        value: targetTimeObj,\n        user\n      });\n    } else {\n      let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${!targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"}${targetWakeTime ? \"\" : \"TargetWakeTime\"}${!targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"}${targetBedTime ? \"\" : \"TargetBedtime\"} ${!targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n\n  return {\n    targetWorkTime,\n    targetWakeTime,\n    targetBedTime,\n    onChangeTargetWorkTime,\n    onChangeTargetWakeTime,\n    onChangeTargetBedTime,\n    onEditTargetTime\n  };\n};\n\n_s(useEditSetting, \"CM1jEX8jWMa8lxA8wSyyMScf/Qo=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useEditSetting.js"],"names":["useState","API","useEditSetting","user","history","location","targetWorkTime","setTargetWorkTime","targetWakeTime","setTargetWakeTime","targetBedTime","setTargetBedTime","onChangeTargetWorkTime","workTime","parseInt","onChangeTargetWakeTime","wakeTime","onChangeTargetBedTime","bedTime","getAndUpdateSetting","data","get","date","console","log","useEffect","validator","targetTimeObj","onEditTargetTime","event","preventDefault","willUpdate","post","value","errText","alert"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAEA,OAAO,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA;AAAjB,CAAD,KAAiC;AAAA;;AAC7D,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,EAApD;AACA,QAAM,CAACQ,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,EAApD;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,EAAlD;;AAEA,QAAMY,sBAAsB,GAAIC,QAAD,IAC7BN,iBAAiB,CAACO,QAAQ,CAACD,QAAD,CAAT,CADnB;;AAEA,QAAME,sBAAsB,GAAIC,QAAD,IAC7BP,iBAAiB,CAACK,QAAQ,CAACE,QAAD,CAAT,CADnB;;AAEA,QAAMC,qBAAqB,GAAIC,OAAD,IAC5BP,gBAAgB,CAACG,QAAQ,CAACI,OAAD,CAAT,CADlB;;AAGA,QAAMC,mBAAmB,GAAG,YAAY;AACtC,UAAMC,IAAI,GAAG,MAAMnB,GAAG,CAACoB,GAAJ,CAAS,QAAOlB,IAAK,IAAGmB,IAAK,oBAA7B,CAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,IAA9B;AACD,GAHD;;AAIAK,EAAAA,SAAS,CAAC,MAAM;AACdN,IAAAA,mBAAmB;AACpB,GAFQ,EAEN,CAAChB,IAAD,CAFM,CAAT;;AAIA,QAAMuB,SAAS,GAAIC,aAAD,IAAmB;AACnC,WACEA,aAAa,CAACrB,cAAd,IACAqB,aAAa,CAACnB,cADd,IAEAmB,aAAa,CAACjB,aAHhB;AAKD,GAND;;AAOA,QAAMkB,gBAAgB,GAAIC,KAAD,IAAW;AAClCA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,UAAU,GAAG,IAAjB;AACA,UAAMJ,aAAa,GAAG;AAAErB,MAAAA,cAAF;AAAkBE,MAAAA,cAAlB;AAAkCE,MAAAA;AAAlC,KAAtB;AACA,QAAI,OAAOgB,SAAP,KAAqB,UAAzB,EAAqCK,UAAU,GAAGL,SAAS,CAACC,aAAD,CAAtB;;AACrC,QAAII,UAAJ,EAAgB;AACdR,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBG,aAAxB;AAEA1B,MAAAA,GAAG,CAAC+B,IAAJ,CAAU,eAAV,EAA0B;AACxBC,QAAAA,KAAK,EAAEN,aADiB;AAExBxB,QAAAA;AAFwB,OAA1B;AAID,KAPD,MAOO;AACL,UAAI+B,OAAO,GAAI,WAAU5B,cAAc,GAAG,EAAH,GAAQ,gBAAiB,GAC9D,CAACE,cAAD,GAAkB,CAACE,aAAnB,GAAmC,CAAnC,IAAwC,CAACJ,cAAzC,GAA0D,IAA1D,GAAiE,EAClE,GAAEE,cAAc,GAAG,EAAH,GAAQ,gBAAiB,GACxC,CAACE,aAAD,GAAiB,CAAjB,IAAsB,CAACF,cAAvB,GAAwC,IAAxC,GAA+C,EAChD,GAAEE,aAAa,GAAG,EAAH,GAAQ,eAAgB,IACtC,CAACJ,cAAD,GAAkB,CAACE,cAAnB,GAAoC,CAACE,aAArC,GAAqD,CAArD,GAAyD,KAAzD,GAAiE,IAClE,eAND;AAOAyB,MAAAA,KAAK,CAACD,OAAD,CAAL;AACD;AACF,GAtBD;;AAuBA,SAAO;AACL5B,IAAAA,cADK;AAELE,IAAAA,cAFK;AAGLE,IAAAA,aAHK;AAILE,IAAAA,sBAJK;AAKLG,IAAAA,sBALK;AAMLE,IAAAA,qBANK;AAOLW,IAAAA;AAPK,GAAP;AASD,CA3DM;;GAAM1B,c","sourcesContent":["import { useState } from \"react\";\nimport { API } from \"../../tools/axiosSetting\";\n\nexport const useEditSetting = ({ user, history, location }) => {\n  const [targetWorkTime, setTargetWorkTime] = useState();\n  const [targetWakeTime, setTargetWakeTime] = useState();\n  const [targetBedTime, setTargetBedTime] = useState();\n\n  const onChangeTargetWorkTime = (workTime) =>\n    setTargetWorkTime(parseInt(workTime));\n  const onChangeTargetWakeTime = (wakeTime) =>\n    setTargetWakeTime(parseInt(wakeTime));\n  const onChangeTargetBedTime = (bedTime) =>\n    setTargetBedTime(parseInt(bedTime));\n\n  const getAndUpdateSetting = async () => {\n    const data = await API.get(`/api/${user}/${date}/worklist/worklist`);\n    console.log(\"SETTING DATA: \", data);\n  };\n  useEffect(() => {\n    getAndUpdateSetting();\n  }, [user]);\n\n  const validator = (targetTimeObj) => {\n    return (\n      targetTimeObj.targetWorkTime &&\n      targetTimeObj.targetWakeTime &&\n      targetTimeObj.targetBedTime\n    );\n  };\n  const onEditTargetTime = (event) => {\n    event.preventDefault();\n    let willUpdate = true;\n    const targetTimeObj = { targetWorkTime, targetWakeTime, targetBedTime };\n    if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n    if (willUpdate) {\n      console.log(\"SUBMIT: \", targetTimeObj);\n\n      API.post(`/auth/setting`, {\n        value: targetTimeObj,\n        user,\n      });\n    } else {\n      let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${\n        !targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"\n      }${targetWakeTime ? \"\" : \"TargetWakeTime\"}${\n        !targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"\n      }${targetBedTime ? \"\" : \"TargetBedtime\"} ${\n        !targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"\n      } not entered.`;\n      alert(errText);\n    }\n  };\n  return {\n    targetWorkTime,\n    targetWakeTime,\n    targetBedTime,\n    onChangeTargetWorkTime,\n    onChangeTargetWakeTime,\n    onChangeTargetBedTime,\n    onEditTargetTime,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}