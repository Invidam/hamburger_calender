{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/App.js\",\n    _s = $RefreshSig$();\n\n// import logo from './logo.svg';\nimport \"./css/App.css\";\nimport \"./css/calendar.css\";\nimport { changeFormatYYYYMMDD } from \"./tools/time\";\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport { NotFoundPage } from \"./components/pages/NotFoundPage\";\nimport { LoginPage } from \"./components/pages/LoginPage\";\nimport { HomePage } from \"./components/pages/HomePage\";\nimport { Header } from \"./components/Header\";\nimport { useLogin } from \"./hooks/user/useLogin\";\nimport { useSetDate } from \"./hooks/date/useSetDate\";\nimport { GithubLoginPage } from \"./components/pages/GithubLoginPage\";\nimport { SignupPage } from \"./components/pages/SignupPage\";\nimport { SettingPage } from \"./components/pages/SettingPage\";\nimport { useUpdateSetting } from \"./hooks/user/useUpdateSetting\";\nimport { LoadingElement } from \"./components/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // useSetAxios();\n  const updateDateHook = useSetDate();\n  const date = changeFormatYYYYMMDD(updateDateHook[0], false);\n  const customLoginHook = useLogin();\n  const [user,, isLoggedIn,,, isLoginHookLoading] = customLoginHook;\n  console.log(\"[APP] USER: \", user);\n  const updateSettingHook = useUpdateSetting(user);\n  const {\n    targetTimeObj,\n    isSettingHookLading\n  } = updateSettingHook;\n\n  const isLoading = () => isLoginHookLoading || isSettingHookLading || true;\n\n  console.log(\"[APP] IS Loading? \", isLoading(), isLoginHookLoading, isSettingHookLading);\n  return isLoading() ? /*#__PURE__*/_jsxDEV(LoadingElement, {\n    text: \"App Loading. . .\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \" test\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this); // (\n  //   <Router>\n  //     <Header date={date} customLoginHook={customLoginHook} />\n  //     <main>\n  //       {JSON.stringify(targetTimeObj)}\n  //       <Switch>\n  //         <Route\n  //           exact\n  //           path=\"/\"\n  //           render={() => (\n  //             <HomePage\n  //               user={user}\n  //               targetTimeObj={targetTimeObj}\n  //               updateDateHook={updateDateHook}\n  //             />\n  //           )}\n  //         />\n  //         <Route\n  //           path=\"/login\"\n  //           render={({ history, location }) => {\n  //             if (isLoggedIn) {\n  //               history.push(\"/\");\n  //               return <NotFoundPage />;\n  //             } else\n  //               return (\n  //                 <LoginPage\n  //                   history={history}\n  //                   location={location}\n  //                   customLoginHook={customLoginHook}\n  //                 />\n  //               );\n  //           }}\n  //         />\n  //         <Route\n  //           path=\"/signup\"\n  //           render={({ history, location }) => {\n  //             if (isLoggedIn) {\n  //               history.push(\"/\");\n  //               // alert(\"You are already logged in.\");\n  //               return <NotFoundPage />;\n  //             } else\n  //               return <SignupPage history={history} location={location} />;\n  //           }}\n  //         />\n  //         <Route\n  //           path=\"/setting\"\n  //           render={({ history, location }) => {\n  //             if (!isLoggedIn) {\n  //               history.push(\"/\");\n  //               // alert(\"You are not logged in.\");\n  //               return <NotFoundPage />;\n  //             } else\n  //               return (\n  //                 <SettingPage\n  //                   user={user}\n  //                   history={history}\n  //                   location={location}\n  //                   updateSettingHook={updateSettingHook}\n  //                 />\n  //               );\n  //           }}\n  //         />\n  //         <Route\n  //           path=\"/github-login\"\n  //           render={({ history, location }) => {\n  //             if (isLoggedIn) {\n  //               history.push(\"/\");\n  //               // alert(\"You are already logged in.\");\n  //               return <NotFoundPage />;\n  //             } else\n  //               return (\n  //                 <GithubLoginPage\n  //                   history={history}\n  //                   location={location}\n  //                   customLoginHook={customLoginHook}\n  //                 />\n  //               );\n  //           }}\n  //         />\n  //         <Route component={NotFoundPage} />\n  //       </Switch>\n  //     </main>\n  //     <footer>footer</footer>\n  //   </Router>\n  // )\n  // ;\n}\n\n_s(App, \"PJ1QvuMZPqJK+Ph+Bfjeu8xK00g=\", false, function () {\n  return [useSetDate, useLogin, useUpdateSetting];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/App.js"],"names":["changeFormatYYYYMMDD","Route","Switch","BrowserRouter","Router","NotFoundPage","LoginPage","HomePage","Header","useLogin","useSetDate","GithubLoginPage","SignupPage","SettingPage","useUpdateSetting","LoadingElement","App","updateDateHook","date","customLoginHook","user","isLoggedIn","isLoginHookLoading","console","log","updateSettingHook","targetTimeObj","isSettingHookLading","isLoading"],"mappings":";;;AAAA;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AACA,SAASA,oBAAT,QAAqC,cAArC;AAEA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,aAAa,IAAIC,MAAzC,QAAuD,kBAAvD;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,eAAT,QAAgC,oCAAhC;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,SAASC,cAAT,QAA+B,sBAA/B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAMC,cAAc,GAAGP,UAAU,EAAjC;AACA,QAAMQ,IAAI,GAAGlB,oBAAoB,CAACiB,cAAc,CAAC,CAAD,CAAf,EAAoB,KAApB,CAAjC;AACA,QAAME,eAAe,GAAGV,QAAQ,EAAhC;AACA,QAAM,CAACW,IAAD,GAASC,UAAT,IAAyBC,kBAAzB,IAA+CH,eAArD;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BJ,IAA5B;AACA,QAAMK,iBAAiB,GAAGX,gBAAgB,CAACM,IAAD,CAA1C;AACA,QAAM;AAAEM,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAyCF,iBAA/C;;AACA,QAAMG,SAAS,GAAG,MAAMN,kBAAkB,IAAIK,mBAAtB,IAA6C,IAArE;;AACAJ,EAAAA,OAAO,CAACC,GAAR,CACE,oBADF,EAEEI,SAAS,EAFX,EAGEN,kBAHF,EAIEK,mBAJF;AAMA,SAAOC,SAAS,kBACd,QAAC,cAAD;AAAgB,IAAA,IAAI,EAAE;AAAtB;AAAA;AAAA;AAAA;AAAA,UADc,gBAGd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,CAhBa,CAqBb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;GA3GQZ,G;UAEgBN,U,EAECD,Q,EAGEK,gB;;;KAPnBE,G;AA6GT,eAAeA,GAAf","sourcesContent":["// import logo from './logo.svg';\nimport \"./css/App.css\";\nimport \"./css/calendar.css\";\nimport { changeFormatYYYYMMDD } from \"./tools/time\";\n\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport { NotFoundPage } from \"./components/pages/NotFoundPage\";\nimport { LoginPage } from \"./components/pages/LoginPage\";\nimport { HomePage } from \"./components/pages/HomePage\";\nimport { Header } from \"./components/Header\";\nimport { useLogin } from \"./hooks/user/useLogin\";\nimport { useSetDate } from \"./hooks/date/useSetDate\";\nimport { GithubLoginPage } from \"./components/pages/GithubLoginPage\";\nimport { SignupPage } from \"./components/pages/SignupPage\";\nimport { SettingPage } from \"./components/pages/SettingPage\";\nimport { useUpdateSetting } from \"./hooks/user/useUpdateSetting\";\nimport { LoadingElement } from \"./components/Loading\";\n\nfunction App() {\n  // useSetAxios();\n  const updateDateHook = useSetDate();\n  const date = changeFormatYYYYMMDD(updateDateHook[0], false);\n  const customLoginHook = useLogin();\n  const [user, , isLoggedIn, , , isLoginHookLoading] = customLoginHook;\n  console.log(\"[APP] USER: \", user);\n  const updateSettingHook = useUpdateSetting(user);\n  const { targetTimeObj, isSettingHookLading } = updateSettingHook;\n  const isLoading = () => isLoginHookLoading || isSettingHookLading || true;\n  console.log(\n    \"[APP] IS Loading? \",\n    isLoading(),\n    isLoginHookLoading,\n    isSettingHookLading\n  );\n  return isLoading() ? (\n    <LoadingElement text={\"App Loading. . .\"} />\n  ) : (\n    <h1> test</h1>\n  );\n  // (\n  //   <Router>\n  //     <Header date={date} customLoginHook={customLoginHook} />\n  //     <main>\n  //       {JSON.stringify(targetTimeObj)}\n  //       <Switch>\n  //         <Route\n  //           exact\n  //           path=\"/\"\n  //           render={() => (\n  //             <HomePage\n  //               user={user}\n  //               targetTimeObj={targetTimeObj}\n  //               updateDateHook={updateDateHook}\n  //             />\n  //           )}\n  //         />\n  //         <Route\n  //           path=\"/login\"\n  //           render={({ history, location }) => {\n  //             if (isLoggedIn) {\n  //               history.push(\"/\");\n  //               return <NotFoundPage />;\n  //             } else\n  //               return (\n  //                 <LoginPage\n  //                   history={history}\n  //                   location={location}\n  //                   customLoginHook={customLoginHook}\n  //                 />\n  //               );\n  //           }}\n  //         />\n  //         <Route\n  //           path=\"/signup\"\n  //           render={({ history, location }) => {\n  //             if (isLoggedIn) {\n  //               history.push(\"/\");\n  //               // alert(\"You are already logged in.\");\n  //               return <NotFoundPage />;\n  //             } else\n  //               return <SignupPage history={history} location={location} />;\n  //           }}\n  //         />\n  //         <Route\n  //           path=\"/setting\"\n  //           render={({ history, location }) => {\n  //             if (!isLoggedIn) {\n  //               history.push(\"/\");\n  //               // alert(\"You are not logged in.\");\n  //               return <NotFoundPage />;\n  //             } else\n  //               return (\n  //                 <SettingPage\n  //                   user={user}\n  //                   history={history}\n  //                   location={location}\n  //                   updateSettingHook={updateSettingHook}\n  //                 />\n  //               );\n  //           }}\n  //         />\n  //         <Route\n  //           path=\"/github-login\"\n  //           render={({ history, location }) => {\n  //             if (isLoggedIn) {\n  //               history.push(\"/\");\n  //               // alert(\"You are already logged in.\");\n  //               return <NotFoundPage />;\n  //             } else\n  //               return (\n  //                 <GithubLoginPage\n  //                   history={history}\n  //                   location={location}\n  //                   customLoginHook={customLoginHook}\n  //                 />\n  //               );\n  //           }}\n  //         />\n  //         <Route component={NotFoundPage} />\n  //       </Switch>\n  //     </main>\n  //     <footer>footer</footer>\n  //   </Router>\n  // )\n  // ;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}