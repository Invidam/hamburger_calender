{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { SORT_TYPE_CNT } from \"../../components/todoList/TodoList\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\n\nconst makeSortTypeStr = idx => {\n  let ret = {};\n  ret[\"type\"] = Math.floor(idx / SORT_TYPE_CNT) === 0 ? \"date\" : \"priority\";\n  ret[\"direction\"] = idx % 2 === 0 ? \"up\" : \"down\";\n  return ret;\n};\n\nexport const useTodoList = (user, sortTypeIdx) => {\n  _s();\n\n  const [todoList, setTodoList] = useState();\n  const [isTodoListLoading, setLoad] = useState(false);\n\n  const getTodoList = async (user, sortTypeIdx) => {\n    try {\n      if (user) {\n        setLoad(true);\n        console.log(\"SORT\", sortTypeIdx);\n        const data = await APIv2.todoList(user).get(makeSortTypeStr(sortTypeIdx));\n        setLoad(false);\n        const resTodoList = data === null || data === void 0 ? void 0 : data.data;\n        if (!data) throw new Error(\"TodoList can't found\");\n        console.log(\"INDI, RES TODO LIST: \", resTodoList);\n        setTodoList(JSON.parse(resTodoList));\n      } else {\n        const resTodoList = LocalStroage.todoList().get();\n        console.log(\"USEWORKLIST DATA NO CATCH [][] AFT\");\n        setTodoList(resTodoList);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    getTodoList(user, sortTypeIdx);\n  }, [user, sortTypeIdx]);\n\n  const setTodo = (todoObj, idx) => {\n    // const id = todoObj.id;\n    //const _todoList = { ...todoList };\n    let _todoList = todoList.concat();\n\n    return {\n      create: async () => {\n        //_todoList[id] = todoObj;\n        _todoList.push(todoObj);\n\n        setTodoList(_todoList);\n        if (user) await APIv2.todo(user).create(todoObj);else LocalStroage.todoList().set(_todoList);\n      },\n      edit: async () => {\n        console.log(\"EDIT TODO LIST\", todoObj);\n        _todoList[idx] = todoObj;\n        setTodoList(_todoList);\n        if (user) await APIv2.todo(user).edit(todoObj);else LocalStroage.todoList().set(_todoList);\n      },\n      delete: async () => {\n        // if (!delete _todoList[id]) throw new Error(\"Cannot Delete TodoItem\");\n        console.log(\"BBEF\", _todoList, idx);\n        _todoList = _todoList.filter((el, elemIdx) => elemIdx !== idx);\n        console.log(\"BAFT\", _todoList);\n        setTodoList(_todoList);\n        if (user) await APIv2.todo(user).delete(todoObj);else LocalStroage.todoList().set(_todoList);\n      }\n    };\n  };\n\n  return [todoList, setTodo, isTodoListLoading];\n};\n\n_s(useTodoList, \"ed/y+OQ2X6zKYcDA568aG9Isf34=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/todolist/useTodoList.js"],"names":["useEffect","useState","SORT_TYPE_CNT","APIv2","LocalStroage","makeSortTypeStr","idx","ret","Math","floor","useTodoList","user","sortTypeIdx","todoList","setTodoList","isTodoListLoading","setLoad","getTodoList","console","log","data","get","resTodoList","Error","JSON","parse","error","alert","setTodo","todoObj","_todoList","concat","create","push","todo","set","edit","delete","filter","el","elemIdx"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { SORT_TYPE_CNT } from \"../../components/todoList/TodoList\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\n\nconst makeSortTypeStr = (idx) => {\n  let ret = {};\n  ret[\"type\"] = Math.floor(idx / SORT_TYPE_CNT) === 0 ? \"date\" : \"priority\";\n  ret[\"direction\"] = idx % 2 === 0 ? \"up\" : \"down\";\n  return ret;\n};\nexport const useTodoList = (user, sortTypeIdx) => {\n  const [todoList, setTodoList] = useState();\n  const [isTodoListLoading, setLoad] = useState(false);\n  const getTodoList = async (user, sortTypeIdx) => {\n    try {\n      if (user) {\n        setLoad(true);\n        console.log(\"SORT\", sortTypeIdx);\n        const data = await APIv2.todoList(user).get(\n          makeSortTypeStr(sortTypeIdx)\n        );\n        setLoad(false);\n        const resTodoList = data?.data;\n        if (!data) throw new Error(\"TodoList can't found\");\n        console.log(\"INDI, RES TODO LIST: \", resTodoList);\n        setTodoList(JSON.parse(resTodoList));\n      } else {\n        const resTodoList = LocalStroage.todoList().get();\n        console.log(\"USEWORKLIST DATA NO CATCH [][] AFT\");\n        setTodoList(resTodoList);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    getTodoList(user, sortTypeIdx);\n  }, [user, sortTypeIdx]);\n\n  const setTodo = (todoObj, idx) => {\n    // const id = todoObj.id;\n    //const _todoList = { ...todoList };\n    let _todoList = todoList.concat();\n    return {\n      create: async () => {\n        //_todoList[id] = todoObj;\n        _todoList.push(todoObj);\n        setTodoList(_todoList);\n        if (user) await APIv2.todo(user).create(todoObj);\n        else LocalStroage.todoList().set(_todoList);\n      },\n      edit: async () => {\n        console.log(\"EDIT TODO LIST\", todoObj);\n        _todoList[idx] = todoObj;\n        setTodoList(_todoList);\n        if (user) await APIv2.todo(user).edit(todoObj);\n        else LocalStroage.todoList().set(_todoList);\n      },\n      delete: async () => {\n        // if (!delete _todoList[id]) throw new Error(\"Cannot Delete TodoItem\");\n        console.log(\"BBEF\", _todoList, idx);\n        _todoList = _todoList.filter((el, elemIdx) => elemIdx !== idx);\n        console.log(\"BAFT\", _todoList);\n        setTodoList(_todoList);\n        if (user) await APIv2.todo(user).delete(todoObj);\n        else LocalStroage.todoList().set(_todoList);\n      },\n    };\n  };\n  return [todoList, setTodo, isTodoListLoading];\n};\n"]},"metadata":{},"sourceType":"module"}