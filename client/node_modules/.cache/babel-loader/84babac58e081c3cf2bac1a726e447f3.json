{"ast":null,"code":"import _slicedToArray from\"/home/invidam/hamburger_calender/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// import logo from './logo.svg';\nimport\"./css/App.css\";import\"./css/calendar.css\";import{Route,Switch,BrowserRouter as Router}from\"react-router-dom\";import{NotFoundPage}from\"./components/pages/NotFoundPage\";import{LoginPage}from\"./components/pages/LoginPage\";import{HomePage}from\"./components/pages/HomePage\";import{Header}from\"./components/Header\";import{useLogin}from\"./hooks/user/useLogin\";import{useSetDate}from\"./hooks/date/useSetDate\";import{GithubLoginPage}from\"./components/pages/GithubLoginPage\";import{SignupPage}from\"./components/pages/SignupPage\";import{SettingPage}from\"./components/pages/SettingPage\";import{useTargetSetting}from\"./hooks/user/useTargetSetting\";import{LoadingElement}from\"./components/Loading\";import{Footer}from\"./components/Footer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// useSetAxios();\nconsole.log(\"[App] START-----------------------------------------\");var updateDateHook=useSetDate();var customLoginHook=useLogin();var _customLoginHook=_slicedToArray(customLoginHook,6),user=_customLoginHook[0],isLoggedIn=_customLoginHook[2],isLoginHookLoading=_customLoginHook[5];var updateSettingHook=useTargetSetting(user,isLoginHookLoading);var targetSetting=updateSettingHook.targetSetting,isSettingHookLoading=updateSettingHook.isSettingHookLoading;console.log(\"[APP] USER: \",user);var isLoading=function isLoading(){return isLoginHookLoading||isSettingHookLoading;};console.log(\"[APP] IS Loading? \",isLoading(),\"login\",isLoginHookLoading,user,\"setting\",isSettingHookLoading,targetSetting);return isLoading()?/*#__PURE__*/_jsx(LoadingElement,{text:\"App Loading. . .\"}):/*#__PURE__*/_jsxs(Router,{children:[/*#__PURE__*/_jsx(Header,{updateDateHook:updateDateHook,customLoginHook:customLoginHook}),/*#__PURE__*/_jsx(\"main\",{children:/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"/\",render:function render(){return/*#__PURE__*/_jsx(HomePage,{user:user,targetSetting:targetSetting,updateDateHook:updateDateHook});}}),/*#__PURE__*/_jsx(Route,{path:\"/login\",render:function render(_ref){var history=_ref.history,location=_ref.location;if(isLoggedIn){history.push(\"/\");return/*#__PURE__*/_jsx(NotFoundPage,{});}else return/*#__PURE__*/_jsx(LoginPage,{history:history,location:location,customLoginHook:customLoginHook});}}),/*#__PURE__*/_jsx(Route,{path:\"/signup\",render:function render(_ref2){var history=_ref2.history,location=_ref2.location;if(isLoggedIn){history.push(\"/\");// alert(\"You are already logged in.\");\nreturn/*#__PURE__*/_jsx(NotFoundPage,{});}else return/*#__PURE__*/_jsx(SignupPage,{history:history,location:location});}}),/*#__PURE__*/_jsx(Route,{path:\"/setting\",render:function render(_ref3){var history=_ref3.history,location=_ref3.location;if(!isLoggedIn){history.push(\"/\");// alert(\"You are not logged in.\");\nreturn/*#__PURE__*/_jsx(NotFoundPage,{});}else return/*#__PURE__*/_jsx(SettingPage,{user:user,history:history,location:location,updateSettingHook:updateSettingHook});}}),/*#__PURE__*/_jsx(Route,{path:\"/github-login\",render:function render(_ref4){var history=_ref4.history,location=_ref4.location;if(isLoggedIn){history.push(\"/\");// alert(\"You are already logged in.\");\nreturn/*#__PURE__*/_jsx(NotFoundPage,{});}else return/*#__PURE__*/_jsx(GithubLoginPage,{history:history,location:location,customLoginHook:customLoginHook});}}),/*#__PURE__*/_jsx(Route,{component:NotFoundPage})]})}),/*#__PURE__*/_jsx(Footer,{})]});}export default App;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/src/App.js"],"names":["Route","Switch","BrowserRouter","Router","NotFoundPage","LoginPage","HomePage","Header","useLogin","useSetDate","GithubLoginPage","SignupPage","SettingPage","useTargetSetting","LoadingElement","Footer","App","console","log","updateDateHook","customLoginHook","user","isLoggedIn","isLoginHookLoading","updateSettingHook","targetSetting","isSettingHookLoading","isLoading","history","location","push"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport \"./css/App.css\";\nimport \"./css/calendar.css\";\n\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport { NotFoundPage } from \"./components/pages/NotFoundPage\";\nimport { LoginPage } from \"./components/pages/LoginPage\";\nimport { HomePage } from \"./components/pages/HomePage\";\nimport { Header } from \"./components/Header\";\nimport { useLogin } from \"./hooks/user/useLogin\";\nimport { useSetDate } from \"./hooks/date/useSetDate\";\nimport { GithubLoginPage } from \"./components/pages/GithubLoginPage\";\nimport { SignupPage } from \"./components/pages/SignupPage\";\nimport { SettingPage } from \"./components/pages/SettingPage\";\nimport { useTargetSetting } from \"./hooks/user/useTargetSetting\";\nimport { LoadingElement } from \"./components/Loading\";\nimport { Footer } from \"./components/Footer\";\n\nfunction App() {\n  // useSetAxios();\n  console.log(\"[App] START-----------------------------------------\");\n  const updateDateHook = useSetDate();\n  const customLoginHook = useLogin();\n  const [user, , isLoggedIn, , , isLoginHookLoading] = customLoginHook;\n  const updateSettingHook = useTargetSetting(user, isLoginHookLoading);\n  const { targetSetting, isSettingHookLoading } = updateSettingHook;\n  console.log(\"[APP] USER: \", user);\n  const isLoading = () => isLoginHookLoading || isSettingHookLoading;\n  console.log(\n    \"[APP] IS Loading? \",\n    isLoading(),\n    \"login\",\n    isLoginHookLoading,\n    user,\n    \"setting\",\n    isSettingHookLoading,\n    targetSetting\n  );\n  return isLoading() ? (\n    <LoadingElement text={\"App Loading. . .\"} />\n  ) : (\n    <Router>\n      <Header\n        updateDateHook={updateDateHook}\n        customLoginHook={customLoginHook}\n      />\n      <main>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <HomePage\n                user={user}\n                targetSetting={targetSetting}\n                updateDateHook={updateDateHook}\n              />\n            )}\n          />\n          <Route\n            path=\"/login\"\n            render={({ history, location }) => {\n              if (isLoggedIn) {\n                history.push(\"/\");\n                return <NotFoundPage />;\n              } else\n                return (\n                  <LoginPage\n                    history={history}\n                    location={location}\n                    customLoginHook={customLoginHook}\n                  />\n                );\n            }}\n          />\n          <Route\n            path=\"/signup\"\n            render={({ history, location }) => {\n              if (isLoggedIn) {\n                history.push(\"/\");\n                // alert(\"You are already logged in.\");\n                return <NotFoundPage />;\n              } else\n                return <SignupPage history={history} location={location} />;\n            }}\n          />\n          <Route\n            path=\"/setting\"\n            render={({ history, location }) => {\n              if (!isLoggedIn) {\n                history.push(\"/\");\n                // alert(\"You are not logged in.\");\n                return <NotFoundPage />;\n              } else\n                return (\n                  <SettingPage\n                    user={user}\n                    history={history}\n                    location={location}\n                    updateSettingHook={updateSettingHook}\n                  />\n                );\n            }}\n          />\n          <Route\n            path=\"/github-login\"\n            render={({ history, location }) => {\n              if (isLoggedIn) {\n                history.push(\"/\");\n                // alert(\"You are already logged in.\");\n                return <NotFoundPage />;\n              } else\n                return (\n                  <GithubLoginPage\n                    history={history}\n                    location={location}\n                    customLoginHook={customLoginHook}\n                  />\n                );\n            }}\n          />\n          <Route component={NotFoundPage} />\n        </Switch>\n      </main>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}