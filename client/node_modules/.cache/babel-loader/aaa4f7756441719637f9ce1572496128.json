{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeResponse = exports.encodeRequest = void 0; // proto-over-HTTP request encoding and decoding\n\nconst fallback_1 = require(\"./fallback\");\n\nconst googleError_1 = require(\"./googleError\");\n\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request) {\n  const protoNamespaces = [];\n  let currNamespace = rpc.parent;\n\n  while (currNamespace.name !== '') {\n    protoNamespaces.unshift(currNamespace.name);\n    currNamespace = currNamespace.parent;\n  }\n\n  const protoServiceName = protoNamespaces.join('.');\n  const rpcName = rpc.name;\n  const headers = {\n    'Content-Type': 'application/x-protobuf'\n  };\n  const method = 'post';\n  const requestMessage = rpc.resolvedRequestType.fromObject(request);\n  const body = rpc.resolvedRequestType.encode(requestMessage).finish();\n  const url = `${protocol}://${servicePath}:${servicePort}/$rpc/${protoServiceName}/${rpcName}`;\n  return {\n    method,\n    url,\n    headers,\n    body\n  };\n}\n\nexports.encodeRequest = encodeRequest;\n\nfunction decodeResponse(rpc, ok, response) {\n  if (!ok) {\n    const statusDecoder = new googleError_1.GoogleErrorDecoder();\n    const error = statusDecoder.decodeErrorFromBuffer(response);\n    throw error;\n  }\n\n  const buffer = response instanceof ArrayBuffer ? new Uint8Array(response) : response;\n  const message = rpc.resolvedResponseType.decode(buffer);\n  return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\n\nexports.decodeResponse = decodeResponse;","map":{"version":3,"sources":["../../src/fallbackProto.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;yDAEH;;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,SAAgB,aAAhB,CACE,GADF,EAEE,QAFF,EAGE,WAHF,EAIE,WAJF,EAKE,OALF,EAKa;AAEX,QAAM,eAAe,GAAa,EAAlC;AACA,MAAI,aAAa,GAAG,GAAG,CAAC,MAAxB;;AACA,SAAO,aAAa,CAAC,IAAd,KAAuB,EAA9B,EAAkC;AAChC,IAAA,eAAe,CAAC,OAAhB,CAAwB,aAAa,CAAC,IAAtC;AACA,IAAA,aAAa,GAAG,aAAa,CAAC,MAA9B;AACD;;AACD,QAAM,gBAAgB,GAAG,eAAe,CAAC,IAAhB,CAAqB,GAArB,CAAzB;AACA,QAAM,OAAO,GAAG,GAAG,CAAC,IAApB;AAEA,QAAM,OAAO,GAA4B;AACvC,oBAAgB;AADuB,GAAzC;AAIA,QAAM,MAAM,GAAG,MAAf;AACA,QAAM,cAAc,GAAG,GAAG,CAAC,mBAAJ,CAAyB,UAAzB,CAAoC,OAApC,CAAvB;AACA,QAAM,IAAI,GAAG,GAAG,CAAC,mBAAJ,CAAyB,MAAzB,CAAgC,cAAhC,EAAgD,MAAhD,EAAb;AACA,QAAM,GAAG,GAAG,GAAG,QAAQ,MAAM,WAAW,IAAI,WAAW,SAAS,gBAAgB,IAAI,OAAO,EAA3F;AAEA,SAAO;AACL,IAAA,MADK;AAEL,IAAA,GAFK;AAGL,IAAA,OAHK;AAIL,IAAA;AAJK,GAAP;AAMD;;AA/BD,OAAA,CAAA,aAAA,GAAA,aAAA;;AAiCA,SAAgB,cAAhB,CACE,GADF,EAEE,EAFF,EAGE,QAHF,EAGgC;AAE9B,MAAI,CAAC,EAAL,EAAS;AACP,UAAM,aAAa,GAAG,IAAI,aAAA,CAAA,kBAAJ,EAAtB;AACA,UAAM,KAAK,GAAG,aAAa,CAAC,qBAAd,CAAoC,QAApC,CAAd;AACA,UAAM,KAAN;AACD;;AAED,QAAM,MAAM,GACV,QAAQ,YAAY,WAApB,GAAkC,IAAI,UAAJ,CAAe,QAAf,CAAlC,GAA6D,QAD/D;AAEA,QAAM,OAAO,GAAG,GAAG,CAAC,oBAAJ,CAA0B,MAA1B,CAAiC,MAAjC,CAAhB;AACA,SAAO,GAAG,CAAC,oBAAJ,CAA0B,QAA1B,CAAmC,OAAnC,EAA4C,UAAA,CAAA,sBAA5C,CAAP;AACD;;AAfD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeResponse = exports.encodeRequest = void 0;\n// proto-over-HTTP request encoding and decoding\nconst fallback_1 = require(\"./fallback\");\nconst googleError_1 = require(\"./googleError\");\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request) {\n    const protoNamespaces = [];\n    let currNamespace = rpc.parent;\n    while (currNamespace.name !== '') {\n        protoNamespaces.unshift(currNamespace.name);\n        currNamespace = currNamespace.parent;\n    }\n    const protoServiceName = protoNamespaces.join('.');\n    const rpcName = rpc.name;\n    const headers = {\n        'Content-Type': 'application/x-protobuf',\n    };\n    const method = 'post';\n    const requestMessage = rpc.resolvedRequestType.fromObject(request);\n    const body = rpc.resolvedRequestType.encode(requestMessage).finish();\n    const url = `${protocol}://${servicePath}:${servicePort}/$rpc/${protoServiceName}/${rpcName}`;\n    return {\n        method,\n        url,\n        headers,\n        body,\n    };\n}\nexports.encodeRequest = encodeRequest;\nfunction decodeResponse(rpc, ok, response) {\n    if (!ok) {\n        const statusDecoder = new googleError_1.GoogleErrorDecoder();\n        const error = statusDecoder.decodeErrorFromBuffer(response);\n        throw error;\n    }\n    const buffer = response instanceof ArrayBuffer ? new Uint8Array(response) : response;\n    const message = rpc.resolvedResponseType.decode(buffer);\n    return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\nexports.decodeResponse = decodeResponse;\n//# sourceMappingURL=fallbackProto.js.map"]},"metadata":{},"sourceType":"script"}