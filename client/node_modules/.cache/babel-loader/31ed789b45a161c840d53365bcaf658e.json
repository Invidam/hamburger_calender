{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API } from \"../../../tools/axiosSetting\";\n\nconst getEmptyWorkList = () => {\n  return [{\n    workTime: -1\n  }];\n};\n\nconst isEmptyWorkList = workList => {\n  var _workList$;\n\n  return workList ? ((_workList$ = workList[0]) === null || _workList$ === void 0 ? void 0 : _workList$.workTime) === -1 : true;\n};\n\nconst checkWorkList = workList => isEmptyWorkList(workList) ? getEmptyWorkList() : workList;\n\nconst getInitList = user => !user && window.localStorage.getItem(\"workList\") ? JSON.parse(window.localStorage.getItem(\"workList\")) : [];\n\nexport const useWorkList = (user, date) => {\n  _s();\n\n  const initList = getInitList();\n  const [workList, setWorkList] = useState(initList);\n\n  const getWorkList = async () => {\n    let resWorkList;\n\n    if (user) {\n      const data = await API.get(`/api/${user}/${date}/worklist/worklist`);\n      resWorkList = checkWorkList(data === null || data === void 0 ? void 0 : data.data);\n    } else {\n      resWorkList = JSON.parse(localStorage.getItem(\"workList\"));\n    }\n\n    setWorkList(resWorkList);\n  };\n\n  useEffect(() => {\n    getWorkList();\n  }, [date, user]);\n\n  const updateWorkList = _workList => {\n    _workList = checkWorkList(_workList);\n    setWorkList(_workList);\n\n    if (user) {\n      API.post(`/api/${user}/${date}/worklist/worklist`, {\n        user: \"TEST\",\n        value: _workList\n      });\n    } else window.localStorage.setItem(\"workList\", JSON.stringify(_workList));\n  };\n\n  return [workList, updateWorkList];\n};\n\n_s(useWorkList, \"uUnjV6oTVBBPadCGz4VigBOSZFc=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/work/useWorkList.js"],"names":["useEffect","useState","API","getEmptyWorkList","workTime","isEmptyWorkList","workList","checkWorkList","getInitList","user","window","localStorage","getItem","JSON","parse","useWorkList","date","initList","setWorkList","getWorkList","resWorkList","data","get","updateWorkList","_workList","post","value","setItem","stringify"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,QAAoB,6BAApB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,SAAO,CAAC;AAAEC,IAAAA,QAAQ,EAAE,CAAC;AAAb,GAAD,CAAP;AACD,CAFD;;AAGA,MAAMC,eAAe,GAAIC,QAAD;AAAA;;AAAA,SACtBA,QAAQ,GAAG,eAAAA,QAAQ,CAAC,CAAD,CAAR,0DAAaF,QAAb,MAA0B,CAAC,CAA9B,GAAkC,IADpB;AAAA,CAAxB;;AAGA,MAAMG,aAAa,GAAID,QAAD,IACpBD,eAAe,CAACC,QAAD,CAAf,GAA4BH,gBAAgB,EAA5C,GAAiDG,QADnD;;AAGA,MAAME,WAAW,GAAIC,IAAD,IAClB,CAACA,IAAD,IAASC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAT,GACIC,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAX,CADJ,GAEI,EAHN;;AAIA,OAAO,MAAMG,WAAW,GAAG,CAACN,IAAD,EAAOO,IAAP,KAAgB;AAAA;;AACzC,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM,CAACF,QAAD,EAAWY,WAAX,IAA0BjB,QAAQ,CAACgB,QAAD,CAAxC;;AAEA,QAAME,WAAW,GAAG,YAAY;AAC9B,QAAIC,WAAJ;;AACA,QAAIX,IAAJ,EAAU;AACR,YAAMY,IAAI,GAAG,MAAMnB,GAAG,CAACoB,GAAJ,CAAS,QAAOb,IAAK,IAAGO,IAAK,oBAA7B,CAAnB;AACAI,MAAAA,WAAW,GAAGb,aAAa,CAACc,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAA3B;AACD,KAHD,MAGO;AACLD,MAAAA,WAAW,GAAGP,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAd;AACD;;AACDM,IAAAA,WAAW,CAACE,WAAD,CAAX;AACD,GATD;;AAUApB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACH,IAAD,EAAOP,IAAP,CAFM,CAAT;;AAIA,QAAMc,cAAc,GAAIC,SAAD,IAAe;AACpCA,IAAAA,SAAS,GAAGjB,aAAa,CAACiB,SAAD,CAAzB;AACAN,IAAAA,WAAW,CAACM,SAAD,CAAX;;AACA,QAAIf,IAAJ,EAAU;AACRP,MAAAA,GAAG,CAACuB,IAAJ,CAAU,QAAOhB,IAAK,IAAGO,IAAK,oBAA9B,EAAmD;AACjDP,QAAAA,IAAI,EAAE,MAD2C;AAEjDiB,QAAAA,KAAK,EAAEF;AAF0C,OAAnD;AAID,KALD,MAKOd,MAAM,CAACC,YAAP,CAAoBgB,OAApB,CAA4B,UAA5B,EAAwCd,IAAI,CAACe,SAAL,CAAeJ,SAAf,CAAxC;AACR,GATD;;AAUA,SAAO,CAAClB,QAAD,EAAWiB,cAAX,CAAP;AACD,CA7BM;;GAAMR,W","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API } from \"../../../tools/axiosSetting\";\n\nconst getEmptyWorkList = () => {\n  return [{ workTime: -1 }];\n};\nconst isEmptyWorkList = (workList) =>\n  workList ? workList[0]?.workTime === -1 : true;\n\nconst checkWorkList = (workList) =>\n  isEmptyWorkList(workList) ? getEmptyWorkList() : workList;\n\nconst getInitList = (user) =>\n  !user && window.localStorage.getItem(\"workList\")\n    ? JSON.parse(window.localStorage.getItem(\"workList\"))\n    : [];\nexport const useWorkList = (user, date) => {\n  const initList = getInitList();\n  const [workList, setWorkList] = useState(initList);\n\n  const getWorkList = async () => {\n    let resWorkList;\n    if (user) {\n      const data = await API.get(`/api/${user}/${date}/worklist/worklist`);\n      resWorkList = checkWorkList(data?.data);\n    } else {\n      resWorkList = JSON.parse(localStorage.getItem(\"workList\"));\n    }\n    setWorkList(resWorkList);\n  };\n  useEffect(() => {\n    getWorkList();\n  }, [date, user]);\n\n  const updateWorkList = (_workList) => {\n    _workList = checkWorkList(_workList);\n    setWorkList(_workList);\n    if (user) {\n      API.post(`/api/${user}/${date}/worklist/worklist`, {\n        user: \"TEST\",\n        value: _workList,\n      });\n    } else window.localStorage.setItem(\"workList\", JSON.stringify(_workList));\n  };\n  return [workList, updateWorkList];\n};\n"]},"metadata":{},"sourceType":"module"}