{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OAuth2Client = exports.CertificateFormat = exports.CodeChallengeMethod = void 0;\n\nconst querystring = require(\"querystring\");\n\nconst stream = require(\"stream\");\n\nconst formatEcdsa = require(\"ecdsa-sig-formatter\");\n\nconst crypto_1 = require(\"../crypto/crypto\");\n\nconst authclient_1 = require(\"./authclient\");\n\nconst loginticket_1 = require(\"./loginticket\");\n\nvar CodeChallengeMethod;\n\n(function (CodeChallengeMethod) {\n  CodeChallengeMethod[\"Plain\"] = \"plain\";\n  CodeChallengeMethod[\"S256\"] = \"S256\";\n})(CodeChallengeMethod = exports.CodeChallengeMethod || (exports.CodeChallengeMethod = {}));\n\nvar CertificateFormat;\n\n(function (CertificateFormat) {\n  CertificateFormat[\"PEM\"] = \"PEM\";\n  CertificateFormat[\"JWK\"] = \"JWK\";\n})(CertificateFormat = exports.CertificateFormat || (exports.CertificateFormat = {}));\n\nclass OAuth2Client extends authclient_1.AuthClient {\n  constructor(optionsOrClientId, clientSecret, redirectUri) {\n    super();\n    this.certificateCache = {};\n    this.certificateExpiry = null;\n    this.certificateCacheFormat = CertificateFormat.PEM;\n    this.refreshTokenPromises = new Map();\n    const opts = optionsOrClientId && typeof optionsOrClientId === 'object' ? optionsOrClientId : {\n      clientId: optionsOrClientId,\n      clientSecret,\n      redirectUri\n    };\n    this._clientId = opts.clientId;\n    this._clientSecret = opts.clientSecret;\n    this.redirectUri = opts.redirectUri;\n    this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis || 5 * 60 * 1000;\n    this.forceRefreshOnFailure = !!opts.forceRefreshOnFailure;\n  }\n  /**\n   * Generates URL for consent page landing.\n   * @param opts Options.\n   * @return URL to consent page.\n   */\n\n\n  generateAuthUrl(opts = {}) {\n    if (opts.code_challenge_method && !opts.code_challenge) {\n      throw new Error('If a code_challenge_method is provided, code_challenge must be included.');\n    }\n\n    opts.response_type = opts.response_type || 'code';\n    opts.client_id = opts.client_id || this._clientId;\n    opts.redirect_uri = opts.redirect_uri || this.redirectUri; // Allow scopes to be passed either as array or a string\n\n    if (opts.scope instanceof Array) {\n      opts.scope = opts.scope.join(' ');\n    }\n\n    const rootUrl = OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_;\n    return rootUrl + '?' + querystring.stringify(opts);\n  }\n\n  generateCodeVerifier() {\n    // To make the code compatible with browser SubtleCrypto we need to make\n    // this method async.\n    throw new Error('generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.');\n  }\n  /**\n   * Convenience method to automatically generate a code_verifier, and its\n   * resulting SHA256. If used, this must be paired with a S256\n   * code_challenge_method.\n   *\n   * For a full example see:\n   * https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js\n   */\n\n\n  async generateCodeVerifierAsync() {\n    // base64 encoding uses 6 bits per character, and we want to generate128\n    // characters. 6*128/8 = 96.\n    const crypto = crypto_1.createCrypto();\n    const randomString = crypto.randomBytesBase64(96); // The valid characters in the code_verifier are [A-Z]/[a-z]/[0-9]/\n    // \"-\"/\".\"/\"_\"/\"~\". Base64 encoded strings are pretty close, so we're just\n    // swapping out a few chars.\n\n    const codeVerifier = randomString.replace(/\\+/g, '~').replace(/=/g, '_').replace(/\\//g, '-'); // Generate the base64 encoded SHA256\n\n    const unencodedCodeChallenge = await crypto.sha256DigestBase64(codeVerifier); // We need to use base64UrlEncoding instead of standard base64\n\n    const codeChallenge = unencodedCodeChallenge.split('=')[0].replace(/\\+/g, '-').replace(/\\//g, '_');\n    return {\n      codeVerifier,\n      codeChallenge\n    };\n  }\n\n  getToken(codeOrOptions, callback) {\n    const options = typeof codeOrOptions === 'string' ? {\n      code: codeOrOptions\n    } : codeOrOptions;\n\n    if (callback) {\n      this.getTokenAsync(options).then(r => callback(null, r.tokens, r.res), e => callback(e, null, e.response));\n    } else {\n      return this.getTokenAsync(options);\n    }\n  }\n\n  async getTokenAsync(options) {\n    const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n    const values = {\n      code: options.code,\n      client_id: options.client_id || this._clientId,\n      client_secret: this._clientSecret,\n      redirect_uri: options.redirect_uri || this.redirectUri,\n      grant_type: 'authorization_code',\n      code_verifier: options.codeVerifier\n    };\n    const res = await this.transporter.request({\n      method: 'POST',\n      url,\n      data: querystring.stringify(values),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n    const tokens = res.data;\n\n    if (res.data && res.data.expires_in) {\n      tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n      delete tokens.expires_in;\n    }\n\n    this.emit('tokens', tokens);\n    return {\n      tokens,\n      res\n    };\n  }\n  /**\n   * Refreshes the access token.\n   * @param refresh_token Existing refresh token.\n   * @private\n   */\n\n\n  async refreshToken(refreshToken) {\n    if (!refreshToken) {\n      return this.refreshTokenNoCache(refreshToken);\n    } // If a request to refresh using the same token has started,\n    // return the same promise.\n\n\n    if (this.refreshTokenPromises.has(refreshToken)) {\n      return this.refreshTokenPromises.get(refreshToken);\n    }\n\n    const p = this.refreshTokenNoCache(refreshToken).then(r => {\n      this.refreshTokenPromises.delete(refreshToken);\n      return r;\n    }, e => {\n      this.refreshTokenPromises.delete(refreshToken);\n      throw e;\n    });\n    this.refreshTokenPromises.set(refreshToken, p);\n    return p;\n  }\n\n  async refreshTokenNoCache(refreshToken) {\n    if (!refreshToken) {\n      throw new Error('No refresh token is set.');\n    }\n\n    const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n    const data = {\n      refresh_token: refreshToken,\n      client_id: this._clientId,\n      client_secret: this._clientSecret,\n      grant_type: 'refresh_token'\n    }; // request for new token\n\n    const res = await this.transporter.request({\n      method: 'POST',\n      url,\n      data: querystring.stringify(data),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n    const tokens = res.data; // TODO: de-duplicate this code from a few spots\n\n    if (res.data && res.data.expires_in) {\n      tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n      delete tokens.expires_in;\n    }\n\n    this.emit('tokens', tokens);\n    return {\n      tokens,\n      res\n    };\n  }\n\n  refreshAccessToken(callback) {\n    if (callback) {\n      this.refreshAccessTokenAsync().then(r => callback(null, r.credentials, r.res), callback);\n    } else {\n      return this.refreshAccessTokenAsync();\n    }\n  }\n\n  async refreshAccessTokenAsync() {\n    const r = await this.refreshToken(this.credentials.refresh_token);\n    const tokens = r.tokens;\n    tokens.refresh_token = this.credentials.refresh_token;\n    this.credentials = tokens;\n    return {\n      credentials: this.credentials,\n      res: r.res\n    };\n  }\n\n  getAccessToken(callback) {\n    if (callback) {\n      this.getAccessTokenAsync().then(r => callback(null, r.token, r.res), callback);\n    } else {\n      return this.getAccessTokenAsync();\n    }\n  }\n\n  async getAccessTokenAsync() {\n    const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();\n\n    if (shouldRefresh) {\n      if (!this.credentials.refresh_token) {\n        if (this.refreshHandler) {\n          const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n\n          if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n            this.setCredentials(refreshedAccessToken);\n            return {\n              token: this.credentials.access_token\n            };\n          }\n        } else {\n          throw new Error('No refresh token or refresh handler callback is set.');\n        }\n      }\n\n      const r = await this.refreshAccessTokenAsync();\n\n      if (!r.credentials || r.credentials && !r.credentials.access_token) {\n        throw new Error('Could not refresh access token.');\n      }\n\n      return {\n        token: r.credentials.access_token,\n        res: r.res\n      };\n    } else {\n      return {\n        token: this.credentials.access_token\n      };\n    }\n  }\n  /**\n   * The main authentication interface.  It takes an optional url which when\n   * present is the endpoint being accessed, and returns a Promise which\n   * resolves with authorization header fields.\n   *\n   * In OAuth2Client, the result has the form:\n   * { Authorization: 'Bearer <access_token_value>' }\n   * @param url The optional url being authorized\n   */\n\n\n  async getRequestHeaders(url) {\n    const headers = (await this.getRequestMetadataAsync(url)).headers;\n    return headers;\n  }\n\n  async getRequestMetadataAsync( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  url) {\n    const thisCreds = this.credentials;\n\n    if (!thisCreds.access_token && !thisCreds.refresh_token && !this.apiKey && !this.refreshHandler) {\n      throw new Error('No access, refresh token, API key or refresh handler callback is set.');\n    }\n\n    if (thisCreds.access_token && !this.isTokenExpiring()) {\n      thisCreds.token_type = thisCreds.token_type || 'Bearer';\n      const headers = {\n        Authorization: thisCreds.token_type + ' ' + thisCreds.access_token\n      };\n      return {\n        headers: this.addSharedMetadataHeaders(headers)\n      };\n    } // If refreshHandler exists, call processAndValidateRefreshHandler().\n\n\n    if (this.refreshHandler) {\n      const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n\n      if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n        this.setCredentials(refreshedAccessToken);\n        const headers = {\n          Authorization: 'Bearer ' + this.credentials.access_token\n        };\n        return {\n          headers: this.addSharedMetadataHeaders(headers)\n        };\n      }\n    }\n\n    if (this.apiKey) {\n      return {\n        headers: {\n          'X-Goog-Api-Key': this.apiKey\n        }\n      };\n    }\n\n    let r = null;\n    let tokens = null;\n\n    try {\n      r = await this.refreshToken(thisCreds.refresh_token);\n      tokens = r.tokens;\n    } catch (err) {\n      const e = err;\n\n      if (e.response && (e.response.status === 403 || e.response.status === 404)) {\n        e.message = `Could not refresh access token: ${e.message}`;\n      }\n\n      throw e;\n    }\n\n    const credentials = this.credentials;\n    credentials.token_type = credentials.token_type || 'Bearer';\n    tokens.refresh_token = credentials.refresh_token;\n    this.credentials = tokens;\n    const headers = {\n      Authorization: credentials.token_type + ' ' + tokens.access_token\n    };\n    return {\n      headers: this.addSharedMetadataHeaders(headers),\n      res: r.res\n    };\n  }\n  /**\n   * Generates an URL to revoke the given token.\n   * @param token The existing token to be revoked.\n   */\n\n\n  static getRevokeTokenUrl(token) {\n    const parameters = querystring.stringify({\n      token\n    });\n    return `${OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_}?${parameters}`;\n  }\n\n  revokeToken(token, callback) {\n    const opts = {\n      url: OAuth2Client.getRevokeTokenUrl(token),\n      method: 'POST'\n    };\n\n    if (callback) {\n      this.transporter.request(opts).then(r => callback(null, r), callback);\n    } else {\n      return this.transporter.request(opts);\n    }\n  }\n\n  revokeCredentials(callback) {\n    if (callback) {\n      this.revokeCredentialsAsync().then(res => callback(null, res), callback);\n    } else {\n      return this.revokeCredentialsAsync();\n    }\n  }\n\n  async revokeCredentialsAsync() {\n    const token = this.credentials.access_token;\n    this.credentials = {};\n\n    if (token) {\n      return this.revokeToken(token);\n    } else {\n      throw new Error('No access token to revoke.');\n    }\n  }\n\n  request(opts, callback) {\n    if (callback) {\n      this.requestAsync(opts).then(r => callback(null, r), e => {\n        return callback(e, e.response);\n      });\n    } else {\n      return this.requestAsync(opts);\n    }\n  }\n\n  async requestAsync(opts, retry = false) {\n    let r2;\n\n    try {\n      const r = await this.getRequestMetadataAsync(opts.url);\n      opts.headers = opts.headers || {};\n\n      if (r.headers && r.headers['x-goog-user-project']) {\n        opts.headers['x-goog-user-project'] = r.headers['x-goog-user-project'];\n      }\n\n      if (r.headers && r.headers.Authorization) {\n        opts.headers.Authorization = r.headers.Authorization;\n      }\n\n      if (this.apiKey) {\n        opts.headers['X-Goog-Api-Key'] = this.apiKey;\n      }\n\n      r2 = await this.transporter.request(opts);\n    } catch (e) {\n      const res = e.response;\n\n      if (res) {\n        const statusCode = res.status; // Retry the request for metadata if the following criteria are true:\n        // - We haven't already retried.  It only makes sense to retry once.\n        // - The response was a 401 or a 403\n        // - The request didn't send a readableStream\n        // - An access_token and refresh_token were available, but either no\n        //   expiry_date was available or the forceRefreshOnFailure flag is set.\n        //   The absent expiry_date case can happen when developers stash the\n        //   access_token and refresh_token for later use, but the access_token\n        //   fails on the first try because it's expired. Some developers may\n        //   choose to enable forceRefreshOnFailure to mitigate time-related\n        //   errors.\n        // Or the following criteria are true:\n        // - We haven't already retried.  It only makes sense to retry once.\n        // - The response was a 401 or a 403\n        // - The request didn't send a readableStream\n        // - No refresh_token was available\n        // - An access_token and a refreshHandler callback were available, but\n        //   either no expiry_date was available or the forceRefreshOnFailure\n        //   flag is set. The access_token fails on the first try because it's\n        //   expired. Some developers may choose to enable forceRefreshOnFailure\n        //   to mitigate time-related errors.\n\n        const mayRequireRefresh = this.credentials && this.credentials.access_token && this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure);\n        const mayRequireRefreshWithNoRefreshToken = this.credentials && this.credentials.access_token && !this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure) && this.refreshHandler;\n        const isReadableStream = res.config.data instanceof stream.Readable;\n        const isAuthErr = statusCode === 401 || statusCode === 403;\n\n        if (!retry && isAuthErr && !isReadableStream && mayRequireRefresh) {\n          await this.refreshAccessTokenAsync();\n          return this.requestAsync(opts, true);\n        } else if (!retry && isAuthErr && !isReadableStream && mayRequireRefreshWithNoRefreshToken) {\n          const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n\n          if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n            this.setCredentials(refreshedAccessToken);\n          }\n\n          return this.requestAsync(opts, true);\n        }\n      }\n\n      throw e;\n    }\n\n    return r2;\n  }\n\n  verifyIdToken(options, callback) {\n    // This function used to accept two arguments instead of an options object.\n    // Check the types to help users upgrade with less pain.\n    // This check can be removed after a 2.0 release.\n    if (callback && typeof callback !== 'function') {\n      throw new Error('This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.');\n    }\n\n    if (callback) {\n      this.verifyIdTokenAsync(options).then(r => callback(null, r), callback);\n    } else {\n      return this.verifyIdTokenAsync(options);\n    }\n  }\n\n  async verifyIdTokenAsync(options) {\n    if (!options.idToken) {\n      throw new Error('The verifyIdToken method requires an ID Token');\n    }\n\n    const response = await this.getFederatedSignonCertsAsync();\n    const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, OAuth2Client.ISSUERS_, options.maxExpiry);\n    return login;\n  }\n  /**\n   * Obtains information about the provisioned access token.  Especially useful\n   * if you want to check the scopes that were provisioned to a given token.\n   *\n   * @param accessToken Required.  The Access Token for which you want to get\n   * user info.\n   */\n\n\n  async getTokenInfo(accessToken) {\n    const {\n      data\n    } = await this.transporter.request({\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Bearer ${accessToken}`\n      },\n      url: OAuth2Client.GOOGLE_TOKEN_INFO_URL\n    });\n    const info = Object.assign({\n      expiry_date: new Date().getTime() + data.expires_in * 1000,\n      scopes: data.scope.split(' ')\n    }, data);\n    delete info.expires_in;\n    delete info.scope;\n    return info;\n  }\n\n  getFederatedSignonCerts(callback) {\n    if (callback) {\n      this.getFederatedSignonCertsAsync().then(r => callback(null, r.certs, r.res), callback);\n    } else {\n      return this.getFederatedSignonCertsAsync();\n    }\n  }\n\n  async getFederatedSignonCertsAsync() {\n    const nowTime = new Date().getTime();\n    const format = crypto_1.hasBrowserCrypto() ? CertificateFormat.JWK : CertificateFormat.PEM;\n\n    if (this.certificateExpiry && nowTime < this.certificateExpiry.getTime() && this.certificateCacheFormat === format) {\n      return {\n        certs: this.certificateCache,\n        format\n      };\n    }\n\n    let res;\n    let url;\n\n    switch (format) {\n      case CertificateFormat.PEM:\n        url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_;\n        break;\n\n      case CertificateFormat.JWK:\n        url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_;\n        break;\n\n      default:\n        throw new Error(`Unsupported certificate format ${format}`);\n    }\n\n    try {\n      res = await this.transporter.request({\n        url\n      });\n    } catch (e) {\n      e.message = `Failed to retrieve verification certificates: ${e.message}`;\n      throw e;\n    }\n\n    const cacheControl = res ? res.headers['cache-control'] : undefined;\n    let cacheAge = -1;\n\n    if (cacheControl) {\n      const pattern = new RegExp('max-age=([0-9]*)');\n      const regexResult = pattern.exec(cacheControl);\n\n      if (regexResult && regexResult.length === 2) {\n        // Cache results with max-age (in seconds)\n        cacheAge = Number(regexResult[1]) * 1000; // milliseconds\n      }\n    }\n\n    let certificates = {};\n\n    switch (format) {\n      case CertificateFormat.PEM:\n        certificates = res.data;\n        break;\n\n      case CertificateFormat.JWK:\n        for (const key of res.data.keys) {\n          certificates[key.kid] = key;\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unsupported certificate format ${format}`);\n    }\n\n    const now = new Date();\n    this.certificateExpiry = cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);\n    this.certificateCache = certificates;\n    this.certificateCacheFormat = format;\n    return {\n      certs: certificates,\n      format,\n      res\n    };\n  }\n\n  getIapPublicKeys(callback) {\n    if (callback) {\n      this.getIapPublicKeysAsync().then(r => callback(null, r.pubkeys, r.res), callback);\n    } else {\n      return this.getIapPublicKeysAsync();\n    }\n  }\n\n  async getIapPublicKeysAsync() {\n    let res;\n    const url = OAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_;\n\n    try {\n      res = await this.transporter.request({\n        url\n      });\n    } catch (e) {\n      e.message = `Failed to retrieve verification certificates: ${e.message}`;\n      throw e;\n    }\n\n    return {\n      pubkeys: res.data,\n      res\n    };\n  }\n\n  verifySignedJwtWithCerts() {\n    // To make the code compatible with browser SubtleCrypto we need to make\n    // this method async.\n    throw new Error('verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.');\n  }\n  /**\n   * Verify the id token is signed with the correct certificate\n   * and is from the correct audience.\n   * @param jwt The jwt to verify (The ID Token in this case).\n   * @param certs The array of certs to test the jwt against.\n   * @param requiredAudience The audience to test the jwt against.\n   * @param issuers The allowed issuers of the jwt (Optional).\n   * @param maxExpiry The max expiry the certificate can be (Optional).\n   * @return Returns a promise resolving to LoginTicket on verification.\n   */\n\n\n  async verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {\n    const crypto = crypto_1.createCrypto();\n\n    if (!maxExpiry) {\n      maxExpiry = OAuth2Client.MAX_TOKEN_LIFETIME_SECS_;\n    }\n\n    const segments = jwt.split('.');\n\n    if (segments.length !== 3) {\n      throw new Error('Wrong number of segments in token: ' + jwt);\n    }\n\n    const signed = segments[0] + '.' + segments[1];\n    let signature = segments[2];\n    let envelope;\n    let payload;\n\n    try {\n      envelope = JSON.parse(crypto.decodeBase64StringUtf8(segments[0]));\n    } catch (err) {\n      err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;\n      throw err;\n    }\n\n    if (!envelope) {\n      throw new Error(\"Can't parse token envelope: \" + segments[0]);\n    }\n\n    try {\n      payload = JSON.parse(crypto.decodeBase64StringUtf8(segments[1]));\n    } catch (err) {\n      err.message = `Can't parse token payload '${segments[0]}`;\n      throw err;\n    }\n\n    if (!payload) {\n      throw new Error(\"Can't parse token payload: \" + segments[1]);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {\n      // If this is not present, then there's no reason to attempt verification\n      throw new Error('No pem found for envelope: ' + JSON.stringify(envelope));\n    }\n\n    const cert = certs[envelope.kid];\n\n    if (envelope.alg === 'ES256') {\n      signature = formatEcdsa.joseToDer(signature, 'ES256').toString('base64');\n    }\n\n    const verified = await crypto.verify(cert, signed, signature);\n\n    if (!verified) {\n      throw new Error('Invalid token signature: ' + jwt);\n    }\n\n    if (!payload.iat) {\n      throw new Error('No issue time in token: ' + JSON.stringify(payload));\n    }\n\n    if (!payload.exp) {\n      throw new Error('No expiration time in token: ' + JSON.stringify(payload));\n    }\n\n    const iat = Number(payload.iat);\n    if (isNaN(iat)) throw new Error('iat field using invalid format');\n    const exp = Number(payload.exp);\n    if (isNaN(exp)) throw new Error('exp field using invalid format');\n    const now = new Date().getTime() / 1000;\n\n    if (exp >= now + maxExpiry) {\n      throw new Error('Expiration time too far in future: ' + JSON.stringify(payload));\n    }\n\n    const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;\n    const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;\n\n    if (now < earliest) {\n      throw new Error('Token used too early, ' + now + ' < ' + earliest + ': ' + JSON.stringify(payload));\n    }\n\n    if (now > latest) {\n      throw new Error('Token used too late, ' + now + ' > ' + latest + ': ' + JSON.stringify(payload));\n    }\n\n    if (issuers && issuers.indexOf(payload.iss) < 0) {\n      throw new Error('Invalid issuer, expected one of [' + issuers + '], but got ' + payload.iss);\n    } // Check the audience matches if we have one\n\n\n    if (typeof requiredAudience !== 'undefined' && requiredAudience !== null) {\n      const aud = payload.aud;\n      let audVerified = false; // If the requiredAudience is an array, check if it contains token\n      // audience\n\n      if (requiredAudience.constructor === Array) {\n        audVerified = requiredAudience.indexOf(aud) > -1;\n      } else {\n        audVerified = aud === requiredAudience;\n      }\n\n      if (!audVerified) {\n        throw new Error('Wrong recipient, payload audience != requiredAudience');\n      }\n    }\n\n    return new loginticket_1.LoginTicket(envelope, payload);\n  }\n  /**\n   * Returns a promise that resolves with AccessTokenResponse type if\n   * refreshHandler is defined.\n   * If not, nothing is returned.\n   */\n\n\n  async processAndValidateRefreshHandler() {\n    if (this.refreshHandler) {\n      const accessTokenResponse = await this.refreshHandler();\n\n      if (!accessTokenResponse.access_token) {\n        throw new Error('No access token is returned by the refreshHandler callback.');\n      }\n\n      return accessTokenResponse;\n    }\n\n    return;\n  }\n  /**\n   * Returns true if a token is expired or will expire within\n   * eagerRefreshThresholdMillismilliseconds.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   */\n\n\n  isTokenExpiring() {\n    const expiryDate = this.credentials.expiry_date;\n    return expiryDate ? expiryDate <= new Date().getTime() + this.eagerRefreshThresholdMillis : false;\n  }\n\n}\n\nexports.OAuth2Client = OAuth2Client;\nOAuth2Client.GOOGLE_TOKEN_INFO_URL = 'https://oauth2.googleapis.com/tokeninfo';\n/**\n * The base URL for auth endpoints.\n */\n\nOAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_ = 'https://accounts.google.com/o/oauth2/v2/auth';\n/**\n * The base endpoint for token retrieval.\n */\n\nOAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_ = 'https://oauth2.googleapis.com/token';\n/**\n * The base endpoint to revoke tokens.\n */\n\nOAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_ = 'https://oauth2.googleapis.com/revoke';\n/**\n * Google Sign on certificates in PEM format.\n */\n\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v1/certs';\n/**\n * Google Sign on certificates in JWK format.\n */\n\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v3/certs';\n/**\n * Google Sign on certificates in JWK format.\n */\n\nOAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_ = 'https://www.gstatic.com/iap/verify/public_key';\n/**\n * Clock skew - five minutes in seconds\n */\n\nOAuth2Client.CLOCK_SKEW_SECS_ = 300;\n/**\n * Max Token Lifetime is one day in seconds\n */\n\nOAuth2Client.MAX_TOKEN_LIFETIME_SECS_ = 86400;\n/**\n * The allowed oauth token issuers.\n */\n\nOAuth2Client.ISSUERS_ = ['accounts.google.com', 'https://accounts.google.com'];","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/google-auth-library/build/src/auth/oauth2client.js"],"names":["Object","defineProperty","exports","value","OAuth2Client","CertificateFormat","CodeChallengeMethod","querystring","require","stream","formatEcdsa","crypto_1","authclient_1","loginticket_1","AuthClient","constructor","optionsOrClientId","clientSecret","redirectUri","certificateCache","certificateExpiry","certificateCacheFormat","PEM","refreshTokenPromises","Map","opts","clientId","_clientId","_clientSecret","eagerRefreshThresholdMillis","forceRefreshOnFailure","generateAuthUrl","code_challenge_method","code_challenge","Error","response_type","client_id","redirect_uri","scope","Array","join","rootUrl","GOOGLE_OAUTH2_AUTH_BASE_URL_","stringify","generateCodeVerifier","generateCodeVerifierAsync","crypto","createCrypto","randomString","randomBytesBase64","codeVerifier","replace","unencodedCodeChallenge","sha256DigestBase64","codeChallenge","split","getToken","codeOrOptions","callback","options","code","getTokenAsync","then","r","tokens","res","e","response","url","GOOGLE_OAUTH2_TOKEN_URL_","values","client_secret","grant_type","code_verifier","transporter","request","method","data","headers","expires_in","expiry_date","Date","getTime","emit","refreshToken","refreshTokenNoCache","has","get","p","delete","set","refresh_token","refreshAccessToken","refreshAccessTokenAsync","credentials","getAccessToken","getAccessTokenAsync","token","shouldRefresh","access_token","isTokenExpiring","refreshHandler","refreshedAccessToken","processAndValidateRefreshHandler","setCredentials","getRequestHeaders","getRequestMetadataAsync","thisCreds","apiKey","token_type","Authorization","addSharedMetadataHeaders","err","status","message","getRevokeTokenUrl","parameters","GOOGLE_OAUTH2_REVOKE_URL_","revokeToken","revokeCredentials","revokeCredentialsAsync","requestAsync","retry","r2","statusCode","mayRequireRefresh","mayRequireRefreshWithNoRefreshToken","isReadableStream","config","Readable","isAuthErr","verifyIdToken","verifyIdTokenAsync","idToken","getFederatedSignonCertsAsync","login","verifySignedJwtWithCertsAsync","certs","audience","ISSUERS_","maxExpiry","getTokenInfo","accessToken","GOOGLE_TOKEN_INFO_URL","info","assign","scopes","getFederatedSignonCerts","nowTime","format","hasBrowserCrypto","JWK","GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_","GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_","cacheControl","undefined","cacheAge","pattern","RegExp","regexResult","exec","length","Number","certificates","key","keys","kid","now","getIapPublicKeys","getIapPublicKeysAsync","pubkeys","GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_","verifySignedJwtWithCerts","jwt","requiredAudience","issuers","MAX_TOKEN_LIFETIME_SECS_","segments","signed","signature","envelope","payload","JSON","parse","decodeBase64StringUtf8","prototype","hasOwnProperty","call","cert","alg","joseToDer","toString","verified","verify","iat","exp","isNaN","earliest","CLOCK_SKEW_SECS_","latest","indexOf","iss","aud","audVerified","LoginTicket","accessTokenResponse","expiryDate"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OAuth2Client = exports.CertificateFormat = exports.CodeChallengeMethod = void 0;\nconst querystring = require(\"querystring\");\nconst stream = require(\"stream\");\nconst formatEcdsa = require(\"ecdsa-sig-formatter\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst authclient_1 = require(\"./authclient\");\nconst loginticket_1 = require(\"./loginticket\");\nvar CodeChallengeMethod;\n(function (CodeChallengeMethod) {\n    CodeChallengeMethod[\"Plain\"] = \"plain\";\n    CodeChallengeMethod[\"S256\"] = \"S256\";\n})(CodeChallengeMethod = exports.CodeChallengeMethod || (exports.CodeChallengeMethod = {}));\nvar CertificateFormat;\n(function (CertificateFormat) {\n    CertificateFormat[\"PEM\"] = \"PEM\";\n    CertificateFormat[\"JWK\"] = \"JWK\";\n})(CertificateFormat = exports.CertificateFormat || (exports.CertificateFormat = {}));\nclass OAuth2Client extends authclient_1.AuthClient {\n    constructor(optionsOrClientId, clientSecret, redirectUri) {\n        super();\n        this.certificateCache = {};\n        this.certificateExpiry = null;\n        this.certificateCacheFormat = CertificateFormat.PEM;\n        this.refreshTokenPromises = new Map();\n        const opts = optionsOrClientId && typeof optionsOrClientId === 'object'\n            ? optionsOrClientId\n            : { clientId: optionsOrClientId, clientSecret, redirectUri };\n        this._clientId = opts.clientId;\n        this._clientSecret = opts.clientSecret;\n        this.redirectUri = opts.redirectUri;\n        this.eagerRefreshThresholdMillis =\n            opts.eagerRefreshThresholdMillis || 5 * 60 * 1000;\n        this.forceRefreshOnFailure = !!opts.forceRefreshOnFailure;\n    }\n    /**\n     * Generates URL for consent page landing.\n     * @param opts Options.\n     * @return URL to consent page.\n     */\n    generateAuthUrl(opts = {}) {\n        if (opts.code_challenge_method && !opts.code_challenge) {\n            throw new Error('If a code_challenge_method is provided, code_challenge must be included.');\n        }\n        opts.response_type = opts.response_type || 'code';\n        opts.client_id = opts.client_id || this._clientId;\n        opts.redirect_uri = opts.redirect_uri || this.redirectUri;\n        // Allow scopes to be passed either as array or a string\n        if (opts.scope instanceof Array) {\n            opts.scope = opts.scope.join(' ');\n        }\n        const rootUrl = OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_;\n        return (rootUrl +\n            '?' +\n            querystring.stringify(opts));\n    }\n    generateCodeVerifier() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error('generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.');\n    }\n    /**\n     * Convenience method to automatically generate a code_verifier, and its\n     * resulting SHA256. If used, this must be paired with a S256\n     * code_challenge_method.\n     *\n     * For a full example see:\n     * https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js\n     */\n    async generateCodeVerifierAsync() {\n        // base64 encoding uses 6 bits per character, and we want to generate128\n        // characters. 6*128/8 = 96.\n        const crypto = crypto_1.createCrypto();\n        const randomString = crypto.randomBytesBase64(96);\n        // The valid characters in the code_verifier are [A-Z]/[a-z]/[0-9]/\n        // \"-\"/\".\"/\"_\"/\"~\". Base64 encoded strings are pretty close, so we're just\n        // swapping out a few chars.\n        const codeVerifier = randomString\n            .replace(/\\+/g, '~')\n            .replace(/=/g, '_')\n            .replace(/\\//g, '-');\n        // Generate the base64 encoded SHA256\n        const unencodedCodeChallenge = await crypto.sha256DigestBase64(codeVerifier);\n        // We need to use base64UrlEncoding instead of standard base64\n        const codeChallenge = unencodedCodeChallenge\n            .split('=')[0]\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_');\n        return { codeVerifier, codeChallenge };\n    }\n    getToken(codeOrOptions, callback) {\n        const options = typeof codeOrOptions === 'string' ? { code: codeOrOptions } : codeOrOptions;\n        if (callback) {\n            this.getTokenAsync(options).then(r => callback(null, r.tokens, r.res), e => callback(e, null, e.response));\n        }\n        else {\n            return this.getTokenAsync(options);\n        }\n    }\n    async getTokenAsync(options) {\n        const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n        const values = {\n            code: options.code,\n            client_id: options.client_id || this._clientId,\n            client_secret: this._clientSecret,\n            redirect_uri: options.redirect_uri || this.redirectUri,\n            grant_type: 'authorization_code',\n            code_verifier: options.codeVerifier,\n        };\n        const res = await this.transporter.request({\n            method: 'POST',\n            url,\n            data: querystring.stringify(values),\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        });\n        const tokens = res.data;\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res };\n    }\n    /**\n     * Refreshes the access token.\n     * @param refresh_token Existing refresh token.\n     * @private\n     */\n    async refreshToken(refreshToken) {\n        if (!refreshToken) {\n            return this.refreshTokenNoCache(refreshToken);\n        }\n        // If a request to refresh using the same token has started,\n        // return the same promise.\n        if (this.refreshTokenPromises.has(refreshToken)) {\n            return this.refreshTokenPromises.get(refreshToken);\n        }\n        const p = this.refreshTokenNoCache(refreshToken).then(r => {\n            this.refreshTokenPromises.delete(refreshToken);\n            return r;\n        }, e => {\n            this.refreshTokenPromises.delete(refreshToken);\n            throw e;\n        });\n        this.refreshTokenPromises.set(refreshToken, p);\n        return p;\n    }\n    async refreshTokenNoCache(refreshToken) {\n        if (!refreshToken) {\n            throw new Error('No refresh token is set.');\n        }\n        const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n        const data = {\n            refresh_token: refreshToken,\n            client_id: this._clientId,\n            client_secret: this._clientSecret,\n            grant_type: 'refresh_token',\n        };\n        // request for new token\n        const res = await this.transporter.request({\n            method: 'POST',\n            url,\n            data: querystring.stringify(data),\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        });\n        const tokens = res.data;\n        // TODO: de-duplicate this code from a few spots\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res };\n    }\n    refreshAccessToken(callback) {\n        if (callback) {\n            this.refreshAccessTokenAsync().then(r => callback(null, r.credentials, r.res), callback);\n        }\n        else {\n            return this.refreshAccessTokenAsync();\n        }\n    }\n    async refreshAccessTokenAsync() {\n        const r = await this.refreshToken(this.credentials.refresh_token);\n        const tokens = r.tokens;\n        tokens.refresh_token = this.credentials.refresh_token;\n        this.credentials = tokens;\n        return { credentials: this.credentials, res: r.res };\n    }\n    getAccessToken(callback) {\n        if (callback) {\n            this.getAccessTokenAsync().then(r => callback(null, r.token, r.res), callback);\n        }\n        else {\n            return this.getAccessTokenAsync();\n        }\n    }\n    async getAccessTokenAsync() {\n        const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();\n        if (shouldRefresh) {\n            if (!this.credentials.refresh_token) {\n                if (this.refreshHandler) {\n                    const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n                    if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                        this.setCredentials(refreshedAccessToken);\n                        return { token: this.credentials.access_token };\n                    }\n                }\n                else {\n                    throw new Error('No refresh token or refresh handler callback is set.');\n                }\n            }\n            const r = await this.refreshAccessTokenAsync();\n            if (!r.credentials || (r.credentials && !r.credentials.access_token)) {\n                throw new Error('Could not refresh access token.');\n            }\n            return { token: r.credentials.access_token, res: r.res };\n        }\n        else {\n            return { token: this.credentials.access_token };\n        }\n    }\n    /**\n     * The main authentication interface.  It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * In OAuth2Client, the result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     * @param url The optional url being authorized\n     */\n    async getRequestHeaders(url) {\n        const headers = (await this.getRequestMetadataAsync(url)).headers;\n        return headers;\n    }\n    async getRequestMetadataAsync(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    url) {\n        const thisCreds = this.credentials;\n        if (!thisCreds.access_token &&\n            !thisCreds.refresh_token &&\n            !this.apiKey &&\n            !this.refreshHandler) {\n            throw new Error('No access, refresh token, API key or refresh handler callback is set.');\n        }\n        if (thisCreds.access_token && !this.isTokenExpiring()) {\n            thisCreds.token_type = thisCreds.token_type || 'Bearer';\n            const headers = {\n                Authorization: thisCreds.token_type + ' ' + thisCreds.access_token,\n            };\n            return { headers: this.addSharedMetadataHeaders(headers) };\n        }\n        // If refreshHandler exists, call processAndValidateRefreshHandler().\n        if (this.refreshHandler) {\n            const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n            if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                this.setCredentials(refreshedAccessToken);\n                const headers = {\n                    Authorization: 'Bearer ' + this.credentials.access_token,\n                };\n                return { headers: this.addSharedMetadataHeaders(headers) };\n            }\n        }\n        if (this.apiKey) {\n            return { headers: { 'X-Goog-Api-Key': this.apiKey } };\n        }\n        let r = null;\n        let tokens = null;\n        try {\n            r = await this.refreshToken(thisCreds.refresh_token);\n            tokens = r.tokens;\n        }\n        catch (err) {\n            const e = err;\n            if (e.response &&\n                (e.response.status === 403 || e.response.status === 404)) {\n                e.message = `Could not refresh access token: ${e.message}`;\n            }\n            throw e;\n        }\n        const credentials = this.credentials;\n        credentials.token_type = credentials.token_type || 'Bearer';\n        tokens.refresh_token = credentials.refresh_token;\n        this.credentials = tokens;\n        const headers = {\n            Authorization: credentials.token_type + ' ' + tokens.access_token,\n        };\n        return { headers: this.addSharedMetadataHeaders(headers), res: r.res };\n    }\n    /**\n     * Generates an URL to revoke the given token.\n     * @param token The existing token to be revoked.\n     */\n    static getRevokeTokenUrl(token) {\n        const parameters = querystring.stringify({ token });\n        return `${OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_}?${parameters}`;\n    }\n    revokeToken(token, callback) {\n        const opts = {\n            url: OAuth2Client.getRevokeTokenUrl(token),\n            method: 'POST',\n        };\n        if (callback) {\n            this.transporter\n                .request(opts)\n                .then(r => callback(null, r), callback);\n        }\n        else {\n            return this.transporter.request(opts);\n        }\n    }\n    revokeCredentials(callback) {\n        if (callback) {\n            this.revokeCredentialsAsync().then(res => callback(null, res), callback);\n        }\n        else {\n            return this.revokeCredentialsAsync();\n        }\n    }\n    async revokeCredentialsAsync() {\n        const token = this.credentials.access_token;\n        this.credentials = {};\n        if (token) {\n            return this.revokeToken(token);\n        }\n        else {\n            throw new Error('No access token to revoke.');\n        }\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    async requestAsync(opts, retry = false) {\n        let r2;\n        try {\n            const r = await this.getRequestMetadataAsync(opts.url);\n            opts.headers = opts.headers || {};\n            if (r.headers && r.headers['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] = r.headers['x-goog-user-project'];\n            }\n            if (r.headers && r.headers.Authorization) {\n                opts.headers.Authorization = r.headers.Authorization;\n            }\n            if (this.apiKey) {\n                opts.headers['X-Goog-Api-Key'] = this.apiKey;\n            }\n            r2 = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - An access_token and refresh_token were available, but either no\n                //   expiry_date was available or the forceRefreshOnFailure flag is set.\n                //   The absent expiry_date case can happen when developers stash the\n                //   access_token and refresh_token for later use, but the access_token\n                //   fails on the first try because it's expired. Some developers may\n                //   choose to enable forceRefreshOnFailure to mitigate time-related\n                //   errors.\n                // Or the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - No refresh_token was available\n                // - An access_token and a refreshHandler callback were available, but\n                //   either no expiry_date was available or the forceRefreshOnFailure\n                //   flag is set. The access_token fails on the first try because it's\n                //   expired. Some developers may choose to enable forceRefreshOnFailure\n                //   to mitigate time-related errors.\n                const mayRequireRefresh = this.credentials &&\n                    this.credentials.access_token &&\n                    this.credentials.refresh_token &&\n                    (!this.credentials.expiry_date || this.forceRefreshOnFailure);\n                const mayRequireRefreshWithNoRefreshToken = this.credentials &&\n                    this.credentials.access_token &&\n                    !this.credentials.refresh_token &&\n                    (!this.credentials.expiry_date || this.forceRefreshOnFailure) &&\n                    this.refreshHandler;\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!retry && isAuthErr && !isReadableStream && mayRequireRefresh) {\n                    await this.refreshAccessTokenAsync();\n                    return this.requestAsync(opts, true);\n                }\n                else if (!retry &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    mayRequireRefreshWithNoRefreshToken) {\n                    const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n                    if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                        this.setCredentials(refreshedAccessToken);\n                    }\n                    return this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return r2;\n    }\n    verifyIdToken(options, callback) {\n        // This function used to accept two arguments instead of an options object.\n        // Check the types to help users upgrade with less pain.\n        // This check can be removed after a 2.0 release.\n        if (callback && typeof callback !== 'function') {\n            throw new Error('This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.');\n        }\n        if (callback) {\n            this.verifyIdTokenAsync(options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.verifyIdTokenAsync(options);\n        }\n    }\n    async verifyIdTokenAsync(options) {\n        if (!options.idToken) {\n            throw new Error('The verifyIdToken method requires an ID Token');\n        }\n        const response = await this.getFederatedSignonCertsAsync();\n        const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, OAuth2Client.ISSUERS_, options.maxExpiry);\n        return login;\n    }\n    /**\n     * Obtains information about the provisioned access token.  Especially useful\n     * if you want to check the scopes that were provisioned to a given token.\n     *\n     * @param accessToken Required.  The Access Token for which you want to get\n     * user info.\n     */\n    async getTokenInfo(accessToken) {\n        const { data } = await this.transporter.request({\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                Authorization: `Bearer ${accessToken}`,\n            },\n            url: OAuth2Client.GOOGLE_TOKEN_INFO_URL,\n        });\n        const info = Object.assign({\n            expiry_date: new Date().getTime() + data.expires_in * 1000,\n            scopes: data.scope.split(' '),\n        }, data);\n        delete info.expires_in;\n        delete info.scope;\n        return info;\n    }\n    getFederatedSignonCerts(callback) {\n        if (callback) {\n            this.getFederatedSignonCertsAsync().then(r => callback(null, r.certs, r.res), callback);\n        }\n        else {\n            return this.getFederatedSignonCertsAsync();\n        }\n    }\n    async getFederatedSignonCertsAsync() {\n        const nowTime = new Date().getTime();\n        const format = crypto_1.hasBrowserCrypto()\n            ? CertificateFormat.JWK\n            : CertificateFormat.PEM;\n        if (this.certificateExpiry &&\n            nowTime < this.certificateExpiry.getTime() &&\n            this.certificateCacheFormat === format) {\n            return { certs: this.certificateCache, format };\n        }\n        let res;\n        let url;\n        switch (format) {\n            case CertificateFormat.PEM:\n                url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_;\n                break;\n            case CertificateFormat.JWK:\n                url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_;\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        try {\n            res = await this.transporter.request({ url });\n        }\n        catch (e) {\n            e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            throw e;\n        }\n        const cacheControl = res ? res.headers['cache-control'] : undefined;\n        let cacheAge = -1;\n        if (cacheControl) {\n            const pattern = new RegExp('max-age=([0-9]*)');\n            const regexResult = pattern.exec(cacheControl);\n            if (regexResult && regexResult.length === 2) {\n                // Cache results with max-age (in seconds)\n                cacheAge = Number(regexResult[1]) * 1000; // milliseconds\n            }\n        }\n        let certificates = {};\n        switch (format) {\n            case CertificateFormat.PEM:\n                certificates = res.data;\n                break;\n            case CertificateFormat.JWK:\n                for (const key of res.data.keys) {\n                    certificates[key.kid] = key;\n                }\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        const now = new Date();\n        this.certificateExpiry =\n            cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);\n        this.certificateCache = certificates;\n        this.certificateCacheFormat = format;\n        return { certs: certificates, format, res };\n    }\n    getIapPublicKeys(callback) {\n        if (callback) {\n            this.getIapPublicKeysAsync().then(r => callback(null, r.pubkeys, r.res), callback);\n        }\n        else {\n            return this.getIapPublicKeysAsync();\n        }\n    }\n    async getIapPublicKeysAsync() {\n        let res;\n        const url = OAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_;\n        try {\n            res = await this.transporter.request({ url });\n        }\n        catch (e) {\n            e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            throw e;\n        }\n        return { pubkeys: res.data, res };\n    }\n    verifySignedJwtWithCerts() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error('verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.');\n    }\n    /**\n     * Verify the id token is signed with the correct certificate\n     * and is from the correct audience.\n     * @param jwt The jwt to verify (The ID Token in this case).\n     * @param certs The array of certs to test the jwt against.\n     * @param requiredAudience The audience to test the jwt against.\n     * @param issuers The allowed issuers of the jwt (Optional).\n     * @param maxExpiry The max expiry the certificate can be (Optional).\n     * @return Returns a promise resolving to LoginTicket on verification.\n     */\n    async verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {\n        const crypto = crypto_1.createCrypto();\n        if (!maxExpiry) {\n            maxExpiry = OAuth2Client.MAX_TOKEN_LIFETIME_SECS_;\n        }\n        const segments = jwt.split('.');\n        if (segments.length !== 3) {\n            throw new Error('Wrong number of segments in token: ' + jwt);\n        }\n        const signed = segments[0] + '.' + segments[1];\n        let signature = segments[2];\n        let envelope;\n        let payload;\n        try {\n            envelope = JSON.parse(crypto.decodeBase64StringUtf8(segments[0]));\n        }\n        catch (err) {\n            err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;\n            throw err;\n        }\n        if (!envelope) {\n            throw new Error(\"Can't parse token envelope: \" + segments[0]);\n        }\n        try {\n            payload = JSON.parse(crypto.decodeBase64StringUtf8(segments[1]));\n        }\n        catch (err) {\n            err.message = `Can't parse token payload '${segments[0]}`;\n            throw err;\n        }\n        if (!payload) {\n            throw new Error(\"Can't parse token payload: \" + segments[1]);\n        }\n        if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {\n            // If this is not present, then there's no reason to attempt verification\n            throw new Error('No pem found for envelope: ' + JSON.stringify(envelope));\n        }\n        const cert = certs[envelope.kid];\n        if (envelope.alg === 'ES256') {\n            signature = formatEcdsa.joseToDer(signature, 'ES256').toString('base64');\n        }\n        const verified = await crypto.verify(cert, signed, signature);\n        if (!verified) {\n            throw new Error('Invalid token signature: ' + jwt);\n        }\n        if (!payload.iat) {\n            throw new Error('No issue time in token: ' + JSON.stringify(payload));\n        }\n        if (!payload.exp) {\n            throw new Error('No expiration time in token: ' + JSON.stringify(payload));\n        }\n        const iat = Number(payload.iat);\n        if (isNaN(iat))\n            throw new Error('iat field using invalid format');\n        const exp = Number(payload.exp);\n        if (isNaN(exp))\n            throw new Error('exp field using invalid format');\n        const now = new Date().getTime() / 1000;\n        if (exp >= now + maxExpiry) {\n            throw new Error('Expiration time too far in future: ' + JSON.stringify(payload));\n        }\n        const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;\n        const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;\n        if (now < earliest) {\n            throw new Error('Token used too early, ' +\n                now +\n                ' < ' +\n                earliest +\n                ': ' +\n                JSON.stringify(payload));\n        }\n        if (now > latest) {\n            throw new Error('Token used too late, ' +\n                now +\n                ' > ' +\n                latest +\n                ': ' +\n                JSON.stringify(payload));\n        }\n        if (issuers && issuers.indexOf(payload.iss) < 0) {\n            throw new Error('Invalid issuer, expected one of [' +\n                issuers +\n                '], but got ' +\n                payload.iss);\n        }\n        // Check the audience matches if we have one\n        if (typeof requiredAudience !== 'undefined' && requiredAudience !== null) {\n            const aud = payload.aud;\n            let audVerified = false;\n            // If the requiredAudience is an array, check if it contains token\n            // audience\n            if (requiredAudience.constructor === Array) {\n                audVerified = requiredAudience.indexOf(aud) > -1;\n            }\n            else {\n                audVerified = aud === requiredAudience;\n            }\n            if (!audVerified) {\n                throw new Error('Wrong recipient, payload audience != requiredAudience');\n            }\n        }\n        return new loginticket_1.LoginTicket(envelope, payload);\n    }\n    /**\n     * Returns a promise that resolves with AccessTokenResponse type if\n     * refreshHandler is defined.\n     * If not, nothing is returned.\n     */\n    async processAndValidateRefreshHandler() {\n        if (this.refreshHandler) {\n            const accessTokenResponse = await this.refreshHandler();\n            if (!accessTokenResponse.access_token) {\n                throw new Error('No access token is returned by the refreshHandler callback.');\n            }\n            return accessTokenResponse;\n        }\n        return;\n    }\n    /**\n     * Returns true if a token is expired or will expire within\n     * eagerRefreshThresholdMillismilliseconds.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     */\n    isTokenExpiring() {\n        const expiryDate = this.credentials.expiry_date;\n        return expiryDate\n            ? expiryDate <= new Date().getTime() + this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.OAuth2Client = OAuth2Client;\nOAuth2Client.GOOGLE_TOKEN_INFO_URL = 'https://oauth2.googleapis.com/tokeninfo';\n/**\n * The base URL for auth endpoints.\n */\nOAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_ = 'https://accounts.google.com/o/oauth2/v2/auth';\n/**\n * The base endpoint for token retrieval.\n */\nOAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_ = 'https://oauth2.googleapis.com/token';\n/**\n * The base endpoint to revoke tokens.\n */\nOAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_ = 'https://oauth2.googleapis.com/revoke';\n/**\n * Google Sign on certificates in PEM format.\n */\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v1/certs';\n/**\n * Google Sign on certificates in JWK format.\n */\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v3/certs';\n/**\n * Google Sign on certificates in JWK format.\n */\nOAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_ = 'https://www.gstatic.com/iap/verify/public_key';\n/**\n * Clock skew - five minutes in seconds\n */\nOAuth2Client.CLOCK_SKEW_SECS_ = 300;\n/**\n * Max Token Lifetime is one day in seconds\n */\nOAuth2Client.MAX_TOKEN_LIFETIME_SECS_ = 86400;\n/**\n * The allowed oauth token issuers.\n */\nOAuth2Client.ISSUERS_ = [\n    'accounts.google.com',\n    'https://accounts.google.com',\n];\n//# sourceMappingURL=oauth2client.js.map"]},"metadata":{},"sourceType":"script"}