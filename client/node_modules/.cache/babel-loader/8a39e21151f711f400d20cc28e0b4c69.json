{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nimport { isEqualYYYYMM, divideDate } from \"../../tools/time\";\nlet befDate;\nexport const useDateInfo = (user, date) => {\n  _s();\n\n  const [dateInfo, setDateInfo] = useState();\n  const [isDateInfoLoad, setLoad] = useState(true);\n\n  const getUserInfo = async () => {\n    try {\n      setLoad(true);\n      const data = await APIv2.workList().getAll();\n      if (!(data === null || data === void 0 ? void 0 : data.data)) throw new Error(\"Cannot found Your Work List\");\n      setDateInfo(data === null || data === void 0 ? void 0 : data.data);\n      setLoad(false);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"BEF: \", befDate, \"CURR: \", date);\n    if (befDate && isEqualYYYYMM(befDate, date) && user) getUserInfo();\n    befDate = date;\n  }, [user, date]);\n  return [dateInfo, isDateInfoLoad];\n};\n\n_s(useDateInfo, \"iCcFurWZIPiNdVpHKKvf9nJ3WSQ=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/calendar/useDateInfo.js"],"names":["useEffect","useState","API","APIv2","isEqualYYYYMM","divideDate","befDate","useDateInfo","user","date","dateInfo","setDateInfo","isDateInfoLoad","setLoad","getUserInfo","data","workList","getAll","Error","error","alert","console","log"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,iBAA3B;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,kBAA1C;AACA,IAAIC,OAAJ;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAAA;;AACzC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,EAAxC;AACA,QAAM,CAACW,cAAD,EAAiBC,OAAjB,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C;;AAEA,QAAMa,WAAW,GAAG,YAAY;AAC9B,QAAI;AACFD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACA,YAAME,IAAI,GAAG,MAAMZ,KAAK,CAACa,QAAN,GAAiBC,MAAjB,EAAnB;AACA,UAAI,EAACF,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAJ,EAAiB,MAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;AACjBP,MAAAA,WAAW,CAACI,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAX;AACAF,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAND,CAME,OAAOM,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,GAVD;;AAWAnB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBhB,OAArB,EAA8B,QAA9B,EAAwCG,IAAxC;AACA,QAAIH,OAAO,IAAIF,aAAa,CAACE,OAAD,EAAUG,IAAV,CAAxB,IAA2CD,IAA/C,EAAqDM,WAAW;AAChER,IAAAA,OAAO,GAAGG,IAAV;AACD,GAJQ,EAIN,CAACD,IAAD,EAAOC,IAAP,CAJM,CAAT;AAKA,SAAO,CAACC,QAAD,EAAWE,cAAX,CAAP;AACD,CArBM;;GAAML,W","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nimport { isEqualYYYYMM, divideDate } from \"../../tools/time\";\nlet befDate;\n\nexport const useDateInfo = (user, date) => {\n  const [dateInfo, setDateInfo] = useState();\n  const [isDateInfoLoad, setLoad] = useState(true);\n\n  const getUserInfo = async () => {\n    try {\n      setLoad(true);\n      const data = await APIv2.workList().getAll();\n      if (!data?.data) throw new Error(\"Cannot found Your Work List\");\n      setDateInfo(data?.data);\n      setLoad(false);\n    } catch (error) {\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    console.log(\"BEF: \", befDate, \"CURR: \", date);\n    if (befDate && isEqualYYYYMM(befDate, date) && user) getUserInfo();\n    befDate = date;\n  }, [user, date]);\n  return [dateInfo, isDateInfoLoad];\n};\n"]},"metadata":{},"sourceType":"module"}