{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js\",\n    _s = $RefreshSig$();\n\nimport Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, getToday, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport axios from \"axios\";\nimport { useDateInfo } from \"../../hooks/calendar/useDateInfo\";\nimport { LoadingElement } from \"../Loading\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CalendarTemplate = ({\n  user,\n  updateDateHook\n}) => {\n  _s();\n\n  const [date, onUpdateDate] = updateDateHook;\n  const [mark, getUserInfo] = useDateInfo(user, date); // console.log(\"DATE INFO: \", dateInfo);\n  // const mark = dateInfo[0];\n\n  console.log(\"[Calendar]\"); // return isDateInfoLoad ? (\n  //   <article>\n  //     {\" \"}\n  //     <LoadingElement text={\"Calendar Loading\"} />\n  //   </article>\n  // ) :\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-template\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"calendar-header\",\n      children: \"Check your calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      className: \"caldendar\" // onChange={(value) => {\n      //   console.log(\"CHANGE EVENT\", value);\n      //   onUpdateDate(value);\n      //   console.log(\"value:\", value);\n      //   // onUpdateDate(value);\n      // }}\n      ,\n      value: new Date(date),\n      locale: \"en\",\n      calendarType: \"US\" // onClickDay={(date, event) => {\n      //   console.log(\"CLICK EVENT\", date);\n      // }}\n      ,\n      onActiveStartDateChange: ({\n        activeStartDate,\n        value,\n        view\n      }) => {\n        console.log(\"Changed view to: \", activeStartDate, value, view); // setActiveDate(changeFormatYYYYMMDD(activeStartDate));\n\n        getUserInfo(changeFormatYYYYMMDD(activeStartDate));\n      },\n      tileClassName: ({\n        date,\n        view\n      }) => {\n        if (mark && mark.find(markedDate => markedDate === changeFormatYYYYMMDD(date))) return \"highlight\";\n      } //DB에 있는 날짜는 체크표시 해야함.\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CalendarTemplate, \"C1Rgp92GABjDmHXCUszC1O/Bjmg=\", false, function () {\n  return [useDateInfo];\n});\n\n_c = CalendarTemplate;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarTemplate\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js"],"names":["Calendar","changeFormatYYYYMMDD","getToday","UTCtoKTC","axios","useDateInfo","LoadingElement","LocalStroage","CalendarTemplate","user","updateDateHook","date","onUpdateDate","mark","getUserInfo","console","log","Date","activeStartDate","value","view","find","markedDate"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,SAASC,oBAAT,EAA+BC,QAA/B,EAAyCC,QAAzC,QAAyD,kBAAzD;AACA,OAAO,wBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,kCAA5B;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA8B;AAAA;;AAC5D,QAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBF,cAA7B;AACA,QAAM,CAACG,IAAD,EAAOC,WAAP,IAAsBT,WAAW,CAACI,IAAD,EAAOE,IAAP,CAAvC,CAF4D,CAG5D;AACA;;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAL4D,CAM5D;AACA;AACA;AACA;AACA;AACA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,QAAD;AACE,MAAA,SAAS,EAAC,WADZ,CAEE;AACA;AACA;AACA;AACA;AACA;AAPF;AAQE,MAAA,KAAK,EAAE,IAAIC,IAAJ,CAASN,IAAT,CART;AASE,MAAA,MAAM,EAAE,IATV;AAUE,MAAA,YAAY,EAAE,IAVhB,CAWE;AACA;AACA;AAbF;AAcE,MAAA,uBAAuB,EAAE,CAAC;AAAEO,QAAAA,eAAF;AAAmBC,QAAAA,KAAnB;AAA0BC,QAAAA;AAA1B,OAAD,KAAsC;AAC7DL,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCE,eAAjC,EAAkDC,KAAlD,EAAyDC,IAAzD,EAD6D,CAG7D;;AACAN,QAAAA,WAAW,CAACb,oBAAoB,CAACiB,eAAD,CAArB,CAAX;AACD,OAnBH;AAoBE,MAAA,aAAa,EAAE,CAAC;AAAEP,QAAAA,IAAF;AAAQS,QAAAA;AAAR,OAAD,KAAoB;AACjC,YACEP,IAAI,IACJA,IAAI,CAACQ,IAAL,CAAWC,UAAD,IAAgBA,UAAU,KAAKrB,oBAAoB,CAACU,IAAD,CAA7D,CAFF,EAIE,OAAO,WAAP;AACH,OA1BH,CA2BE;;AA3BF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD,CA9CM;;GAAMH,gB;UAEiBH,W;;;KAFjBG,gB","sourcesContent":["import Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, getToday, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport axios from \"axios\";\nimport { useDateInfo } from \"../../hooks/calendar/useDateInfo\";\nimport { LoadingElement } from \"../Loading\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nexport const CalendarTemplate = ({ user, updateDateHook }) => {\n  const [date, onUpdateDate] = updateDateHook;\n  const [mark, getUserInfo] = useDateInfo(user, date);\n  // console.log(\"DATE INFO: \", dateInfo);\n  // const mark = dateInfo[0];\n  console.log(\"[Calendar]\");\n  // return isDateInfoLoad ? (\n  //   <article>\n  //     {\" \"}\n  //     <LoadingElement text={\"Calendar Loading\"} />\n  //   </article>\n  // ) :\n  return (\n    <div className=\"calendar-template\">\n      <h1 className=\"calendar-header\">Check your calendar</h1>\n      <Calendar\n        className=\"caldendar\"\n        // onChange={(value) => {\n        //   console.log(\"CHANGE EVENT\", value);\n        //   onUpdateDate(value);\n        //   console.log(\"value:\", value);\n        //   // onUpdateDate(value);\n        // }}\n        value={new Date(date)}\n        locale={\"en\"}\n        calendarType={\"US\"}\n        // onClickDay={(date, event) => {\n        //   console.log(\"CLICK EVENT\", date);\n        // }}\n        onActiveStartDateChange={({ activeStartDate, value, view }) => {\n          console.log(\"Changed view to: \", activeStartDate, value, view);\n\n          // setActiveDate(changeFormatYYYYMMDD(activeStartDate));\n          getUserInfo(changeFormatYYYYMMDD(activeStartDate));\n        }}\n        tileClassName={({ date, view }) => {\n          if (\n            mark &&\n            mark.find((markedDate) => markedDate === changeFormatYYYYMMDD(date))\n          )\n            return \"highlight\";\n        }}\n        //DB에 있는 날짜는 체크표시 해야함.\n      />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}