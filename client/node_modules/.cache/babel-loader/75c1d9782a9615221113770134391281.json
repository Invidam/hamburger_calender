{"ast":null,"code":"import _slicedToArray from\"/home/invidam/hamburger_calender/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";import{LocalStroage}from\"../../tools/LocalStorage\";import{changeFormatYYYYMMDD,getToday}from\"../../tools/time\";export var useSetDate=function useSetDate(){var today=getToday();var localDateObj;if(!LocalStroage.date().isEmpty())localDateObj=LocalStroage.date().get();var initVal=changeFormatYYYYMMDD(localDateObj&&localDateObj.today===today?new Date(localDateObj.clickedDate):new Date());var _useState=useState(initVal),_useState2=_slicedToArray(_useState,2),date=_useState2[0],setDate=_useState2[1];var onUpdateDate=function onUpdateDate(dateObj){console.log(\"[UPDATE DATE]:\",dateObj,date);var localDateObj={today:getToday(),clickedDate:changeFormatYYYYMMDD(dateObj)};LocalStroage.date().set(localDateObj);setDate(changeFormatYYYYMMDD(dateObj));};return[date,onUpdateDate];};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/src/hooks/date/useSetDate.js"],"names":["useState","LocalStroage","changeFormatYYYYMMDD","getToday","useSetDate","today","localDateObj","date","isEmpty","get","initVal","Date","clickedDate","setDate","onUpdateDate","dateObj","console","log","set"],"mappings":"8JAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,OAASC,YAAT,KAA6B,0BAA7B,CACA,OAASC,oBAAT,CAA+BC,QAA/B,KAA+C,kBAA/C,CAEA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CAC9B,GAAMC,CAAAA,KAAK,CAAGF,QAAQ,EAAtB,CACA,GAAIG,CAAAA,YAAJ,CACA,GAAI,CAACL,YAAY,CAACM,IAAb,GAAoBC,OAApB,EAAL,CAAoCF,YAAY,CAAGL,YAAY,CAACM,IAAb,GAAoBE,GAApB,EAAf,CACpC,GAAMC,CAAAA,OAAO,CAAGR,oBAAoB,CAClCI,YAAY,EAAIA,YAAY,CAACD,KAAb,GAAuBA,KAAvC,CACI,GAAIM,CAAAA,IAAJ,CAASL,YAAY,CAACM,WAAtB,CADJ,CAEI,GAAID,CAAAA,IAAJ,EAH8B,CAApC,CAKA,cAAwBX,QAAQ,CAACU,OAAD,CAAhC,wCAAOH,IAAP,eAAaM,OAAb,eACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,OAAD,CAAa,CAChCC,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAA8BF,OAA9B,CAAuCR,IAAvC,EACA,GAAMD,CAAAA,YAAY,CAAG,CACnBD,KAAK,CAAEF,QAAQ,EADI,CAEnBS,WAAW,CAAEV,oBAAoB,CAACa,OAAD,CAFd,CAArB,CAIAd,YAAY,CAACM,IAAb,GAAoBW,GAApB,CAAwBZ,YAAxB,EACAO,OAAO,CAACX,oBAAoB,CAACa,OAAD,CAArB,CAAP,CACD,CARD,CASA,MAAO,CAACR,IAAD,CAAOO,YAAP,CAAP,CACD,CApBM","sourcesContent":["import { useState } from \"react\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { changeFormatYYYYMMDD, getToday } from \"../../tools/time\";\n\nexport const useSetDate = () => {\n  const today = getToday();\n  let localDateObj;\n  if (!LocalStroage.date().isEmpty()) localDateObj = LocalStroage.date().get();\n  const initVal = changeFormatYYYYMMDD(\n    localDateObj && localDateObj.today === today\n      ? new Date(localDateObj.clickedDate)\n      : new Date()\n  );\n  const [date, setDate] = useState(initVal);\n  const onUpdateDate = (dateObj) => {\n    console.log(\"[UPDATE DATE]:\", dateObj, date);\n    const localDateObj = {\n      today: getToday(),\n      clickedDate: changeFormatYYYYMMDD(dateObj),\n    };\n    LocalStroage.date().set(localDateObj);\n    setDate(changeFormatYYYYMMDD(dateObj));\n  };\n  return [date, onUpdateDate];\n};\n"]},"metadata":{},"sourceType":"module"}