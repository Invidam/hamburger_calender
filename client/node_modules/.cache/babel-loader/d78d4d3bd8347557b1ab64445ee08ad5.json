{"ast":null,"code":"const {\n  EOL\n} = require('os');\n\nconst errors = require('../errors');\n\nconst {\n  keyObjectSupported\n} = require('./runtime_support');\n\nconst {\n  createPublicKey\n} = require('./key_object');\n\nconst base64url = require('./base64url');\n\nconst asn1 = require('./asn1');\n\nconst computePrimes = require('./rsa_primes');\n\nconst {\n  OKP_CURVES,\n  EC_CURVES\n} = require('../registry');\n\nconst formatPem = (base64pem, descriptor) => `-----BEGIN ${descriptor} KEY-----${EOL}${(base64pem.match(/.{1,64}/g) || []).join(EOL)}${EOL}-----END ${descriptor} KEY-----`;\n\nconst okpToJWK = {\n  private(crv, keyObject) {\n    const der = keyObject.export({\n      type: 'pkcs8',\n      format: 'der'\n    });\n    const OneAsymmetricKey = asn1.get('OneAsymmetricKey');\n    const {\n      privateKey: {\n        privateKey: d\n      }\n    } = OneAsymmetricKey.decode(der);\n    return { ...okpToJWK.public(crv, createPublicKey(keyObject)),\n      d: base64url.encodeBuffer(d)\n    };\n  },\n\n  public(crv, keyObject) {\n    const der = keyObject.export({\n      type: 'spki',\n      format: 'der'\n    });\n    const PublicKeyInfo = asn1.get('PublicKeyInfo');\n    const {\n      publicKey: {\n        data: x\n      }\n    } = PublicKeyInfo.decode(der);\n    return {\n      kty: 'OKP',\n      crv,\n      x: base64url.encodeBuffer(x)\n    };\n  }\n\n};\nconst keyObjectToJWK = {\n  rsa: {\n    private(keyObject) {\n      const der = keyObject.export({\n        type: 'pkcs8',\n        format: 'der'\n      });\n      const PrivateKeyInfo = asn1.get('PrivateKeyInfo');\n      const RSAPrivateKey = asn1.get('RSAPrivateKey');\n      const {\n        privateKey\n      } = PrivateKeyInfo.decode(der);\n      const {\n        version,\n        n,\n        e,\n        d,\n        p,\n        q,\n        dp,\n        dq,\n        qi\n      } = RSAPrivateKey.decode(privateKey);\n\n      if (version !== 'two-prime') {\n        throw new errors.JOSENotSupported('Private RSA keys with more than two primes are not supported');\n      }\n\n      return {\n        kty: 'RSA',\n        n: base64url.encodeBigInt(n),\n        e: base64url.encodeBigInt(e),\n        d: base64url.encodeBigInt(d),\n        p: base64url.encodeBigInt(p),\n        q: base64url.encodeBigInt(q),\n        dp: base64url.encodeBigInt(dp),\n        dq: base64url.encodeBigInt(dq),\n        qi: base64url.encodeBigInt(qi)\n      };\n    },\n\n    public(keyObject) {\n      const der = keyObject.export({\n        type: 'spki',\n        format: 'der'\n      });\n      const PublicKeyInfo = asn1.get('PublicKeyInfo');\n      const RSAPublicKey = asn1.get('RSAPublicKey');\n      const {\n        publicKey: {\n          data: publicKey\n        }\n      } = PublicKeyInfo.decode(der);\n      const {\n        n,\n        e\n      } = RSAPublicKey.decode(publicKey);\n      return {\n        kty: 'RSA',\n        n: base64url.encodeBigInt(n),\n        e: base64url.encodeBigInt(e)\n      };\n    }\n\n  },\n  ec: {\n    private(keyObject) {\n      const der = keyObject.export({\n        type: 'pkcs8',\n        format: 'der'\n      });\n      const PrivateKeyInfo = asn1.get('PrivateKeyInfo');\n      const ECPrivateKey = asn1.get('ECPrivateKey');\n      const {\n        privateKey,\n        algorithm: {\n          parameters: {\n            value: crv\n          }\n        }\n      } = PrivateKeyInfo.decode(der);\n      const {\n        privateKey: d,\n        publicKey\n      } = ECPrivateKey.decode(privateKey);\n\n      if (typeof publicKey === 'undefined') {\n        if (keyObjectSupported) {\n          return { ...keyObjectToJWK.ec.public(createPublicKey(keyObject)),\n            d: base64url.encodeBuffer(d)\n          };\n        }\n\n        throw new errors.JOSENotSupported('Private EC keys without the public key embedded are not supported in your Node.js runtime version');\n      }\n\n      const x = publicKey.data.slice(1, (publicKey.data.length - 1) / 2 + 1);\n      const y = publicKey.data.slice((publicKey.data.length - 1) / 2 + 1);\n      return {\n        kty: 'EC',\n        crv,\n        d: base64url.encodeBuffer(d),\n        x: base64url.encodeBuffer(x),\n        y: base64url.encodeBuffer(y)\n      };\n    },\n\n    public(keyObject) {\n      const der = keyObject.export({\n        type: 'spki',\n        format: 'der'\n      });\n      const PublicKeyInfo = asn1.get('PublicKeyInfo');\n      const {\n        publicKey: {\n          data: publicKey\n        },\n        algorithm: {\n          parameters: {\n            value: crv\n          }\n        }\n      } = PublicKeyInfo.decode(der);\n      const x = publicKey.slice(1, (publicKey.length - 1) / 2 + 1);\n      const y = publicKey.slice((publicKey.length - 1) / 2 + 1);\n      return {\n        kty: 'EC',\n        crv,\n        x: base64url.encodeBuffer(x),\n        y: base64url.encodeBuffer(y)\n      };\n    }\n\n  },\n  ed25519: {\n    private(keyObject) {\n      return okpToJWK.private('Ed25519', keyObject);\n    },\n\n    public(keyObject) {\n      return okpToJWK.public('Ed25519', keyObject);\n    }\n\n  },\n  ed448: {\n    private(keyObject) {\n      return okpToJWK.private('Ed448', keyObject);\n    },\n\n    public(keyObject) {\n      return okpToJWK.public('Ed448', keyObject);\n    }\n\n  },\n  x25519: {\n    private(keyObject) {\n      return okpToJWK.private('X25519', keyObject);\n    },\n\n    public(keyObject) {\n      return okpToJWK.public('X25519', keyObject);\n    }\n\n  },\n  x448: {\n    private(keyObject) {\n      return okpToJWK.private('X448', keyObject);\n    },\n\n    public(keyObject) {\n      return okpToJWK.public('X448', keyObject);\n    }\n\n  }\n};\n\nmodule.exports.keyObjectToJWK = keyObject => {\n  if (keyObject.type === 'private') {\n    return keyObjectToJWK[keyObject.asymmetricKeyType].private(keyObject);\n  }\n\n  return keyObjectToJWK[keyObject.asymmetricKeyType].public(keyObject);\n};\n\nconst concatEcPublicKey = (x, y) => ({\n  unused: 0,\n  data: Buffer.concat([Buffer.alloc(1, 4), base64url.decodeToBuffer(x), base64url.decodeToBuffer(y)])\n});\n\nconst jwkToPem = {\n  RSA: {\n    private(jwk, {\n      calculateMissingRSAPrimes\n    }) {\n      const RSAPrivateKey = asn1.get('RSAPrivateKey');\n\n      if ('oth' in jwk) {\n        throw new errors.JOSENotSupported('Private RSA keys with more than two primes are not supported');\n      }\n\n      if (jwk.p || jwk.q || jwk.dp || jwk.dq || jwk.qi) {\n        if (!(jwk.p && jwk.q && jwk.dp && jwk.dq && jwk.qi)) {\n          throw new errors.JWKInvalid('all other private key parameters must be present when any one of them is present');\n        }\n      } else if (calculateMissingRSAPrimes) {\n        jwk = computePrimes(jwk);\n      } else if (!calculateMissingRSAPrimes) {\n        throw new errors.JOSENotSupported('importing private RSA keys without all other private key parameters is not enabled, see documentation and its advisory on how and when its ok to enable it');\n      }\n\n      return RSAPrivateKey.encode({\n        version: 0,\n        n: BigInt(`0x${base64url.decodeToBuffer(jwk.n).toString('hex')}`),\n        e: BigInt(`0x${base64url.decodeToBuffer(jwk.e).toString('hex')}`),\n        d: BigInt(`0x${base64url.decodeToBuffer(jwk.d).toString('hex')}`),\n        p: BigInt(`0x${base64url.decodeToBuffer(jwk.p).toString('hex')}`),\n        q: BigInt(`0x${base64url.decodeToBuffer(jwk.q).toString('hex')}`),\n        dp: BigInt(`0x${base64url.decodeToBuffer(jwk.dp).toString('hex')}`),\n        dq: BigInt(`0x${base64url.decodeToBuffer(jwk.dq).toString('hex')}`),\n        qi: BigInt(`0x${base64url.decodeToBuffer(jwk.qi).toString('hex')}`)\n      }, 'pem', {\n        label: 'RSA PRIVATE KEY'\n      });\n    },\n\n    public(jwk) {\n      const RSAPublicKey = asn1.get('RSAPublicKey');\n      return RSAPublicKey.encode({\n        version: 0,\n        n: BigInt(`0x${base64url.decodeToBuffer(jwk.n).toString('hex')}`),\n        e: BigInt(`0x${base64url.decodeToBuffer(jwk.e).toString('hex')}`)\n      }, 'pem', {\n        label: 'RSA PUBLIC KEY'\n      });\n    }\n\n  },\n  EC: {\n    private(jwk) {\n      const ECPrivateKey = asn1.get('ECPrivateKey');\n      return ECPrivateKey.encode({\n        version: 1,\n        privateKey: base64url.decodeToBuffer(jwk.d),\n        parameters: {\n          type: 'namedCurve',\n          value: jwk.crv\n        },\n        publicKey: concatEcPublicKey(jwk.x, jwk.y)\n      }, 'pem', {\n        label: 'EC PRIVATE KEY'\n      });\n    },\n\n    public(jwk) {\n      const PublicKeyInfo = asn1.get('PublicKeyInfo');\n      return PublicKeyInfo.encode({\n        algorithm: {\n          algorithm: 'ecPublicKey',\n          parameters: {\n            type: 'namedCurve',\n            value: jwk.crv\n          }\n        },\n        publicKey: concatEcPublicKey(jwk.x, jwk.y)\n      }, 'pem', {\n        label: 'PUBLIC KEY'\n      });\n    }\n\n  },\n  OKP: {\n    private(jwk) {\n      const OneAsymmetricKey = asn1.get('OneAsymmetricKey');\n      const b64 = OneAsymmetricKey.encode({\n        version: 0,\n        privateKey: {\n          privateKey: base64url.decodeToBuffer(jwk.d)\n        },\n        algorithm: {\n          algorithm: jwk.crv\n        }\n      }, 'der'); // TODO: WHYYY? https://github.com/indutny/asn1.js/issues/110\n\n      b64.write('04', 12, 1, 'hex');\n      return formatPem(b64.toString('base64'), 'PRIVATE');\n    },\n\n    public(jwk) {\n      const PublicKeyInfo = asn1.get('PublicKeyInfo');\n      return PublicKeyInfo.encode({\n        algorithm: {\n          algorithm: jwk.crv\n        },\n        publicKey: {\n          unused: 0,\n          data: base64url.decodeToBuffer(jwk.x)\n        }\n      }, 'pem', {\n        label: 'PUBLIC KEY'\n      });\n    }\n\n  }\n};\n\nmodule.exports.jwkToPem = (jwk, {\n  calculateMissingRSAPrimes = false\n} = {}) => {\n  switch (jwk.kty) {\n    case 'EC':\n      if (!EC_CURVES.has(jwk.crv)) {\n        throw new errors.JOSENotSupported(`unsupported EC key curve: ${jwk.crv}`);\n      }\n\n      break;\n\n    case 'OKP':\n      if (!OKP_CURVES.has(jwk.crv)) {\n        throw new errors.JOSENotSupported(`unsupported OKP key curve: ${jwk.crv}`);\n      }\n\n      break;\n\n    case 'RSA':\n      break;\n\n    default:\n      throw new errors.JOSENotSupported(`unsupported key type: ${jwk.kty}`);\n  }\n\n  if (jwk.d) {\n    return jwkToPem[jwk.kty].private(jwk, {\n      calculateMissingRSAPrimes\n    });\n  }\n\n  return jwkToPem[jwk.kty].public(jwk);\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/help/key_utils.js"],"names":["EOL","require","errors","keyObjectSupported","createPublicKey","base64url","asn1","computePrimes","OKP_CURVES","EC_CURVES","formatPem","base64pem","descriptor","match","join","okpToJWK","private","crv","keyObject","der","export","type","format","OneAsymmetricKey","get","privateKey","d","decode","public","encodeBuffer","PublicKeyInfo","publicKey","data","x","kty","keyObjectToJWK","rsa","PrivateKeyInfo","RSAPrivateKey","version","n","e","p","q","dp","dq","qi","JOSENotSupported","encodeBigInt","RSAPublicKey","ec","ECPrivateKey","algorithm","parameters","value","slice","length","y","ed25519","ed448","x25519","x448","module","exports","asymmetricKeyType","concatEcPublicKey","unused","Buffer","concat","alloc","decodeToBuffer","jwkToPem","RSA","jwk","calculateMissingRSAPrimes","JWKInvalid","encode","BigInt","toString","label","EC","OKP","b64","write","has"],"mappings":"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","sourcesContent":["const { EOL } = require('os')\n\nconst errors = require('../errors')\n\nconst { keyObjectSupported } = require('./runtime_support')\nconst { createPublicKey } = require('./key_object')\nconst base64url = require('./base64url')\nconst asn1 = require('./asn1')\nconst computePrimes = require('./rsa_primes')\nconst { OKP_CURVES, EC_CURVES } = require('../registry')\n\nconst formatPem = (base64pem, descriptor) => `-----BEGIN ${descriptor} KEY-----${EOL}${(base64pem.match(/.{1,64}/g) || []).join(EOL)}${EOL}-----END ${descriptor} KEY-----`\n\nconst okpToJWK = {\n  private (crv, keyObject) {\n    const der = keyObject.export({ type: 'pkcs8', format: 'der' })\n    const OneAsymmetricKey = asn1.get('OneAsymmetricKey')\n    const { privateKey: { privateKey: d } } = OneAsymmetricKey.decode(der)\n\n    return {\n      ...okpToJWK.public(crv, createPublicKey(keyObject)),\n      d: base64url.encodeBuffer(d)\n    }\n  },\n  public (crv, keyObject) {\n    const der = keyObject.export({ type: 'spki', format: 'der' })\n\n    const PublicKeyInfo = asn1.get('PublicKeyInfo')\n\n    const { publicKey: { data: x } } = PublicKeyInfo.decode(der)\n\n    return {\n      kty: 'OKP',\n      crv,\n      x: base64url.encodeBuffer(x)\n    }\n  }\n}\n\nconst keyObjectToJWK = {\n  rsa: {\n    private (keyObject) {\n      const der = keyObject.export({ type: 'pkcs8', format: 'der' })\n\n      const PrivateKeyInfo = asn1.get('PrivateKeyInfo')\n      const RSAPrivateKey = asn1.get('RSAPrivateKey')\n\n      const { privateKey } = PrivateKeyInfo.decode(der)\n      const { version, n, e, d, p, q, dp, dq, qi } = RSAPrivateKey.decode(privateKey)\n\n      if (version !== 'two-prime') {\n        throw new errors.JOSENotSupported('Private RSA keys with more than two primes are not supported')\n      }\n\n      return {\n        kty: 'RSA',\n        n: base64url.encodeBigInt(n),\n        e: base64url.encodeBigInt(e),\n        d: base64url.encodeBigInt(d),\n        p: base64url.encodeBigInt(p),\n        q: base64url.encodeBigInt(q),\n        dp: base64url.encodeBigInt(dp),\n        dq: base64url.encodeBigInt(dq),\n        qi: base64url.encodeBigInt(qi)\n      }\n    },\n    public (keyObject) {\n      const der = keyObject.export({ type: 'spki', format: 'der' })\n\n      const PublicKeyInfo = asn1.get('PublicKeyInfo')\n      const RSAPublicKey = asn1.get('RSAPublicKey')\n\n      const { publicKey: { data: publicKey } } = PublicKeyInfo.decode(der)\n      const { n, e } = RSAPublicKey.decode(publicKey)\n\n      return {\n        kty: 'RSA',\n        n: base64url.encodeBigInt(n),\n        e: base64url.encodeBigInt(e)\n      }\n    }\n  },\n  ec: {\n    private (keyObject) {\n      const der = keyObject.export({ type: 'pkcs8', format: 'der' })\n\n      const PrivateKeyInfo = asn1.get('PrivateKeyInfo')\n      const ECPrivateKey = asn1.get('ECPrivateKey')\n\n      const { privateKey, algorithm: { parameters: { value: crv } } } = PrivateKeyInfo.decode(der)\n      const { privateKey: d, publicKey } = ECPrivateKey.decode(privateKey)\n\n      if (typeof publicKey === 'undefined') {\n        if (keyObjectSupported) {\n          return {\n            ...keyObjectToJWK.ec.public(createPublicKey(keyObject)),\n            d: base64url.encodeBuffer(d)\n          }\n        }\n\n        throw new errors.JOSENotSupported('Private EC keys without the public key embedded are not supported in your Node.js runtime version')\n      }\n\n      const x = publicKey.data.slice(1, ((publicKey.data.length - 1) / 2) + 1)\n      const y = publicKey.data.slice(((publicKey.data.length - 1) / 2) + 1)\n\n      return {\n        kty: 'EC',\n        crv,\n        d: base64url.encodeBuffer(d),\n        x: base64url.encodeBuffer(x),\n        y: base64url.encodeBuffer(y)\n      }\n    },\n    public (keyObject) {\n      const der = keyObject.export({ type: 'spki', format: 'der' })\n\n      const PublicKeyInfo = asn1.get('PublicKeyInfo')\n\n      const { publicKey: { data: publicKey }, algorithm: { parameters: { value: crv } } } = PublicKeyInfo.decode(der)\n\n      const x = publicKey.slice(1, ((publicKey.length - 1) / 2) + 1)\n      const y = publicKey.slice(((publicKey.length - 1) / 2) + 1)\n\n      return {\n        kty: 'EC',\n        crv,\n        x: base64url.encodeBuffer(x),\n        y: base64url.encodeBuffer(y)\n      }\n    }\n  },\n  ed25519: {\n    private (keyObject) {\n      return okpToJWK.private('Ed25519', keyObject)\n    },\n    public (keyObject) {\n      return okpToJWK.public('Ed25519', keyObject)\n    }\n  },\n  ed448: {\n    private (keyObject) {\n      return okpToJWK.private('Ed448', keyObject)\n    },\n    public (keyObject) {\n      return okpToJWK.public('Ed448', keyObject)\n    }\n  },\n  x25519: {\n    private (keyObject) {\n      return okpToJWK.private('X25519', keyObject)\n    },\n    public (keyObject) {\n      return okpToJWK.public('X25519', keyObject)\n    }\n  },\n  x448: {\n    private (keyObject) {\n      return okpToJWK.private('X448', keyObject)\n    },\n    public (keyObject) {\n      return okpToJWK.public('X448', keyObject)\n    }\n  }\n}\n\nmodule.exports.keyObjectToJWK = (keyObject) => {\n  if (keyObject.type === 'private') {\n    return keyObjectToJWK[keyObject.asymmetricKeyType].private(keyObject)\n  }\n\n  return keyObjectToJWK[keyObject.asymmetricKeyType].public(keyObject)\n}\n\nconst concatEcPublicKey = (x, y) => ({\n  unused: 0,\n  data: Buffer.concat([\n    Buffer.alloc(1, 4),\n    base64url.decodeToBuffer(x),\n    base64url.decodeToBuffer(y)\n  ])\n})\n\nconst jwkToPem = {\n  RSA: {\n    private (jwk, { calculateMissingRSAPrimes }) {\n      const RSAPrivateKey = asn1.get('RSAPrivateKey')\n\n      if ('oth' in jwk) {\n        throw new errors.JOSENotSupported('Private RSA keys with more than two primes are not supported')\n      }\n\n      if (jwk.p || jwk.q || jwk.dp || jwk.dq || jwk.qi) {\n        if (!(jwk.p && jwk.q && jwk.dp && jwk.dq && jwk.qi)) {\n          throw new errors.JWKInvalid('all other private key parameters must be present when any one of them is present')\n        }\n      } else if (calculateMissingRSAPrimes) {\n        jwk = computePrimes(jwk)\n      } else if (!calculateMissingRSAPrimes) {\n        throw new errors.JOSENotSupported('importing private RSA keys without all other private key parameters is not enabled, see documentation and its advisory on how and when its ok to enable it')\n      }\n\n      return RSAPrivateKey.encode({\n        version: 0,\n        n: BigInt(`0x${base64url.decodeToBuffer(jwk.n).toString('hex')}`),\n        e: BigInt(`0x${base64url.decodeToBuffer(jwk.e).toString('hex')}`),\n        d: BigInt(`0x${base64url.decodeToBuffer(jwk.d).toString('hex')}`),\n        p: BigInt(`0x${base64url.decodeToBuffer(jwk.p).toString('hex')}`),\n        q: BigInt(`0x${base64url.decodeToBuffer(jwk.q).toString('hex')}`),\n        dp: BigInt(`0x${base64url.decodeToBuffer(jwk.dp).toString('hex')}`),\n        dq: BigInt(`0x${base64url.decodeToBuffer(jwk.dq).toString('hex')}`),\n        qi: BigInt(`0x${base64url.decodeToBuffer(jwk.qi).toString('hex')}`)\n      }, 'pem', { label: 'RSA PRIVATE KEY' })\n    },\n    public (jwk) {\n      const RSAPublicKey = asn1.get('RSAPublicKey')\n\n      return RSAPublicKey.encode({\n        version: 0,\n        n: BigInt(`0x${base64url.decodeToBuffer(jwk.n).toString('hex')}`),\n        e: BigInt(`0x${base64url.decodeToBuffer(jwk.e).toString('hex')}`)\n      }, 'pem', { label: 'RSA PUBLIC KEY' })\n    }\n  },\n  EC: {\n    private (jwk) {\n      const ECPrivateKey = asn1.get('ECPrivateKey')\n\n      return ECPrivateKey.encode({\n        version: 1,\n        privateKey: base64url.decodeToBuffer(jwk.d),\n        parameters: { type: 'namedCurve', value: jwk.crv },\n        publicKey: concatEcPublicKey(jwk.x, jwk.y)\n      }, 'pem', { label: 'EC PRIVATE KEY' })\n    },\n    public (jwk) {\n      const PublicKeyInfo = asn1.get('PublicKeyInfo')\n\n      return PublicKeyInfo.encode({\n        algorithm: {\n          algorithm: 'ecPublicKey',\n          parameters: { type: 'namedCurve', value: jwk.crv }\n        },\n        publicKey: concatEcPublicKey(jwk.x, jwk.y)\n      }, 'pem', { label: 'PUBLIC KEY' })\n    }\n  },\n  OKP: {\n    private (jwk) {\n      const OneAsymmetricKey = asn1.get('OneAsymmetricKey')\n\n      const b64 = OneAsymmetricKey.encode({\n        version: 0,\n        privateKey: { privateKey: base64url.decodeToBuffer(jwk.d) },\n        algorithm: { algorithm: jwk.crv }\n      }, 'der')\n\n      // TODO: WHYYY? https://github.com/indutny/asn1.js/issues/110\n      b64.write('04', 12, 1, 'hex')\n\n      return formatPem(b64.toString('base64'), 'PRIVATE')\n    },\n    public (jwk) {\n      const PublicKeyInfo = asn1.get('PublicKeyInfo')\n\n      return PublicKeyInfo.encode({\n        algorithm: { algorithm: jwk.crv },\n        publicKey: {\n          unused: 0,\n          data: base64url.decodeToBuffer(jwk.x)\n        }\n      }, 'pem', { label: 'PUBLIC KEY' })\n    }\n  }\n}\n\nmodule.exports.jwkToPem = (jwk, { calculateMissingRSAPrimes = false } = {}) => {\n  switch (jwk.kty) {\n    case 'EC':\n      if (!EC_CURVES.has(jwk.crv)) {\n        throw new errors.JOSENotSupported(`unsupported EC key curve: ${jwk.crv}`)\n      }\n      break\n    case 'OKP':\n      if (!OKP_CURVES.has(jwk.crv)) {\n        throw new errors.JOSENotSupported(`unsupported OKP key curve: ${jwk.crv}`)\n      }\n      break\n    case 'RSA':\n      break\n    default:\n      throw new errors.JOSENotSupported(`unsupported key type: ${jwk.kty}`)\n  }\n\n  if (jwk.d) {\n    return jwkToPem[jwk.kty].private(jwk, { calculateMissingRSAPrimes })\n  }\n\n  return jwkToPem[jwk.kty].public(jwk)\n}\n"]},"metadata":{},"sourceType":"script"}