{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Deque } from \"../../classes/Deque\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { getAddedDateStr, getDiffDayInStr } from \"../../tools/time\";\nconst DISPLAY_LENGTH = 5;\n\nconst makeStartDate = date => getAddedDateStr(date, -1 * Math.floor(DISPLAY_LENGTH / 2)); // const makeStartDate = (date) => getAddedDateStr(date, -1 * STARTDATEDIFF);\n\n\nconst getStartDate = date => LocalStroage.startDate().isEmpty() ? makeStartDate(date) : LocalStroage.startDate().get();\n\nlet befStartDate;\nlet listDeque;\nexport const useListView = (user, date, setDate, workList) => {\n  _s();\n\n  console.log(\"LIST VIEW RENDERING\");\n  const [startDate, setStratDate] = useState(getStartDate(date)); // const getEndDate = (startDate) =>\n  //   getAddedDateObj(startDate, STARTDATEDIFF * 2);\n\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState(false);\n\n  const updateStartDate = nextDate => {\n    console.log(\"list change\");\n    LocalStroage.startDate().set(nextDate);\n    setStratDate(nextDate);\n  };\n\n  const onClickLeftBtn = () => {\n    const nextDate = getAddedDateStr(startDate, -1);\n    updateStartDate(nextDate);\n  };\n\n  const onClickRightBtn = () => {\n    const nextDate = getAddedDateStr(startDate, 1);\n    updateStartDate(nextDate);\n  };\n\n  useEffect(() => {\n    updateStartDate(makeStartDate(date));\n  }, [date]);\n\n  const getListView = async (startDate, endDate) => {\n    try {\n      setLoad(true);\n      const data = await APIv2.listView(user, startDate, endDate).get();\n      setLoad(false);\n      if (!(data === null || data === void 0 ? void 0 : data.data)) throw new Error(\"List View cann't found\");\n      console.log(\"[LISTVIEW] GET LIST VIEW:  \", data === null || data === void 0 ? void 0 : data.data);\n      return data.data;\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    const updateListView = async () => {\n      if (user && startDate) {\n        const response = await getListView();\n        listDeque = new Deque(response, DISPLAY_LENGTH);\n        setListView(listDeque.get());\n      }\n    };\n\n    const moveListView = () => {};\n\n    console.log(\"Set list view start\");\n    if (!befStartDate || getDiffDayInStr(befStartDate, startDate) > 2) updateListView(startDate);else moveListView(startDate);\n    getListView();\n    befStartDate = startDate;\n    return () => setLoad(false);\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn\n  };\n};\n\n_s(useListView, \"winhrkvjr+81rjeJ0SI6qLAjsAc=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/listView/useListView.js"],"names":["useEffect","useState","Deque","APIv2","LocalStroage","getAddedDateStr","getDiffDayInStr","DISPLAY_LENGTH","makeStartDate","date","Math","floor","getStartDate","startDate","isEmpty","get","befStartDate","listDeque","useListView","user","setDate","workList","console","log","setStratDate","listView","setListView","isListViewLoading","setLoad","updateStartDate","nextDate","set","onClickLeftBtn","onClickRightBtn","getListView","endDate","data","Error","error","alert","updateListView","response","moveListView"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Deque } from \"../../classes/Deque\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { getAddedDateStr, getDiffDayInStr } from \"../../tools/time\";\nconst DISPLAY_LENGTH = 5;\nconst makeStartDate = (date) =>\n  getAddedDateStr(date, -1 * Math.floor(DISPLAY_LENGTH / 2));\n// const makeStartDate = (date) => getAddedDateStr(date, -1 * STARTDATEDIFF);\nconst getStartDate = (date) =>\n  LocalStroage.startDate().isEmpty()\n    ? makeStartDate(date)\n    : LocalStroage.startDate().get();\n\nlet befStartDate;\nlet listDeque;\nexport const useListView = (user, date, setDate, workList) => {\n  console.log(\"LIST VIEW RENDERING\");\n  const [startDate, setStratDate] = useState(getStartDate(date));\n  // const getEndDate = (startDate) =>\n  //   getAddedDateObj(startDate, STARTDATEDIFF * 2);\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState(false);\n\n  const updateStartDate = (nextDate) => {\n    console.log(\"list change\");\n    LocalStroage.startDate().set(nextDate);\n    setStratDate(nextDate);\n  };\n  const onClickLeftBtn = () => {\n    const nextDate = getAddedDateStr(startDate, -1);\n    updateStartDate(nextDate);\n  };\n  const onClickRightBtn = () => {\n    const nextDate = getAddedDateStr(startDate, 1);\n    updateStartDate(nextDate);\n  };\n\n  useEffect(() => {\n    updateStartDate(makeStartDate(date));\n  }, [date]);\n  const getListView = async (startDate, endDate) => {\n    try {\n      setLoad(true);\n      const data = await APIv2.listView(user, startDate, endDate).get();\n      setLoad(false);\n      if (!data?.data) throw new Error(\"List View cann't found\");\n      console.log(\"[LISTVIEW] GET LIST VIEW:  \", data?.data);\n      return data.data;\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    const updateListView = async () => {\n      if (user && startDate) {\n        const response = await getListView();\n        listDeque = new Deque(response, DISPLAY_LENGTH);\n        setListView(listDeque.get());\n      }\n    };\n    const moveListView = () => {};\n    console.log(\"Set list view start\");\n    if (!befStartDate || getDiffDayInStr(befStartDate, startDate) > 2)\n      updateListView(startDate);\n    else moveListView(startDate);\n    getListView();\n    befStartDate = startDate;\n    return () => setLoad(false);\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}