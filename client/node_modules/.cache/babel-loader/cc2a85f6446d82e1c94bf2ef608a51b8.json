{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { API } from \"../../../tools/axiosSetting\";\nimport { getToday } from \"../../../tools/time\";\n\nconst getEmptyTimeObj = () => {\n  return {\n    hour: -1,\n    minute: -1\n  };\n};\n\nexport const isEmptyTimeObj = timeObj => !timeObj || timeObj.hour === -1 || timeObj.minute === -1;\n\nconst checkTimeObj = timeObj => isEmptyTimeObj(timeObj) ? getEmptyTimeObj() : timeObj;\n\nexport const useUpdateTime = (key, user, date) => {\n  _s();\n\n  const initVal = !user && window.localStorage.getItem(key) ? JSON.parse(window.localStorage.getItem(key)) : null;\n  const [recordTime, setRecordTime] = useState(initVal);\n\n  const getAndUpdateRecordTime = async () => {\n    let resTimeObj;\n\n    if (user) {\n      const data = await API.get(`/api/${user}/${date}/worklist/record-time/${key}`);\n      resTimeObj = checkTimeObj(data === null || data === void 0 ? void 0 : data.data);\n    } else resTimeObj = JSON.parse(window.localStorage.getItem(key));\n\n    setRecordTime(resTimeObj);\n  };\n\n  useEffect(() => {\n    getAndUpdateRecordTime();\n  }, [date, user]);\n\n  const updateRecordTime = timeObj => {\n    timeObj = checkTimeObj(timeObj);\n    if (user) API.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n      value: timeObj\n    });else window.localStorage.setItem(key, JSON.stringify(timeObj));\n    setRecordTime(timeObj);\n  };\n\n  const onClick = event => {\n    event.preventDefault();\n    const [hour, minute] = new Date().toTimeString().split(\":\").slice(0, 2).map(numChar => parseInt(numChar));\n    const timeObj = {\n      hour,\n      minute\n    };\n    updateRecordTime(timeObj);\n  };\n\n  return [recordTime, onClick, updateRecordTime];\n};\n\n_s(useUpdateTime, \"h490kuPbigxM53kww9L99hhwvTY=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/time/useUpdateTime.js"],"names":["axios","useState","useEffect","API","getToday","getEmptyTimeObj","hour","minute","isEmptyTimeObj","timeObj","checkTimeObj","useUpdateTime","key","user","date","initVal","window","localStorage","getItem","JSON","parse","recordTime","setRecordTime","getAndUpdateRecordTime","resTimeObj","data","get","updateRecordTime","post","value","setItem","stringify","onClick","event","preventDefault","Date","toTimeString","split","slice","map","numChar","parseInt"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { API } from \"../../../tools/axiosSetting\";\nimport { getToday } from \"../../../tools/time\";\nconst getEmptyTimeObj = () => {\n  return { hour: -1, minute: -1 };\n};\n\nexport const isEmptyTimeObj = (timeObj) =>\n  !timeObj || timeObj.hour === -1 || timeObj.minute === -1;\n\nconst checkTimeObj = (timeObj) =>\n  isEmptyTimeObj(timeObj) ? getEmptyTimeObj() : timeObj;\n\nexport const useUpdateTime = (key, user, date) => {\n  const initVal =\n    !user && window.localStorage.getItem(key)\n      ? JSON.parse(window.localStorage.getItem(key))\n      : null;\n  const [recordTime, setRecordTime] = useState(initVal);\n\n  const getAndUpdateRecordTime = async () => {\n    let resTimeObj;\n    if (user) {\n      const data = await API.get(\n        `/api/${user}/${date}/worklist/record-time/${key}`\n      );\n      resTimeObj = checkTimeObj(data?.data);\n    } else resTimeObj = JSON.parse(window.localStorage.getItem(key));\n    setRecordTime(resTimeObj);\n  };\n  useEffect(() => {\n    getAndUpdateRecordTime();\n  }, [date, user]);\n\n  const updateRecordTime = (timeObj) => {\n    timeObj = checkTimeObj(timeObj);\n    if (user)\n      API.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n        value: timeObj,\n      });\n    else window.localStorage.setItem(key, JSON.stringify(timeObj));\n    setRecordTime(timeObj);\n  };\n  const onClick = (event) => {\n    event.preventDefault();\n    const [hour, minute] = new Date()\n      .toTimeString()\n      .split(\":\")\n      .slice(0, 2)\n      .map((numChar) => parseInt(numChar));\n    const timeObj = { hour, minute };\n    updateRecordTime(timeObj);\n  };\n  return [recordTime, onClick, updateRecordTime];\n};\n"]},"metadata":{},"sourceType":"module"}