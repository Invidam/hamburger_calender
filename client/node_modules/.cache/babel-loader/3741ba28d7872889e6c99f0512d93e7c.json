{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { API } from \"../../../tools/axiosSetting\";\nexport const useEditWork = (workList, setWorkList, id, callback, user, date) => {\n  _s();\n\n  const [workColor, setColor] = useState(workList[id].workColor);\n  const [workName, setWorkName] = useState(workList[id].workName);\n  const [workTime, setWorkTime] = useState(workList[id].workTime);\n\n  const hexToRgba = color => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n\n  const onChangeWorkColor = color => {\n    if (!color) {\n      console.log(\"NO\", color);\n    } else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n\n    setColor(color);\n  };\n\n  const onChangeWorkName = name => setWorkName(name);\n\n  const onChangeWorkTime = time => setWorkTime(parseInt(time));\n\n  const validator = workObj => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n\n  const editWork = workObj => {\n    const workListTemp = workList;\n    workListTemp[id] = workObj;\n    console.log(\"Orig : \", workList);\n    console.log(\"TEMP : \", workListTemp);\n    setWorkList(workListTemp);\n    const response = API.post(`/api/${user}/${date}/worklist/worklist`, {\n      value: workObj\n    });\n    console.log(\"PUSH RESPONSE\", response);\n  };\n\n  const onEditWork = event => {\n    event.preventDefault();\n    const workObj = {\n      workName,\n      workTime,\n      workColor,\n      id\n    };\n    console.log(\"EIDT WORK\", workObj);\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n\n    if (willUpdate) {\n      callback();\n      editWork(workObj);\n    } else {\n      let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${!workTime + !workColor > 0 && !workName ? \", \" : \"\"}${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${workColor ? \"\" : \"WorkColor\"} ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n\n  return {\n    onChangeWorkColor,\n    onChangeWorkName,\n    onChangeWorkTime,\n    onEditWork\n  };\n};\n\n_s(useEditWork, \"aN3ms594J7NqeAjXaU3EBEBgoxw=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/work/useEditWork.js"],"names":["useState","API","useEditWork","workList","setWorkList","id","callback","user","date","workColor","setColor","workName","setWorkName","workTime","setWorkTime","hexToRgba","color","r","parseInt","substr","g","b","onChangeWorkColor","console","log","onChangeWorkName","name","onChangeWorkTime","time","validator","workObj","editWork","workListTemp","response","post","value","onEditWork","event","preventDefault","willUpdate","errText","alert"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { API } from \"../../../tools/axiosSetting\";\n\nexport const useEditWork = (\n  workList,\n  setWorkList,\n  id,\n  callback,\n  user,\n  date\n) => {\n  const [workColor, setColor] = useState(workList[id].workColor);\n  const [workName, setWorkName] = useState(workList[id].workName);\n  const [workTime, setWorkTime] = useState(workList[id].workTime);\n\n  const hexToRgba = (color) => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n  const onChangeWorkColor = (color) => {\n    if (!color) {\n      console.log(\"NO\", color);\n    } else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n    setColor(color);\n  };\n  const onChangeWorkName = (name) => setWorkName(name);\n  const onChangeWorkTime = (time) => setWorkTime(parseInt(time));\n  const validator = (workObj) => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n  const editWork = (workObj) => {\n    const workListTemp = workList;\n    workListTemp[id] = workObj;\n    console.log(\"Orig : \", workList);\n    console.log(\"TEMP : \", workListTemp);\n    setWorkList(workListTemp);\n    const response = API.post(`/api/${user}/${date}/worklist/worklist`, {\n      value: workObj,\n    });\n    console.log(\"PUSH RESPONSE\", response);\n  };\n  const onEditWork = (event) => {\n    event.preventDefault();\n    const workObj = { workName, workTime, workColor, id };\n    console.log(\"EIDT WORK\", workObj);\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n    if (willUpdate) {\n      callback();\n      editWork(workObj);\n    } else {\n      let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${\n        !workTime + !workColor > 0 && !workName ? \", \" : \"\"\n      }${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${\n        workColor ? \"\" : \"WorkColor\"\n      } ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n  return { onChangeWorkColor, onChangeWorkName, onChangeWorkTime, onEditWork };\n};\n"]},"metadata":{},"sourceType":"module"}