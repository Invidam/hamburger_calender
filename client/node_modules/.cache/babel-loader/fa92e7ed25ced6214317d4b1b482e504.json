{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport { useEffect } from \"react\";\nexport const useAttemptGithubLogin = props => {\n  _s();\n\n  const {\n    history,\n    location,\n    customLoginHook\n  } = props;\n  const setUser = customLoginHook[1];\n  useEffect(() => {\n    const getToken = async () => {\n      const {\n        code\n      } = qs.parse(location === null || location === void 0 ? void 0 : location.search, {\n        ignoreQueryPrefix: true\n      });\n\n      try {\n        const response = await axios.post(\"/auth/login/github\", {\n          code\n        });\n        const {\n          access_token,\n          username\n        } = response.data;\n        localStorage.setItem(\"access_token\", access_token);\n        setUser(username);\n        history.push(\"/\");\n      } catch (error) {\n        console.log(\"GITERR\", error);\n        alert(error);\n        history.push(\"/login\");\n      }\n    };\n\n    getToken();\n  }, [location, history]);\n};\n\n_s(useAttemptGithubLogin, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useAttemptGithubLogin.js"],"names":["axios","qs","useEffect","useAttemptGithubLogin","props","history","location","customLoginHook","setUser","getToken","code","parse","search","ignoreQueryPrefix","response","post","access_token","username","data","localStorage","setItem","push","error","console","log","alert"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAO,MAAMC,qBAAqB,GAAIC,KAAD,IAAW;AAAA;;AAC9C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA;AAArB,MAAyCH,KAA/C;AACA,QAAMI,OAAO,GAAGD,eAAe,CAAC,CAAD,CAA/B;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,QAAQ,GAAG,YAAY;AAC3B,YAAM;AAAEC,QAAAA;AAAF,UAAWT,EAAE,CAACU,KAAH,CAASL,QAAT,aAASA,QAAT,uBAASA,QAAQ,CAAEM,MAAnB,EAA2B;AAC1CC,QAAAA,iBAAiB,EAAE;AADuB,OAA3B,CAAjB;;AAGA,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAW,oBAAX,EAAiC;AACtDL,UAAAA;AADsD,SAAjC,CAAvB;AAGA,cAAM;AAAEM,UAAAA,YAAF;AAAgBC,UAAAA;AAAhB,YAA6BH,QAAQ,CAACI,IAA5C;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCJ,YAArC;AACAR,QAAAA,OAAO,CAACS,QAAD,CAAP;AACAZ,QAAAA,OAAO,CAACgB,IAAR,CAAa,GAAb;AACD,OARD,CAQE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACAG,QAAAA,KAAK,CAACH,KAAD,CAAL;AACAjB,QAAAA,OAAO,CAACgB,IAAR,CAAa,QAAb;AACD;AACF,KAjBD;;AAkBAZ,IAAAA,QAAQ;AACT,GApBQ,EAoBN,CAACH,QAAD,EAAWD,OAAX,CApBM,CAAT;AAqBD,CAxBM;;GAAMF,qB","sourcesContent":["import axios from \"axios\";\nimport qs from \"qs\";\nimport { useEffect } from \"react\";\nexport const useAttemptGithubLogin = (props) => {\n  const { history, location, customLoginHook } = props;\n  const setUser = customLoginHook[1];\n  useEffect(() => {\n    const getToken = async () => {\n      const { code } = qs.parse(location?.search, {\n        ignoreQueryPrefix: true,\n      });\n      try {\n        const response = await axios.post(\"/auth/login/github\", {\n          code,\n        });\n        const { access_token, username } = response.data;\n        localStorage.setItem(\"access_token\", access_token);\n        setUser(username);\n        history.push(\"/\");\n      } catch (error) {\n        console.log(\"GITERR\", error);\n        alert(error);\n        history.push(\"/login\");\n      }\n    };\n    getToken();\n  }, [location, history]);\n};\n"]},"metadata":{},"sourceType":"module"}