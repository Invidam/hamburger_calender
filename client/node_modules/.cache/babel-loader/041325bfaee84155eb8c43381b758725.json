{"ast":null,"code":"const {\n  ArgumentError\n} = require('../errors');\n\nconst {\n  JwksClient\n} = require('../JwksClient');\n\nconst supportedAlg = require('./config');\n\nconst handleSigningKeyError = (err, cb) => {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  } // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n\n\n  if (err) {\n    return cb(err);\n  }\n};\n\nmodule.exports.expressJwtSecret = function (options) {\n  if (options === null || options === undefined) {\n    throw new ArgumentError('An options object must be provided when initializing expressJwtSecret');\n  }\n\n  const client = new JwksClient(options);\n  const onError = options.handleSigningKeyError || handleSigningKeyError;\n  return function secretProvider(req, header, payload, cb) {\n    if (!header || !supportedAlg.includes(header.alg)) {\n      return cb(null, null);\n    }\n\n    client.getSigningKey(header.kid).then(key => {\n      cb(null, key.publicKey || key.rsaPublicKey);\n    }).catch(err => {\n      onError(err, newError => cb(newError, null));\n    });\n  };\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jwks-rsa/src/integrations/express.js"],"names":["ArgumentError","require","JwksClient","supportedAlg","handleSigningKeyError","err","cb","name","module","exports","expressJwtSecret","options","undefined","client","onError","secretProvider","req","header","payload","includes","alg","getSigningKey","kid","then","key","publicKey","rsaPublicKey","catch","newError"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,OAAO,CAAC,WAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAiBD,OAAO,CAAC,eAAD,CAA9B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,UAAD,CAA5B;;AAEA,MAAMG,qBAAqB,GAAG,CAACC,GAAD,EAAMC,EAAN,KAAa;AACzC;AACA,MAAID,GAAG,IAAIA,GAAG,CAACE,IAAJ,KAAa,yBAAxB,EAAmD;AACjD,WAAOD,EAAE,CAAC,IAAD,CAAT;AACD,GAJwC,CAMzC;;;AACA,MAAID,GAAJ,EAAS;AACP,WAAOC,EAAE,CAACD,GAAD,CAAT;AACD;AACF,CAVD;;AAYAG,MAAM,CAACC,OAAP,CAAeC,gBAAf,GAAkC,UAAUC,OAAV,EAAmB;AACnD,MAAIA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKC,SAApC,EAA+C;AAC7C,UAAM,IAAIZ,aAAJ,CAAkB,uEAAlB,CAAN;AACD;;AAED,QAAMa,MAAM,GAAG,IAAIX,UAAJ,CAAeS,OAAf,CAAf;AACA,QAAMG,OAAO,GAAGH,OAAO,CAACP,qBAAR,IAAiCA,qBAAjD;AAEA,SAAO,SAASW,cAAT,CAAwBC,GAAxB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CZ,EAA9C,EAAkD;AACvD,QAAI,CAACW,MAAD,IAAW,CAACd,YAAY,CAACgB,QAAb,CAAsBF,MAAM,CAACG,GAA7B,CAAhB,EAAmD;AACjD,aAAOd,EAAE,CAAC,IAAD,EAAO,IAAP,CAAT;AACD;;AAEDO,IAAAA,MAAM,CAACQ,aAAP,CAAqBJ,MAAM,CAACK,GAA5B,EACGC,IADH,CACQC,GAAG,IAAI;AACXlB,MAAAA,EAAE,CAAC,IAAD,EAAOkB,GAAG,CAACC,SAAJ,IAAiBD,GAAG,CAACE,YAA5B,CAAF;AACD,KAHH,EAGKC,KAHL,CAGWtB,GAAG,IAAI;AACdS,MAAAA,OAAO,CAACT,GAAD,EAAOuB,QAAD,IAActB,EAAE,CAACsB,QAAD,EAAW,IAAX,CAAtB,CAAP;AACD,KALH;AAMD,GAXD;AAYD,CApBD","sourcesContent":["const { ArgumentError } = require('../errors');\nconst { JwksClient } = require('../JwksClient');\nconst supportedAlg = require('./config');\n\nconst handleSigningKeyError = (err, cb) => {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  }\n\n  // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n  if (err) {\n    return cb(err);\n  }\n};\n\nmodule.exports.expressJwtSecret = function (options) {\n  if (options === null || options === undefined) {\n    throw new ArgumentError('An options object must be provided when initializing expressJwtSecret');\n  }\n\n  const client = new JwksClient(options);\n  const onError = options.handleSigningKeyError || handleSigningKeyError;\n\n  return function secretProvider(req, header, payload, cb) {\n    if (!header || !supportedAlg.includes(header.alg)) {\n      return cb(null, null);\n    }\n\n    client.getSigningKey(header.kid)\n      .then(key => {\n        cb(null, key.publicKey || key.rsaPublicKey);\n      }).catch(err => {\n        onError(err, (newError) => cb(newError, null));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"script"}