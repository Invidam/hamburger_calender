{"ast":null,"code":"const {\n  generateKeyPairSync,\n  generateKeyPair: async\n} = require('crypto');\n\nconst {\n  promisify\n} = require('util');\n\nconst {\n  THUMBPRINT_MATERIAL,\n  JWK_MEMBERS,\n  PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS,\n  KEY_MANAGEMENT_DECRYPT,\n  KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts');\n\nconst {\n  keyObjectSupported\n} = require('../../help/runtime_support');\n\nconst {\n  createPublicKey,\n  createPrivateKey\n} = require('../../help/key_object');\n\nconst Key = require('./base');\n\nconst generateKeyPair = promisify(async);\nconst RSA_PUBLIC = new Set(['e', 'n']);\nObject.freeze(RSA_PUBLIC);\nconst RSA_PRIVATE = new Set([...RSA_PUBLIC, 'd', 'p', 'q', 'dp', 'dq', 'qi']);\nObject.freeze(RSA_PRIVATE); // RSA Key Type\n\nclass RSAKey extends Key {\n  constructor(...args) {\n    super(...args);\n    this[JWK_MEMBERS]();\n    Object.defineProperties(this, {\n      kty: {\n        value: 'RSA',\n        enumerable: true\n      },\n      length: {\n        get() {\n          Object.defineProperty(this, 'length', {\n            value: Buffer.byteLength(this.n, 'base64') * 8,\n            configurable: false\n          });\n          return this.length;\n        },\n\n        configurable: true\n      }\n    });\n  }\n\n  static get [PUBLIC_MEMBERS]() {\n    return RSA_PUBLIC;\n  }\n\n  static get [PRIVATE_MEMBERS]() {\n    return RSA_PRIVATE;\n  } // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n\n\n  [THUMBPRINT_MATERIAL]() {\n    return {\n      e: this.e,\n      kty: 'RSA',\n      n: this.n\n    };\n  }\n\n  [KEY_MANAGEMENT_ENCRYPT]() {\n    return this.algorithms('wrapKey');\n  }\n\n  [KEY_MANAGEMENT_DECRYPT]() {\n    return this.algorithms('unwrapKey');\n  }\n\n  static async generate(len = 2048, privat = true) {\n    if (!Number.isSafeInteger(len) || len < 512 || len % 8 !== 0 || 'electron' in process.versions && len % 128 !== 0) {\n      throw new TypeError('invalid bit length');\n    }\n\n    let privateKey, publicKey;\n\n    if (keyObjectSupported) {\n      ({\n        privateKey,\n        publicKey\n      } = await generateKeyPair('rsa', {\n        modulusLength: len\n      }));\n      return privat ? privateKey : publicKey;\n    }\n\n    ({\n      privateKey,\n      publicKey\n    } = await generateKeyPair('rsa', {\n      modulusLength: len,\n      publicKeyEncoding: {\n        type: 'spki',\n        format: 'pem'\n      },\n      privateKeyEncoding: {\n        type: 'pkcs8',\n        format: 'pem'\n      }\n    }));\n\n    if (privat) {\n      return createPrivateKey(privateKey);\n    } else {\n      return createPublicKey(publicKey);\n    }\n  }\n\n  static generateSync(len = 2048, privat = true) {\n    if (!Number.isSafeInteger(len) || len < 512 || len % 8 !== 0 || 'electron' in process.versions && len % 128 !== 0) {\n      throw new TypeError('invalid bit length');\n    }\n\n    let privateKey, publicKey;\n\n    if (keyObjectSupported) {\n      ({\n        privateKey,\n        publicKey\n      } = generateKeyPairSync('rsa', {\n        modulusLength: len\n      }));\n      return privat ? privateKey : publicKey;\n    }\n\n    ({\n      privateKey,\n      publicKey\n    } = generateKeyPairSync('rsa', {\n      modulusLength: len,\n      publicKeyEncoding: {\n        type: 'spki',\n        format: 'pem'\n      },\n      privateKeyEncoding: {\n        type: 'pkcs8',\n        format: 'pem'\n      }\n    }));\n\n    if (privat) {\n      return createPrivateKey(privateKey);\n    } else {\n      return createPublicKey(publicKey);\n    }\n  }\n\n}\n\nmodule.exports = RSAKey;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/jwk/key/rsa.js"],"names":["generateKeyPairSync","generateKeyPair","async","require","promisify","THUMBPRINT_MATERIAL","JWK_MEMBERS","PUBLIC_MEMBERS","PRIVATE_MEMBERS","KEY_MANAGEMENT_DECRYPT","KEY_MANAGEMENT_ENCRYPT","keyObjectSupported","createPublicKey","createPrivateKey","Key","RSA_PUBLIC","Set","Object","freeze","RSA_PRIVATE","RSAKey","constructor","args","defineProperties","kty","value","enumerable","length","get","defineProperty","Buffer","byteLength","n","configurable","e","algorithms","generate","len","privat","Number","isSafeInteger","process","versions","TypeError","privateKey","publicKey","modulusLength","publicKeyEncoding","type","format","privateKeyEncoding","generateSync","module","exports"],"mappings":"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","sourcesContent":["const { generateKeyPairSync, generateKeyPair: async } = require('crypto')\nconst { promisify } = require('util')\n\nconst {\n  THUMBPRINT_MATERIAL, JWK_MEMBERS, PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS, KEY_MANAGEMENT_DECRYPT, KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts')\nconst { keyObjectSupported } = require('../../help/runtime_support')\nconst { createPublicKey, createPrivateKey } = require('../../help/key_object')\n\nconst Key = require('./base')\n\nconst generateKeyPair = promisify(async)\n\nconst RSA_PUBLIC = new Set(['e', 'n'])\nObject.freeze(RSA_PUBLIC)\nconst RSA_PRIVATE = new Set([...RSA_PUBLIC, 'd', 'p', 'q', 'dp', 'dq', 'qi'])\nObject.freeze(RSA_PRIVATE)\n\n// RSA Key Type\nclass RSAKey extends Key {\n  constructor (...args) {\n    super(...args)\n    this[JWK_MEMBERS]()\n    Object.defineProperties(this, {\n      kty: {\n        value: 'RSA',\n        enumerable: true\n      },\n      length: {\n        get () {\n          Object.defineProperty(this, 'length', {\n            value: Buffer.byteLength(this.n, 'base64') * 8,\n            configurable: false\n          })\n\n          return this.length\n        },\n        configurable: true\n      }\n    })\n  }\n\n  static get [PUBLIC_MEMBERS] () {\n    return RSA_PUBLIC\n  }\n\n  static get [PRIVATE_MEMBERS] () {\n    return RSA_PRIVATE\n  }\n\n  // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n  [THUMBPRINT_MATERIAL] () {\n    return { e: this.e, kty: 'RSA', n: this.n }\n  }\n\n  [KEY_MANAGEMENT_ENCRYPT] () {\n    return this.algorithms('wrapKey')\n  }\n\n  [KEY_MANAGEMENT_DECRYPT] () {\n    return this.algorithms('unwrapKey')\n  }\n\n  static async generate (len = 2048, privat = true) {\n    if (!Number.isSafeInteger(len) || len < 512 || len % 8 !== 0 || (('electron' in process.versions) && len % 128 !== 0)) {\n      throw new TypeError('invalid bit length')\n    }\n\n    let privateKey, publicKey\n\n    if (keyObjectSupported) {\n      ({ privateKey, publicKey } = await generateKeyPair('rsa', { modulusLength: len }))\n      return privat ? privateKey : publicKey\n    }\n\n    ({ privateKey, publicKey } = await generateKeyPair('rsa', {\n      modulusLength: len,\n      publicKeyEncoding: { type: 'spki', format: 'pem' },\n      privateKeyEncoding: { type: 'pkcs8', format: 'pem' }\n    }))\n\n    if (privat) {\n      return createPrivateKey(privateKey)\n    } else {\n      return createPublicKey(publicKey)\n    }\n  }\n\n  static generateSync (len = 2048, privat = true) {\n    if (!Number.isSafeInteger(len) || len < 512 || len % 8 !== 0 || (('electron' in process.versions) && len % 128 !== 0)) {\n      throw new TypeError('invalid bit length')\n    }\n\n    let privateKey, publicKey\n\n    if (keyObjectSupported) {\n      ({ privateKey, publicKey } = generateKeyPairSync('rsa', { modulusLength: len }))\n      return privat ? privateKey : publicKey\n    }\n\n    ({ privateKey, publicKey } = generateKeyPairSync('rsa', {\n      modulusLength: len,\n      publicKeyEncoding: { type: 'spki', format: 'pem' },\n      privateKeyEncoding: { type: 'pkcs8', format: 'pem' }\n    }))\n\n    if (privat) {\n      return createPrivateKey(privateKey)\n    } else {\n      return createPublicKey(publicKey)\n    }\n  }\n}\n\nmodule.exports = RSAKey\n"]},"metadata":{},"sourceType":"script"}