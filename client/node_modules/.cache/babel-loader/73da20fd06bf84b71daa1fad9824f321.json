{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js\";\nimport Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, getToday, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CalendarTemplate = ({\n  updateDateHook\n}) => {\n  // const clickDay = (event, date) => alert(\"Clicked day: \", date);\n  const [date, onUpdateDate] = updateDateHook; // const [wakeTime, onClickWakeTime, updateWakeTime] = wakeTimeHook;\n  // const [bedTime, onClickBedTime, updateBedTime] = bedTimeHook;\n  // const { workList, setWorkList } = workListHook;\n\n  const mark = [\"2021-10-12\", \"2021-10-13\", \"2021-10-14\"];\n  console.log(\"[Calendar]\");\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      className: \"caldendar\",\n      onChange: onUpdateDate,\n      value: date,\n      locale: \"en\",\n      calendarType: \"US\",\n      onClickDay: (date, event) => {\n        const localDateObj = {\n          today: getToday(),\n          clickedDate: UTCtoKTC(date)\n        };\n        localStorage.setItem(\"date\", JSON.stringify(localDateObj)); //날짜와 user에 따라 DB를 확인하고, workList, recrodTime을 가져와 갱신한다. [추후 다른 데이터들도 동일하게 처리한다.]\n        // window.localStorage.removeItem(\"wakeTime\");\n        // window.localStorage.removeItem(\"bedTime\");\n        // window.localStorage.removeItem(\"workList\");\n        // updateWakeTime();\n        // updateBedTime();\n        // setWorkList([]);\n      },\n      tileClassName: ({\n        date,\n        view\n      }) => {\n        if (mark.find(markedDate => markedDate === changeFormatYYYYMMDD(date))) return \"highlight\"; //data: Sun Sep 12 2021 00:00:00 GMT+0900 (한국 표준시)\n        // if (mark.find((x) => x === date.format(\"DD-MM-YYYY\"))) {\n        //   return \"highlight\";\n        // }\n      } //DB에 있는 날짜는 체크표시 해야함.\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = CalendarTemplate;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarTemplate\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js"],"names":["Calendar","changeFormatYYYYMMDD","getToday","UTCtoKTC","axios","CalendarTemplate","updateDateHook","date","onUpdateDate","mark","console","log","event","localDateObj","today","clickedDate","localStorage","setItem","JSON","stringify","view","find","markedDate"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,SAASC,oBAAT,EAA+BC,QAA/B,EAAyCC,QAAzC,QAAyD,kBAAzD;AACA,OAAO,wBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwB;AACtD;AACA,QAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBF,cAA7B,CAFsD,CAItD;AACA;AACA;;AACA,QAAMG,IAAI,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,CAAb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,sBACE;AAAA,2BACE,QAAC,QAAD;AACE,MAAA,SAAS,EAAC,WADZ;AAEE,MAAA,QAAQ,EAAEH,YAFZ;AAGE,MAAA,KAAK,EAAED,IAHT;AAIE,MAAA,MAAM,EAAE,IAJV;AAKE,MAAA,YAAY,EAAE,IALhB;AAME,MAAA,UAAU,EAAE,CAACA,IAAD,EAAOK,KAAP,KAAiB;AAC3B,cAAMC,YAAY,GAAG;AACnBC,UAAAA,KAAK,EAAEZ,QAAQ,EADI;AAEnBa,UAAAA,WAAW,EAAEZ,QAAQ,CAACI,IAAD;AAFF,SAArB;AAIAS,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeN,YAAf,CAA7B,EAL2B,CAM3B;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OAnBH;AAoBE,MAAA,aAAa,EAAE,CAAC;AAAEN,QAAAA,IAAF;AAAQa,QAAAA;AAAR,OAAD,KAAoB;AACjC,YACEX,IAAI,CAACY,IAAL,CAAWC,UAAD,IAAgBA,UAAU,KAAKrB,oBAAoB,CAACM,IAAD,CAA7D,CADF,EAGE,OAAO,WAAP,CAJ+B,CAKjC;AACA;AACA;AACA;AACD,OA7BH,CA8BE;;AA9BF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CA7CM;KAAMF,gB","sourcesContent":["import Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, getToday, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport axios from \"axios\";\nexport const CalendarTemplate = ({ updateDateHook }) => {\n  // const clickDay = (event, date) => alert(\"Clicked day: \", date);\n  const [date, onUpdateDate] = updateDateHook;\n\n  // const [wakeTime, onClickWakeTime, updateWakeTime] = wakeTimeHook;\n  // const [bedTime, onClickBedTime, updateBedTime] = bedTimeHook;\n  // const { workList, setWorkList } = workListHook;\n  const mark = [\"2021-10-12\", \"2021-10-13\", \"2021-10-14\"];\n  console.log(\"[Calendar]\");\n  return (\n    <article>\n      <Calendar\n        className=\"caldendar\"\n        onChange={onUpdateDate}\n        value={date}\n        locale={\"en\"}\n        calendarType={\"US\"}\n        onClickDay={(date, event) => {\n          const localDateObj = {\n            today: getToday(),\n            clickedDate: UTCtoKTC(date),\n          };\n          localStorage.setItem(\"date\", JSON.stringify(localDateObj));\n          //날짜와 user에 따라 DB를 확인하고, workList, recrodTime을 가져와 갱신한다. [추후 다른 데이터들도 동일하게 처리한다.]\n          // window.localStorage.removeItem(\"wakeTime\");\n          // window.localStorage.removeItem(\"bedTime\");\n          // window.localStorage.removeItem(\"workList\");\n          // updateWakeTime();\n          // updateBedTime();\n          // setWorkList([]);\n        }}\n        tileClassName={({ date, view }) => {\n          if (\n            mark.find((markedDate) => markedDate === changeFormatYYYYMMDD(date))\n          )\n            return \"highlight\";\n          //data: Sun Sep 12 2021 00:00:00 GMT+0900 (한국 표준시)\n          // if (mark.find((x) => x === date.format(\"DD-MM-YYYY\"))) {\n          //   return \"highlight\";\n          // }\n        }}\n        //DB에 있는 날짜는 체크표시 해야함.\n      />\n    </article>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}