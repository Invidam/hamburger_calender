{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js\";\nimport Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, getToday, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CalendarTemplate = ({\n  user,\n  updateDateHook,\n  wakeTimeHook,\n  bedTimeHook,\n  updateWorkHook\n}) => {\n  const clickDay = (event, date) => alert(\"Clicked day: \", date);\n\n  const [date, onUpdateDate] = updateDateHook;\n  const [wakeTime, onClickWakeTime, updateWakeTime] = wakeTimeHook;\n  const [bedTime, onClickBedTime, updateBedTime] = bedTimeHook;\n  const [workList, setWorkList] = updateWorkHook;\n  const mark = [\"2021-09-12\", \"2021-09-13\", \"2021-09-14\"];\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      className: \"caldendar\",\n      onChange: onUpdateDate,\n      value: date,\n      locale: \"en\",\n      calendarType: \"US\",\n      onClickDay: (date, event) => {\n        //날짜와 user에 따라 DB를 확인하고, workList, recrodTime을 가져와 갱신한다. [추후 다른 데이터들도 동일하게 처리한다.]\n        console.log(\"Clic123ked day: \", date, changeFormatYYYYMMDD(date));\n        const timeObj = {\n          hour: parseInt(changeFormatYYYYMMDD(date).substr(5, 2), 10),\n          minute: parseInt(changeFormatYYYYMMDD(date).substr(8, 2), 10)\n        };\n        window.localStorage.removeItem(\"wakeTime\");\n        window.localStorage.removeItem(\"bedTime\");\n        window.localStorage.removeItem(\"workList\"); // updateWakeTime();\n        // updateBedTime();\n        // setWorkList([]);\n      },\n      tileClassName: ({\n        date,\n        view\n      }) => {\n        if (mark.find(markedDate => markedDate === changeFormatYYYYMMDD(date))) return \"highlight\"; //data: Sun Sep 12 2021 00:00:00 GMT+0900 (한국 표준시)\n        // if (mark.find((x) => x === date.format(\"DD-MM-YYYY\"))) {\n        //   return \"highlight\";\n        // }\n      } //DB에 있는 날짜는 체크표시 해야함.\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_c = CalendarTemplate;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarTemplate\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js"],"names":["Calendar","changeFormatYYYYMMDD","getToday","UTCtoKTC","useEffect","CalendarTemplate","user","updateDateHook","wakeTimeHook","bedTimeHook","updateWorkHook","clickDay","event","date","alert","onUpdateDate","wakeTime","onClickWakeTime","updateWakeTime","bedTime","onClickBedTime","updateBedTime","workList","setWorkList","mark","console","log","timeObj","hour","parseInt","substr","minute","window","localStorage","removeItem","view","find","markedDate"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,SAASC,oBAAT,EAA+BC,QAA/B,EAAyCC,QAAzC,QAAyD,kBAAzD;AACA,OAAO,wBAAP;AACA,SAASC,SAAT,QAA0B,OAA1B;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAC/BC,EAAAA,IAD+B;AAE/BC,EAAAA,cAF+B;AAG/BC,EAAAA,YAH+B;AAI/BC,EAAAA,WAJ+B;AAK/BC,EAAAA;AAL+B,CAAD,KAM1B;AACJ,QAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiBC,KAAK,CAAC,eAAD,EAAkBD,IAAlB,CAAvC;;AACA,QAAM,CAACA,IAAD,EAAOE,YAAP,IAAuBR,cAA7B;AAEA,QAAM,CAACS,QAAD,EAAWC,eAAX,EAA4BC,cAA5B,IAA8CV,YAApD;AACA,QAAM,CAACW,OAAD,EAAUC,cAAV,EAA0BC,aAA1B,IAA2CZ,WAAjD;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bb,cAAhC;AACA,QAAMc,IAAI,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,CAAb;AACA,sBACE;AAAA,2BACE,QAAC,QAAD;AACE,MAAA,SAAS,EAAC,WADZ;AAEE,MAAA,QAAQ,EAAET,YAFZ;AAGE,MAAA,KAAK,EAAEF,IAHT;AAIE,MAAA,MAAM,EAAE,IAJV;AAKE,MAAA,YAAY,EAAE,IALhB;AAME,MAAA,UAAU,EAAE,CAACA,IAAD,EAAOD,KAAP,KAAiB;AAC3B;AACAa,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCb,IAAhC,EAAsCZ,oBAAoB,CAACY,IAAD,CAA1D;AACA,cAAMc,OAAO,GAAG;AACdC,UAAAA,IAAI,EAAEC,QAAQ,CAAC5B,oBAAoB,CAACY,IAAD,CAApB,CAA2BiB,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAD,EAA0C,EAA1C,CADA;AAEdC,UAAAA,MAAM,EAAEF,QAAQ,CAAC5B,oBAAoB,CAACY,IAAD,CAApB,CAA2BiB,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAD,EAA0C,EAA1C;AAFF,SAAhB;AAIAE,QAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,UAA/B;AACAF,QAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,SAA/B;AACAF,QAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,UAA/B,EAT2B,CAU3B;AACA;AACA;AACD,OAnBH;AAoBE,MAAA,aAAa,EAAE,CAAC;AAAErB,QAAAA,IAAF;AAAQsB,QAAAA;AAAR,OAAD,KAAoB;AACjC,YACEX,IAAI,CAACY,IAAL,CAAWC,UAAD,IAAgBA,UAAU,KAAKpC,oBAAoB,CAACY,IAAD,CAA7D,CADF,EAGE,OAAO,WAAP,CAJ+B,CAKjC;AACA;AACA;AACA;AACD,OA7BH,CA8BE;;AA9BF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CAlDM;KAAMR,gB","sourcesContent":["import Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, getToday, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport { useEffect } from \"react\";\nexport const CalendarTemplate = ({\n  user,\n  updateDateHook,\n  wakeTimeHook,\n  bedTimeHook,\n  updateWorkHook,\n}) => {\n  const clickDay = (event, date) => alert(\"Clicked day: \", date);\n  const [date, onUpdateDate] = updateDateHook;\n\n  const [wakeTime, onClickWakeTime, updateWakeTime] = wakeTimeHook;\n  const [bedTime, onClickBedTime, updateBedTime] = bedTimeHook;\n  const [workList, setWorkList] = updateWorkHook;\n  const mark = [\"2021-09-12\", \"2021-09-13\", \"2021-09-14\"];\n  return (\n    <article>\n      <Calendar\n        className=\"caldendar\"\n        onChange={onUpdateDate}\n        value={date}\n        locale={\"en\"}\n        calendarType={\"US\"}\n        onClickDay={(date, event) => {\n          //날짜와 user에 따라 DB를 확인하고, workList, recrodTime을 가져와 갱신한다. [추후 다른 데이터들도 동일하게 처리한다.]\n          console.log(\"Clic123ked day: \", date, changeFormatYYYYMMDD(date));\n          const timeObj = {\n            hour: parseInt(changeFormatYYYYMMDD(date).substr(5, 2), 10),\n            minute: parseInt(changeFormatYYYYMMDD(date).substr(8, 2), 10),\n          };\n          window.localStorage.removeItem(\"wakeTime\");\n          window.localStorage.removeItem(\"bedTime\");\n          window.localStorage.removeItem(\"workList\");\n          // updateWakeTime();\n          // updateBedTime();\n          // setWorkList([]);\n        }}\n        tileClassName={({ date, view }) => {\n          if (\n            mark.find((markedDate) => markedDate === changeFormatYYYYMMDD(date))\n          )\n            return \"highlight\";\n          //data: Sun Sep 12 2021 00:00:00 GMT+0900 (한국 표준시)\n          // if (mark.find((x) => x === date.format(\"DD-MM-YYYY\"))) {\n          //   return \"highlight\";\n          // }\n        }}\n        //DB에 있는 날짜는 체크표시 해야함.\n      />\n    </article>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}