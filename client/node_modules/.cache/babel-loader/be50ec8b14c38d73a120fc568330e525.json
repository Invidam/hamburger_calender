{"ast":null,"code":"import _regeneratorRuntime from\"/home/invidam/hamburger_calender/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/invidam/hamburger_calender/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/invidam/hamburger_calender/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";import{API}from\"../../tools/API\";export var useWorkListGrade=function useWorkListGrade(user,date){var _useState=useState(),_useState2=_slicedToArray(_useState,2),gradeInfo=_useState2[0],setGradeInfo=_useState2[1];// const [difference, setDifference] = useState();\n// const [target, setTarget] = useState();\n// const [value, setValue] = useState();\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isGradeLoading=_useState4[0],setLoad=_useState4[1];var updateInfo=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res,resGradeInfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setLoad(true);_context.next=4;return API.workList(user,date).grade();case 4:res=_context.sent;console.log(res.data);if(res===null||res===void 0?void 0:res.data){_context.next=8;break;}throw new Error(\"[Error] WorkList Grade cannot load\");case 8:resGradeInfo=res.data;setGradeInfo(resGradeInfo);// setGrade(gradeInfo.grade);\n// setDifference(gradeInfo.difference);\n// setTarget(gradeInfo.target);\n// setValue(gradeInfo.value);\nsetLoad(false);_context.next=17;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);alert(_context.t0);setLoad(false);case 17:case\"end\":return _context.stop();}}},_callee,null,[[0,13]]);}));return function updateInfo(){return _ref.apply(this,arguments);};}();return[gradeInfo,isGradeLoading,updateInfo];//return [grade, difference, target, value, isGradeLoading, updateInfo];\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/src/hooks/workList/useWorkListGrade.js"],"names":["useState","API","useWorkListGrade","user","date","gradeInfo","setGradeInfo","isGradeLoading","setLoad","updateInfo","workList","grade","res","console","log","data","Error","resGradeInfo","alert"],"mappings":"udAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,OAASC,GAAT,KAAoB,iBAApB,CAEA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,IAAD,CAAOC,IAAP,CAAgB,CAC9C,cAAkCJ,QAAQ,EAA1C,wCAAOK,SAAP,eAAkBC,YAAlB,eACA;AACA;AACA;AACA,eAAkCN,QAAQ,CAAC,KAAD,CAA1C,yCAAOO,cAAP,eAAuBC,OAAvB,eACA,GAAMC,CAAAA,UAAU,0FAAG,wKAEfD,OAAO,CAAC,IAAD,CAAP,CAFe,sBAGGP,CAAAA,GAAG,CAACS,QAAJ,CAAaP,IAAb,CAAmBC,IAAnB,EAAyBO,KAAzB,EAHH,QAGTC,GAHS,eAIfC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB,EAJe,GAKVH,GALU,SAKVA,GALU,iBAKVA,GAAG,CAAEG,IALK,8BAKO,IAAIC,CAAAA,KAAJ,CAAU,oCAAV,CALP,QAMTC,YANS,CAMML,GAAG,CAACG,IANV,CAOfT,YAAY,CAACW,YAAD,CAAZ,CACA;AACA;AACA;AACA;AACAT,OAAO,CAAC,KAAD,CAAP,CAZe,iFAcfU,KAAK,aAAL,CACAV,OAAO,CAAC,KAAD,CAAP,CAfe,qEAAH,kBAAVC,CAAAA,UAAU,0CAAhB,CAkBA,MAAO,CAACJ,SAAD,CAAYE,cAAZ,CAA4BE,UAA5B,CAAP,CACA;AACD,CA1BM","sourcesContent":["import { useState } from \"react\";\nimport { API } from \"../../tools/API\";\n\nexport const useWorkListGrade = (user, date) => {\n  const [gradeInfo, setGradeInfo] = useState();\n  // const [difference, setDifference] = useState();\n  // const [target, setTarget] = useState();\n  // const [value, setValue] = useState();\n  const [isGradeLoading, setLoad] = useState(false);\n  const updateInfo = async () => {\n    try {\n      setLoad(true);\n      const res = await API.workList(user, date).grade();\n      console.log(res.data);\n      if (!res?.data) throw new Error(\"[Error] WorkList Grade cannot load\");\n      const resGradeInfo = res.data;\n      setGradeInfo(resGradeInfo);\n      // setGrade(gradeInfo.grade);\n      // setDifference(gradeInfo.difference);\n      // setTarget(gradeInfo.target);\n      // setValue(gradeInfo.value);\n      setLoad(false);\n    } catch (error) {\n      alert(error);\n      setLoad(false);\n    }\n  };\n  return [gradeInfo, isGradeLoading, updateInfo];\n  //return [grade, difference, target, value, isGradeLoading, updateInfo];\n};\n"]},"metadata":{},"sourceType":"module"}