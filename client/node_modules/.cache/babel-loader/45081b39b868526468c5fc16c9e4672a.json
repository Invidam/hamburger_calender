{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/worklist/WorkList.js\",\n    _s = $RefreshSig$();\n\nimport \"../../css/workList/workList.css\";\nimport \"../../css/workList/tooltip.css\";\nimport { TimeRecordDisplay } from \"./element/timeBtn/TimeDisplayBtn\";\nimport { TimeRecordBtn } from \"./element/timeBtn/TimeRecordBtn\";\nimport { EmptyWork } from \"./element/work/EmptyWork\";\nimport { Work } from \"./element/work/Work\";\nimport { isEmptyTimeObj, useRecordTime } from \"../../hooks/workList/time/useRecordTime\";\nimport { isEmptyWork, useWorkList } from \"../../hooks/workList/work/useWorkList\";\nimport { LoadingElement } from \"../Loading\";\nimport { APIv2 } from \"../../tools/API\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WorkList = ({\n  user,\n  date,\n  targetSetting,\n  workListHook\n}) => {\n  _s();\n\n  var _Object$values;\n\n  const {\n    targetWakeTime,\n    targetBedTime,\n    targetWorkTime\n  } = targetSetting;\n  const [wakeTime, onClickWakeTime, setWakeTime, isWakeTimeLoading] = useRecordTime(\"wakeTime\", user, date);\n  const [bedTime, onClickBedTime, setBedTime, isBedTimeLoading] = useRecordTime(\"bedTime\", user, date);\n  const [workList, setWork, isWorkListLoading, workTimeSum] = useWorkList(user, date);\n\n  const isLoading = () => isWakeTimeLoading || isBedTimeLoading || isWorkListLoading;\n\n  const addWakeTimeWindow = /*#__PURE__*/_jsxDEV(TimeRecordBtn, {\n    onClick: onClickWakeTime,\n    isWake: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n\n  const addBedTimeWindow = /*#__PURE__*/_jsxDEV(TimeRecordBtn, {\n    onClick: onClickBedTime,\n    isWake: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n\n  const wakeTimeDisplay = /*#__PURE__*/_jsxDEV(TimeRecordDisplay, {\n    recordTime: wakeTime,\n    isWake: true,\n    setTime: setWakeTime,\n    targetTime: targetWakeTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n\n  const bedTimeDisplay = /*#__PURE__*/_jsxDEV(TimeRecordDisplay, {\n    recordTime: bedTime,\n    isWake: false,\n    setTime: setBedTime,\n    targetTime: targetBedTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n\n  console.log(\"[WORKLIST]\", workList);\n  const wakeTimeElement = isEmptyTimeObj(wakeTime) ? addWakeTimeWindow : wakeTimeDisplay;\n  const bedTimeElemnt = isEmptyTimeObj(bedTime) ? addBedTimeWindow : bedTimeDisplay;\n  const workListElement = workList && Object.values(workList).map((workItem, idx) => {\n    return isEmptyWork(workItem) ? undefined : /*#__PURE__*/_jsxDEV(Work, {\n      workItem: workItem,\n      setWork: setWork,\n      targetTime: targetWorkTime,\n      workTimeSum: workTimeSum\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this);\n  });\n  const emptyWork = !workList || ((_Object$values = Object.values(workList)) === null || _Object$values === void 0 ? void 0 : _Object$values.length) < 5 ? /*#__PURE__*/_jsxDEV(EmptyWork, {\n    setWork: setWork\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 7\n  }, this) : \"\";\n  return isLoading() ? /*#__PURE__*/_jsxDEV(LoadingElement, {\n    text: \"WorkList Loading. . .\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n      children: [wakeTimeElement, workListElement, emptyWork, bedTimeElemnt]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        console.log(APIv2.workList(user, date).grade());\n      },\n      children: [\" \", \"CLICK\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this); // </div>\n};\n\n_s(WorkList, \"dN6Z80CJE9A8BWtQ8/Mia4ydmas=\", false, function () {\n  return [useRecordTime, useRecordTime, useWorkList];\n});\n\n_c = WorkList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkList\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/worklist/WorkList.js"],"names":["TimeRecordDisplay","TimeRecordBtn","EmptyWork","Work","isEmptyTimeObj","useRecordTime","isEmptyWork","useWorkList","LoadingElement","APIv2","WorkList","user","date","targetSetting","workListHook","targetWakeTime","targetBedTime","targetWorkTime","wakeTime","onClickWakeTime","setWakeTime","isWakeTimeLoading","bedTime","onClickBedTime","setBedTime","isBedTimeLoading","workList","setWork","isWorkListLoading","workTimeSum","isLoading","addWakeTimeWindow","addBedTimeWindow","wakeTimeDisplay","bedTimeDisplay","console","log","wakeTimeElement","bedTimeElemnt","workListElement","Object","values","map","workItem","idx","undefined","emptyWork","length","grade"],"mappings":"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","sourcesContent":["import \"../../css/workList/workList.css\";\nimport \"../../css/workList/tooltip.css\";\nimport { TimeRecordDisplay } from \"./element/timeBtn/TimeDisplayBtn\";\nimport { TimeRecordBtn } from \"./element/timeBtn/TimeRecordBtn\";\nimport { EmptyWork } from \"./element/work/EmptyWork\";\nimport { Work } from \"./element/work/Work\";\nimport {\n  isEmptyTimeObj,\n  useRecordTime,\n} from \"../../hooks/workList/time/useRecordTime\";\nimport {\n  isEmptyWork,\n  useWorkList,\n} from \"../../hooks/workList/work/useWorkList\";\nimport { LoadingElement } from \"../Loading\";\nimport { APIv2 } from \"../../tools/API\";\nexport const WorkList = ({ user, date, targetSetting, workListHook }) => {\n  const { targetWakeTime, targetBedTime, targetWorkTime } = targetSetting;\n  const [wakeTime, onClickWakeTime, setWakeTime, isWakeTimeLoading] =\n    useRecordTime(\"wakeTime\", user, date);\n  const [bedTime, onClickBedTime, setBedTime, isBedTimeLoading] = useRecordTime(\n    \"bedTime\",\n    user,\n    date\n  );\n  const [workList, setWork, isWorkListLoading, workTimeSum] = useWorkList(\n    user,\n    date\n  );\n\n  const isLoading = () =>\n    isWakeTimeLoading || isBedTimeLoading || isWorkListLoading;\n\n  const addWakeTimeWindow = (\n    <TimeRecordBtn onClick={onClickWakeTime} isWake={true} />\n  );\n  const addBedTimeWindow = (\n    <TimeRecordBtn onClick={onClickBedTime} isWake={false} />\n  );\n  const wakeTimeDisplay = (\n    <TimeRecordDisplay\n      recordTime={wakeTime}\n      isWake={true}\n      setTime={setWakeTime}\n      targetTime={targetWakeTime}\n    />\n  );\n  const bedTimeDisplay = (\n    <TimeRecordDisplay\n      recordTime={bedTime}\n      isWake={false}\n      setTime={setBedTime}\n      targetTime={targetBedTime}\n    />\n  );\n  console.log(\"[WORKLIST]\", workList);\n  const wakeTimeElement = isEmptyTimeObj(wakeTime)\n    ? addWakeTimeWindow\n    : wakeTimeDisplay;\n  const bedTimeElemnt = isEmptyTimeObj(bedTime)\n    ? addBedTimeWindow\n    : bedTimeDisplay;\n  const workListElement =\n    workList &&\n    Object.values(workList).map((workItem, idx) => {\n      return isEmptyWork(workItem) ? undefined : (\n        <Work\n          workItem={workItem}\n          setWork={setWork}\n          key={idx}\n          targetTime={targetWorkTime}\n          workTimeSum={workTimeSum}\n        />\n      );\n    });\n  const emptyWork =\n    !workList || Object.values(workList)?.length < 5 ? (\n      <EmptyWork setWork={setWork} />\n    ) : (\n      \"\"\n    );\n\n  return isLoading() ? (\n    <LoadingElement text={\"WorkList Loading. . .\"} />\n  ) : (\n    <div>\n      <ol>\n        {wakeTimeElement}\n        {workListElement}\n        {emptyWork}\n        {bedTimeElemnt}\n      </ol>\n      <button\n        onClick={() => {\n          console.log(APIv2.workList(user, date).grade());\n        }}\n      >\n        {\" \"}\n        CLICK\n      </button>\n    </div>\n  );\n  // </div>\n};\n"]},"metadata":{},"sourceType":"module"}