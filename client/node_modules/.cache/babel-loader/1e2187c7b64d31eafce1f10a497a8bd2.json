{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { API } from \"../../../tools/API\";\nimport { LocalStroage } from \"../../../tools/LocalStorage\"; // import { getToday } from \"../../../tools/time\";\n\nexport const isEmptyTimeObj = timeObj => timeObj ? !Object.keys(timeObj).length : true; // !timeObj || timeObj.hour === -1 || timeObj.minute === -1;\n\nconst getEmptyTimeObj = () => {\n  return {};\n};\n\nconst checkTimeObj = timeObj => isEmptyTimeObj(timeObj) ? getEmptyTimeObj() : timeObj; // const getInitList = (user, key) =>\n//   !user && window.localStorage.getItem(key)\n//     ? JSON.parse(window.localStorage.getItem(key))\n//     : null;\n\n\nconst getNowTimeHHMM = () => new Date().toTimeString().split(\":\").slice(0, 2).map(numChar => parseInt(numChar));\n\nexport const useRecordTime = (key, user, date) => {\n  _s();\n\n  // const initVal = getInitList(user, key);\n  const [recordTime, setRecordTime] = useState();\n  const [isRecordTimeLoading, setLoad] = useState(false);\n\n  const getRecordTime = async () => {\n    try {\n      let resTimeObj;\n\n      if (user) {\n        setLoad(true);\n        const data = await API.recordTime(user, date, key).get();\n        setLoad(false);\n        resTimeObj = checkTimeObj(data === null || data === void 0 ? void 0 : data.data);\n        console.log(\"USERECORDTIME, data catch\");\n        console.log(\"USERECORDTIME DATA CATCH AFT\");\n        setRecordTime(resTimeObj);\n      } else {\n        resTimeObj = LocalStroage.recordTime(key).get();\n        console.log(\"USERECORDTIME DATA CATCH AFT\");\n        setRecordTime(resTimeObj);\n      }\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"GET EVENT START\");\n    getRecordTime();\n    return () => setLoad(false);\n  }, [date, user]);\n\n  const setTime = timeObj => {\n    timeObj = checkTimeObj(timeObj);\n    return {\n      create: async () => {\n        setRecordTime(timeObj);\n        if (user) await API.recordTime(user, date, key).create(timeObj);else LocalStroage.recordTime(key).set(timeObj);\n      },\n      edit: async () => {\n        setRecordTime(timeObj);\n        if (user) await API.recordTime(user, date, key).edit(timeObj);else LocalStroage.recordTime(key).set(timeObj);\n      },\n      delete: async () => {\n        setRecordTime({});\n        if (user) await API.recordTime(user, date, key).delete();else LocalStroage.recordTime(key).set({});\n      }\n    }; //\n    // if (user)\n    //   API.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n    //     value: timeObj,\n    //   });\n    // else window.localStorage.setItem(key, JSON.stringify(timeObj));\n    // setRecordTime(timeObj);\n  };\n\n  const onClick = event => {\n    console.log(\"ONCLICK RECORDTIME\");\n    event.preventDefault();\n    const [hour, minute] = getNowTimeHHMM();\n    const timeObj = {\n      hour,\n      minute\n    };\n    setTime(timeObj).create();\n  };\n\n  return [recordTime, onClick, setTime, isRecordTimeLoading];\n};\n\n_s(useRecordTime, \"DFbSMe4U0o/RWmbBLn6oRkt4tZM=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/src/hooks/workList/time/useRecordTime.js"],"names":["useState","useEffect","API","LocalStroage","isEmptyTimeObj","timeObj","Object","keys","length","getEmptyTimeObj","checkTimeObj","getNowTimeHHMM","Date","toTimeString","split","slice","map","numChar","parseInt","useRecordTime","key","user","date","recordTime","setRecordTime","isRecordTimeLoading","setLoad","getRecordTime","resTimeObj","data","get","console","log","error","alert","setTime","create","set","edit","delete","onClick","event","preventDefault","hour","minute"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { API } from \"../../../tools/API\";\nimport { LocalStroage } from \"../../../tools/LocalStorage\";\n// import { getToday } from \"../../../tools/time\";\n\nexport const isEmptyTimeObj = (timeObj) =>\n  timeObj ? !Object.keys(timeObj).length : true;\n// !timeObj || timeObj.hour === -1 || timeObj.minute === -1;\n\nconst getEmptyTimeObj = () => {\n  return {};\n};\n\nconst checkTimeObj = (timeObj) =>\n  isEmptyTimeObj(timeObj) ? getEmptyTimeObj() : timeObj;\n// const getInitList = (user, key) =>\n//   !user && window.localStorage.getItem(key)\n//     ? JSON.parse(window.localStorage.getItem(key))\n//     : null;\n\nconst getNowTimeHHMM = () =>\n  new Date()\n    .toTimeString()\n    .split(\":\")\n    .slice(0, 2)\n    .map((numChar) => parseInt(numChar));\nexport const useRecordTime = (key, user, date) => {\n  // const initVal = getInitList(user, key);\n  const [recordTime, setRecordTime] = useState();\n  const [isRecordTimeLoading, setLoad] = useState(false);\n\n  const getRecordTime = async () => {\n    try {\n      let resTimeObj;\n      if (user) {\n        setLoad(true);\n        const data = await API.recordTime(user, date, key).get();\n        setLoad(false);\n        resTimeObj = checkTimeObj(data?.data);\n        console.log(\"USERECORDTIME, data catch\");\n        console.log(\"USERECORDTIME DATA CATCH AFT\");\n        setRecordTime(resTimeObj);\n      } else {\n        resTimeObj = LocalStroage.recordTime(key).get();\n        console.log(\"USERECORDTIME DATA CATCH AFT\");\n        setRecordTime(resTimeObj);\n      }\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    console.log(\"GET EVENT START\");\n    getRecordTime();\n    return () => setLoad(false);\n  }, [date, user]);\n\n  const setTime = (timeObj) => {\n    timeObj = checkTimeObj(timeObj);\n    return {\n      create: async () => {\n        setRecordTime(timeObj);\n        if (user) await API.recordTime(user, date, key).create(timeObj);\n        else LocalStroage.recordTime(key).set(timeObj);\n      },\n      edit: async () => {\n        setRecordTime(timeObj);\n        if (user) await API.recordTime(user, date, key).edit(timeObj);\n        else LocalStroage.recordTime(key).set(timeObj);\n      },\n      delete: async () => {\n        setRecordTime({});\n        if (user) await API.recordTime(user, date, key).delete();\n        else LocalStroage.recordTime(key).set({});\n      },\n    };\n    //\n    // if (user)\n    //   API.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n    //     value: timeObj,\n    //   });\n    // else window.localStorage.setItem(key, JSON.stringify(timeObj));\n    // setRecordTime(timeObj);\n  };\n  const onClick = (event) => {\n    console.log(\"ONCLICK RECORDTIME\");\n    event.preventDefault();\n    const [hour, minute] = getNowTimeHHMM();\n    const timeObj = { hour, minute };\n    setTime(timeObj).create();\n  };\n  return [recordTime, onClick, setTime, isRecordTimeLoading];\n};\n"]},"metadata":{},"sourceType":"module"}