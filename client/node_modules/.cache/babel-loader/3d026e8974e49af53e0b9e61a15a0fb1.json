{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js\",\n    _s = $RefreshSig$();\n\nimport Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport { useState } from \"react\";\nimport { useUpdateTime } from \"../../hooks/workList/time/useUpdateTime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CalendarTemplate = () => {\n  _s();\n\n  const [value, onChange] = useState(new Date());\n\n  const clickDay = (event, value) => alert(\"Clicked day: \", value);\n\n  const mark = [\"2021-09-12\", \"2021-09-13\", \"2021-09-14\"];\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      className: \"caldendar\",\n      onChange: onChange,\n      value: value,\n      locale: \"en\",\n      calendarType: \"US\",\n      onClickDay: (value, event) => {\n        console.log(\"Clic123ked day: \", value, changeFormatYYYYMMDD(value));\n        const timeObj = {\n          hour: parseInt(changeFormatYYYYMMDD(value).substr(5, 2), 10),\n          minute: parseInt(changeFormatYYYYMMDD(value).substr(8, 2), 10)\n        };\n        window.localStorage.setItem(\"wakeTime\", JSON.stringify(timeObj));\n      },\n      tileClassName: ({\n        date,\n        view\n      }) => {\n        if (mark.find(markedDate => markedDate === changeFormatYYYYMMDD(date))) return \"highlight\"; //data: Sun Sep 12 2021 00:00:00 GMT+0900 (한국 표준시)\n        // if (mark.find((x) => x === date.format(\"DD-MM-YYYY\"))) {\n        //   return \"highlight\";\n        // }\n      } //DB에 있는 날짜는 체크표시 해야함.\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CalendarTemplate, \"DQgK+Tjy3CpWvhZj4nuXkkLAGxU=\");\n\n_c = CalendarTemplate;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarTemplate\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js"],"names":["Calendar","changeFormatYYYYMMDD","UTCtoKTC","useState","useUpdateTime","CalendarTemplate","value","onChange","Date","clickDay","event","alert","mark","console","log","timeObj","hour","parseInt","substr","minute","window","localStorage","setItem","JSON","stringify","date","view","find","markedDate"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,SAASC,oBAAT,EAA+BC,QAA/B,QAA+C,kBAA/C;AACA,OAAO,wBAAP;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,yCAA9B;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,IAAIK,IAAJ,EAAD,CAAlC;;AACA,QAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQJ,KAAR,KAAkBK,KAAK,CAAC,eAAD,EAAkBL,KAAlB,CAAxC;;AAEA,QAAMM,IAAI,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,CAAb;AACA,sBACE;AAAA,2BACE,QAAC,QAAD;AACE,MAAA,SAAS,EAAC,WADZ;AAEE,MAAA,QAAQ,EAAEL,QAFZ;AAGE,MAAA,KAAK,EAAED,KAHT;AAIE,MAAA,MAAM,EAAE,IAJV;AAKE,MAAA,YAAY,EAAE,IALhB;AAME,MAAA,UAAU,EAAE,CAACA,KAAD,EAAQI,KAAR,KAAkB;AAC5BG,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCR,KAAhC,EAAuCL,oBAAoB,CAACK,KAAD,CAA3D;AACA,cAAMS,OAAO,GAAG;AACdC,UAAAA,IAAI,EAAEC,QAAQ,CAAChB,oBAAoB,CAACK,KAAD,CAApB,CAA4BY,MAA5B,CAAmC,CAAnC,EAAsC,CAAtC,CAAD,EAA2C,EAA3C,CADA;AAEdC,UAAAA,MAAM,EAAEF,QAAQ,CAAChB,oBAAoB,CAACK,KAAD,CAApB,CAA4BY,MAA5B,CAAmC,CAAnC,EAAsC,CAAtC,CAAD,EAA2C,EAA3C;AAFF,SAAhB;AAIAE,QAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,EAAwCC,IAAI,CAACC,SAAL,CAAeT,OAAf,CAAxC;AACD,OAbH;AAcE,MAAA,aAAa,EAAE,CAAC;AAAEU,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD,KAAoB;AACjC,YACEd,IAAI,CAACe,IAAL,CAAWC,UAAD,IAAgBA,UAAU,KAAK3B,oBAAoB,CAACwB,IAAD,CAA7D,CADF,EAGE,OAAO,WAAP,CAJ+B,CAKjC;AACA;AACA;AACA;AACD,OAvBH,CAwBE;;AAxBF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CAnCM;;GAAMpB,gB;;KAAAA,gB","sourcesContent":["import Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport { useState } from \"react\";\nimport { useUpdateTime } from \"../../hooks/workList/time/useUpdateTime\";\nexport const CalendarTemplate = () => {\n  const [value, onChange] = useState(new Date());\n  const clickDay = (event, value) => alert(\"Clicked day: \", value);\n\n  const mark = [\"2021-09-12\", \"2021-09-13\", \"2021-09-14\"];\n  return (\n    <article>\n      <Calendar\n        className=\"caldendar\"\n        onChange={onChange}\n        value={value}\n        locale={\"en\"}\n        calendarType={\"US\"}\n        onClickDay={(value, event) => {\n          console.log(\"Clic123ked day: \", value, changeFormatYYYYMMDD(value));\n          const timeObj = {\n            hour: parseInt(changeFormatYYYYMMDD(value).substr(5, 2), 10),\n            minute: parseInt(changeFormatYYYYMMDD(value).substr(8, 2), 10),\n          };\n          window.localStorage.setItem(\"wakeTime\", JSON.stringify(timeObj));\n        }}\n        tileClassName={({ date, view }) => {\n          if (\n            mark.find((markedDate) => markedDate === changeFormatYYYYMMDD(date))\n          )\n            return \"highlight\";\n          //data: Sun Sep 12 2021 00:00:00 GMT+0900 (한국 표준시)\n          // if (mark.find((x) => x === date.format(\"DD-MM-YYYY\"))) {\n          //   return \"highlight\";\n          // }\n        }}\n        //DB에 있는 날짜는 체크표시 해야함.\n      />\n    </article>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}