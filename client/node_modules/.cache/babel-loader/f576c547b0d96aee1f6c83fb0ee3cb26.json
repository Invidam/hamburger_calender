{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const usePushWork = (workList, setWorkList, date, callback) => {\n  _s();\n\n  const [workColor, setColor] = useState();\n  const [workName, setWorkName] = useState();\n  const [workTime, setWorkTime] = useState();\n\n  const hexToRgba = color => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n\n  const onChangeWorkColor = color => {\n    if (!color) {} else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n\n    setColor(color);\n  };\n\n  const onChangeWorkName = name => setWorkName(name);\n\n  const onChangeWorkTime = time => setWorkTime(parseInt(time));\n\n  const validator = workObj => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n\n  const onSubmitWork = event => {\n    event.preventDefault(); // const workName = event.target.workName.value;\n    // const workTime = parseInt(event.target.workTime.value);\n\n    const workObj = {\n      workName,\n      workTime,\n      workColor\n    };\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n\n    if (willUpdate) {\n      var _workList$;\n\n      callback(); // workList.push(workObj);\n\n      console.log(workObj);\n      if (((_workList$ = workList[0]) === null || _workList$ === void 0 ? void 0 : _workList$.workTime) === -1) workList[0] = workObj;\n      setWorkList([...workList, workObj]);\n    } else {\n      let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${!workTime + !workColor > 0 && !workName ? \", \" : \"\"}${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${workColor ? \"\" : \"WorkColor\"} ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n\n  return {\n    onChangeWorkColor,\n    onChangeWorkName,\n    onChangeWorkTime,\n    onSubmitWork\n  };\n};\n\n_s(usePushWork, \"s6cUyFsU/WjXfCqWvMkOQ/lz0wk=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/work/usePushWork.js"],"names":["useState","usePushWork","workList","setWorkList","date","callback","workColor","setColor","workName","setWorkName","workTime","setWorkTime","hexToRgba","color","r","parseInt","substr","g","b","onChangeWorkColor","onChangeWorkName","name","onChangeWorkTime","time","validator","workObj","onSubmitWork","event","preventDefault","willUpdate","console","log","errText","alert"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nexport const usePushWork = (workList, setWorkList, date, callback) => {\n  const [workColor, setColor] = useState();\n  const [workName, setWorkName] = useState();\n  const [workTime, setWorkTime] = useState();\n  const hexToRgba = (color) => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n  const onChangeWorkColor = (color) => {\n    if (!color) {\n    } else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n    setColor(color);\n  };\n  const onChangeWorkName = (name) => setWorkName(name);\n  const onChangeWorkTime = (time) => setWorkTime(parseInt(time));\n  const validator = (workObj) => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n  const onSubmitWork = (event) => {\n    event.preventDefault();\n    // const workName = event.target.workName.value;\n    // const workTime = parseInt(event.target.workTime.value);\n    const workObj = { workName, workTime, workColor };\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n    if (willUpdate) {\n      callback();\n      // workList.push(workObj);\n      console.log(workObj);\n      if (workList[0]?.workTime === -1) workList[0] = workObj;\n      setWorkList([...workList, workObj]);\n    } else {\n      let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${\n        !workTime + !workColor > 0 && !workName ? \", \" : \"\"\n      }${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${\n        workColor ? \"\" : \"WorkColor\"\n      } ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n  return {\n    onChangeWorkColor,\n    onChangeWorkName,\n    onChangeWorkTime,\n    onSubmitWork,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}