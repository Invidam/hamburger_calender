{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API, APIv2, updateAPIHeader } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { getToday } from \"../../tools/time\";\n\nconst verifyToken = async () => {\n  const {\n    token\n  } = LocalStroage.accessToken().get();\n  const response = await APIv2.auth().verifyToken(token); //await API.post(\"/api/jwt/verify\", { token });\n\n  return response.data.decode;\n};\n\nexport const useLogin = () => {\n  _s();\n\n  const [user, setUser] = useState();\n  const [isTokenLoading, setLoadInToken] = useState(true);\n  const [isLoginLoading, setLoadInLoading] = useState(true);\n\n  const setUserInToken = async () => {\n    try {\n      setLoadInToken(true);\n\n      if (LocalStroage.accessToken().isEmpty()) {\n        console.log(\"user FIND! \");\n        LocalStroage.accessToken().set(undefined); // throw new Error(\"access_token not exists.\");\n      } else {\n        const {\n          username\n        } = await verifyToken();\n        console.log(\"user find! \", username);\n        setUser(username);\n      }\n\n      if (isTokenLoading) setLoadInToken(false);\n    } catch (error) {\n      alert(error);\n      setLoadInToken(false);\n      setUser(undefined);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"USE EFFECT APPROACH\");\n    setUserInToken();\n  }, []);\n\n  const setDataInLocal = user => {\n    try {\n      const date = getToday();\n      updateAPIHeader();\n\n      if (LocalStroage.recordTime(\"wakeTime\").isEmpty()) {\n        const wakeTime = LocalStroage.recordTime(\"wakeTime\").get();\n        APIv2.recordTime(user, date, \"wakeTime\").edit(wakeTime);\n        LocalStroage.recordTime(\"wakeTime\").remove();\n      }\n\n      if (LocalStroage.recordTime(\"bedTime\").isEmpty()) {\n        const bedTime = LocalStroage.recordTime(\"bedTime\").get();\n        APIv2.recordTime(user, date, \"bedTime\").edit(bedTime);\n        LocalStroage.recordTime(\"bedTime\").remove();\n      }\n\n      if (LocalStroage.workList().isEmpty()) {\n        const workList = LocalStroage.workList(\"workList\").get();\n        APIv2.workList(user, date, \"workList\").edit(workList);\n        LocalStroage.workList(\"workList\").remove();\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const authenticated = user != null;\n\n  const login = async (userInfo, socialType) => {\n    // setUser(signIn({ email, password }));\n    try {\n      console.log(\"SET LOAD TRUE\");\n      setLoad(true); // const response = await API.post(`/auth/login/${socialType}`, {\n      //   userInfo,\n      // });\n\n      const response = await APIv2.auth().login(socialType, userInfo);\n      const {\n        access_token,\n        username\n      } = response.data;\n      LocalStroage.accessToken().set(access_token);\n      setUser(username);\n\n      if (!LocalStroage.accessToken().isEmpty()) {\n        setDataInLocal(username);\n        console.log(\"set load false\", userInfo);\n        setLoad(false);\n      }\n    } catch (error) {\n      setLoad(false);\n      console.log(\"WHY NOT ERR\");\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    LocalStroage.accessToken().remove();\n    updateAPIHeader();\n  };\n\n  return [user, setUser, authenticated, login, logout, isLoginHookLoading];\n};\n\n_s(useLogin, \"uNfyvlpUbAgqHOWm15aXU+wVzfI=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useLogin.js"],"names":["useEffect","useState","API","APIv2","updateAPIHeader","LocalStroage","getToday","verifyToken","token","accessToken","get","response","auth","data","decode","useLogin","user","setUser","isTokenLoading","setLoadInToken","isLoginLoading","setLoadInLoading","setUserInToken","isEmpty","console","log","set","undefined","username","error","alert","setDataInLocal","date","recordTime","wakeTime","edit","remove","bedTime","workList","authenticated","login","userInfo","socialType","setLoad","access_token","logout","isLoginHookLoading"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API, APIv2, updateAPIHeader } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { getToday } from \"../../tools/time\";\n\nconst verifyToken = async () => {\n  const { token } = LocalStroage.accessToken().get();\n  const response = await APIv2.auth().verifyToken(token); //await API.post(\"/api/jwt/verify\", { token });\n  return response.data.decode;\n};\n\nexport const useLogin = () => {\n  const [user, setUser] = useState();\n  const [isTokenLoading, setLoadInToken] = useState(true);\n  const [isLoginLoading, setLoadInLoading] = useState(true);\n  const setUserInToken = async () => {\n    try {\n      setLoadInToken(true);\n      if (LocalStroage.accessToken().isEmpty()) {\n        console.log(\"user FIND! \");\n        LocalStroage.accessToken().set(undefined);\n        // throw new Error(\"access_token not exists.\");\n      } else {\n        const { username } = await verifyToken();\n        console.log(\"user find! \", username);\n        setUser(username);\n      }\n      if (isTokenLoading) setLoadInToken(false);\n    } catch (error) {\n      alert(error);\n      setLoadInToken(false);\n      setUser(undefined);\n    }\n  };\n  useEffect(() => {\n    console.log(\"USE EFFECT APPROACH\");\n    setUserInToken();\n  }, []);\n  const setDataInLocal = (user) => {\n    try {\n      const date = getToday();\n      updateAPIHeader();\n      if (LocalStroage.recordTime(\"wakeTime\").isEmpty()) {\n        const wakeTime = LocalStroage.recordTime(\"wakeTime\").get();\n        APIv2.recordTime(user, date, \"wakeTime\").edit(wakeTime);\n        LocalStroage.recordTime(\"wakeTime\").remove();\n      }\n      if (LocalStroage.recordTime(\"bedTime\").isEmpty()) {\n        const bedTime = LocalStroage.recordTime(\"bedTime\").get();\n        APIv2.recordTime(user, date, \"bedTime\").edit(bedTime);\n        LocalStroage.recordTime(\"bedTime\").remove();\n      }\n      if (LocalStroage.workList().isEmpty()) {\n        const workList = LocalStroage.workList(\"workList\").get();\n        APIv2.workList(user, date, \"workList\").edit(workList);\n        LocalStroage.workList(\"workList\").remove();\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  const authenticated = user != null;\n  const login = async (userInfo, socialType) => {\n    // setUser(signIn({ email, password }));\n    try {\n      console.log(\"SET LOAD TRUE\");\n      setLoad(true);\n      // const response = await API.post(`/auth/login/${socialType}`, {\n      //   userInfo,\n      // });\n      const response = await APIv2.auth().login(socialType, userInfo);\n      const { access_token, username } = response.data;\n      LocalStroage.accessToken().set(access_token);\n      setUser(username);\n      if (!LocalStroage.accessToken().isEmpty()) {\n        setDataInLocal(username);\n        console.log(\"set load false\", userInfo);\n        setLoad(false);\n      }\n    } catch (error) {\n      setLoad(false);\n      console.log(\"WHY NOT ERR\");\n      throw error;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    LocalStroage.accessToken().remove();\n    updateAPIHeader();\n  };\n\n  return [user, setUser, authenticated, login, logout, isLoginHookLoading];\n};\n"]},"metadata":{},"sourceType":"module"}