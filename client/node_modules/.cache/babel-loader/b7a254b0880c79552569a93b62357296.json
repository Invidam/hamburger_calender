{"ast":null,"code":"const {\n  JWTClaimInvalid\n} = require('../errors');\n\nconst isNotString = val => typeof val !== 'string' || val.length === 0;\n\nconst isNotArrayOfStrings = val => !Array.isArray(val) || val.length === 0 || val.some(isNotString);\n\nconst isRequired = (Err, value, label, claim) => {\n  if (value === undefined) {\n    throw new Err(`${label} is missing`, claim, 'missing');\n  }\n};\n\nconst isString = (Err, value, label, claim, required = false) => {\n  if (required) {\n    isRequired(Err, value, label, claim);\n  }\n\n  if (value !== undefined && isNotString(value)) {\n    throw new Err(`${label} must be a string`, claim, 'invalid');\n  }\n};\n\nconst isTimestamp = (value, label, required = false) => {\n  if (required && value === undefined) {\n    throw new JWTClaimInvalid(`\"${label}\" claim is missing`, label, 'missing');\n  }\n\n  if (value !== undefined && typeof value !== 'number') {\n    throw new JWTClaimInvalid(`\"${label}\" claim must be a JSON numeric value`, label, 'invalid');\n  }\n};\n\nconst isStringOrArrayOfStrings = (value, label, required = false) => {\n  if (required && value === undefined) {\n    throw new JWTClaimInvalid(`\"${label}\" claim is missing`, label, 'missing');\n  }\n\n  if (value !== undefined && isNotString(value) && isNotArrayOfStrings(value)) {\n    throw new JWTClaimInvalid(`\"${label}\" claim must be a string or array of strings`, label, 'invalid');\n  }\n};\n\nmodule.exports = {\n  isNotArrayOfStrings,\n  isRequired,\n  isNotString,\n  isString,\n  isTimestamp,\n  isStringOrArrayOfStrings\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/jwt/shared_validations.js"],"names":["JWTClaimInvalid","require","isNotString","val","length","isNotArrayOfStrings","Array","isArray","some","isRequired","Err","value","label","claim","undefined","isString","required","isTimestamp","isStringOrArrayOfStrings","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAsBC,OAAO,CAAC,WAAD,CAAnC;;AAEA,MAAMC,WAAW,GAAGC,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACC,MAAJ,KAAe,CAArE;;AACA,MAAMC,mBAAmB,GAAGF,GAAG,IAAI,CAACG,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAD,IAAuBA,GAAG,CAACC,MAAJ,KAAe,CAAtC,IAA2CD,GAAG,CAACK,IAAJ,CAASN,WAAT,CAA9E;;AACA,MAAMO,UAAU,GAAG,CAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb,EAAoBC,KAApB,KAA8B;AAC/C,MAAIF,KAAK,KAAKG,SAAd,EAAyB;AACvB,UAAM,IAAIJ,GAAJ,CAAS,GAAEE,KAAM,aAAjB,EAA+BC,KAA/B,EAAsC,SAAtC,CAAN;AACD;AACF,CAJD;;AAKA,MAAME,QAAQ,GAAG,CAACL,GAAD,EAAMC,KAAN,EAAaC,KAAb,EAAoBC,KAApB,EAA2BG,QAAQ,GAAG,KAAtC,KAAgD;AAC/D,MAAIA,QAAJ,EAAc;AACZP,IAAAA,UAAU,CAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb,EAAoBC,KAApB,CAAV;AACD;;AAED,MAAIF,KAAK,KAAKG,SAAV,IAAuBZ,WAAW,CAACS,KAAD,CAAtC,EAA+C;AAC7C,UAAM,IAAID,GAAJ,CAAS,GAAEE,KAAM,mBAAjB,EAAqCC,KAArC,EAA4C,SAA5C,CAAN;AACD;AACF,CARD;;AASA,MAAMI,WAAW,GAAG,CAACN,KAAD,EAAQC,KAAR,EAAeI,QAAQ,GAAG,KAA1B,KAAoC;AACtD,MAAIA,QAAQ,IAAIL,KAAK,KAAKG,SAA1B,EAAqC;AACnC,UAAM,IAAId,eAAJ,CAAqB,IAAGY,KAAM,oBAA9B,EAAmDA,KAAnD,EAA0D,SAA1D,CAAN;AACD;;AAED,MAAID,KAAK,KAAKG,SAAV,IAAwB,OAAOH,KAAP,KAAiB,QAA7C,EAAwD;AACtD,UAAM,IAAIX,eAAJ,CAAqB,IAAGY,KAAM,sCAA9B,EAAqEA,KAArE,EAA4E,SAA5E,CAAN;AACD;AACF,CARD;;AASA,MAAMM,wBAAwB,GAAG,CAACP,KAAD,EAAQC,KAAR,EAAeI,QAAQ,GAAG,KAA1B,KAAoC;AACnE,MAAIA,QAAQ,IAAIL,KAAK,KAAKG,SAA1B,EAAqC;AACnC,UAAM,IAAId,eAAJ,CAAqB,IAAGY,KAAM,oBAA9B,EAAmDA,KAAnD,EAA0D,SAA1D,CAAN;AACD;;AAED,MAAID,KAAK,KAAKG,SAAV,IAAwBZ,WAAW,CAACS,KAAD,CAAX,IAAsBN,mBAAmB,CAACM,KAAD,CAArE,EAA+E;AAC7E,UAAM,IAAIX,eAAJ,CAAqB,IAAGY,KAAM,8CAA9B,EAA6EA,KAA7E,EAAoF,SAApF,CAAN;AACD;AACF,CARD;;AAUAO,MAAM,CAACC,OAAP,GAAiB;AACff,EAAAA,mBADe;AAEfI,EAAAA,UAFe;AAGfP,EAAAA,WAHe;AAIfa,EAAAA,QAJe;AAKfE,EAAAA,WALe;AAMfC,EAAAA;AANe,CAAjB","sourcesContent":["const { JWTClaimInvalid } = require('../errors')\n\nconst isNotString = val => typeof val !== 'string' || val.length === 0\nconst isNotArrayOfStrings = val => !Array.isArray(val) || val.length === 0 || val.some(isNotString)\nconst isRequired = (Err, value, label, claim) => {\n  if (value === undefined) {\n    throw new Err(`${label} is missing`, claim, 'missing')\n  }\n}\nconst isString = (Err, value, label, claim, required = false) => {\n  if (required) {\n    isRequired(Err, value, label, claim)\n  }\n\n  if (value !== undefined && isNotString(value)) {\n    throw new Err(`${label} must be a string`, claim, 'invalid')\n  }\n}\nconst isTimestamp = (value, label, required = false) => {\n  if (required && value === undefined) {\n    throw new JWTClaimInvalid(`\"${label}\" claim is missing`, label, 'missing')\n  }\n\n  if (value !== undefined && (typeof value !== 'number')) {\n    throw new JWTClaimInvalid(`\"${label}\" claim must be a JSON numeric value`, label, 'invalid')\n  }\n}\nconst isStringOrArrayOfStrings = (value, label, required = false) => {\n  if (required && value === undefined) {\n    throw new JWTClaimInvalid(`\"${label}\" claim is missing`, label, 'missing')\n  }\n\n  if (value !== undefined && (isNotString(value) && isNotArrayOfStrings(value))) {\n    throw new JWTClaimInvalid(`\"${label}\" claim must be a string or array of strings`, label, 'invalid')\n  }\n}\n\nmodule.exports = {\n  isNotArrayOfStrings,\n  isRequired,\n  isNotString,\n  isString,\n  isTimestamp,\n  isStringOrArrayOfStrings\n}\n"]},"metadata":{},"sourceType":"script"}