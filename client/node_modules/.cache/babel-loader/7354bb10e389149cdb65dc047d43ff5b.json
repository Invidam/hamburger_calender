{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/App.js\",\n    _s = $RefreshSig$();\n\n// import logo from './logo.svg';\nimport \"./css/App.css\";\nimport \"./css/calendar.css\";\nimport { changeFormatYYYYMMDD } from \"./tools/time\";\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport { NotFoundPage } from \"./components/pages/NotFoundPage\";\nimport { LoginPage } from \"./components/pages/LoginPage\";\nimport { HomePage } from \"./components/pages/HomePage\";\nimport { Header } from \"./components/Header\";\nimport { useLogin } from \"./hooks/user/useLogin\";\nimport { useSetDate } from \"./hooks/date/useSetDate\";\nimport { GithubLoginPage } from \"./components/pages/GithubLoginPage\";\nimport { SignupPage } from \"./components/pages/SignupPage\";\nimport { SettingPage } from \"./components/pages/SettingPage\";\nimport { useTargetSetting } from \"./hooks/user/useTargetSetting\";\nimport { LoadingElement } from \"./components/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // useSetAxios();\n  console.log(\"[App] START-----------------------------------------\");\n  const updateDateHook = useSetDate();\n  const date = updateDateHook[0];\n  const customLoginHook = useLogin();\n  const [user,, isLoggedIn,,, isLoginHookLoading] = customLoginHook;\n  const updateSettingHook = useTargetSetting(user, isLoginHookLoading);\n  const {\n    targetSetting,\n    isSettingHookLoading\n  } = updateSettingHook;\n  console.log(\"[APP] USER: \", user);\n\n  const isLoading = () => isLoginHookLoading || isSettingHookLoading;\n\n  console.log(\"[APP] IS Loading? \", isLoading(), \"login\", isLoginHookLoading, user, \"setting\", isSettingHookLoading, targetSetting);\n  return isLoading() ? /*#__PURE__*/_jsxDEV(LoadingElement, {\n    text: \"App Loading. . .\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      updateDateHook: updateDateHook,\n      customLoginHook: customLoginHook\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: \"footer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gKiOfiP8SzvQwF4zqPPrP9rQbSs=\", false, function () {\n  return [useSetDate, useLogin, useTargetSetting];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/App.js"],"names":["changeFormatYYYYMMDD","Route","Switch","BrowserRouter","Router","NotFoundPage","LoginPage","HomePage","Header","useLogin","useSetDate","GithubLoginPage","SignupPage","SettingPage","useTargetSetting","LoadingElement","App","console","log","updateDateHook","date","customLoginHook","user","isLoggedIn","isLoginHookLoading","updateSettingHook","targetSetting","isSettingHookLoading","isLoading"],"mappings":";;;AAAA;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AACA,SAASA,oBAAT,QAAqC,cAArC;AAEA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,aAAa,IAAIC,MAAzC,QAAuD,kBAAvD;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,eAAT,QAAgC,oCAAhC;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,SAASC,cAAT,QAA+B,sBAA/B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ;AACA,QAAMC,cAAc,GAAGT,UAAU,EAAjC;AACA,QAAMU,IAAI,GAAGD,cAAc,CAAC,CAAD,CAA3B;AACA,QAAME,eAAe,GAAGZ,QAAQ,EAAhC;AACA,QAAM,CAACa,IAAD,GAASC,UAAT,IAAyBC,kBAAzB,IAA+CH,eAArD;AACA,QAAMI,iBAAiB,GAAGX,gBAAgB,CAACQ,IAAD,EAAOE,kBAAP,CAA1C;AACA,QAAM;AAAEE,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAA0CF,iBAAhD;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BI,IAA5B;;AACA,QAAMM,SAAS,GAAG,MAAMJ,kBAAkB,IAAIG,oBAA9C;;AACAV,EAAAA,OAAO,CAACC,GAAR,CACE,oBADF,EAEEU,SAAS,EAFX,EAGE,OAHF,EAIEJ,kBAJF,EAKEF,IALF,EAME,SANF,EAOEK,oBAPF,EAQED,aARF;AAUA,SAAOE,SAAS,kBACd,QAAC,cAAD;AAAgB,IAAA,IAAI,EAAE;AAAtB;AAAA;AAAA;AAAA;AAAA,UADc,gBAGd,QAAC,MAAD;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,cAAc,EAAET,cADlB;AAEE,MAAA,eAAe,EAAEE;AAFnB;AAAA;AAAA;AAAA;AAAA,YADF,eAoFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApFF;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF;AA0FD;;GA/GQL,G;UAGgBN,U,EAECD,Q,EAEEK,gB;;;KAPnBE,G;AAiHT,eAAeA,GAAf","sourcesContent":["// import logo from './logo.svg';\nimport \"./css/App.css\";\nimport \"./css/calendar.css\";\nimport { changeFormatYYYYMMDD } from \"./tools/time\";\n\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport { NotFoundPage } from \"./components/pages/NotFoundPage\";\nimport { LoginPage } from \"./components/pages/LoginPage\";\nimport { HomePage } from \"./components/pages/HomePage\";\nimport { Header } from \"./components/Header\";\nimport { useLogin } from \"./hooks/user/useLogin\";\nimport { useSetDate } from \"./hooks/date/useSetDate\";\nimport { GithubLoginPage } from \"./components/pages/GithubLoginPage\";\nimport { SignupPage } from \"./components/pages/SignupPage\";\nimport { SettingPage } from \"./components/pages/SettingPage\";\nimport { useTargetSetting } from \"./hooks/user/useTargetSetting\";\nimport { LoadingElement } from \"./components/Loading\";\n\nfunction App() {\n  // useSetAxios();\n  console.log(\"[App] START-----------------------------------------\");\n  const updateDateHook = useSetDate();\n  const date = updateDateHook[0];\n  const customLoginHook = useLogin();\n  const [user, , isLoggedIn, , , isLoginHookLoading] = customLoginHook;\n  const updateSettingHook = useTargetSetting(user, isLoginHookLoading);\n  const { targetSetting, isSettingHookLoading } = updateSettingHook;\n  console.log(\"[APP] USER: \", user);\n  const isLoading = () => isLoginHookLoading || isSettingHookLoading;\n  console.log(\n    \"[APP] IS Loading? \",\n    isLoading(),\n    \"login\",\n    isLoginHookLoading,\n    user,\n    \"setting\",\n    isSettingHookLoading,\n    targetSetting\n  );\n  return isLoading() ? (\n    <LoadingElement text={\"App Loading. . .\"} />\n  ) : (\n    <Router>\n      <Header\n        updateDateHook={updateDateHook}\n        customLoginHook={customLoginHook}\n      />\n      {/* <main>\n        {JSON.stringify(targetSetting)}\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <HomePage\n                user={user}\n                targetSetting={targetSetting}\n                updateDateHook={updateDateHook}\n              />\n            )}\n          />\n          <Route\n            path=\"/login\"\n            render={({ history, location }) => {\n              if (isLoggedIn) {\n                history.push(\"/\");\n                return <NotFoundPage />;\n              } else\n                return (\n                  <LoginPage\n                    history={history}\n                    location={location}\n                    customLoginHook={customLoginHook}\n                  />\n                );\n            }}\n          />\n          <Route\n            path=\"/signup\"\n            render={({ history, location }) => {\n              if (isLoggedIn) {\n                history.push(\"/\");\n                // alert(\"You are already logged in.\");\n                return <NotFoundPage />;\n              } else\n                return <SignupPage history={history} location={location} />;\n            }}\n          />\n          <Route\n            path=\"/setting\"\n            render={({ history, location }) => {\n              if (!isLoggedIn) {\n                history.push(\"/\");\n                // alert(\"You are not logged in.\");\n                return <NotFoundPage />;\n              } else\n                return (\n                  <SettingPage\n                    user={user}\n                    history={history}\n                    location={location}\n                    updateSettingHook={updateSettingHook}\n                  />\n                );\n            }}\n          />\n          <Route\n            path=\"/github-login\"\n            render={({ history, location }) => {\n              if (isLoggedIn) {\n                history.push(\"/\");\n                // alert(\"You are already logged in.\");\n                return <NotFoundPage />;\n              } else\n                return (\n                  <GithubLoginPage\n                    history={history}\n                    location={location}\n                    customLoginHook={customLoginHook}\n                  />\n                );\n            }}\n          />\n          <Route component={NotFoundPage} />\n        </Switch>\n      </main> */}\n      <footer>footer</footer>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}