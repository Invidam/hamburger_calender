{"ast":null,"code":"/*! firebase-admin v9.11.1 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppCheck = void 0;\n\nvar app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\n\nvar token_generator_1 = require(\"./token-generator\");\n\nvar token_verifier_1 = require(\"./token-verifier\");\n\nvar crypto_signer_1 = require(\"../utils/crypto-signer\");\n/**\n * AppCheck service bound to the provided app.\n */\n\n\nvar AppCheck = function () {\n  /**\n   * @param app The app for this AppCheck service.\n   * @constructor\n   */\n  function AppCheck(app) {\n    this.app = app;\n    this.client = new app_check_api_client_internal_1.AppCheckApiClient(app);\n\n    try {\n      this.tokenGenerator = new token_generator_1.AppCheckTokenGenerator(crypto_signer_1.cryptoSignerFromApp(app));\n    } catch (err) {\n      throw token_generator_1.appCheckErrorFromCryptoSignerError(err);\n    }\n\n    this.appCheckTokenVerifier = new token_verifier_1.AppCheckTokenVerifier(app);\n  }\n  /**\n   * Creates a new {@link appCheck.AppCheckToken `AppCheckToken`} that can be sent\n   * back to a client.\n   *\n   * @param appId The app ID to use as the JWT app_id.\n   * @param options Optional options object when creating a new App Check Token.\n   *\n   * @returns A promise that fulfills with a `AppCheckToken`.\n   */\n\n\n  AppCheck.prototype.createToken = function (appId, options) {\n    var _this = this;\n\n    return this.tokenGenerator.createCustomToken(appId, options).then(function (customToken) {\n      return _this.client.exchangeToken(customToken, appId);\n    });\n  };\n  /**\n   * Verifies an App Check token.\n   *\n   * @param appCheckToken The App Check token to verify.\n   *\n   * @return A promise that fulfills with a `VerifyAppCheckTokenResponse` on successful\n   *     verification.\n   */\n\n\n  AppCheck.prototype.verifyToken = function (appCheckToken) {\n    return this.appCheckTokenVerifier.verifyToken(appCheckToken).then(function (decodedToken) {\n      return {\n        appId: decodedToken.app_id,\n        token: decodedToken\n      };\n    });\n  };\n\n  return AppCheck;\n}();\n\nexports.AppCheck = AppCheck;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/firebase-admin/lib/app-check/app-check.js"],"names":["Object","defineProperty","exports","value","AppCheck","app_check_api_client_internal_1","require","token_generator_1","token_verifier_1","crypto_signer_1","app","client","AppCheckApiClient","tokenGenerator","AppCheckTokenGenerator","cryptoSignerFromApp","err","appCheckErrorFromCryptoSignerError","appCheckTokenVerifier","AppCheckTokenVerifier","prototype","createToken","appId","options","_this","createCustomToken","then","customToken","exchangeToken","verifyToken","appCheckToken","decodedToken","app_id","token"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmB,KAAK,CAAxB;;AACA,IAAIC,+BAA+B,GAAGC,OAAO,CAAC,iCAAD,CAA7C;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,kBAAD,CAA9B;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,wBAAD,CAA7B;AACA;AACA;AACA;;;AACA,IAAIF,QAAQ,GAAkB,YAAY;AACtC;AACJ;AACA;AACA;AACI,WAASA,QAAT,CAAkBM,GAAlB,EAAuB;AACnB,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAc,IAAIN,+BAA+B,CAACO,iBAApC,CAAsDF,GAAtD,CAAd;;AACA,QAAI;AACA,WAAKG,cAAL,GAAsB,IAAIN,iBAAiB,CAACO,sBAAtB,CAA6CL,eAAe,CAACM,mBAAhB,CAAoCL,GAApC,CAA7C,CAAtB;AACH,KAFD,CAGA,OAAOM,GAAP,EAAY;AACR,YAAMT,iBAAiB,CAACU,kCAAlB,CAAqDD,GAArD,CAAN;AACH;;AACD,SAAKE,qBAAL,GAA6B,IAAIV,gBAAgB,CAACW,qBAArB,CAA2CT,GAA3C,CAA7B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIN,EAAAA,QAAQ,CAACgB,SAAT,CAAmBC,WAAnB,GAAiC,UAAUC,KAAV,EAAiBC,OAAjB,EAA0B;AACvD,QAAIC,KAAK,GAAG,IAAZ;;AACA,WAAO,KAAKX,cAAL,CAAoBY,iBAApB,CAAsCH,KAAtC,EAA6CC,OAA7C,EACFG,IADE,CACG,UAAUC,WAAV,EAAuB;AAC7B,aAAOH,KAAK,CAACb,MAAN,CAAaiB,aAAb,CAA2BD,WAA3B,EAAwCL,KAAxC,CAAP;AACH,KAHM,CAAP;AAIH,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIlB,EAAAA,QAAQ,CAACgB,SAAT,CAAmBS,WAAnB,GAAiC,UAAUC,aAAV,EAAyB;AACtD,WAAO,KAAKZ,qBAAL,CAA2BW,WAA3B,CAAuCC,aAAvC,EACFJ,IADE,CACG,UAAUK,YAAV,EAAwB;AAC9B,aAAO;AACHT,QAAAA,KAAK,EAAES,YAAY,CAACC,MADjB;AAEHC,QAAAA,KAAK,EAAEF;AAFJ,OAAP;AAIH,KANM,CAAP;AAOH,GARD;;AASA,SAAO3B,QAAP;AACH,CAlD6B,EAA9B;;AAmDAF,OAAO,CAACE,QAAR,GAAmBA,QAAnB","sourcesContent":["/*! firebase-admin v9.11.1 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppCheck = void 0;\nvar app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\nvar token_generator_1 = require(\"./token-generator\");\nvar token_verifier_1 = require(\"./token-verifier\");\nvar crypto_signer_1 = require(\"../utils/crypto-signer\");\n/**\n * AppCheck service bound to the provided app.\n */\nvar AppCheck = /** @class */ (function () {\n    /**\n     * @param app The app for this AppCheck service.\n     * @constructor\n     */\n    function AppCheck(app) {\n        this.app = app;\n        this.client = new app_check_api_client_internal_1.AppCheckApiClient(app);\n        try {\n            this.tokenGenerator = new token_generator_1.AppCheckTokenGenerator(crypto_signer_1.cryptoSignerFromApp(app));\n        }\n        catch (err) {\n            throw token_generator_1.appCheckErrorFromCryptoSignerError(err);\n        }\n        this.appCheckTokenVerifier = new token_verifier_1.AppCheckTokenVerifier(app);\n    }\n    /**\n     * Creates a new {@link appCheck.AppCheckToken `AppCheckToken`} that can be sent\n     * back to a client.\n     *\n     * @param appId The app ID to use as the JWT app_id.\n     * @param options Optional options object when creating a new App Check Token.\n     *\n     * @returns A promise that fulfills with a `AppCheckToken`.\n     */\n    AppCheck.prototype.createToken = function (appId, options) {\n        var _this = this;\n        return this.tokenGenerator.createCustomToken(appId, options)\n            .then(function (customToken) {\n            return _this.client.exchangeToken(customToken, appId);\n        });\n    };\n    /**\n     * Verifies an App Check token.\n     *\n     * @param appCheckToken The App Check token to verify.\n     *\n     * @return A promise that fulfills with a `VerifyAppCheckTokenResponse` on successful\n     *     verification.\n     */\n    AppCheck.prototype.verifyToken = function (appCheckToken) {\n        return this.appCheckTokenVerifier.verifyToken(appCheckToken)\n            .then(function (decodedToken) {\n            return {\n                appId: decodedToken.app_id,\n                token: decodedToken,\n            };\n        });\n    };\n    return AppCheck;\n}());\nexports.AppCheck = AppCheck;\n"]},"metadata":{},"sourceType":"script"}