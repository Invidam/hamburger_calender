{"ast":null,"code":"import axios from \"axios\";\nexport const getCustomConfig = () => {\n  const token = localStorage.getItem(\"access_token\");\n  const date = localStorage.getItem(\"date\");\n  const config = {\n    headers: {\n      \"x-access-token\": token,\n      \"x-access-date\": date\n    }\n  };\n  return config;\n};\nexport let API = axios.create(getCustomConfig());\nAPI.interceptors.response.use(res => {\n  return res;\n}, e => {\n  var _e$response;\n\n  console.log(\"ERROR IN AXIOS CUSTOM, \", e);\n\n  if ((e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 401) {\n    var _e$response2;\n\n    // alert();\n    throw new Error(`401 - Unauthorized\\n${(_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : _e$response2.data}`);\n  } // alert(\"other err\");\n\n\n  throw new Error(e); // return Promise.reject(e);\n}); // 로그인 parm: 소셜타입, 유저 정보\n// jwt 토큰 parm: 토큰\n// 사인업 / 유저정보 객체\n// 유저세팅 입력 겟 parms: 유저명\n\nexport const updateAPIHeader = () => {\n  API = axios.create(getCustomConfig());\n};\nexport class APIv2 {\n  static userSetting(user) {\n    try {\n      const url = `/auth/setting/${user}`;\n      return {\n        get: async () => {\n          return await API.get(url);\n        },\n        edit: async data => {\n          return await API.post(url, {\n            value: data\n          });\n        }\n      };\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  static auth() {\n    try {\n      return {\n        githubLogin: async userInfo => {\n          return await API.post(\"/auth/login/github\", {\n            value: userInfo\n          });\n        },\n        login: async userInfo => {\n          return await API.post(\"/auth/login/notSocial\", {\n            value: userInfo\n          });\n        },\n        signup: async userInfo => {\n          return await API.post(\"/auth/signup\", {\n            value: userInfo\n          });\n        },\n        verifyToken: async token => {\n          return await API.post(\"/auth/jwt/verify\", {\n            token\n          });\n        }\n      }; // eslint-disable-next-line no-unreachable\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  static updateHeader() {\n    API = axios.create(getCustomConfig());\n  }\n\n  static recordTime(user, date, key) {\n    try {\n      const url = `/api/${user}/${date}/worklist/record-time/${key}`;\n      return {\n        get: async () => {\n          return await API.get(url);\n        },\n        create: async data => {\n          return await API.put(url, {\n            value: data\n          });\n        },\n        edit: async data => {\n          return await API.post(url, {\n            value: data\n          });\n        },\n        delete: async () => {\n          return await API.delete(url);\n        }\n      };\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  static workList(user, date) {\n    try {\n      const url = `/api/${user}/${date}/worklist/worklist`;\n      return {\n        get: async () => {\n          return await API.get(url);\n        },\n        create: async data => {\n          return await API.put(url, {\n            value: data\n          });\n        },\n        edit: async data => {\n          return await API.post(url, {\n            value: data\n          });\n        },\n        delete: async data => {\n          return await API.delete(url, {\n            data: {\n              value: data\n            }\n          });\n        },\n        update: async data => {\n          return await API.post(url + \"/update\", {\n            value: data\n          });\n        }\n      };\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n} //API.workList(\"SR\",\"1212-12-12\").create({ab:\"c\"});\n//SetWork({123:213}).delete();\n//Work().delte();","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/tools/API.js"],"names":["axios","getCustomConfig","token","localStorage","getItem","date","config","headers","API","create","interceptors","response","use","res","e","console","log","status","Error","data","updateAPIHeader","APIv2","userSetting","user","url","get","edit","post","value","error","auth","githubLogin","userInfo","login","signup","verifyToken","updateHeader","recordTime","key","put","delete","workList","update"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nexport const getCustomConfig = () => {\n  const token = localStorage.getItem(\"access_token\");\n  const date = localStorage.getItem(\"date\");\n  const config = {\n    headers: { \"x-access-token\": token, \"x-access-date\": date },\n  };\n  return config;\n};\n\nexport let API = axios.create(getCustomConfig());\n\nAPI.interceptors.response.use(\n  (res) => {\n    return res;\n  },\n  (e) => {\n    console.log(\"ERROR IN AXIOS CUSTOM, \", e);\n    if (e?.response?.status === 401) {\n      // alert();\n      throw new Error(`401 - Unauthorized\\n${e.response?.data}`);\n    }\n    // alert(\"other err\");\n    throw new Error(e);\n    // return Promise.reject(e);\n  }\n);\n// 로그인 parm: 소셜타입, 유저 정보\n\n// jwt 토큰 parm: 토큰\n// 사인업 / 유저정보 객체\n// 유저세팅 입력 겟 parms: 유저명\n\nexport const updateAPIHeader = () => {\n  API = axios.create(getCustomConfig());\n};\nexport class APIv2 {\n  static userSetting(user) {\n    try {\n      const url = `/auth/setting/${user}`;\n      return {\n        get: async () => {\n          return await API.get(url);\n        },\n        edit: async (data) => {\n          return await API.post(url, { value: data });\n        },\n      };\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n  static auth() {\n    try {\n      return {\n        githubLogin: async (userInfo) => {\n          return await API.post(\"/auth/login/github\", { value: userInfo });\n        },\n        login: async (userInfo) => {\n          return await API.post(\"/auth/login/notSocial\", { value: userInfo });\n        },\n        signup: async (userInfo) => {\n          return await API.post(\"/auth/signup\", { value: userInfo });\n        },\n        verifyToken: async (token) => {\n          return await API.post(\"/auth/jwt/verify\", { token });\n        },\n      };\n      // eslint-disable-next-line no-unreachable\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n  static updateHeader() {\n    API = axios.create(getCustomConfig());\n  }\n  static recordTime(user, date, key) {\n    try {\n      const url = `/api/${user}/${date}/worklist/record-time/${key}`;\n      return {\n        get: async () => {\n          return await API.get(url);\n        },\n        create: async (data) => {\n          return await API.put(url, { value: data });\n        },\n        edit: async (data) => {\n          return await API.post(url, { value: data });\n        },\n        delete: async () => {\n          return await API.delete(url);\n        },\n      };\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n  static workList(user, date) {\n    try {\n      const url = `/api/${user}/${date}/worklist/worklist`;\n      return {\n        get: async () => {\n          return await API.get(url);\n        },\n        create: async (data) => {\n          return await API.put(url, { value: data });\n        },\n        edit: async (data) => {\n          return await API.post(url, { value: data });\n        },\n        delete: async (data) => {\n          return await API.delete(url, { data: { value: data } });\n        },\n        update: async (data) => {\n          return await API.post(url + \"/update\", { value: data });\n        },\n      };\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n}\n\n//API.workList(\"SR\",\"1212-12-12\").create({ab:\"c\"});\n//SetWork({123:213}).delete();\n//Work().delte();\n"]},"metadata":{},"sourceType":"module"}