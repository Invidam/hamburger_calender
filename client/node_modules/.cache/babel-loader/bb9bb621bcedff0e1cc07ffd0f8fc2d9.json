{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/worklist/workListComponent.js\",\n    _s = $RefreshSig$();\n\nimport Modal from \"react-modal\";\nimport { useState } from \"react\";\nimport { usePushWork } from \"../../hooks/usePushWork\";\nimport { AddWorkWindow } from \"./window/AddWindow\";\nimport { WorkList } from \"./WorkList\";\nimport { WorkListTemplate } from \"./WorkListTemplate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WorkListComponent = () => {\n  _s();\n\n  const [modalIsOpen, setIsOpen] = useState(false);\n\n  const openModal = () => {\n    console.log(\"OPEN\", modalIsOpen);\n    setIsOpen(true);\n    console.log(\"OPEN\", modalIsOpen);\n  };\n\n  const toggleModal = () => {\n    setIsOpen(!modalIsOpen);\n  };\n\n  const closeModal = () => {\n    console.log(\"CLOSE1\", modalIsOpen);\n    setIsOpen(false);\n    console.log(\"CLOSE2\", modalIsOpen);\n  };\n\n  const modal = /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: modalIsOpen,\n    onRequestClose: closeModal,\n    style: customStyles,\n    contentLabel: \"Example Modal\",\n    overlayClassName: \"Overlay\",\n    children: [addWorkWindow, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: closeModal,\n      children: \" CLOSE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n\n  const callback = () => console.log(\"ING\");\n\n  const {\n    workList,\n    onSubmitWork\n  } = usePushWork(callback);\n\n  const addWorkWindow = /*#__PURE__*/_jsxDEV(AddWorkWindow, {\n    workList: workList,\n    onSubmitWork: onSubmitWork\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this); //   const workList = JSON.parse(localStorage.getItem(\"workList\"));\n\n\n  console.log(\"In worklist, list: \", workList); //   const wakeTimeObj = JSON.parse(localStorage.getItem(\"wakeTime\"));\n  //   const bedTimeObj = JSON.parse(localStorage.getItem(\"bedTime\"));\n\n  const workListDisplay = /*#__PURE__*/_jsxDEV(WorkList, {\n    workList: workList,\n    addWorkWindow: addWorkWindow\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(WorkListTemplate, {\n    workList: workListDisplay\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n\n_s(WorkListComponent, \"Fa/kNXCxR13vqJ4HU+zADqWVcKU=\", false, function () {\n  return [usePushWork];\n});\n\n_c = WorkListComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkListComponent\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/worklist/workListComponent.js"],"names":["Modal","useState","usePushWork","AddWorkWindow","WorkList","WorkListTemplate","WorkListComponent","modalIsOpen","setIsOpen","openModal","console","log","toggleModal","closeModal","modal","customStyles","addWorkWindow","callback","workList","onSubmitWork","workListDisplay"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AACrC,QAAM,CAACC,WAAD,EAAcC,SAAd,IAA2BP,QAAQ,CAAC,KAAD,CAAzC;;AACA,QAAMQ,SAAS,GAAG,MAAM;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,WAApB;AACAC,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,WAApB;AACD,GAJD;;AAKA,QAAMK,WAAW,GAAG,MAAM;AACxBJ,IAAAA,SAAS,CAAC,CAACD,WAAF,CAAT;AACD,GAFD;;AAGA,QAAMM,UAAU,GAAG,MAAM;AACvBH,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,WAAtB;AACAC,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,WAAtB;AACD,GAJD;;AAKA,QAAMO,KAAK,gBACT,QAAC,KAAD;AACE,IAAA,MAAM,EAAEP,WADV;AAEE,IAAA,cAAc,EAAEM,UAFlB;AAGE,IAAA,KAAK,EAAEE,YAHT;AAIE,IAAA,YAAY,EAAC,eAJf;AAKE,IAAA,gBAAgB,EAAC,SALnB;AAAA,eAOGC,aAPH,eAQE;AAAQ,MAAA,OAAO,EAAEH,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAYA,QAAMI,QAAQ,GAAG,MAAMP,OAAO,CAACC,GAAR,CAAY,KAAZ,CAAvB;;AACA,QAAM;AAAEO,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA6BjB,WAAW,CAACe,QAAD,CAA9C;;AACA,QAAMD,aAAa,gBACjB,QAAC,aAAD;AAAe,IAAA,QAAQ,EAAEE,QAAzB;AAAmC,IAAA,YAAY,EAAEC;AAAjD;AAAA;AAAA;AAAA;AAAA,UADF,CA7BqC,CAiCrC;;;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCO,QAAnC,EAlCqC,CAmCrC;AACA;;AACA,QAAME,eAAe,gBACnB,QAAC,QAAD;AAAU,IAAA,QAAQ,EAAEF,QAApB;AAA8B,IAAA,aAAa,EAAEF;AAA7C;AAAA;AAAA;AAAA;AAAA,UADF;;AAGA,sBAAO,QAAC,gBAAD;AAAkB,IAAA,QAAQ,EAAEI;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAzCM;;GAAMd,iB;UA4BwBJ,W;;;KA5BxBI,iB","sourcesContent":["import Modal from \"react-modal\";\nimport { useState } from \"react\";\nimport { usePushWork } from \"../../hooks/usePushWork\";\nimport { AddWorkWindow } from \"./window/AddWindow\";\nimport { WorkList } from \"./WorkList\";\nimport { WorkListTemplate } from \"./WorkListTemplate\";\n\nexport const WorkListComponent = () => {\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const openModal = () => {\n    console.log(\"OPEN\", modalIsOpen);\n    setIsOpen(true);\n    console.log(\"OPEN\", modalIsOpen);\n  };\n  const toggleModal = () => {\n    setIsOpen(!modalIsOpen);\n  };\n  const closeModal = () => {\n    console.log(\"CLOSE1\", modalIsOpen);\n    setIsOpen(false);\n    console.log(\"CLOSE2\", modalIsOpen);\n  };\n  const modal = (\n    <Modal\n      isOpen={modalIsOpen}\n      onRequestClose={closeModal}\n      style={customStyles}\n      contentLabel=\"Example Modal\"\n      overlayClassName=\"Overlay\"\n    >\n      {addWorkWindow}\n      <button onClick={closeModal}> CLOSE</button>\n    </Modal>\n  );\n  const callback = () => console.log(\"ING\");\n  const { workList, onSubmitWork } = usePushWork(callback);\n  const addWorkWindow = (\n    <AddWorkWindow workList={workList} onSubmitWork={onSubmitWork} />\n  );\n\n  //   const workList = JSON.parse(localStorage.getItem(\"workList\"));\n  console.log(\"In worklist, list: \", workList);\n  //   const wakeTimeObj = JSON.parse(localStorage.getItem(\"wakeTime\"));\n  //   const bedTimeObj = JSON.parse(localStorage.getItem(\"bedTime\"));\n  const workListDisplay = (\n    <WorkList workList={workList} addWorkWindow={addWorkWindow} />\n  );\n  return <WorkListTemplate workList={workListDisplay} />;\n};\n"]},"metadata":{},"sourceType":"module"}