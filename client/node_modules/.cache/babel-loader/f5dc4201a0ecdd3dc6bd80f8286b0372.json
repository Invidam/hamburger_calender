{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js\",\n    _s = $RefreshSig$();\n\nimport Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, getToday, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport axios from \"axios\";\nimport { useDateInfo } from \"../../hooks/calendar/useDateInfo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CalendarTemplate = ({\n  user,\n  updateDateHook\n}) => {\n  _s();\n\n  // const clickDay = (event, date) => alert(\"Clicked day: \", date);\n  const [date, onUpdateDate] = updateDateHook;\n  const dateInfo = useDateInfo(user, changeFormatYYYYMMDD(date));\n  console.log(\"DATE INFO: \", dateInfo);\n  const mark = dateInfo[0];\n  console.log(\"[Calendar]\");\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      className: \"caldendar\",\n      onChange: onUpdateDate,\n      value: date,\n      locale: \"en\",\n      calendarType: \"US\",\n      onClickDay: (date, event) => {\n        const localDateObj = {\n          today: getToday(),\n          clickedDate: UTCtoKTC(date)\n        };\n        localStorage.setItem(\"date\", JSON.stringify(localDateObj));\n      },\n      onViewChange: ({\n        activeStartDate,\n        value,\n        view\n      }) => console.log(\"New view is: \", view),\n      tileClassName: ({\n        date,\n        view\n      }) => {\n        if (mark && mark.find(markedDate => markedDate === changeFormatYYYYMMDD(date))) return \"highlight\";\n      } //DB에 있는 날짜는 체크표시 해야함.\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CalendarTemplate, \"BmEGyStjhSfeI9+6Oi6GWhI6BtE=\", false, function () {\n  return [useDateInfo];\n});\n\n_c = CalendarTemplate;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarTemplate\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js"],"names":["Calendar","changeFormatYYYYMMDD","getToday","UTCtoKTC","axios","useDateInfo","CalendarTemplate","user","updateDateHook","date","onUpdateDate","dateInfo","console","log","mark","event","localDateObj","today","clickedDate","localStorage","setItem","JSON","stringify","activeStartDate","value","view","find","markedDate"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,SAASC,oBAAT,EAA+BC,QAA/B,EAAyCC,QAAzC,QAAyD,kBAAzD;AACA,OAAO,wBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,kCAA5B;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA8B;AAAA;;AAC5D;AACA,QAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBF,cAA7B;AACA,QAAMG,QAAQ,GAAGN,WAAW,CAACE,IAAD,EAAON,oBAAoB,CAACQ,IAAD,CAA3B,CAA5B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,QAA3B;AACA,QAAMG,IAAI,GAAGH,QAAQ,CAAC,CAAD,CAArB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,sBACE;AAAA,2BACE,QAAC,QAAD;AACE,MAAA,SAAS,EAAC,WADZ;AAEE,MAAA,QAAQ,EAAEH,YAFZ;AAGE,MAAA,KAAK,EAAED,IAHT;AAIE,MAAA,MAAM,EAAE,IAJV;AAKE,MAAA,YAAY,EAAE,IALhB;AAME,MAAA,UAAU,EAAE,CAACA,IAAD,EAAOM,KAAP,KAAiB;AAC3B,cAAMC,YAAY,GAAG;AACnBC,UAAAA,KAAK,EAAEf,QAAQ,EADI;AAEnBgB,UAAAA,WAAW,EAAEf,QAAQ,CAACM,IAAD;AAFF,SAArB;AAIAU,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeN,YAAf,CAA7B;AACD,OAZH;AAaE,MAAA,YAAY,EAAE,CAAC;AAAEO,QAAAA,eAAF;AAAmBC,QAAAA,KAAnB;AAA0BC,QAAAA;AAA1B,OAAD,KACZb,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BY,IAA7B,CAdJ;AAgBE,MAAA,aAAa,EAAE,CAAC;AAAEhB,QAAAA,IAAF;AAAQgB,QAAAA;AAAR,OAAD,KAAoB;AACjC,YACEX,IAAI,IACJA,IAAI,CAACY,IAAL,CAAWC,UAAD,IAAgBA,UAAU,KAAK1B,oBAAoB,CAACQ,IAAD,CAA7D,CAFF,EAIE,OAAO,WAAP;AACH,OAtBH,CAuBE;;AAvBF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CApCM;;GAAMH,gB;UAGMD,W;;;KAHNC,gB","sourcesContent":["import Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, getToday, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport axios from \"axios\";\nimport { useDateInfo } from \"../../hooks/calendar/useDateInfo\";\nexport const CalendarTemplate = ({ user, updateDateHook }) => {\n  // const clickDay = (event, date) => alert(\"Clicked day: \", date);\n  const [date, onUpdateDate] = updateDateHook;\n  const dateInfo = useDateInfo(user, changeFormatYYYYMMDD(date));\n  console.log(\"DATE INFO: \", dateInfo);\n  const mark = dateInfo[0];\n  console.log(\"[Calendar]\");\n  return (\n    <article>\n      <Calendar\n        className=\"caldendar\"\n        onChange={onUpdateDate}\n        value={date}\n        locale={\"en\"}\n        calendarType={\"US\"}\n        onClickDay={(date, event) => {\n          const localDateObj = {\n            today: getToday(),\n            clickedDate: UTCtoKTC(date),\n          };\n          localStorage.setItem(\"date\", JSON.stringify(localDateObj));\n        }}\n        onViewChange={({ activeStartDate, value, view }) =>\n          console.log(\"New view is: \", view)\n        }\n        tileClassName={({ date, view }) => {\n          if (\n            mark &&\n            mark.find((markedDate) => markedDate === changeFormatYYYYMMDD(date))\n          )\n            return \"highlight\";\n        }}\n        //DB에 있는 날짜는 체크표시 해야함.\n      />\n    </article>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}