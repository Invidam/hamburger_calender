{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const useEditWork = (initList, idx, callback) => {\n  _s();\n\n  const initVal = initList.length ? initList : window.localStorage.getItem(\"workList\") ? JSON.parse(window.localStorage.getItem(\"workList\")) : [];\n  const [workList, setWorkList] = useState(initVal);\n\n  const validator = workObj => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n\n  let workColor = workList[idx].workColor;\n  console.log(\"MAKE COLOR\");\n\n  const hexToRgba = color => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n\n  const onEditColor = color => {\n    if (!color) {\n      console.log(\"NO\", color);\n    } else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n      console.log(\"HEX TO RGBA : \", color);\n    }\n\n    workColor = color;\n  };\n\n  const onEditWork = (event, idx) => {\n    event.preventDefault();\n    const workName = event.target.workName.value;\n    const workTime = parseInt(event.target.workTime.value);\n    const workObj = {\n      workName,\n      workTime,\n      workColor\n    };\n    console.log(\"BEF COLOR\", workColor);\n    if (workColor === undefined) workColor = workList[idx].workColor;\n    console.log(\"AFT COLOR\", workColor);\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n\n    if (willUpdate) {\n      callback();\n      setWorkList(workList.splice(idx, 1, workObj));\n    } else {\n      console.log(workObj);\n      console.log(\"NOT CHOOSED\");\n      let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${!workTime + !workColor > 0 && !workName ? \", \" : \"\"}${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${workColor ? \"\" : \"WorkColor\"} ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n\n  return {\n    workList,\n    onEditColor,\n    onEditWork\n  };\n};\n\n_s(useEditWork, \"YVLqEpFLgtK5mvd/A4LvT7VuxxU=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/useEditWork.js"],"names":["useState","useEditWork","initList","idx","callback","initVal","length","window","localStorage","getItem","JSON","parse","workList","setWorkList","validator","workObj","workName","workTime","workColor","console","log","hexToRgba","color","r","parseInt","substr","g","b","onEditColor","onEditWork","event","preventDefault","target","value","undefined","willUpdate","splice","errText","alert"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nexport const useEditWork = (initList, idx, callback) => {\n  const initVal = initList.length\n    ? initList\n    : window.localStorage.getItem(\"workList\")\n    ? JSON.parse(window.localStorage.getItem(\"workList\"))\n    : [];\n  const [workList, setWorkList] = useState(initVal);\n  const validator = (workObj) => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n  let workColor = workList[idx].workColor;\n  console.log(\"MAKE COLOR\");\n  const hexToRgba = (color) => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n  const onEditColor = (color) => {\n    if (!color) {\n      console.log(\"NO\", color);\n    } else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n      console.log(\"HEX TO RGBA : \", color);\n    }\n    workColor = color;\n  };\n  const onEditWork = (event, idx) => {\n    event.preventDefault();\n    const workName = event.target.workName.value;\n    const workTime = parseInt(event.target.workTime.value);\n    const workObj = { workName, workTime, workColor };\n    console.log(\"BEF COLOR\", workColor);\n    if (workColor === undefined) workColor = workList[idx].workColor;\n    console.log(\"AFT COLOR\", workColor);\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n    if (willUpdate) {\n      callback();\n      setWorkList(workList.splice(idx, 1, workObj));\n    } else {\n      console.log(workObj);\n      console.log(\"NOT CHOOSED\");\n      let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${\n        !workTime + !workColor > 0 && !workName ? \", \" : \"\"\n      }${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${\n        workColor ? \"\" : \"WorkColor\"\n      } ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n  return { workList, onEditColor, onEditWork };\n};\n"]},"metadata":{},"sourceType":"module"}