{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { getToday } from \"../../../tools/time\";\nexport const useUpdateTime = (key, user, date) => {\n  _s();\n\n  console.log(\"UPDATE TIME HOOK DATE: \", date, getToday()); // if (getToday() !== date) window.localStorage.removeItem(key);\n\n  const initVal = window.localStorage.getItem(key) ? JSON.parse(window.localStorage.getItem(key)) : null;\n  if (key === \"wakeTime\") console.log(\"UPDATE TIME HOOK INIT VAL\", initVal);\n  const [recordTime, setRecordTime] = useState(initVal); // setRecordTime(initVal);\n\n  useEffect(() => {\n    console.log(\"DATE CHANG================\"); // setRecordTime();\n  }, [date]);\n  if (key === \"wakeTime\") console.log(\"UPDATE TIME HOOK RECRORD TIME\", recordTime);\n\n  if (!recordTime || recordTime.hour === -1) {\n    console.log(\"AXIOS START\");\n    axios({\n      headers: {\n        Authorization: \"\",\n        \"Content-Type\": \"application/json\"\n      },\n      url: `/api/${user}/${date}/worklist/record-time/${key}`,\n      method: \"get\"\n    }).then(data => {\n      if (data === null || data === void 0 ? void 0 : data.data) {\n        setRecordTime(data === null || data === void 0 ? void 0 : data.data);\n        window.localStorage.setItem(key, JSON.stringify(data === null || data === void 0 ? void 0 : data.data));\n      } //  else {\n      //   const emptyTimeObj = { hour: -1, minute: -1 };\n      //   setRecordTime(emptyTimeObj);\n      //   window.localStorage.removeItem(key);\n      // }\n\n    });\n  }\n\n  const updateRecordTime = timeObj => {\n    if (!timeObj) timeObj = {\n      hour: -1,\n      minute: -1\n    };\n    axios.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n      value: timeObj\n    });\n    window.localStorage.setItem(key, JSON.stringify(timeObj));\n    setRecordTime(timeObj);\n  };\n\n  const onClick = event => {\n    event.preventDefault();\n    const [hour, minute] = new Date().toTimeString().split(\":\").slice(0, 2).map(numChar => parseInt(numChar));\n    const timeObj = {\n      hour,\n      minute\n    };\n    updateRecordTime(timeObj);\n  };\n\n  return [recordTime, onClick, updateRecordTime];\n};\n\n_s(useUpdateTime, \"h490kuPbigxM53kww9L99hhwvTY=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/time/useUpdateTime.js"],"names":["axios","useState","useEffect","getToday","useUpdateTime","key","user","date","console","log","initVal","window","localStorage","getItem","JSON","parse","recordTime","setRecordTime","hour","headers","Authorization","url","method","then","data","setItem","stringify","updateRecordTime","timeObj","minute","post","value","onClick","event","preventDefault","Date","toTimeString","split","slice","map","numChar","parseInt"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { getToday } from \"../../../tools/time\";\n\nexport const useUpdateTime = (key, user, date) => {\n  console.log(\"UPDATE TIME HOOK DATE: \", date, getToday());\n  // if (getToday() !== date) window.localStorage.removeItem(key);\n  const initVal = window.localStorage.getItem(key)\n    ? JSON.parse(window.localStorage.getItem(key))\n    : null;\n  if (key === \"wakeTime\") console.log(\"UPDATE TIME HOOK INIT VAL\", initVal);\n  const [recordTime, setRecordTime] = useState(initVal);\n  // setRecordTime(initVal);\n  useEffect(() => {\n    console.log(\"DATE CHANG================\");\n    // setRecordTime();\n  }, [date]);\n  if (key === \"wakeTime\")\n    console.log(\"UPDATE TIME HOOK RECRORD TIME\", recordTime);\n  if (!recordTime || recordTime.hour === -1) {\n    console.log(\"AXIOS START\");\n    axios({\n      headers: {\n        Authorization: \"\",\n        \"Content-Type\": \"application/json\",\n      },\n      url: `/api/${user}/${date}/worklist/record-time/${key}`,\n      method: \"get\",\n    }).then((data) => {\n      if (data?.data) {\n        setRecordTime(data?.data);\n        window.localStorage.setItem(key, JSON.stringify(data?.data));\n      }\n      //  else {\n      //   const emptyTimeObj = { hour: -1, minute: -1 };\n      //   setRecordTime(emptyTimeObj);\n      //   window.localStorage.removeItem(key);\n      // }\n    });\n  }\n  const updateRecordTime = (timeObj) => {\n    if (!timeObj) timeObj = { hour: -1, minute: -1 };\n\n    axios.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n      value: timeObj,\n    });\n    window.localStorage.setItem(key, JSON.stringify(timeObj));\n    setRecordTime(timeObj);\n  };\n  const onClick = (event) => {\n    event.preventDefault();\n    const [hour, minute] = new Date()\n      .toTimeString()\n      .split(\":\")\n      .slice(0, 2)\n      .map((numChar) => parseInt(numChar));\n    const timeObj = { hour, minute };\n    updateRecordTime(timeObj);\n  };\n  return [recordTime, onClick, updateRecordTime];\n};\n"]},"metadata":{},"sourceType":"module"}