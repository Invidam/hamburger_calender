{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\n\nconst status_1 = require(\"./status\");\n\nconst protobuf = require(\"protobufjs\");\n\nclass GoogleError extends Error {}\n\nexports.GoogleError = GoogleError;\n\nclass GoogleErrorDecoder {\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const errorProtoJson = require('../../protos/status.json');\n\n    this.root = protobuf.Root.fromJSON(errorProtoJson);\n    this.anyType = this.root.lookupType('google.protobuf.Any');\n    this.statusType = this.root.lookupType('google.rpc.Status');\n    this.errorInfoType = this.root.lookupType('google.rpc.ErrorInfo');\n  }\n\n  decodeProtobufAny(anyValue) {\n    const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n\n    if (!match) {\n      throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n    }\n\n    const typeName = match[1];\n    const type = this.root.lookupType(typeName);\n\n    if (!type) {\n      throw new Error(`Cannot lookup type ${typeName}`);\n    }\n\n    return type.decode(anyValue.value);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n\n\n  decodeRpcStatus(buffer) {\n    const uint8array = new Uint8Array(buffer);\n    const status = this.statusType.decode(uint8array); // google.rpc.Status contains an array of google.protobuf.Any\n    // which need a special treatment\n\n    const details = [];\n\n    for (const detail of status.details) {\n      try {\n        const decodedDetail = this.decodeProtobufAny(detail);\n        details.push(decodedDetail);\n      } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n      }\n    }\n\n    const result = {\n      code: status.code,\n      message: status.message,\n      details\n    };\n    return result;\n  } // Construct an Error from a StatusObject.\n  // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n\n\n  callErrorFromStatus(status) {\n    status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n    return Object.assign(new Error(status.message), status);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n  // and puts it into the object similar to gRPC ServiceError object.\n\n\n  decodeErrorFromBuffer(buffer) {\n    return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n\n\n  decodeRpcStatusDetails(bufferArr) {\n    const status = [];\n    bufferArr.forEach(buffer => {\n      const uint8array = new Uint8Array(buffer);\n      const error_status = this.statusType.decode(uint8array);\n\n      for (const detail of error_status.details) {\n        try {\n          status.push(this.decodeProtobufAny(detail));\n        } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n        }\n      }\n    });\n    return status;\n  }\n\n  decodeMetadata(err) {\n    if (!err.metadata) {\n      return err;\n    }\n\n    if (err.metadata.get('grpc-status-details-bin')) {\n      err.statusDetails = this.decodeRpcStatusDetails(err.metadata.get('grpc-status-details-bin'));\n    } // Promote the ErrorInfo fields as first-class of error\n\n\n    if (err.metadata.get('google.rpc.errorinfo-bin')) {\n      const buffer = err.metadata.get('google.rpc.errorinfo-bin');\n\n      if (buffer.length > 1) {\n        throw new GoogleError(`Multiple ErrorInfo type encoded in err.metadata.get('google.rpc.errorinfo-bin'): ${err.metadata.get('google.rpc.errorinfo-bin')}`);\n      }\n\n      const uint8array = new Uint8Array(buffer[0]);\n      const errorInfo = this.errorInfoType.decode(uint8array);\n\n      if (errorInfo.reason) {\n        err.reason = errorInfo.reason;\n      }\n\n      if (errorInfo.domain) {\n        err.domain = errorInfo.domain;\n      }\n\n      if (errorInfo.metadata) {\n        for (const [key, value] of Object.entries(errorInfo.metadata)) {\n          err.metadata.set(key, value);\n        }\n      }\n    }\n\n    return err;\n  }\n\n}\n\nexports.GoogleErrorDecoder = GoogleErrorDecoder;","map":{"version":3,"sources":["../../src/googleError.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\nconst status_1 = require(\"./status\");\nconst protobuf = require(\"protobufjs\");\nclass GoogleError extends Error {\n}\nexports.GoogleError = GoogleError;\nclass GoogleErrorDecoder {\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const errorProtoJson = require('../../protos/status.json');\n        this.root = protobuf.Root.fromJSON(errorProtoJson);\n        this.anyType = this.root.lookupType('google.protobuf.Any');\n        this.statusType = this.root.lookupType('google.rpc.Status');\n        this.errorInfoType = this.root.lookupType('google.rpc.ErrorInfo');\n    }\n    decodeProtobufAny(anyValue) {\n        const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n        if (!match) {\n            throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n        }\n        const typeName = match[1];\n        const type = this.root.lookupType(typeName);\n        if (!type) {\n            throw new Error(`Cannot lookup type ${typeName}`);\n        }\n        return type.decode(anyValue.value);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n    decodeRpcStatus(buffer) {\n        const uint8array = new Uint8Array(buffer);\n        const status = this.statusType.decode(uint8array);\n        // google.rpc.Status contains an array of google.protobuf.Any\n        // which need a special treatment\n        const details = [];\n        for (const detail of status.details) {\n            try {\n                const decodedDetail = this.decodeProtobufAny(detail);\n                details.push(decodedDetail);\n            }\n            catch (err) {\n                // cannot decode detail, likely because of the unknown type - just skip it\n            }\n        }\n        const result = {\n            code: status.code,\n            message: status.message,\n            details,\n        };\n        return result;\n    }\n    // Construct an Error from a StatusObject.\n    // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n    callErrorFromStatus(status) {\n        status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n        return Object.assign(new Error(status.message), status);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n    // and puts it into the object similar to gRPC ServiceError object.\n    decodeErrorFromBuffer(buffer) {\n        return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n    decodeRpcStatusDetails(bufferArr) {\n        const status = [];\n        bufferArr.forEach(buffer => {\n            const uint8array = new Uint8Array(buffer);\n            const error_status = this.statusType.decode(uint8array);\n            for (const detail of error_status.details) {\n                try {\n                    status.push(this.decodeProtobufAny(detail));\n                }\n                catch (err) {\n                    // cannot decode detail, likely because of the unknown type - just skip it\n                }\n            }\n        });\n        return status;\n    }\n    decodeMetadata(err) {\n        if (!err.metadata) {\n            return err;\n        }\n        if (err.metadata.get('grpc-status-details-bin')) {\n            err.statusDetails = this.decodeRpcStatusDetails(err.metadata.get('grpc-status-details-bin'));\n        }\n        // Promote the ErrorInfo fields as first-class of error\n        if (err.metadata.get('google.rpc.errorinfo-bin')) {\n            const buffer = err.metadata.get('google.rpc.errorinfo-bin');\n            if (buffer.length > 1) {\n                throw new GoogleError(`Multiple ErrorInfo type encoded in err.metadata.get('google.rpc.errorinfo-bin'): ${err.metadata.get('google.rpc.errorinfo-bin')}`);\n            }\n            const uint8array = new Uint8Array(buffer[0]);\n            const errorInfo = this.errorInfoType.decode(uint8array);\n            if (errorInfo.reason) {\n                err.reason = errorInfo.reason;\n            }\n            if (errorInfo.domain) {\n                err.domain = errorInfo.domain;\n            }\n            if (errorInfo.metadata) {\n                for (const [key, value] of Object.entries(errorInfo.metadata)) {\n                    err.metadata.set(key, value);\n                }\n            }\n        }\n        return err;\n    }\n}\nexports.GoogleErrorDecoder = GoogleErrorDecoder;\n//# sourceMappingURL=googleError.js.map"]},"metadata":{},"sourceType":"script"}