{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport isEmail from \"validator/lib/isEmail\";\nimport { API } from \"../../tools/API\"; // const baseUrl = \"https://github.com/login/oauth/authorize\";\n// const authConfig = {\n//   client_id: \"44089da06c95a868c4cb\",\n//   allow_signup: false,\n//   scope: \"read:user user:email\",\n// };\n// console.log(\"COMPARE: \", process.env.GH_CLIENT_ID, \"44089da06c95a868c4cb\");\n\nexport const useAttemptLogin = async (login, history) => {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [authUrl, setAuthUrl] = useState(\"\");\n  const [isLoginPageLoading, setLoad] = useState(true);\n  console.log(\"RES FIRST LOAD\", isLoginPageLoading);\n\n  const handleSubmitNotSocial = async event => {\n    try {\n      event.preventDefault();\n      const userInfo = {\n        email,\n        password\n      };\n      if (!isEmail(email)) throw new Error(\"Entered Email form is wrong\");\n      if (!password) throw new Error(\"Password is empty\");\n      await login(userInfo, \"notSocial\");\n      history.push(\"/\");\n    } catch (error) {\n      alert(error);\n      setEmail(\"\");\n      setPassword(\"\");\n      history.push(\"/login\");\n    }\n  };\n\n  const getGithubAuthUrl = async () => {\n    var _response$data;\n\n    if (!isLoginPageLoading) setLoad(true);\n    const response = await API.auth().getGithubAuthUrl();\n    console.log(\"AUTH RES: \", response === null || response === void 0 ? void 0 : response.data);\n    setAuthUrl(response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.authUrl); // setLoad(false);\n  };\n\n  useEffect(() => {\n    console.log(\"RES GO TO GET\", authUrl, isLoginPageLoading);\n    getGithubAuthUrl(); // return () => setLoad(false);\n  }, []);\n  useEffect(() => console.log(\"RES CHANGE: \", authUrl), [authUrl]);\n  useEffect(() => console.log(\"RES LOAD CHANGE: \", isLoginPageLoading), [isLoginPageLoading]);\n  return {\n    email,\n    setEmail,\n    password,\n    setPassword,\n    handleSubmitNotSocial,\n    authUrl,\n    isLoginPageLoading\n  };\n};\n\n_s(useAttemptLogin, \"+B7DQlRMiAboQBs6XoC1UhDacBo=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/src/hooks/user/useAttemptLogin.js"],"names":["useEffect","useState","isEmail","API","useAttemptLogin","login","history","email","setEmail","password","setPassword","authUrl","setAuthUrl","isLoginPageLoading","setLoad","console","log","handleSubmitNotSocial","event","preventDefault","userInfo","Error","push","error","alert","getGithubAuthUrl","response","auth","data"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,GAAT,QAAoB,iBAApB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,eAAe,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAAA;;AACvD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,kBAAD,EAAqBC,OAArB,IAAgCb,QAAQ,CAAC,IAAD,CAA9C;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,kBAA9B;;AACA,QAAMI,qBAAqB,GAAG,MAAOC,KAAP,IAAiB;AAC7C,QAAI;AACFA,MAAAA,KAAK,CAACC,cAAN;AACA,YAAMC,QAAQ,GAAG;AAAEb,QAAAA,KAAF;AAASE,QAAAA;AAAT,OAAjB;AACA,UAAI,CAACP,OAAO,CAACK,KAAD,CAAZ,EAAqB,MAAM,IAAIc,KAAJ,CAAU,6BAAV,CAAN;AACrB,UAAI,CAACZ,QAAL,EAAe,MAAM,IAAIY,KAAJ,CAAU,mBAAV,CAAN;AACf,YAAMhB,KAAK,CAACe,QAAD,EAAW,WAAX,CAAX;AACAd,MAAAA,OAAO,CAACgB,IAAR,CAAa,GAAb;AACD,KAPD,CAOE,OAAOC,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACAf,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAJ,MAAAA,OAAO,CAACgB,IAAR,CAAa,QAAb;AACD;AACF,GAdD;;AAeA,QAAMG,gBAAgB,GAAG,YAAY;AAAA;;AACnC,QAAI,CAACZ,kBAAL,EAAyBC,OAAO,CAAC,IAAD,CAAP;AACzB,UAAMY,QAAQ,GAAG,MAAMvB,GAAG,CAACwB,IAAJ,GAAWF,gBAAX,EAAvB;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BU,QAA1B,aAA0BA,QAA1B,uBAA0BA,QAAQ,CAAEE,IAApC;AACAhB,IAAAA,UAAU,CAACc,QAAD,aAACA,QAAD,yCAACA,QAAQ,CAAEE,IAAX,mDAAC,eAAgBjB,OAAjB,CAAV,CAJmC,CAKnC;AACD,GAND;;AAQAX,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BL,OAA7B,EAAsCE,kBAAtC;AACAY,IAAAA,gBAAgB,GAFF,CAGd;AACD,GAJQ,EAIN,EAJM,CAAT;AAKAzB,EAAAA,SAAS,CAAC,MAAMe,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,OAA5B,CAAP,EAA6C,CAACA,OAAD,CAA7C,CAAT;AACAX,EAAAA,SAAS,CACP,MAAMe,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCH,kBAAjC,CADC,EAEP,CAACA,kBAAD,CAFO,CAAT;AAIA,SAAO;AACLN,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLC,IAAAA,QAHK;AAILC,IAAAA,WAJK;AAKLO,IAAAA,qBALK;AAMLN,IAAAA,OANK;AAOLE,IAAAA;AAPK,GAAP;AASD,CAhDM;;GAAMT,e","sourcesContent":["import { useEffect, useState } from \"react\";\nimport isEmail from \"validator/lib/isEmail\";\nimport { API } from \"../../tools/API\";\n// const baseUrl = \"https://github.com/login/oauth/authorize\";\n// const authConfig = {\n//   client_id: \"44089da06c95a868c4cb\",\n//   allow_signup: false,\n//   scope: \"read:user user:email\",\n// };\n// console.log(\"COMPARE: \", process.env.GH_CLIENT_ID, \"44089da06c95a868c4cb\");\n\nexport const useAttemptLogin = async (login, history) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [authUrl, setAuthUrl] = useState(\"\");\n  const [isLoginPageLoading, setLoad] = useState(true);\n  console.log(\"RES FIRST LOAD\", isLoginPageLoading);\n  const handleSubmitNotSocial = async (event) => {\n    try {\n      event.preventDefault();\n      const userInfo = { email, password };\n      if (!isEmail(email)) throw new Error(\"Entered Email form is wrong\");\n      if (!password) throw new Error(\"Password is empty\");\n      await login(userInfo, \"notSocial\");\n      history.push(\"/\");\n    } catch (error) {\n      alert(error);\n      setEmail(\"\");\n      setPassword(\"\");\n      history.push(\"/login\");\n    }\n  };\n  const getGithubAuthUrl = async () => {\n    if (!isLoginPageLoading) setLoad(true);\n    const response = await API.auth().getGithubAuthUrl();\n    console.log(\"AUTH RES: \", response?.data);\n    setAuthUrl(response?.data?.authUrl);\n    // setLoad(false);\n  };\n\n  useEffect(() => {\n    console.log(\"RES GO TO GET\", authUrl, isLoginPageLoading);\n    getGithubAuthUrl();\n    // return () => setLoad(false);\n  }, []);\n  useEffect(() => console.log(\"RES CHANGE: \", authUrl), [authUrl]);\n  useEffect(\n    () => console.log(\"RES LOAD CHANGE: \", isLoginPageLoading),\n    [isLoginPageLoading]\n  );\n  return {\n    email,\n    setEmail,\n    password,\n    setPassword,\n    handleSubmitNotSocial,\n    authUrl,\n    isLoginPageLoading,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}