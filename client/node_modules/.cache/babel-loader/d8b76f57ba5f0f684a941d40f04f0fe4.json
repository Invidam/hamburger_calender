{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleProtobufAnyFromProto3JSON = exports.googleProtobufAnyToProto3JSON = void 0;\n\nconst fromproto3json_1 = require(\"./fromproto3json\");\n\nconst toproto3json_1 = require(\"./toproto3json\"); // https://github.com/protocolbuffers/protobuf/blob/ba3836703b4a9e98e474aea2bac8c5b49b6d3b5c/python/google/protobuf/json_format.py#L850\n\n\nconst specialJSON = new Set(['google.protobuf.Any', 'google.protobuf.Duration', 'google.protobuf.FieldMask', 'google.protobuf.ListValue', 'google.protobuf.Struct', 'google.protobuf.Timestamp', 'google.protobuf.Value']);\n\nfunction googleProtobufAnyToProto3JSON(obj) {\n  // https://developers.google.com/protocol-buffers/docs/proto3#json\n  // If the Any contains a value that has a special JSON mapping, it will be converted as follows:\n  // {\"@type\": xxx, \"value\": yyy}.\n  // Otherwise, the value will be converted into a JSON object, and the \"@type\" field will be inserted\n  // to indicate the actual data type.\n  const typeName = obj.type_url.replace(/^.*\\//, '');\n  let type;\n\n  try {\n    type = obj.$type.root.lookupType(typeName);\n  } catch (err) {\n    throw new Error(`googleProtobufAnyToProto3JSON: cannot find type ${typeName}: ${err}`);\n  }\n\n  const valueMessage = type.decode(obj.value);\n  const valueProto3JSON = toproto3json_1.toProto3JSON(valueMessage);\n\n  if (specialJSON.has(typeName)) {\n    return {\n      '@type': obj.type_url,\n      value: valueProto3JSON\n    };\n  }\n\n  valueProto3JSON['@type'] = obj.type_url;\n  return valueProto3JSON;\n}\n\nexports.googleProtobufAnyToProto3JSON = googleProtobufAnyToProto3JSON;\n\nfunction googleProtobufAnyFromProto3JSON(root, json) {\n  // Not all possible JSON values can hold Any, only real objects.\n  if (json === null || typeof json !== 'object' || Array.isArray(json)) {\n    throw new Error('googleProtobufAnyFromProto3JSON: must be an object to decode google.protobuf.Any');\n  }\n\n  const typeUrl = json['@type'];\n\n  if (!typeUrl || typeof typeUrl !== 'string') {\n    throw new Error('googleProtobufAnyFromProto3JSON: JSON serialization of google.protobuf.Any must contain @type field');\n  }\n\n  const typeName = typeUrl.replace(/^.*\\//, '');\n  let type;\n\n  try {\n    type = root.lookupType(typeName);\n  } catch (err) {\n    throw new Error(`googleProtobufAnyFromProto3JSON: cannot find type ${typeName}: ${err}`);\n  }\n\n  let value = json;\n\n  if (specialJSON.has(typeName)) {\n    if (!('value' in json)) {\n      throw new Error(`googleProtobufAnyFromProto3JSON: JSON representation of google.protobuf.Any with type ${typeName} must contain the value field`);\n    }\n\n    value = json.value;\n  }\n\n  const valueMessage = fromproto3json_1.fromProto3JSON(type, value);\n\n  if (valueMessage === null) {\n    return {\n      type_url: typeUrl,\n      value: null\n    };\n  }\n\n  const uint8array = type.encode(valueMessage).finish();\n  const buffer = Buffer.from(uint8array, 0, uint8array.byteLength);\n  const base64 = buffer.toString('base64');\n  return {\n    type_url: typeUrl,\n    value: base64\n  };\n}\n\nexports.googleProtobufAnyFromProto3JSON = googleProtobufAnyFromProto3JSON;","map":{"version":3,"sources":["../../typescript/src/any.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.googleProtobufAnyFromProto3JSON = exports.googleProtobufAnyToProto3JSON = void 0;\nconst fromproto3json_1 = require(\"./fromproto3json\");\nconst toproto3json_1 = require(\"./toproto3json\");\n// https://github.com/protocolbuffers/protobuf/blob/ba3836703b4a9e98e474aea2bac8c5b49b6d3b5c/python/google/protobuf/json_format.py#L850\nconst specialJSON = new Set([\n    'google.protobuf.Any',\n    'google.protobuf.Duration',\n    'google.protobuf.FieldMask',\n    'google.protobuf.ListValue',\n    'google.protobuf.Struct',\n    'google.protobuf.Timestamp',\n    'google.protobuf.Value',\n]);\nfunction googleProtobufAnyToProto3JSON(obj) {\n    // https://developers.google.com/protocol-buffers/docs/proto3#json\n    // If the Any contains a value that has a special JSON mapping, it will be converted as follows:\n    // {\"@type\": xxx, \"value\": yyy}.\n    // Otherwise, the value will be converted into a JSON object, and the \"@type\" field will be inserted\n    // to indicate the actual data type.\n    const typeName = obj.type_url.replace(/^.*\\//, '');\n    let type;\n    try {\n        type = obj.$type.root.lookupType(typeName);\n    }\n    catch (err) {\n        throw new Error(`googleProtobufAnyToProto3JSON: cannot find type ${typeName}: ${err}`);\n    }\n    const valueMessage = type.decode(obj.value);\n    const valueProto3JSON = toproto3json_1.toProto3JSON(valueMessage);\n    if (specialJSON.has(typeName)) {\n        return {\n            '@type': obj.type_url,\n            value: valueProto3JSON,\n        };\n    }\n    valueProto3JSON['@type'] = obj.type_url;\n    return valueProto3JSON;\n}\nexports.googleProtobufAnyToProto3JSON = googleProtobufAnyToProto3JSON;\nfunction googleProtobufAnyFromProto3JSON(root, json) {\n    // Not all possible JSON values can hold Any, only real objects.\n    if (json === null || typeof json !== 'object' || Array.isArray(json)) {\n        throw new Error('googleProtobufAnyFromProto3JSON: must be an object to decode google.protobuf.Any');\n    }\n    const typeUrl = json['@type'];\n    if (!typeUrl || typeof typeUrl !== 'string') {\n        throw new Error('googleProtobufAnyFromProto3JSON: JSON serialization of google.protobuf.Any must contain @type field');\n    }\n    const typeName = typeUrl.replace(/^.*\\//, '');\n    let type;\n    try {\n        type = root.lookupType(typeName);\n    }\n    catch (err) {\n        throw new Error(`googleProtobufAnyFromProto3JSON: cannot find type ${typeName}: ${err}`);\n    }\n    let value = json;\n    if (specialJSON.has(typeName)) {\n        if (!('value' in json)) {\n            throw new Error(`googleProtobufAnyFromProto3JSON: JSON representation of google.protobuf.Any with type ${typeName} must contain the value field`);\n        }\n        value = json.value;\n    }\n    const valueMessage = fromproto3json_1.fromProto3JSON(type, value);\n    if (valueMessage === null) {\n        return {\n            type_url: typeUrl,\n            value: null,\n        };\n    }\n    const uint8array = type.encode(valueMessage).finish();\n    const buffer = Buffer.from(uint8array, 0, uint8array.byteLength);\n    const base64 = buffer.toString('base64');\n    return {\n        type_url: typeUrl,\n        value: base64,\n    };\n}\nexports.googleProtobufAnyFromProto3JSON = googleProtobufAnyFromProto3JSON;\n//# sourceMappingURL=any.js.map"]},"metadata":{},"sourceType":"script"}