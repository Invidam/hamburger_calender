{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const usePushWork = validator => {\n  _s();\n\n  const initVal = localStorage.getItem(\"workList\") ? localStorage.getItem(\"workList\") : [];\n  const [workList, setWorkList] = useState(initVal);\n\n  const onSubmitWork = event => {\n    event.preventDefault();\n    const workName = event.target.workName.value;\n    const workTime = parseInt(event.target.workTime.value);\n    const workObj = {\n      workName,\n      workTime\n    };\n    console.log(workObj);\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n\n    if (willUpdate) {\n      setWorkList(workList => [...workList, workObj]);\n    }\n  };\n\n  return {\n    workList,\n    onSubmitWork\n  };\n};\n\n_s(usePushWork, \"YVLqEpFLgtK5mvd/A4LvT7VuxxU=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/usePushWork.js"],"names":["useState","usePushWork","validator","initVal","localStorage","getItem","workList","setWorkList","onSubmitWork","event","preventDefault","workName","target","value","workTime","parseInt","workObj","console","log","willUpdate"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,WAAW,GAAIC,SAAD,IAAe;AAAA;;AACxC,QAAMC,OAAO,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,IACZD,YAAY,CAACC,OAAb,CAAqB,UAArB,CADY,GAEZ,EAFJ;AAGA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAACG,OAAD,CAAxC;;AACA,QAAMK,YAAY,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAaD,QAAb,CAAsBE,KAAvC;AACA,UAAMC,QAAQ,GAAGC,QAAQ,CAACN,KAAK,CAACG,MAAN,CAAaE,QAAb,CAAsBD,KAAvB,CAAzB;AACA,UAAMG,OAAO,GAAG;AAAEL,MAAAA,QAAF;AAAYG,MAAAA;AAAZ,KAAhB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAIG,UAAU,GAAG,IAAjB;AACA,QAAI,OAAOjB,SAAP,KAAqB,UAAzB,EAAqCiB,UAAU,GAAGjB,SAAS,CAACc,OAAD,CAAtB;;AACrC,QAAIG,UAAJ,EAAgB;AACdZ,MAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcU,OAAd,CAAf,CAAX;AACD;AACF,GAXD;;AAYA,SAAO;AAAEV,IAAAA,QAAF;AAAYE,IAAAA;AAAZ,GAAP;AACD,CAlBM;;GAAMP,W","sourcesContent":["import { useState } from \"react\";\n\nexport const usePushWork = (validator) => {\n  const initVal = localStorage.getItem(\"workList\")\n    ? localStorage.getItem(\"workList\")\n    : [];\n  const [workList, setWorkList] = useState(initVal);\n  const onSubmitWork = (event) => {\n    event.preventDefault();\n    const workName = event.target.workName.value;\n    const workTime = parseInt(event.target.workTime.value);\n    const workObj = { workName, workTime };\n    console.log(workObj);\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n    if (willUpdate) {\n      setWorkList((workList) => [...workList, workObj]);\n    }\n  };\n  return { workList, onSubmitWork };\n};\n"]},"metadata":{},"sourceType":"module"}