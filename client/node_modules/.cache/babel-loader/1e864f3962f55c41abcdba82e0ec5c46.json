{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const useEditTime = (recordTime, updateRecordTime, isWake, callback) => {\n  _s();\n\n  const [hour, setHour] = useState(recordTime.hour);\n  const [minute, setMinute] = useState(recordTime.minute);\n\n  const validator = timeObj => {\n    return timeObj.hour && timeObj.minute;\n  };\n\n  const onChangeHour = hour => setHour(hour);\n\n  const onChangeMinute = minute => setMinute(parseInt(minute));\n\n  const getErrText = () => `${isWake ? \"WakeTime\" : \"BedTime\"} is not entered.`;\n\n  const onEditRecordTime = event => {\n    event.preventDefault();\n    const timeObj = {\n      hour,\n      minute\n    };\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(timeObj);\n\n    if (willUpdate) {\n      callback(); //\n\n      updateRecordTime(timeObj);\n    } else {\n      alert(getErrText());\n    }\n  };\n\n  return {\n    onChangeHour,\n    onChangeMinute,\n    onEditRecordTime\n  };\n};\n\n_s(useEditTime, \"8Y8JHU7rTUZAoBP4SHevqYs85ew=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/time/useEditTime.js"],"names":["useState","useEditTime","recordTime","updateRecordTime","isWake","callback","hour","setHour","minute","setMinute","validator","timeObj","onChangeHour","onChangeMinute","parseInt","getErrText","onEditRecordTime","event","preventDefault","willUpdate","alert"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,UAAD,EAAaC,gBAAb,EAA+BC,MAA/B,EAAuCC,QAAvC,KAAoD;AAAA;;AAC7E,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAACE,UAAU,CAACI,IAAZ,CAAhC;AACA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAACE,UAAU,CAACM,MAAZ,CAApC;;AACA,QAAME,SAAS,GAAIC,OAAD,IAAa;AAC7B,WAAOA,OAAO,CAACL,IAAR,IAAgBK,OAAO,CAACH,MAA/B;AACD,GAFD;;AAGA,QAAMI,YAAY,GAAIN,IAAD,IAAUC,OAAO,CAACD,IAAD,CAAtC;;AACA,QAAMO,cAAc,GAAIL,MAAD,IAAYC,SAAS,CAACK,QAAQ,CAACN,MAAD,CAAT,CAA5C;;AACA,QAAMO,UAAU,GAAG,MAAO,GAAEX,MAAM,GAAG,UAAH,GAAgB,SAAU,kBAA5D;;AACA,QAAMY,gBAAgB,GAAIC,KAAD,IAAW;AAClCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMP,OAAO,GAAG;AAAEL,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAAhB;AACA,QAAIW,UAAU,GAAG,IAAjB;AACA,QAAI,OAAOT,SAAP,KAAqB,UAAzB,EAAqCS,UAAU,GAAGT,SAAS,CAACC,OAAD,CAAtB;;AACrC,QAAIQ,UAAJ,EAAgB;AACdd,MAAAA,QAAQ,GADM,CAEd;;AACAF,MAAAA,gBAAgB,CAACQ,OAAD,CAAhB;AACD,KAJD,MAIO;AACLS,MAAAA,KAAK,CAACL,UAAU,EAAX,CAAL;AACD;AACF,GAZD;;AAaA,SAAO;AAAEH,IAAAA,YAAF;AAAgBC,IAAAA,cAAhB;AAAgCG,IAAAA;AAAhC,GAAP;AACD,CAvBM;;GAAMf,W","sourcesContent":["import { useState } from \"react\";\n\nexport const useEditTime = (recordTime, updateRecordTime, isWake, callback) => {\n  const [hour, setHour] = useState(recordTime.hour);\n  const [minute, setMinute] = useState(recordTime.minute);\n  const validator = (timeObj) => {\n    return timeObj.hour && timeObj.minute;\n  };\n  const onChangeHour = (hour) => setHour(hour);\n  const onChangeMinute = (minute) => setMinute(parseInt(minute));\n  const getErrText = () => `${isWake ? \"WakeTime\" : \"BedTime\"} is not entered.`;\n  const onEditRecordTime = (event) => {\n    event.preventDefault();\n    const timeObj = { hour, minute };\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(timeObj);\n    if (willUpdate) {\n      callback();\n      //\n      updateRecordTime(timeObj);\n    } else {\n      alert(getErrText());\n    }\n  };\n  return { onChangeHour, onChangeMinute, onEditRecordTime };\n};\n"]},"metadata":{},"sourceType":"module"}