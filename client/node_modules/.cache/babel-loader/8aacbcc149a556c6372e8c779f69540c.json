{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API } from \"../../tools/API\";\nexport const useUpdateSetting = user => {\n  _s();\n\n  console.log(\"UPDATE SETTING HOOK USER: \");\n  const [targetWorkTime, setTargetWorkTime] = useState(user ? 0 : -1);\n  const [targetWakeHour, setTargetWakeHour] = useState(user ? 0 : -1);\n  const [targetBedHour, setTargetBedHour] = useState(user ? 0 : -1);\n  const [targetWakeMinute, setTargetWakeMinute] = useState(user ? 0 : -1);\n  const [targetBedMinute, setTargetBedMinute] = useState(user ? 0 : -1);\n\n  const onChangeTargetWorkTime = workTime => setTargetWorkTime(parseInt(workTime));\n\n  const onChangeTargetWakeHour = wakeHour => setTargetWakeHour(parseInt(wakeHour));\n\n  const onChangeTargetBedHour = bedHour => setTargetBedHour(parseInt(bedHour));\n\n  const onChangeTargetWakeMinute = wakeMinute => setTargetWakeMinute(parseInt(wakeMinute));\n\n  const onChangeTargetBedMinute = bedMinute => setTargetBedMinute(parseInt(bedMinute));\n\n  const getAndUpdateSetting = async () => {\n    try {\n      const data = await API.get(`/auth/setting/${user}`);\n      const settingObj = data === null || data === void 0 ? void 0 : data.data;\n      if (!data) throw new Error(\"Cannot find data\");\n      setTargetWorkTime(settingObj.targetWorkTime);\n      setTargetWakeHour(settingObj.targetWakeTime.hour);\n      setTargetBedHour(settingObj.targetBedTime.hour);\n      setTargetWakeMinute(settingObj.targetWakeTime.minute);\n      setTargetBedMinute(settingObj.targetBedTime.minute);\n    } catch (error) {\n      alert(error); // history.push(\"/setting\");\n    }\n  };\n\n  useEffect(() => {\n    if (user) getAndUpdateSetting();\n  }, [user]);\n\n  const validator = targetTimeObj => {\n    return targetTimeObj.targetWorkTime && targetTimeObj.targetWakeTime.hour && targetTimeObj.targetBedTime.hour && targetTimeObj.targetWakeTime.minute && targetTimeObj.targetBedTime.minute;\n  };\n\n  const onEditTargetTime = event => {\n    event.preventDefault();\n    let willUpdate = true;\n    const targetTimeObj = {\n      targetWorkTime,\n      targetWakeTime: {\n        hour: targetWakeHour,\n        minute: targetWakeMinute\n      },\n      targetBedTime: {\n        hour: targetBedHour,\n        minute: targetBedMinute\n      }\n    };\n    if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n\n    if (willUpdate) {\n      API.post(`/auth/setting/${user}`, {\n        value: targetTimeObj,\n        user\n      });\n    } else {\n      const targetWakeTime = targetWakeHour && targetWakeMinute;\n      const targetBedTime = targetBedHour && targetBedMinute;\n      let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${!targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"}${targetWakeTime ? \"\" : \"TargetWakeTime\"}${!targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"}${targetBedTime ? \"\" : \"TargetBedtime\"} ${!targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n\n  const targetTimeObj = {\n    targetWorkTime,\n    targetWakeTime: {\n      hour: targetWakeHour,\n      minute: targetWakeMinute\n    },\n    targetBedTime: {\n      hour: targetBedHour,\n      minute: targetBedMinute\n    }\n  };\n  return {\n    onEditTargetTime,\n    targetWorkTime,\n    onChangeTargetWorkTime,\n    targetTimeObj,\n    targetWakeHour,\n    targetBedHour,\n    targetWakeMinute,\n    targetBedMinute,\n    onChangeTargetWakeHour,\n    onChangeTargetBedHour,\n    onChangeTargetWakeMinute,\n    onChangeTargetBedMinute\n  };\n};\n\n_s(useUpdateSetting, \"U6h2sjYJyObLECzx0p2Hx+YxfY8=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useUpdateSetting.js"],"names":["useEffect","useState","API","useUpdateSetting","user","console","log","targetWorkTime","setTargetWorkTime","targetWakeHour","setTargetWakeHour","targetBedHour","setTargetBedHour","targetWakeMinute","setTargetWakeMinute","targetBedMinute","setTargetBedMinute","onChangeTargetWorkTime","workTime","parseInt","onChangeTargetWakeHour","wakeHour","onChangeTargetBedHour","bedHour","onChangeTargetWakeMinute","wakeMinute","onChangeTargetBedMinute","bedMinute","getAndUpdateSetting","data","get","settingObj","Error","targetWakeTime","hour","targetBedTime","minute","error","alert","validator","targetTimeObj","onEditTargetTime","event","preventDefault","willUpdate","post","value","errText"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API } from \"../../tools/API\";\n\nexport const useUpdateSetting = (user) => {\n  console.log(\"UPDATE SETTING HOOK USER: \");\n  const [targetWorkTime, setTargetWorkTime] = useState(user ? 0 : -1);\n  const [targetWakeHour, setTargetWakeHour] = useState(user ? 0 : -1);\n  const [targetBedHour, setTargetBedHour] = useState(user ? 0 : -1);\n  const [targetWakeMinute, setTargetWakeMinute] = useState(user ? 0 : -1);\n  const [targetBedMinute, setTargetBedMinute] = useState(user ? 0 : -1);\n\n  const onChangeTargetWorkTime = (workTime) =>\n    setTargetWorkTime(parseInt(workTime));\n  const onChangeTargetWakeHour = (wakeHour) =>\n    setTargetWakeHour(parseInt(wakeHour));\n  const onChangeTargetBedHour = (bedHour) =>\n    setTargetBedHour(parseInt(bedHour));\n  const onChangeTargetWakeMinute = (wakeMinute) =>\n    setTargetWakeMinute(parseInt(wakeMinute));\n  const onChangeTargetBedMinute = (bedMinute) =>\n    setTargetBedMinute(parseInt(bedMinute));\n\n  const getAndUpdateSetting = async () => {\n    try {\n      const data = await API.get(`/auth/setting/${user}`);\n      const settingObj = data?.data;\n      if (!data) throw new Error(\"Cannot find data\");\n      setTargetWorkTime(settingObj.targetWorkTime);\n      setTargetWakeHour(settingObj.targetWakeTime.hour);\n      setTargetBedHour(settingObj.targetBedTime.hour);\n      setTargetWakeMinute(settingObj.targetWakeTime.minute);\n      setTargetBedMinute(settingObj.targetBedTime.minute);\n    } catch (error) {\n      alert(error);\n      // history.push(\"/setting\");\n    }\n  };\n  useEffect(() => {\n    if (user) getAndUpdateSetting();\n  }, [user]);\n\n  const validator = (targetTimeObj) => {\n    return (\n      targetTimeObj.targetWorkTime &&\n      targetTimeObj.targetWakeTime.hour &&\n      targetTimeObj.targetBedTime.hour &&\n      targetTimeObj.targetWakeTime.minute &&\n      targetTimeObj.targetBedTime.minute\n    );\n  };\n  const onEditTargetTime = (event) => {\n    event.preventDefault();\n    let willUpdate = true;\n    const targetTimeObj = {\n      targetWorkTime,\n      targetWakeTime: { hour: targetWakeHour, minute: targetWakeMinute },\n      targetBedTime: { hour: targetBedHour, minute: targetBedMinute },\n    };\n    if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n    if (willUpdate) {\n      API.post(`/auth/setting/${user}`, {\n        value: targetTimeObj,\n        user,\n      });\n    } else {\n      const targetWakeTime = targetWakeHour && targetWakeMinute;\n      const targetBedTime = targetBedHour && targetBedMinute;\n      let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${\n        !targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"\n      }${targetWakeTime ? \"\" : \"TargetWakeTime\"}${\n        !targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"\n      }${targetBedTime ? \"\" : \"TargetBedtime\"} ${\n        !targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"\n      } not entered.`;\n      alert(errText);\n    }\n  };\n  const targetTimeObj = {\n    targetWorkTime,\n    targetWakeTime: { hour: targetWakeHour, minute: targetWakeMinute },\n    targetBedTime: { hour: targetBedHour, minute: targetBedMinute },\n  };\n  return {\n    onEditTargetTime,\n    targetWorkTime,\n    onChangeTargetWorkTime,\n    targetTimeObj,\n    targetWakeHour,\n    targetBedHour,\n    targetWakeMinute,\n    targetBedMinute,\n    onChangeTargetWakeHour,\n    onChangeTargetBedHour,\n    onChangeTargetWakeMinute,\n    onChangeTargetBedMinute,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}