{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API } from \"../../tools/axiosSetting\";\nexport const useUpdateSetting = user => {\n  _s();\n\n  console.log(\"UPDATE SETTING HOOK USER: \", user);\n  const [targetWorkTime, setTargetWorkTime] = useState(0);\n  const [targetWakeHour, setTargetWakeHour] = useState(0);\n  const [targetBedHour, setTargetBedHour] = useState(0);\n  const [targetWakeMinute, setTargetWakeMinute] = useState(0);\n  const [targetBedMinute, setTargetBedMinute] = useState(0);\n\n  const onChangeTargetWorkTime = workTime => setTargetWorkTime(parseInt(workTime));\n\n  const onChangeTargetWakeTime = wakeHour => setTargetWakeHour(parseInt(wakeHour));\n\n  const onChangeTargetBedTime = bedHour => setTargetBedHour(parseInt(bedHour));\n\n  const onChangeTargetWakeMinute = wakeMinute => setTargetWakeMinute(parseInt(wakeMinute));\n\n  const onChangeTargetBedMinute = bedMinute => setTargetBedMinute(parseInt(bedMinute));\n\n  const getAndUpdateSetting = async () => {\n    try {\n      const data = await API.get(`/auth/setting/${user}`);\n      const settingObj = data === null || data === void 0 ? void 0 : data.data;\n      if (!data) throw new Error(\"Cannot find data\");\n      console.log(\"SETTING DATA: \", settingObj);\n      setTargetWorkTime(settingObj.targetWorkTime);\n      setTargetWakeHour(settingObj.wakeHour);\n      setTargetBedHour(settingObj.bedHour);\n      setTargetWakeMinute(settingObj.wakeMinute);\n      setTargetBedMinute(settingObj.bedMinute);\n    } catch (error) {\n      alert(error); // history.push(\"/setting\");\n    }\n  };\n\n  useEffect(() => {\n    if (user) getAndUpdateSetting();\n  }, [user]);\n\n  const validator = targetTimeObj => {\n    return targetTimeObj.targetWorkTime && targetTimeObj.targetWakeHour && targetTimeObj.targetBedHour && targetTimeObj.targetWakeMinute && targetTimeObj.targetBedMinute;\n  };\n\n  const onEditTargetTime = event => {\n    event.preventDefault();\n    let willUpdate = true;\n    const targetTimeObj = {\n      targetWorkTime,\n      targetWakeHour,\n      targetBedHour,\n      targetWakeMinute,\n      targetBedMinute\n    };\n    if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n\n    if (willUpdate) {\n      console.log(\"SUBMIT: \", targetTimeObj);\n      API.post(`/auth/setting/${user}`, {\n        value: targetTimeObj,\n        user\n      });\n    } else {\n      const targetWakeTime = targetWakeHour && targetWakeMinute;\n      const targetBedTime = targetBedHour && targetBedMinute;\n      let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${!targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"}${targetWakeTime ? \"\" : \"TargetWakeTime\"}${!targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"}${targetBedTime ? \"\" : \"TargetBedtime\"} ${!targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n\n  const targetTimeObj = {\n    targetWorkTime,\n    targetWakeHour,\n    targetBedHour,\n    targetWakeMinute,\n    targetBedMinute\n  };\n  console.log(\"UPDATE SETTING HOOK targetTimeObj: \", targetTimeObj);\n  return {\n    onEditTargetTime,\n    targetWorkTime,\n    onChangeTargetWorkTime,\n    targetTimeObj,\n    targetWakeHour,\n    setTargetWakeHour,\n    targetBedHour,\n    setTargetBedHour,\n    targetWakeMinute,\n    setTargetWakeMinute,\n    targetBedMinute,\n    setTargetBedMinute\n  };\n};\n\n_s(useUpdateSetting, \"TSQkZFuw40zSMx1zE5dZNcFvSkw=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useUpdateSetting.js"],"names":["useEffect","useState","API","useUpdateSetting","user","console","log","targetWorkTime","setTargetWorkTime","targetWakeHour","setTargetWakeHour","targetBedHour","setTargetBedHour","targetWakeMinute","setTargetWakeMinute","targetBedMinute","setTargetBedMinute","onChangeTargetWorkTime","workTime","parseInt","onChangeTargetWakeTime","wakeHour","onChangeTargetBedTime","bedHour","onChangeTargetWakeMinute","wakeMinute","onChangeTargetBedMinute","bedMinute","getAndUpdateSetting","data","get","settingObj","Error","error","alert","validator","targetTimeObj","onEditTargetTime","event","preventDefault","willUpdate","post","value","targetWakeTime","targetBedTime","errText"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API } from \"../../tools/axiosSetting\";\n\nexport const useUpdateSetting = (user) => {\n  console.log(\"UPDATE SETTING HOOK USER: \", user);\n  const [targetWorkTime, setTargetWorkTime] = useState(0);\n  const [targetWakeHour, setTargetWakeHour] = useState(0);\n  const [targetBedHour, setTargetBedHour] = useState(0);\n  const [targetWakeMinute, setTargetWakeMinute] = useState(0);\n  const [targetBedMinute, setTargetBedMinute] = useState(0);\n\n  const onChangeTargetWorkTime = (workTime) =>\n    setTargetWorkTime(parseInt(workTime));\n  const onChangeTargetWakeTime = (wakeHour) =>\n    setTargetWakeHour(parseInt(wakeHour));\n  const onChangeTargetBedTime = (bedHour) =>\n    setTargetBedHour(parseInt(bedHour));\n  const onChangeTargetWakeMinute = (wakeMinute) =>\n    setTargetWakeMinute(parseInt(wakeMinute));\n  const onChangeTargetBedMinute = (bedMinute) =>\n    setTargetBedMinute(parseInt(bedMinute));\n\n  const getAndUpdateSetting = async () => {\n    try {\n      const data = await API.get(`/auth/setting/${user}`);\n      const settingObj = data?.data;\n      if (!data) throw new Error(\"Cannot find data\");\n      console.log(\"SETTING DATA: \", settingObj);\n      setTargetWorkTime(settingObj.targetWorkTime);\n      setTargetWakeHour(settingObj.wakeHour);\n      setTargetBedHour(settingObj.bedHour);\n      setTargetWakeMinute(settingObj.wakeMinute);\n      setTargetBedMinute(settingObj.bedMinute);\n    } catch (error) {\n      alert(error);\n      // history.push(\"/setting\");\n    }\n  };\n  useEffect(() => {\n    if (user) getAndUpdateSetting();\n  }, [user]);\n\n  const validator = (targetTimeObj) => {\n    return (\n      targetTimeObj.targetWorkTime &&\n      targetTimeObj.targetWakeHour &&\n      targetTimeObj.targetBedHour &&\n      targetTimeObj.targetWakeMinute &&\n      targetTimeObj.targetBedMinute\n    );\n  };\n  const onEditTargetTime = (event) => {\n    event.preventDefault();\n    let willUpdate = true;\n    const targetTimeObj = {\n      targetWorkTime,\n      targetWakeHour,\n      targetBedHour,\n      targetWakeMinute,\n      targetBedMinute,\n    };\n    if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n    if (willUpdate) {\n      console.log(\"SUBMIT: \", targetTimeObj);\n\n      API.post(`/auth/setting/${user}`, {\n        value: targetTimeObj,\n        user,\n      });\n    } else {\n      const targetWakeTime = targetWakeHour && targetWakeMinute;\n      const targetBedTime = targetBedHour && targetBedMinute;\n      let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${\n        !targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"\n      }${targetWakeTime ? \"\" : \"TargetWakeTime\"}${\n        !targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"\n      }${targetBedTime ? \"\" : \"TargetBedtime\"} ${\n        !targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"\n      } not entered.`;\n      alert(errText);\n    }\n  };\n  const targetTimeObj = {\n    targetWorkTime,\n    targetWakeHour,\n    targetBedHour,\n    targetWakeMinute,\n    targetBedMinute,\n  };\n  console.log(\"UPDATE SETTING HOOK targetTimeObj: \", targetTimeObj);\n  return {\n    onEditTargetTime,\n    targetWorkTime,\n    onChangeTargetWorkTime,\n    targetTimeObj,\n    targetWakeHour,\n    setTargetWakeHour,\n    targetBedHour,\n    setTargetBedHour,\n    targetWakeMinute,\n    setTargetWakeMinute,\n    targetBedMinute,\n    setTargetBedMinute,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}