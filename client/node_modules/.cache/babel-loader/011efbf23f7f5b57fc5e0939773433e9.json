{"ast":null,"code":"var _s = $RefreshSig$();\n\nexport const useEditTime = (recordTime, updateRecordTime, isWake, callback) => {\n  _s();\n\n  const [hour, setHour] = useState(recordTime.hour);\n  const [minute, setMinute] = useState(recordTime.minute);\n\n  const validator = timeObj => {\n    return timeObj.hour && timeObj.minute;\n  };\n\n  const onEditRecordTime = (event, idx) => {\n    event.preventDefault();\n    const hour = parseInt(event.target.hour.value);\n    const minute = parseInt(event.target.minute.value);\n    const timeObj = {\n      hour,\n      minute\n    };\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(timeObj);\n\n    if (willUpdate) {\n      callback();\n      updateRecordTime(timeObj);\n    } else {\n      let errText = `${isWake ? \"WakeTime\" : \"BedTime\"} is not entered.`;\n      alert(errText);\n    }\n  };\n\n  return {\n    onEditRecordTime\n  };\n};\n\n_s(useEditTime, \"8Y8JHU7rTUZAoBP4SHevqYs85ew=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/time/useEditTime.js"],"names":["useEditTime","recordTime","updateRecordTime","isWake","callback","hour","setHour","useState","minute","setMinute","validator","timeObj","onEditRecordTime","event","idx","preventDefault","parseInt","target","value","willUpdate","errText","alert"],"mappings":";;AAAA,OAAO,MAAMA,WAAW,GAAG,CAACC,UAAD,EAAaC,gBAAb,EAA+BC,MAA/B,EAAuCC,QAAvC,KAAoD;AAAA;;AAC7E,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBC,QAAQ,CAACN,UAAU,CAACI,IAAZ,CAAhC;AACA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBF,QAAQ,CAACN,UAAU,CAACO,MAAZ,CAApC;;AACA,QAAME,SAAS,GAAIC,OAAD,IAAa;AAC7B,WAAOA,OAAO,CAACN,IAAR,IAAgBM,OAAO,CAACH,MAA/B;AACD,GAFD;;AAGA,QAAMI,gBAAgB,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACvCD,IAAAA,KAAK,CAACE,cAAN;AACA,UAAMV,IAAI,GAAGW,QAAQ,CAACH,KAAK,CAACI,MAAN,CAAaZ,IAAb,CAAkBa,KAAnB,CAArB;AACA,UAAMV,MAAM,GAAGQ,QAAQ,CAACH,KAAK,CAACI,MAAN,CAAaT,MAAb,CAAoBU,KAArB,CAAvB;AACA,UAAMP,OAAO,GAAG;AAAEN,MAAAA,IAAF;AAAQG,MAAAA;AAAR,KAAhB;AACA,QAAIW,UAAU,GAAG,IAAjB;AACA,QAAI,OAAOT,SAAP,KAAqB,UAAzB,EAAqCS,UAAU,GAAGT,SAAS,CAACC,OAAD,CAAtB;;AACrC,QAAIQ,UAAJ,EAAgB;AACdf,MAAAA,QAAQ;AACRF,MAAAA,gBAAgB,CAACS,OAAD,CAAhB;AACD,KAHD,MAGO;AACL,UAAIS,OAAO,GAAI,GAAEjB,MAAM,GAAG,UAAH,GAAgB,SAAU,kBAAjD;AACAkB,MAAAA,KAAK,CAACD,OAAD,CAAL;AACD;AACF,GAdD;;AAeA,SAAO;AAAER,IAAAA;AAAF,GAAP;AACD,CAtBM;;GAAMZ,W","sourcesContent":["export const useEditTime = (recordTime, updateRecordTime, isWake, callback) => {\n  const [hour, setHour] = useState(recordTime.hour);\n  const [minute, setMinute] = useState(recordTime.minute);\n  const validator = (timeObj) => {\n    return timeObj.hour && timeObj.minute;\n  };\n  const onEditRecordTime = (event, idx) => {\n    event.preventDefault();\n    const hour = parseInt(event.target.hour.value);\n    const minute = parseInt(event.target.minute.value);\n    const timeObj = { hour, minute };\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(timeObj);\n    if (willUpdate) {\n      callback();\n      updateRecordTime(timeObj);\n    } else {\n      let errText = `${isWake ? \"WakeTime\" : \"BedTime\"} is not entered.`;\n      alert(errText);\n    }\n  };\n  return { onEditRecordTime };\n};\n"]},"metadata":{},"sourceType":"module"}