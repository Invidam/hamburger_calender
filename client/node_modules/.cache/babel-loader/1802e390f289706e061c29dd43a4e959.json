{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport qs from \"qs\";\nimport axios from \"axios\";\nimport isEmail from \"validator/lib/isEmail\";\nimport { useState } from \"react\";\naxios.interceptors.response.use(res => {\n  return res;\n}, e => {\n  if (e.response.status === 401) {\n    var _e$response;\n\n    console.log(\"ER1ROR: \", e.response);\n    alert(`401 - Unauthorized\\n${(_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.data}`);\n  }\n\n  return Promise.reject(e);\n});\nexport const useAttemptSignup = ({\n  history,\n  locaiton\n}) => {\n  _s();\n\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleAttemptSignup = async () => {\n    try {\n      // event.preventDefault();\n      //   const { code } = req.body;\n      console.log(\"CONNET ON REACT-REGISTER page: \");\n      console.log(username, email, password);\n\n      if (!isEmail(email)) {\n        throw \"Unexpected Email Form. Please Retry.\";\n      }\n\n      if (!username || !email || !password) {\n        let errText = `[ERROR] ${username ? \"\" : \"Username\"}${!email + !password > 0 && !username ? \", \" : \"\"}${email ? \"\" : \"Email\"}${!password > 0 && !email ? \", \" : \"\"}${password ? \"\" : \"Password\"} ${!username + !email + !password > 1 ? \"are\" : \"is\"} not entered.`;\n        throw errText;\n      }\n\n      console.log(\"BEF AXIOS\");\n      const response = await axios.post(\"/auth/signup\", {\n        username,\n        email,\n        password\n      });\n      console.log(\"RES: \", response);\n      alert(\"Sign up complete.\");\n      history.push(\"/\");\n    } catch (error) {\n      console.error(error);\n      alert(error, \"lol\");\n    }\n  };\n\n  return {\n    username,\n    setUsername,\n    email,\n    setEmail,\n    password,\n    setPassword,\n    handleAttemptSignup\n  };\n}; //\n\n_s(useAttemptSignup, \"qXzfcSnOp7L14Dddg986jK2+oO8=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useAttemptSignup.js"],"names":["qs","axios","isEmail","useState","interceptors","response","use","res","e","status","console","log","alert","data","Promise","reject","useAttemptSignup","history","locaiton","username","setUsername","email","setEmail","password","setPassword","handleAttemptSignup","errText","post","push","error"],"mappings":"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","sourcesContent":["import qs from \"qs\";\nimport axios from \"axios\";\nimport isEmail from \"validator/lib/isEmail\";\nimport { useState } from \"react\";\naxios.interceptors.response.use(\n  (res) => {\n    return res;\n  },\n  (e) => {\n    if (e.response.status === 401) {\n      console.log(\"ER1ROR: \", e.response);\n      alert(`401 - Unauthorized\\n${e.response?.data}`);\n    }\n    return Promise.reject(e);\n  }\n);\n\nexport const useAttemptSignup = ({ history, locaiton }) => {\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const handleAttemptSignup = async () => {\n    try {\n      // event.preventDefault();\n      //   const { code } = req.body;\n      console.log(\"CONNET ON REACT-REGISTER page: \");\n      console.log(username, email, password);\n      if (!isEmail(email)) {\n        throw \"Unexpected Email Form. Please Retry.\";\n      }\n      if (!username || !email || !password) {\n        let errText = `[ERROR] ${username ? \"\" : \"Username\"}${\n          !email + !password > 0 && !username ? \", \" : \"\"\n        }${email ? \"\" : \"Email\"}${!password > 0 && !email ? \", \" : \"\"}${\n          password ? \"\" : \"Password\"\n        } ${!username + !email + !password > 1 ? \"are\" : \"is\"} not entered.`;\n        throw errText;\n      }\n      console.log(\"BEF AXIOS\");\n      const response = await axios.post(\"/auth/signup\", {\n        username,\n        email,\n        password,\n      });\n      console.log(\"RES: \", response);\n      alert(\"Sign up complete.\");\n      history.push(\"/\");\n    } catch (error) {\n      console.error(error);\n      alert(error, \"lol\");\n    }\n  };\n  return {\n    username,\n    setUsername,\n    email,\n    setEmail,\n    password,\n    setPassword,\n    handleAttemptSignup,\n  };\n};\n\n//\n"]},"metadata":{},"sourceType":"module"}