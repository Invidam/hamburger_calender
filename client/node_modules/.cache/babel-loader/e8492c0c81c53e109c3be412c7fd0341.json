{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleProtobufValueFromProto3JSON = exports.googleProtobufListValueFromProto3JSON = exports.googleProtobufStructFromProto3JSON = exports.googleProtobufValueToProto3JSON = exports.googleProtobufListValueToProto3JSON = exports.googleProtobufStructToProto3JSON = void 0;\n\nconst assert = require(\"assert\");\n\nfunction googleProtobufStructToProto3JSON(obj) {\n  const result = {};\n  const fields = obj.fields;\n\n  for (const [key, value] of Object.entries(fields)) {\n    result[key] = googleProtobufValueToProto3JSON(value);\n  }\n\n  return result;\n}\n\nexports.googleProtobufStructToProto3JSON = googleProtobufStructToProto3JSON;\n\nfunction googleProtobufListValueToProto3JSON(obj) {\n  assert(Array.isArray(obj.values), 'ListValue internal representation must contain array of values');\n  return obj.values.map(googleProtobufValueToProto3JSON);\n}\n\nexports.googleProtobufListValueToProto3JSON = googleProtobufListValueToProto3JSON;\n\nfunction googleProtobufValueToProto3JSON(obj) {\n  if (Object.prototype.hasOwnProperty.call(obj, 'nullValue')) {\n    return null;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'numberValue') && typeof obj.numberValue === 'number') {\n    return obj.numberValue;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'stringValue') && typeof obj.stringValue === 'string') {\n    return obj.stringValue;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'boolValue') && typeof obj.boolValue === 'boolean') {\n    return obj.boolValue;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'structValue') && typeof obj.structValue === 'object') {\n    return googleProtobufStructToProto3JSON(obj.structValue);\n  }\n\n  if (Object.prototype.hasOwnProperty.call(obj, 'listValue') && typeof obj === 'object' && typeof obj.listValue === 'object') {\n    return googleProtobufListValueToProto3JSON(obj.listValue);\n  } // Assuming empty Value to be null\n\n\n  return null;\n}\n\nexports.googleProtobufValueToProto3JSON = googleProtobufValueToProto3JSON;\n\nfunction googleProtobufStructFromProto3JSON(json) {\n  const fields = {};\n\n  for (const [key, value] of Object.entries(json)) {\n    fields[key] = googleProtobufValueFromProto3JSON(value);\n  }\n\n  return {\n    fields\n  };\n}\n\nexports.googleProtobufStructFromProto3JSON = googleProtobufStructFromProto3JSON;\n\nfunction googleProtobufListValueFromProto3JSON(json) {\n  return {\n    values: json.map(element => googleProtobufValueFromProto3JSON(element))\n  };\n}\n\nexports.googleProtobufListValueFromProto3JSON = googleProtobufListValueFromProto3JSON;\n\nfunction googleProtobufValueFromProto3JSON(json) {\n  if (json === null) {\n    return {\n      nullValue: 'NULL_VALUE'\n    };\n  }\n\n  if (typeof json === 'number') {\n    return {\n      numberValue: json\n    };\n  }\n\n  if (typeof json === 'string') {\n    return {\n      stringValue: json\n    };\n  }\n\n  if (typeof json === 'boolean') {\n    return {\n      boolValue: json\n    };\n  }\n\n  if (Array.isArray(json)) {\n    return {\n      listValue: googleProtobufListValueFromProto3JSON(json)\n    };\n  }\n\n  if (typeof json === 'object') {\n    return {\n      structValue: googleProtobufStructFromProto3JSON(json)\n    };\n  }\n\n  throw new Error(`googleProtobufValueFromProto3JSON: incorrect parameter type: ${typeof json}`);\n}\n\nexports.googleProtobufValueFromProto3JSON = googleProtobufValueFromProto3JSON;","map":{"version":3,"sources":["../../typescript/src/value.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.googleProtobufValueFromProto3JSON = exports.googleProtobufListValueFromProto3JSON = exports.googleProtobufStructFromProto3JSON = exports.googleProtobufValueToProto3JSON = exports.googleProtobufListValueToProto3JSON = exports.googleProtobufStructToProto3JSON = void 0;\nconst assert = require(\"assert\");\nfunction googleProtobufStructToProto3JSON(obj) {\n    const result = {};\n    const fields = obj.fields;\n    for (const [key, value] of Object.entries(fields)) {\n        result[key] = googleProtobufValueToProto3JSON(value);\n    }\n    return result;\n}\nexports.googleProtobufStructToProto3JSON = googleProtobufStructToProto3JSON;\nfunction googleProtobufListValueToProto3JSON(obj) {\n    assert(Array.isArray(obj.values), 'ListValue internal representation must contain array of values');\n    return obj.values.map(googleProtobufValueToProto3JSON);\n}\nexports.googleProtobufListValueToProto3JSON = googleProtobufListValueToProto3JSON;\nfunction googleProtobufValueToProto3JSON(obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, 'nullValue')) {\n        return null;\n    }\n    if (Object.prototype.hasOwnProperty.call(obj, 'numberValue') &&\n        typeof obj.numberValue === 'number') {\n        return obj.numberValue;\n    }\n    if (Object.prototype.hasOwnProperty.call(obj, 'stringValue') &&\n        typeof obj.stringValue === 'string') {\n        return obj.stringValue;\n    }\n    if (Object.prototype.hasOwnProperty.call(obj, 'boolValue') &&\n        typeof obj.boolValue === 'boolean') {\n        return obj.boolValue;\n    }\n    if (Object.prototype.hasOwnProperty.call(obj, 'structValue') &&\n        typeof obj.structValue === 'object') {\n        return googleProtobufStructToProto3JSON(obj.structValue);\n    }\n    if (Object.prototype.hasOwnProperty.call(obj, 'listValue') &&\n        typeof obj === 'object' &&\n        typeof obj.listValue === 'object') {\n        return googleProtobufListValueToProto3JSON(obj.listValue);\n    }\n    // Assuming empty Value to be null\n    return null;\n}\nexports.googleProtobufValueToProto3JSON = googleProtobufValueToProto3JSON;\nfunction googleProtobufStructFromProto3JSON(json) {\n    const fields = {};\n    for (const [key, value] of Object.entries(json)) {\n        fields[key] = googleProtobufValueFromProto3JSON(value);\n    }\n    return { fields };\n}\nexports.googleProtobufStructFromProto3JSON = googleProtobufStructFromProto3JSON;\nfunction googleProtobufListValueFromProto3JSON(json) {\n    return {\n        values: json.map(element => googleProtobufValueFromProto3JSON(element)),\n    };\n}\nexports.googleProtobufListValueFromProto3JSON = googleProtobufListValueFromProto3JSON;\nfunction googleProtobufValueFromProto3JSON(json) {\n    if (json === null) {\n        return { nullValue: 'NULL_VALUE' };\n    }\n    if (typeof json === 'number') {\n        return { numberValue: json };\n    }\n    if (typeof json === 'string') {\n        return { stringValue: json };\n    }\n    if (typeof json === 'boolean') {\n        return { boolValue: json };\n    }\n    if (Array.isArray(json)) {\n        return {\n            listValue: googleProtobufListValueFromProto3JSON(json),\n        };\n    }\n    if (typeof json === 'object') {\n        return {\n            structValue: googleProtobufStructFromProto3JSON(json),\n        };\n    }\n    throw new Error(`googleProtobufValueFromProto3JSON: incorrect parameter type: ${typeof json}`);\n}\nexports.googleProtobufValueFromProto3JSON = googleProtobufValueFromProto3JSON;\n//# sourceMappingURL=value.js.map"]},"metadata":{},"sourceType":"script"}