{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const useEditWork = (workList, setWorkList, idx, callback) => {\n  _s();\n\n  const [workColor, setColor] = useState(workList.length > idx ? workList[idx].workColor : undefined);\n  const [workName, setWorkName] = useState(workList.length > idx ? workList[idx].workName : undefined);\n  const [workTime, setWorkTime] = useState(workList.length > idx ? workList[idx].workTime : undefined);\n\n  const hexToRgba = color => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n\n  const onSubmitColor = color => {\n    if (!color) {\n      console.log(\"NO\", color);\n    } else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n\n    setColor(color);\n  };\n\n  const onChangeWorkName = name => setWorkName(name);\n\n  const onChangeWorkTime = time => setWorkTime(parseInt(time));\n\n  const validator = workObj => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n\n  const onEditWork = (event, idx) => {\n    event.preventDefault();\n    const workObj = {\n      workName,\n      workTime,\n      workColor\n    };\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n\n    if (willUpdate) {\n      callback();\n      const workListTemp = [...workList];\n      workListTemp.splice(idx, 1, workObj);\n      setWorkList(workListTemp);\n    } else {\n      let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${!workTime + !workColor > 0 && !workName ? \", \" : \"\"}${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${workColor ? \"\" : \"WorkColor\"} ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n\n  return {\n    onSubmitColor,\n    onChangeWorkName,\n    onChangeWorkTime,\n    onEditWork\n  };\n};\n\n_s(useEditWork, \"bLFLvIlD086hPfDOI4GW1MNTFnY=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/work/useEditWork.js"],"names":["useState","useEditWork","workList","setWorkList","idx","callback","workColor","setColor","length","undefined","workName","setWorkName","workTime","setWorkTime","hexToRgba","color","r","parseInt","substr","g","b","onSubmitColor","console","log","onChangeWorkName","name","onChangeWorkTime","time","validator","workObj","onEditWork","event","preventDefault","willUpdate","workListTemp","splice","errText","alert"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nexport const useEditWork = (workList, setWorkList, idx, callback) => {\n  const [workColor, setColor] = useState(\n    workList.length > idx ? workList[idx].workColor : undefined\n  );\n  const [workName, setWorkName] = useState(\n    workList.length > idx ? workList[idx].workName : undefined\n  );\n  const [workTime, setWorkTime] = useState(\n    workList.length > idx ? workList[idx].workTime : undefined\n  );\n\n  const hexToRgba = (color) => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n  const onSubmitColor = (color) => {\n    if (!color) {\n      console.log(\"NO\", color);\n    } else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n    setColor(color);\n  };\n  const onChangeWorkName = (name) => setWorkName(name);\n  const onChangeWorkTime = (time) => setWorkTime(parseInt(time));\n  const validator = (workObj) => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n  const onEditWork = (event, idx) => {\n    event.preventDefault();\n    const workObj = { workName, workTime, workColor };\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n    if (willUpdate) {\n      callback();\n      const workListTemp = [...workList];\n      workListTemp.splice(idx, 1, workObj);\n      setWorkList(workListTemp);\n    } else {\n      let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${\n        !workTime + !workColor > 0 && !workName ? \", \" : \"\"\n      }${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${\n        workColor ? \"\" : \"WorkColor\"\n      } ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n  return { onSubmitColor, onChangeWorkName, onChangeWorkTime, onEditWork };\n};\n"]},"metadata":{},"sourceType":"module"}