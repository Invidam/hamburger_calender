{"ast":null,"code":"/*! firebase-admin v9.11.1 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DatabaseService = void 0;\n\nvar url_1 = require(\"url\");\n\nvar path = require(\"path\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar index_1 = require(\"../utils/index\");\n\nvar TOKEN_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1000;\n\nvar DatabaseService = function () {\n  function DatabaseService(app) {\n    this.databases = {};\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseDatabaseError({\n        code: 'invalid-argument',\n        message: 'First argument passed to admin.database() must be a valid Firebase app instance.'\n      });\n    }\n\n    this.appInternal = app;\n  }\n  /**\n   * @internal\n   */\n\n\n  DatabaseService.prototype.delete = function () {\n    var _this = this;\n\n    if (this.tokenListener) {\n      this.appInternal.INTERNAL.removeAuthTokenListener(this.tokenListener);\n      clearTimeout(this.tokenRefreshTimeout);\n    }\n\n    var promises = [];\n\n    for (var _i = 0, _a = Object.keys(this.databases); _i < _a.length; _i++) {\n      var dbUrl = _a[_i];\n      var db = this.databases[dbUrl];\n      promises.push(db.INTERNAL.delete());\n    }\n\n    return Promise.all(promises).then(function () {\n      _this.databases = {};\n    });\n  };\n\n  Object.defineProperty(DatabaseService.prototype, \"app\", {\n    /**\n     * Returns the app associated with this DatabaseService instance.\n     *\n     * @return The app associated with this DatabaseService instance.\n     */\n    get: function () {\n      return this.appInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DatabaseService.prototype.getDatabase = function (url) {\n    var dbUrl = this.ensureUrl(url);\n\n    if (!validator.isNonEmptyString(dbUrl)) {\n      throw new error_1.FirebaseDatabaseError({\n        code: 'invalid-argument',\n        message: 'Database URL must be a valid, non-empty URL string.'\n      });\n    }\n\n    var db = this.databases[dbUrl];\n\n    if (typeof db === 'undefined') {\n      var rtdb = require('@firebase/database'); // eslint-disable-line @typescript-eslint/no-var-requires\n\n\n      db = rtdb.initStandalone(this.appInternal, dbUrl, index_1.getSdkVersion()).instance;\n      var rulesClient_1 = new DatabaseRulesClient(this.app, dbUrl);\n\n      db.getRules = function () {\n        return rulesClient_1.getRules();\n      };\n\n      db.getRulesJSON = function () {\n        return rulesClient_1.getRulesJSON();\n      };\n\n      db.setRules = function (source) {\n        return rulesClient_1.setRules(source);\n      };\n\n      this.databases[dbUrl] = db;\n    }\n\n    if (!this.tokenListener) {\n      this.tokenListener = this.onTokenChange.bind(this);\n      this.appInternal.INTERNAL.addAuthTokenListener(this.tokenListener);\n    }\n\n    return db;\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  DatabaseService.prototype.onTokenChange = function (_) {\n    var token = this.appInternal.INTERNAL.getCachedToken();\n\n    if (token) {\n      var delayMillis = token.expirationTime - TOKEN_REFRESH_THRESHOLD_MILLIS - Date.now(); // If the new token is set to expire soon (unlikely), do nothing. Somebody will eventually\n      // notice and refresh the token, at which point this callback will fire again.\n\n      if (delayMillis > 0) {\n        this.scheduleTokenRefresh(delayMillis);\n      }\n    }\n  };\n\n  DatabaseService.prototype.scheduleTokenRefresh = function (delayMillis) {\n    var _this = this;\n\n    clearTimeout(this.tokenRefreshTimeout);\n    this.tokenRefreshTimeout = setTimeout(function () {\n      _this.appInternal.INTERNAL.getToken(\n      /*forceRefresh=*/\n      true).catch(function () {// Ignore the error since this might just be an intermittent failure. If we really cannot\n        // refresh the token, an error will be logged once the existing token expires and we try\n        // to fetch a fresh one.\n      });\n    }, delayMillis);\n  };\n\n  DatabaseService.prototype.ensureUrl = function (url) {\n    if (typeof url !== 'undefined') {\n      return url;\n    } else if (typeof this.appInternal.options.databaseURL !== 'undefined') {\n      return this.appInternal.options.databaseURL;\n    }\n\n    throw new error_1.FirebaseDatabaseError({\n      code: 'invalid-argument',\n      message: 'Can\\'t determine Firebase Database URL.'\n    });\n  };\n\n  return DatabaseService;\n}();\n\nexports.DatabaseService = DatabaseService;\nvar RULES_URL_PATH = '.settings/rules.json';\n/**\n * A helper client for managing RTDB security rules.\n */\n\nvar DatabaseRulesClient = function () {\n  function DatabaseRulesClient(app, dbUrl) {\n    var parsedUrl = new url_1.URL(dbUrl);\n    var emulatorHost = process.env.FIREBASE_DATABASE_EMULATOR_HOST;\n\n    if (emulatorHost) {\n      var namespace = extractNamespace(parsedUrl);\n      parsedUrl = new url_1.URL(\"http://\" + emulatorHost + \"?ns=\" + namespace);\n    }\n\n    parsedUrl.pathname = path.join(parsedUrl.pathname, RULES_URL_PATH);\n    this.dbUrl = parsedUrl.toString();\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n  /**\n   * Gets the currently applied security rules as a string. The return value consists of\n   * the rules source including comments.\n   *\n   * @return A promise fulfilled with the rules as a raw string.\n   */\n\n\n  DatabaseRulesClient.prototype.getRules = function () {\n    var _this = this;\n\n    var req = {\n      method: 'GET',\n      url: this.dbUrl\n    };\n    return this.httpClient.send(req).then(function (resp) {\n      if (!resp.text) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'HTTP response missing data.');\n      }\n\n      return resp.text;\n    }).catch(function (err) {\n      throw _this.handleError(err);\n    });\n  };\n  /**\n   * Gets the currently applied security rules as a parsed JSON object. Any comments in\n   * the original source are stripped away.\n   *\n   * @return {Promise<object>} A promise fulfilled with the parsed rules source.\n   */\n\n\n  DatabaseRulesClient.prototype.getRulesJSON = function () {\n    var _this = this;\n\n    var req = {\n      method: 'GET',\n      url: this.dbUrl,\n      data: {\n        format: 'strict'\n      }\n    };\n    return this.httpClient.send(req).then(function (resp) {\n      return resp.data;\n    }).catch(function (err) {\n      throw _this.handleError(err);\n    });\n  };\n  /**\n   * Sets the specified rules on the Firebase Database instance. If the rules source is\n   * specified as a string or a Buffer, it may include comments.\n   *\n   * @param {string|Buffer|object} source Source of the rules to apply. Must not be `null`\n   *  or empty.\n   * @return {Promise<void>} Resolves when the rules are set on the Database.\n   */\n\n\n  DatabaseRulesClient.prototype.setRules = function (source) {\n    var _this = this;\n\n    if (!validator.isNonEmptyString(source) && !validator.isBuffer(source) && !validator.isNonNullObject(source)) {\n      var error = new error_1.FirebaseDatabaseError({\n        code: 'invalid-argument',\n        message: 'Source must be a non-empty string, Buffer or an object.'\n      });\n      return Promise.reject(error);\n    }\n\n    var req = {\n      method: 'PUT',\n      url: this.dbUrl,\n      data: source,\n      headers: {\n        'content-type': 'application/json; charset=utf-8'\n      }\n    };\n    return this.httpClient.send(req).then(function () {\n      return;\n    }).catch(function (err) {\n      throw _this.handleError(err);\n    });\n  };\n\n  DatabaseRulesClient.prototype.handleError = function (err) {\n    if (err instanceof api_request_1.HttpError) {\n      return new error_1.FirebaseDatabaseError({\n        code: error_1.AppErrorCodes.INTERNAL_ERROR,\n        message: this.getErrorMessage(err)\n      });\n    }\n\n    return err;\n  };\n\n  DatabaseRulesClient.prototype.getErrorMessage = function (err) {\n    var intro = 'Error while accessing security rules';\n\n    try {\n      var body = err.response.data;\n\n      if (body && body.error) {\n        return intro + \": \" + body.error.trim();\n      }\n    } catch (_a) {// Ignore parsing errors\n    }\n\n    return intro + \": \" + err.response.text;\n  };\n\n  return DatabaseRulesClient;\n}();\n\nfunction extractNamespace(parsedUrl) {\n  var ns = parsedUrl.searchParams.get('ns');\n\n  if (ns) {\n    return ns;\n  }\n\n  var hostname = parsedUrl.hostname;\n  var dotIndex = hostname.indexOf('.');\n  return hostname.substring(0, dotIndex).toLowerCase();\n}","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/firebase-admin/lib/database/database-internal.js"],"names":["Object","defineProperty","exports","value","DatabaseService","url_1","require","path","error_1","validator","api_request_1","index_1","TOKEN_REFRESH_THRESHOLD_MILLIS","app","databases","isNonNullObject","FirebaseDatabaseError","code","message","appInternal","prototype","delete","_this","tokenListener","INTERNAL","removeAuthTokenListener","clearTimeout","tokenRefreshTimeout","promises","_i","_a","keys","length","dbUrl","db","push","Promise","all","then","get","enumerable","configurable","getDatabase","url","ensureUrl","isNonEmptyString","rtdb","initStandalone","getSdkVersion","instance","rulesClient_1","DatabaseRulesClient","getRules","getRulesJSON","setRules","source","onTokenChange","bind","addAuthTokenListener","_","token","getCachedToken","delayMillis","expirationTime","Date","now","scheduleTokenRefresh","setTimeout","getToken","catch","options","databaseURL","RULES_URL_PATH","parsedUrl","URL","emulatorHost","process","env","FIREBASE_DATABASE_EMULATOR_HOST","namespace","extractNamespace","pathname","join","toString","httpClient","AuthorizedHttpClient","req","method","send","resp","text","FirebaseAppError","AppErrorCodes","INTERNAL_ERROR","err","handleError","data","format","isBuffer","error","reject","headers","HttpError","getErrorMessage","intro","body","response","trim","ns","searchParams","hostname","dotIndex","indexOf","substring","toLowerCase"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.11.1 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatabaseService = void 0;\nvar url_1 = require(\"url\");\nvar path = require(\"path\");\nvar error_1 = require(\"../utils/error\");\nvar validator = require(\"../utils/validator\");\nvar api_request_1 = require(\"../utils/api-request\");\nvar index_1 = require(\"../utils/index\");\nvar TOKEN_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1000;\nvar DatabaseService = /** @class */ (function () {\n    function DatabaseService(app) {\n        this.databases = {};\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseDatabaseError({\n                code: 'invalid-argument',\n                message: 'First argument passed to admin.database() must be a valid Firebase app instance.',\n            });\n        }\n        this.appInternal = app;\n    }\n    /**\n     * @internal\n     */\n    DatabaseService.prototype.delete = function () {\n        var _this = this;\n        if (this.tokenListener) {\n            this.appInternal.INTERNAL.removeAuthTokenListener(this.tokenListener);\n            clearTimeout(this.tokenRefreshTimeout);\n        }\n        var promises = [];\n        for (var _i = 0, _a = Object.keys(this.databases); _i < _a.length; _i++) {\n            var dbUrl = _a[_i];\n            var db = this.databases[dbUrl];\n            promises.push(db.INTERNAL.delete());\n        }\n        return Promise.all(promises).then(function () {\n            _this.databases = {};\n        });\n    };\n    Object.defineProperty(DatabaseService.prototype, \"app\", {\n        /**\n         * Returns the app associated with this DatabaseService instance.\n         *\n         * @return The app associated with this DatabaseService instance.\n         */\n        get: function () {\n            return this.appInternal;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DatabaseService.prototype.getDatabase = function (url) {\n        var dbUrl = this.ensureUrl(url);\n        if (!validator.isNonEmptyString(dbUrl)) {\n            throw new error_1.FirebaseDatabaseError({\n                code: 'invalid-argument',\n                message: 'Database URL must be a valid, non-empty URL string.',\n            });\n        }\n        var db = this.databases[dbUrl];\n        if (typeof db === 'undefined') {\n            var rtdb = require('@firebase/database'); // eslint-disable-line @typescript-eslint/no-var-requires\n            db = rtdb.initStandalone(this.appInternal, dbUrl, index_1.getSdkVersion()).instance;\n            var rulesClient_1 = new DatabaseRulesClient(this.app, dbUrl);\n            db.getRules = function () {\n                return rulesClient_1.getRules();\n            };\n            db.getRulesJSON = function () {\n                return rulesClient_1.getRulesJSON();\n            };\n            db.setRules = function (source) {\n                return rulesClient_1.setRules(source);\n            };\n            this.databases[dbUrl] = db;\n        }\n        if (!this.tokenListener) {\n            this.tokenListener = this.onTokenChange.bind(this);\n            this.appInternal.INTERNAL.addAuthTokenListener(this.tokenListener);\n        }\n        return db;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    DatabaseService.prototype.onTokenChange = function (_) {\n        var token = this.appInternal.INTERNAL.getCachedToken();\n        if (token) {\n            var delayMillis = token.expirationTime - TOKEN_REFRESH_THRESHOLD_MILLIS - Date.now();\n            // If the new token is set to expire soon (unlikely), do nothing. Somebody will eventually\n            // notice and refresh the token, at which point this callback will fire again.\n            if (delayMillis > 0) {\n                this.scheduleTokenRefresh(delayMillis);\n            }\n        }\n    };\n    DatabaseService.prototype.scheduleTokenRefresh = function (delayMillis) {\n        var _this = this;\n        clearTimeout(this.tokenRefreshTimeout);\n        this.tokenRefreshTimeout = setTimeout(function () {\n            _this.appInternal.INTERNAL.getToken(/*forceRefresh=*/ true)\n                .catch(function () {\n                // Ignore the error since this might just be an intermittent failure. If we really cannot\n                // refresh the token, an error will be logged once the existing token expires and we try\n                // to fetch a fresh one.\n            });\n        }, delayMillis);\n    };\n    DatabaseService.prototype.ensureUrl = function (url) {\n        if (typeof url !== 'undefined') {\n            return url;\n        }\n        else if (typeof this.appInternal.options.databaseURL !== 'undefined') {\n            return this.appInternal.options.databaseURL;\n        }\n        throw new error_1.FirebaseDatabaseError({\n            code: 'invalid-argument',\n            message: 'Can\\'t determine Firebase Database URL.',\n        });\n    };\n    return DatabaseService;\n}());\nexports.DatabaseService = DatabaseService;\nvar RULES_URL_PATH = '.settings/rules.json';\n/**\n * A helper client for managing RTDB security rules.\n */\nvar DatabaseRulesClient = /** @class */ (function () {\n    function DatabaseRulesClient(app, dbUrl) {\n        var parsedUrl = new url_1.URL(dbUrl);\n        var emulatorHost = process.env.FIREBASE_DATABASE_EMULATOR_HOST;\n        if (emulatorHost) {\n            var namespace = extractNamespace(parsedUrl);\n            parsedUrl = new url_1.URL(\"http://\" + emulatorHost + \"?ns=\" + namespace);\n        }\n        parsedUrl.pathname = path.join(parsedUrl.pathname, RULES_URL_PATH);\n        this.dbUrl = parsedUrl.toString();\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    /**\n     * Gets the currently applied security rules as a string. The return value consists of\n     * the rules source including comments.\n     *\n     * @return A promise fulfilled with the rules as a raw string.\n     */\n    DatabaseRulesClient.prototype.getRules = function () {\n        var _this = this;\n        var req = {\n            method: 'GET',\n            url: this.dbUrl,\n        };\n        return this.httpClient.send(req)\n            .then(function (resp) {\n            if (!resp.text) {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'HTTP response missing data.');\n            }\n            return resp.text;\n        })\n            .catch(function (err) {\n            throw _this.handleError(err);\n        });\n    };\n    /**\n     * Gets the currently applied security rules as a parsed JSON object. Any comments in\n     * the original source are stripped away.\n     *\n     * @return {Promise<object>} A promise fulfilled with the parsed rules source.\n     */\n    DatabaseRulesClient.prototype.getRulesJSON = function () {\n        var _this = this;\n        var req = {\n            method: 'GET',\n            url: this.dbUrl,\n            data: { format: 'strict' },\n        };\n        return this.httpClient.send(req)\n            .then(function (resp) {\n            return resp.data;\n        })\n            .catch(function (err) {\n            throw _this.handleError(err);\n        });\n    };\n    /**\n     * Sets the specified rules on the Firebase Database instance. If the rules source is\n     * specified as a string or a Buffer, it may include comments.\n     *\n     * @param {string|Buffer|object} source Source of the rules to apply. Must not be `null`\n     *  or empty.\n     * @return {Promise<void>} Resolves when the rules are set on the Database.\n     */\n    DatabaseRulesClient.prototype.setRules = function (source) {\n        var _this = this;\n        if (!validator.isNonEmptyString(source) &&\n            !validator.isBuffer(source) &&\n            !validator.isNonNullObject(source)) {\n            var error = new error_1.FirebaseDatabaseError({\n                code: 'invalid-argument',\n                message: 'Source must be a non-empty string, Buffer or an object.',\n            });\n            return Promise.reject(error);\n        }\n        var req = {\n            method: 'PUT',\n            url: this.dbUrl,\n            data: source,\n            headers: {\n                'content-type': 'application/json; charset=utf-8',\n            },\n        };\n        return this.httpClient.send(req)\n            .then(function () {\n            return;\n        })\n            .catch(function (err) {\n            throw _this.handleError(err);\n        });\n    };\n    DatabaseRulesClient.prototype.handleError = function (err) {\n        if (err instanceof api_request_1.HttpError) {\n            return new error_1.FirebaseDatabaseError({\n                code: error_1.AppErrorCodes.INTERNAL_ERROR,\n                message: this.getErrorMessage(err),\n            });\n        }\n        return err;\n    };\n    DatabaseRulesClient.prototype.getErrorMessage = function (err) {\n        var intro = 'Error while accessing security rules';\n        try {\n            var body = err.response.data;\n            if (body && body.error) {\n                return intro + \": \" + body.error.trim();\n            }\n        }\n        catch (_a) {\n            // Ignore parsing errors\n        }\n        return intro + \": \" + err.response.text;\n    };\n    return DatabaseRulesClient;\n}());\nfunction extractNamespace(parsedUrl) {\n    var ns = parsedUrl.searchParams.get('ns');\n    if (ns) {\n        return ns;\n    }\n    var hostname = parsedUrl.hostname;\n    var dotIndex = hostname.indexOf('.');\n    return hostname.substring(0, dotIndex).toLowerCase();\n}\n"]},"metadata":{},"sourceType":"script"}