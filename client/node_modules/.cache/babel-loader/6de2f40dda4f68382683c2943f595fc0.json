{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Deque } from \"../../classes/Deque\";\nimport { Node } from \"../../classes/Node\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { getAddedDateStr, getDiffDayInStr, subtractDayInStr } from \"../../tools/time\";\nconst DISPLAY_LENGTH = 5;\nconst ARRAY_LENGTH = 11;\n\nconst makeStartDate = date => getAddedDateStr(date, -1 * Math.floor(DISPLAY_LENGTH / 2)); // const makeStartDate = (date) => getAddedDateStr(date, -1 * STARTDATEDIFF);\n\n\nconst getStartDate = date => LocalStroage.startDate().isEmpty() ? makeStartDate(date) : LocalStroage.startDate().get();\n\nlet befStartDate;\nlet listDeque;\n\nconst turnDeque = (deque, cnt, isLeft) => {\n  if (isLeft) {\n    // <-- 방향으로 이동\n    while (cnt--) {\n      deque.pop_front();\n      deque.push_back(new Node());\n    }\n  } else {\n    while (cnt--) {\n      deque.pop_back();\n      deque.push_front(new Node());\n    }\n  }\n};\n\nconst setDeque = (deque, arr, cnt, isLeft) => {\n  if (isLeft) {\n    // <-- 맨앞 요소를 없애고 맨앞에 arr요소들을 넣는다.\n    let idx = 0;\n\n    while (idx++ < cnt) {\n      deque.pop_back();\n      deque.push_back(arr[idx]);\n    }\n  } else {\n    let idx = 0;\n\n    while (idx++ < cnt) {\n      deque.pop_front();\n      deque.push_front(arr[idx]);\n    }\n  }\n};\n\nexport const useListView = (user, date, setDate, workList) => {\n  _s();\n\n  console.log(\"LIST VIEW RENDERING\");\n  const [startDate, setStratDate] = useState(getStartDate(date));\n\n  const getEndDate = startDate => getAddedDateStr(startDate, ARRAY_LENGTH - 1);\n\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState(false);\n\n  const updateStartDate = nextDate => {\n    console.log(\"list change\");\n    LocalStroage.startDate().set(nextDate);\n    setStratDate(nextDate);\n  };\n\n  const onClickLeftBtn = () => {\n    const nextDate = getAddedDateStr(startDate, -1);\n    updateStartDate(nextDate);\n  };\n\n  const onClickRightBtn = () => {\n    const nextDate = getAddedDateStr(startDate, 1);\n    updateStartDate(nextDate);\n  };\n\n  const updateListView = async startDate => {\n    if (user && startDate) {\n      const response = await getListView(startDate, getEndDate(startDate));\n      listDeque = new Deque(response, DISPLAY_LENGTH);\n      setListView(listDeque.get());\n    }\n  };\n\n  const moveListView = async (startDate, dateDiff) => {\n    if (user && startDate) {\n      turnDeque(listDeque, Math.abs(dateDiff), dateDiff < 0);\n      const response = await getListView(startDate, getEndDate(startDate));\n      setListView(listDeque.get());\n      setDeque(listDeque, response, Math.abs(dateDiff), dateDiff < 0);\n    }\n  };\n\n  useEffect(() => {\n    updateStartDate(makeStartDate(date));\n  }, [date]);\n\n  const getListView = async (startDate, endDate) => {\n    try {\n      setLoad(true);\n      const data = await APIv2.listView(user, startDate, endDate, ARRAY_LENGTH).get();\n      setLoad(false);\n      if (!(data === null || data === void 0 ? void 0 : data.data)) throw new Error(\"List View cann't found\");\n      console.log(\"[LISTVIEW] GET LIST VIEW:  \", data === null || data === void 0 ? void 0 : data.data);\n      return data.data;\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    console.log(\"Set list view start\");\n    const dateDiff = subtractDayInStr(befStartDate, startDate);\n    if (!befStartDate || dateDiff > 2 || dateDiff < -2) updateListView(startDate);else moveListView(startDate, dateDiff); // updateListView(startDate);\n\n    befStartDate = startDate;\n    return () => setLoad(false);\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn\n  };\n};\n\n_s(useListView, \"winhrkvjr+81rjeJ0SI6qLAjsAc=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/listView/useListView.js"],"names":["useEffect","useState","Deque","Node","APIv2","LocalStroage","getAddedDateStr","getDiffDayInStr","subtractDayInStr","DISPLAY_LENGTH","ARRAY_LENGTH","makeStartDate","date","Math","floor","getStartDate","startDate","isEmpty","get","befStartDate","listDeque","turnDeque","deque","cnt","isLeft","pop_front","push_back","pop_back","push_front","setDeque","arr","idx","useListView","user","setDate","workList","console","log","setStratDate","getEndDate","listView","setListView","isListViewLoading","setLoad","updateStartDate","nextDate","set","onClickLeftBtn","onClickRightBtn","updateListView","response","getListView","moveListView","dateDiff","abs","endDate","data","Error","error","alert"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Deque } from \"../../classes/Deque\";\nimport { Node } from \"../../classes/Node\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport {\n  getAddedDateStr,\n  getDiffDayInStr,\n  subtractDayInStr,\n} from \"../../tools/time\";\nconst DISPLAY_LENGTH = 5;\nconst ARRAY_LENGTH = 11;\nconst makeStartDate = (date) =>\n  getAddedDateStr(date, -1 * Math.floor(DISPLAY_LENGTH / 2));\n// const makeStartDate = (date) => getAddedDateStr(date, -1 * STARTDATEDIFF);\nconst getStartDate = (date) =>\n  LocalStroage.startDate().isEmpty()\n    ? makeStartDate(date)\n    : LocalStroage.startDate().get();\n\nlet befStartDate;\nlet listDeque;\n\nconst turnDeque = (deque, cnt, isLeft) => {\n  if (isLeft) {\n    // <-- 방향으로 이동\n    while (cnt--) {\n      deque.pop_front();\n      deque.push_back(new Node());\n    }\n  } else {\n    while (cnt--) {\n      deque.pop_back();\n      deque.push_front(new Node());\n    }\n  }\n};\nconst setDeque = (deque, arr, cnt, isLeft) => {\n  if (isLeft) {\n    // <-- 맨앞 요소를 없애고 맨앞에 arr요소들을 넣는다.\n    let idx = 0;\n    while (idx++ < cnt) {\n      deque.pop_back();\n      deque.push_back(arr[idx]);\n    }\n  } else {\n    let idx = 0;\n    while (idx++ < cnt) {\n      deque.pop_front();\n      deque.push_front(arr[idx]);\n    }\n  }\n};\n\nexport const useListView = (user, date, setDate, workList) => {\n  console.log(\"LIST VIEW RENDERING\");\n  const [startDate, setStratDate] = useState(getStartDate(date));\n  const getEndDate = (startDate) =>\n    getAddedDateStr(startDate, ARRAY_LENGTH - 1);\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState(false);\n\n  const updateStartDate = (nextDate) => {\n    console.log(\"list change\");\n    LocalStroage.startDate().set(nextDate);\n    setStratDate(nextDate);\n  };\n  const onClickLeftBtn = () => {\n    const nextDate = getAddedDateStr(startDate, -1);\n    updateStartDate(nextDate);\n  };\n  const onClickRightBtn = () => {\n    const nextDate = getAddedDateStr(startDate, 1);\n    updateStartDate(nextDate);\n  };\n  const updateListView = async (startDate) => {\n    if (user && startDate) {\n      const response = await getListView(startDate, getEndDate(startDate));\n      listDeque = new Deque(response, DISPLAY_LENGTH);\n      setListView(listDeque.get());\n    }\n  };\n  const moveListView = async (startDate, dateDiff) => {\n    if (user && startDate) {\n      turnDeque(listDeque, Math.abs(dateDiff), dateDiff < 0);\n      const response = await getListView(startDate, getEndDate(startDate));\n      setListView(listDeque.get());\n      setDeque(listDeque, response, Math.abs(dateDiff), dateDiff < 0);\n    }\n  };\n  useEffect(() => {\n    updateStartDate(makeStartDate(date));\n  }, [date]);\n  const getListView = async (startDate, endDate) => {\n    try {\n      setLoad(true);\n      const data = await APIv2.listView(\n        user,\n        startDate,\n        endDate,\n        ARRAY_LENGTH\n      ).get();\n      setLoad(false);\n      if (!data?.data) throw new Error(\"List View cann't found\");\n      console.log(\"[LISTVIEW] GET LIST VIEW:  \", data?.data);\n      return data.data;\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n\n    console.log(\"Set list view start\");\n    const dateDiff = subtractDayInStr(befStartDate, startDate);\n    if (!befStartDate || dateDiff > 2 || dateDiff < -2)\n      updateListView(startDate);\n    else moveListView(startDate, dateDiff);\n    // updateListView(startDate);\n    befStartDate = startDate;\n    return () => setLoad(false);\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}