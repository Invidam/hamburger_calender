{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeResponse = exports.encodeRequest = void 0; // proto-over-HTTP request encoding and decoding\n\nconst serializer = require(\"proto3-json-serializer\");\n\nconst fallback_1 = require(\"./fallback\");\n\nconst featureDetection_1 = require(\"./featureDetection\");\n\nconst transcoding_1 = require(\"./transcoding\");\n\nif (!featureDetection_1.hasTextEncoder() || !featureDetection_1.hasTextDecoder()) {\n  if (featureDetection_1.isNodeJS()) {\n    // Node.js 10 does not have global TextDecoder\n    // TODO(@alexander-fenster): remove this logic after Node.js 10 is EOL.\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const util = require('util');\n\n    Object.assign(global, {\n      TextDecoder: util.TextDecoder,\n      TextEncoder: util.TextEncoder\n    });\n  } else {\n    require('fast-text-encoding');\n  }\n}\n\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const message = rpc.resolvedRequestType.fromObject(request);\n  const json = serializer.toProto3JSON(message);\n\n  if (!json) {\n    throw new Error(`Cannot send null request to RPC ${rpc.name}.`);\n  }\n\n  if (typeof json !== 'object' || Array.isArray(json)) {\n    throw new Error(`Request to RPC ${rpc.name} must be an object.`);\n  }\n\n  const transcoded = transcoding_1.transcode(json, rpc.parsedOptions, rpc.resolvedRequestType.fields);\n\n  if (!transcoded) {\n    throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);\n  }\n\n  const method = transcoded.httpMethod;\n  const body = JSON.stringify(transcoded.data);\n  const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\n  return {\n    method,\n    url,\n    headers,\n    body\n  };\n}\n\nexports.encodeRequest = encodeRequest;\n\nfunction decodeResponse(rpc, ok, response) {\n  // eslint-disable-next-line node/no-unsupported-features/node-builtins\n  const decodedString = new TextDecoder().decode(response);\n  const json = JSON.parse(decodedString);\n\n  if (!ok) {\n    const error = Object.assign(new Error(json['error']['message']), json.error);\n    throw error;\n  }\n\n  const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\n\n  if (!message) {\n    throw new Error(`Received null response from RPC ${rpc.name}`);\n  }\n\n  return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\n\nexports.decodeResponse = decodeResponse;","map":{"version":3,"sources":["../../src/fallbackRest.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeResponse = exports.encodeRequest = void 0;\n// proto-over-HTTP request encoding and decoding\nconst serializer = require(\"proto3-json-serializer\");\nconst fallback_1 = require(\"./fallback\");\nconst featureDetection_1 = require(\"./featureDetection\");\nconst transcoding_1 = require(\"./transcoding\");\nif (!featureDetection_1.hasTextEncoder() || !featureDetection_1.hasTextDecoder()) {\n    if (featureDetection_1.isNodeJS()) {\n        // Node.js 10 does not have global TextDecoder\n        // TODO(@alexander-fenster): remove this logic after Node.js 10 is EOL.\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const util = require('util');\n        Object.assign(global, {\n            TextDecoder: util.TextDecoder,\n            TextEncoder: util.TextEncoder,\n        });\n    }\n    else {\n        require('fast-text-encoding');\n    }\n}\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request) {\n    const headers = {\n        'Content-Type': 'application/json',\n    };\n    const message = rpc.resolvedRequestType.fromObject(request);\n    const json = serializer.toProto3JSON(message);\n    if (!json) {\n        throw new Error(`Cannot send null request to RPC ${rpc.name}.`);\n    }\n    if (typeof json !== 'object' || Array.isArray(json)) {\n        throw new Error(`Request to RPC ${rpc.name} must be an object.`);\n    }\n    const transcoded = transcoding_1.transcode(json, rpc.parsedOptions, rpc.resolvedRequestType.fields);\n    if (!transcoded) {\n        throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);\n    }\n    const method = transcoded.httpMethod;\n    const body = JSON.stringify(transcoded.data);\n    const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\n    return {\n        method,\n        url,\n        headers,\n        body,\n    };\n}\nexports.encodeRequest = encodeRequest;\nfunction decodeResponse(rpc, ok, response) {\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const decodedString = new TextDecoder().decode(response);\n    const json = JSON.parse(decodedString);\n    if (!ok) {\n        const error = Object.assign(new Error(json['error']['message']), json.error);\n        throw error;\n    }\n    const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\n    if (!message) {\n        throw new Error(`Received null response from RPC ${rpc.name}`);\n    }\n    return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\nexports.decodeResponse = decodeResponse;\n//# sourceMappingURL=fallbackRest.js.map"]},"metadata":{},"sourceType":"script"}