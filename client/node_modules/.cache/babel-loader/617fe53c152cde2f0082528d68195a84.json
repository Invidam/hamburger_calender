{"ast":null,"code":"const {\n  generateKeyPairSync,\n  generateKeyPair: async\n} = require('crypto');\n\nconst {\n  promisify\n} = require('util');\n\nconst {\n  THUMBPRINT_MATERIAL,\n  JWK_MEMBERS,\n  PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS,\n  KEY_MANAGEMENT_DECRYPT,\n  KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts');\n\nconst {\n  EC_CURVES\n} = require('../../registry');\n\nconst {\n  keyObjectSupported\n} = require('../../help/runtime_support');\n\nconst {\n  createPublicKey,\n  createPrivateKey\n} = require('../../help/key_object');\n\nconst errors = require('../../errors');\n\nconst Key = require('./base');\n\nconst generateKeyPair = promisify(async);\nconst EC_PUBLIC = new Set(['crv', 'x', 'y']);\nObject.freeze(EC_PUBLIC);\nconst EC_PRIVATE = new Set([...EC_PUBLIC, 'd']);\nObject.freeze(EC_PRIVATE); // Elliptic Curve Key Type\n\nclass ECKey extends Key {\n  constructor(...args) {\n    super(...args);\n    this[JWK_MEMBERS]();\n    Object.defineProperty(this, 'kty', {\n      value: 'EC',\n      enumerable: true\n    });\n\n    if (!EC_CURVES.has(this.crv)) {\n      throw new errors.JOSENotSupported('unsupported EC key curve');\n    }\n  }\n\n  static get [PUBLIC_MEMBERS]() {\n    return EC_PUBLIC;\n  }\n\n  static get [PRIVATE_MEMBERS]() {\n    return EC_PRIVATE;\n  } // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n\n\n  [THUMBPRINT_MATERIAL]() {\n    return {\n      crv: this.crv,\n      kty: 'EC',\n      x: this.x,\n      y: this.y\n    };\n  }\n\n  [KEY_MANAGEMENT_ENCRYPT]() {\n    return this.algorithms('deriveKey');\n  }\n\n  [KEY_MANAGEMENT_DECRYPT]() {\n    if (this.public) {\n      return new Set();\n    }\n\n    return this.algorithms('deriveKey');\n  }\n\n  static async generate(crv = 'P-256', privat = true) {\n    if (!EC_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported EC key curve: ${crv}`);\n    }\n\n    let privateKey, publicKey;\n\n    if (keyObjectSupported) {\n      ({\n        privateKey,\n        publicKey\n      } = await generateKeyPair('ec', {\n        namedCurve: crv\n      }));\n      return privat ? privateKey : publicKey;\n    }\n\n    ({\n      privateKey,\n      publicKey\n    } = await generateKeyPair('ec', {\n      namedCurve: crv,\n      publicKeyEncoding: {\n        type: 'spki',\n        format: 'pem'\n      },\n      privateKeyEncoding: {\n        type: 'pkcs8',\n        format: 'pem'\n      }\n    }));\n\n    if (privat) {\n      return createPrivateKey(privateKey);\n    } else {\n      return createPublicKey(publicKey);\n    }\n  }\n\n  static generateSync(crv = 'P-256', privat = true) {\n    if (!EC_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported EC key curve: ${crv}`);\n    }\n\n    let privateKey, publicKey;\n\n    if (keyObjectSupported) {\n      ({\n        privateKey,\n        publicKey\n      } = generateKeyPairSync('ec', {\n        namedCurve: crv\n      }));\n      return privat ? privateKey : publicKey;\n    }\n\n    ({\n      privateKey,\n      publicKey\n    } = generateKeyPairSync('ec', {\n      namedCurve: crv,\n      publicKeyEncoding: {\n        type: 'spki',\n        format: 'pem'\n      },\n      privateKeyEncoding: {\n        type: 'pkcs8',\n        format: 'pem'\n      }\n    }));\n\n    if (privat) {\n      return createPrivateKey(privateKey);\n    } else {\n      return createPublicKey(publicKey);\n    }\n  }\n\n}\n\nmodule.exports = ECKey;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/jwk/key/ec.js"],"names":["generateKeyPairSync","generateKeyPair","async","require","promisify","THUMBPRINT_MATERIAL","JWK_MEMBERS","PUBLIC_MEMBERS","PRIVATE_MEMBERS","KEY_MANAGEMENT_DECRYPT","KEY_MANAGEMENT_ENCRYPT","EC_CURVES","keyObjectSupported","createPublicKey","createPrivateKey","errors","Key","EC_PUBLIC","Set","Object","freeze","EC_PRIVATE","ECKey","constructor","args","defineProperty","value","enumerable","has","crv","JOSENotSupported","kty","x","y","algorithms","public","generate","privat","privateKey","publicKey","namedCurve","publicKeyEncoding","type","format","privateKeyEncoding","generateSync","module","exports"],"mappings":"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","sourcesContent":["const { generateKeyPairSync, generateKeyPair: async } = require('crypto')\nconst { promisify } = require('util')\n\nconst {\n  THUMBPRINT_MATERIAL, JWK_MEMBERS, PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS, KEY_MANAGEMENT_DECRYPT, KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts')\nconst { EC_CURVES } = require('../../registry')\nconst { keyObjectSupported } = require('../../help/runtime_support')\nconst { createPublicKey, createPrivateKey } = require('../../help/key_object')\n\nconst errors = require('../../errors')\n\nconst Key = require('./base')\n\nconst generateKeyPair = promisify(async)\n\nconst EC_PUBLIC = new Set(['crv', 'x', 'y'])\nObject.freeze(EC_PUBLIC)\nconst EC_PRIVATE = new Set([...EC_PUBLIC, 'd'])\nObject.freeze(EC_PRIVATE)\n\n// Elliptic Curve Key Type\nclass ECKey extends Key {\n  constructor (...args) {\n    super(...args)\n    this[JWK_MEMBERS]()\n    Object.defineProperty(this, 'kty', { value: 'EC', enumerable: true })\n    if (!EC_CURVES.has(this.crv)) {\n      throw new errors.JOSENotSupported('unsupported EC key curve')\n    }\n  }\n\n  static get [PUBLIC_MEMBERS] () {\n    return EC_PUBLIC\n  }\n\n  static get [PRIVATE_MEMBERS] () {\n    return EC_PRIVATE\n  }\n\n  // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n  [THUMBPRINT_MATERIAL] () {\n    return { crv: this.crv, kty: 'EC', x: this.x, y: this.y }\n  }\n\n  [KEY_MANAGEMENT_ENCRYPT] () {\n    return this.algorithms('deriveKey')\n  }\n\n  [KEY_MANAGEMENT_DECRYPT] () {\n    if (this.public) {\n      return new Set()\n    }\n    return this.algorithms('deriveKey')\n  }\n\n  static async generate (crv = 'P-256', privat = true) {\n    if (!EC_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported EC key curve: ${crv}`)\n    }\n\n    let privateKey, publicKey\n\n    if (keyObjectSupported) {\n      ({ privateKey, publicKey } = await generateKeyPair('ec', { namedCurve: crv }))\n      return privat ? privateKey : publicKey\n    }\n\n    ({ privateKey, publicKey } = await generateKeyPair('ec', {\n      namedCurve: crv,\n      publicKeyEncoding: { type: 'spki', format: 'pem' },\n      privateKeyEncoding: { type: 'pkcs8', format: 'pem' }\n    }))\n\n    if (privat) {\n      return createPrivateKey(privateKey)\n    } else {\n      return createPublicKey(publicKey)\n    }\n  }\n\n  static generateSync (crv = 'P-256', privat = true) {\n    if (!EC_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(`unsupported EC key curve: ${crv}`)\n    }\n\n    let privateKey, publicKey\n\n    if (keyObjectSupported) {\n      ({ privateKey, publicKey } = generateKeyPairSync('ec', { namedCurve: crv }))\n      return privat ? privateKey : publicKey\n    }\n\n    ({ privateKey, publicKey } = generateKeyPairSync('ec', {\n      namedCurve: crv,\n      publicKeyEncoding: { type: 'spki', format: 'pem' },\n      privateKeyEncoding: { type: 'pkcs8', format: 'pem' }\n    }))\n\n    if (privat) {\n      return createPrivateKey(privateKey)\n    } else {\n      return createPublicKey(publicKey)\n    }\n  }\n}\n\nmodule.exports = ECKey\n"]},"metadata":{},"sourceType":"script"}