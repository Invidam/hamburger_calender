{"ast":null,"code":"export const UTCtoKTC = date => {\n  const offset = new Date().getTimezoneOffset() * 60000;\n  const korDay = new Date(date - offset);\n  return korDay;\n};\n_c = UTCtoKTC;\nexport const changeFormatYYYYMMDD = (date, isKOR) => {\n  if (!isKOR) date = UTCtoKTC(date);\n  return date.toISOString().slice(0, 10);\n};\nexport const getToday = () => {\n  return changeFormatYYYYMMDD(new Date(), true);\n};\nexport const makeDisplayTime = num => num < 10 ? \"0\" + num : num;\nexport const getDifference = (timeObj1, timeObj2) => {\n  const diff = Math.abs(timeObj1.hour * 60 + timeObj1.minute - (timeObj2.hour * 60 + timeObj2.minute));\n  const hour = Math.floor(diff / 60);\n  const minute = diff % 60;\n  return {\n    hour,\n    minute\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"UTCtoKTC\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/tools/time.js"],"names":["UTCtoKTC","date","offset","Date","getTimezoneOffset","korDay","changeFormatYYYYMMDD","isKOR","toISOString","slice","getToday","makeDisplayTime","num","getDifference","timeObj1","timeObj2","diff","Math","abs","hour","minute","floor"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAIC,IAAD,IAAU;AAChC,QAAMC,MAAM,GAAG,IAAIC,IAAJ,GAAWC,iBAAX,KAAiC,KAAhD;AACA,QAAMC,MAAM,GAAG,IAAIF,IAAJ,CAASF,IAAI,GAAGC,MAAhB,CAAf;AACA,SAAOG,MAAP;AACD,CAJM;KAAML,Q;AAMb,OAAO,MAAMM,oBAAoB,GAAG,CAACL,IAAD,EAAOM,KAAP,KAAiB;AACnD,MAAI,CAACA,KAAL,EAAYN,IAAI,GAAGD,QAAQ,CAACC,IAAD,CAAf;AACZ,SAAOA,IAAI,CAACO,WAAL,GAAmBC,KAAnB,CAAyB,CAAzB,EAA4B,EAA5B,CAAP;AACD,CAHM;AAIP,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5B,SAAOJ,oBAAoB,CAAC,IAAIH,IAAJ,EAAD,EAAa,IAAb,CAA3B;AACD,CAFM;AAGP,OAAO,MAAMQ,eAAe,GAAIC,GAAD,IAAUA,GAAG,GAAG,EAAN,GAAW,MAAMA,GAAjB,GAAuBA,GAAzD;AAEP,OAAO,MAAMC,aAAa,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACnD,QAAMC,IAAI,GAAGC,IAAI,CAACC,GAAL,CACXJ,QAAQ,CAACK,IAAT,GAAgB,EAAhB,GACEL,QAAQ,CAACM,MADX,IAEGL,QAAQ,CAACI,IAAT,GAAgB,EAAhB,GAAqBJ,QAAQ,CAACK,MAFjC,CADW,CAAb;AAKA,QAAMD,IAAI,GAAGF,IAAI,CAACI,KAAL,CAAWL,IAAI,GAAG,EAAlB,CAAb;AACA,QAAMI,MAAM,GAAGJ,IAAI,GAAG,EAAtB;AACA,SAAO;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAP;AACD,CATM","sourcesContent":["export const UTCtoKTC = (date) => {\n  const offset = new Date().getTimezoneOffset() * 60000;\n  const korDay = new Date(date - offset);\n  return korDay;\n};\n\nexport const changeFormatYYYYMMDD = (date, isKOR) => {\n  if (!isKOR) date = UTCtoKTC(date);\n  return date.toISOString().slice(0, 10);\n};\nexport const getToday = () => {\n  return changeFormatYYYYMMDD(new Date(), true);\n};\nexport const makeDisplayTime = (num) => (num < 10 ? \"0\" + num : num);\n\nexport const getDifference = (timeObj1, timeObj2) => {\n  const diff = Math.abs(\n    timeObj1.hour * 60 +\n      timeObj1.minute -\n      (timeObj2.hour * 60 + timeObj2.minute)\n  );\n  const hour = Math.floor(diff / 60);\n  const minute = diff % 60;\n  return { hour, minute };\n};\n"]},"metadata":{},"sourceType":"module"}