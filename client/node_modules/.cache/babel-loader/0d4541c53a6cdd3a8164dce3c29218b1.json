{"ast":null,"code":"const {\n  createCipheriv,\n  createDecipheriv,\n  getCiphers\n} = require('crypto');\n\nconst {\n  KEYOBJECT\n} = require('../help/consts');\n\nconst {\n  JWEInvalid,\n  JWEDecryptionFailed\n} = require('../errors');\n\nconst {\n  asInput\n} = require('../help/key_object');\n\nconst checkInput = function (size, iv, tag) {\n  if (iv.length !== 12) {\n    throw new JWEInvalid('invalid iv');\n  }\n\n  if (arguments.length === 3) {\n    if (tag.length !== 16) {\n      throw new JWEInvalid('invalid tag');\n    }\n  }\n};\n\nconst encrypt = (size, {\n  [KEYOBJECT]: keyObject\n}, cleartext, {\n  iv,\n  aad = Buffer.alloc(0)\n}) => {\n  const key = asInput(keyObject, false);\n  checkInput(size, iv);\n  const cipher = createCipheriv(`aes-${size}-gcm`, key, iv, {\n    authTagLength: 16\n  });\n  cipher.setAAD(aad);\n  const ciphertext = Buffer.concat([cipher.update(cleartext), cipher.final()]);\n  const tag = cipher.getAuthTag();\n  return {\n    ciphertext,\n    tag\n  };\n};\n\nconst decrypt = (size, {\n  [KEYOBJECT]: keyObject\n}, ciphertext, {\n  iv,\n  tag = Buffer.alloc(0),\n  aad = Buffer.alloc(0)\n}) => {\n  const key = asInput(keyObject, false);\n  checkInput(size, iv, tag);\n\n  try {\n    const cipher = createDecipheriv(`aes-${size}-gcm`, key, iv, {\n      authTagLength: 16\n    });\n    cipher.setAuthTag(tag);\n    cipher.setAAD(aad);\n    return Buffer.concat([cipher.update(ciphertext), cipher.final()]);\n  } catch (err) {\n    throw new JWEDecryptionFailed();\n  }\n};\n\nmodule.exports = (JWA, JWK) => {\n  ['A128GCM', 'A192GCM', 'A256GCM'].forEach(jwaAlg => {\n    const size = parseInt(jwaAlg.substr(1, 3), 10);\n\n    if (getCiphers().includes(`aes-${size}-gcm`)) {\n      JWA.encrypt.set(jwaAlg, encrypt.bind(undefined, size));\n      JWA.decrypt.set(jwaAlg, decrypt.bind(undefined, size));\n\n      JWK.oct.encrypt[jwaAlg] = JWK.oct.decrypt[jwaAlg] = key => (key.use === 'enc' || key.use === undefined) && key.length === size;\n    }\n  });\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/jwa/aes_gcm.js"],"names":["createCipheriv","createDecipheriv","getCiphers","require","KEYOBJECT","JWEInvalid","JWEDecryptionFailed","asInput","checkInput","size","iv","tag","length","arguments","encrypt","keyObject","cleartext","aad","Buffer","alloc","key","cipher","authTagLength","setAAD","ciphertext","concat","update","final","getAuthTag","decrypt","setAuthTag","err","module","exports","JWA","JWK","forEach","jwaAlg","parseInt","substr","includes","set","bind","undefined","oct","use"],"mappings":"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","sourcesContent":["const { createCipheriv, createDecipheriv, getCiphers } = require('crypto')\n\nconst { KEYOBJECT } = require('../help/consts')\nconst { JWEInvalid, JWEDecryptionFailed } = require('../errors')\nconst { asInput } = require('../help/key_object')\n\nconst checkInput = function (size, iv, tag) {\n  if (iv.length !== 12) {\n    throw new JWEInvalid('invalid iv')\n  }\n  if (arguments.length === 3) {\n    if (tag.length !== 16) {\n      throw new JWEInvalid('invalid tag')\n    }\n  }\n}\n\nconst encrypt = (size, { [KEYOBJECT]: keyObject }, cleartext, { iv, aad = Buffer.alloc(0) }) => {\n  const key = asInput(keyObject, false)\n  checkInput(size, iv)\n\n  const cipher = createCipheriv(`aes-${size}-gcm`, key, iv, { authTagLength: 16 })\n  cipher.setAAD(aad)\n\n  const ciphertext = Buffer.concat([cipher.update(cleartext), cipher.final()])\n  const tag = cipher.getAuthTag()\n\n  return { ciphertext, tag }\n}\n\nconst decrypt = (size, { [KEYOBJECT]: keyObject }, ciphertext, { iv, tag = Buffer.alloc(0), aad = Buffer.alloc(0) }) => {\n  const key = asInput(keyObject, false)\n  checkInput(size, iv, tag)\n\n  try {\n    const cipher = createDecipheriv(`aes-${size}-gcm`, key, iv, { authTagLength: 16 })\n    cipher.setAuthTag(tag)\n    cipher.setAAD(aad)\n\n    return Buffer.concat([cipher.update(ciphertext), cipher.final()])\n  } catch (err) {\n    throw new JWEDecryptionFailed()\n  }\n}\n\nmodule.exports = (JWA, JWK) => {\n  ['A128GCM', 'A192GCM', 'A256GCM'].forEach((jwaAlg) => {\n    const size = parseInt(jwaAlg.substr(1, 3), 10)\n    if (getCiphers().includes(`aes-${size}-gcm`)) {\n      JWA.encrypt.set(jwaAlg, encrypt.bind(undefined, size))\n      JWA.decrypt.set(jwaAlg, decrypt.bind(undefined, size))\n      JWK.oct.encrypt[jwaAlg] = JWK.oct.decrypt[jwaAlg] = key => (key.use === 'enc' || key.use === undefined) && key.length === size\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}