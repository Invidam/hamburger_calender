{"ast":null,"code":"var TokenBucket = require('./tokenBucket');\n\nvar getMilliseconds = require('./clock');\n/**\r\n * A generic rate limiter. Underneath the hood, this uses a token bucket plus\r\n * an additional check to limit how many tokens we can remove each interval.\r\n * @author John Hurliman <jhurliman@jhurliman.org>\r\n *\r\n * @param {Number} tokensPerInterval Maximum number of tokens that can be\r\n *  removed at any given moment and over the course of one interval.\r\n * @param {String|Number} interval The interval length in milliseconds, or as\r\n *  one of the following strings: 'second', 'minute', 'hour', day'.\r\n * @param {Boolean} fireImmediately Optional. Whether or not the callback\r\n *  will fire immediately when rate limiting is in effect (default is false).\r\n */\n\n\nvar RateLimiter = function (tokensPerInterval, interval, fireImmediately) {\n  this.tokenBucket = new TokenBucket(tokensPerInterval, tokensPerInterval, interval, null); // Fill the token bucket to start\n\n  this.tokenBucket.content = tokensPerInterval;\n  this.curIntervalStart = getMilliseconds();\n  this.tokensThisInterval = 0;\n  this.fireImmediately = fireImmediately;\n};\n\nRateLimiter.prototype = {\n  tokenBucket: null,\n  curIntervalStart: 0,\n  tokensThisInterval: 0,\n  fireImmediately: false,\n\n  /**\r\n   * Remove the requested number of tokens and fire the given callback. If the\r\n   * rate limiter contains enough tokens and we haven't spent too many tokens\r\n   * in this interval already, this will happen immediately. Otherwise, the\r\n   * removal and callback will happen when enough tokens become available.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Function} callback(err, remainingTokens)\r\n   * @returns {Boolean} True if the callback was fired immediately, otherwise\r\n   *  false.\r\n   */\n  removeTokens: function (count, callback) {\n    // Make sure the request isn't for more than we can handle\n    if (count > this.tokenBucket.bucketSize) {\n      process.nextTick(callback.bind(null, 'Requested tokens ' + count + ' exceeds maximum tokens per interval ' + this.tokenBucket.bucketSize, null));\n      return false;\n    }\n\n    var self = this;\n    var now = getMilliseconds(); // Advance the current interval and reset the current interval token count\n    // if needed\n\n    if (now < this.curIntervalStart || now - this.curIntervalStart >= this.tokenBucket.interval) {\n      this.curIntervalStart = now;\n      this.tokensThisInterval = 0;\n    } // If we don't have enough tokens left in this interval, wait until the\n    // next interval\n\n\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval) {\n      if (this.fireImmediately) {\n        process.nextTick(callback.bind(null, null, -1));\n      } else {\n        var waitInterval = Math.ceil(this.curIntervalStart + this.tokenBucket.interval - now);\n        setTimeout(function () {\n          self.tokenBucket.removeTokens(count, afterTokensRemoved);\n        }, waitInterval);\n      }\n\n      return false;\n    } // Remove the requested number of tokens from the token bucket\n\n\n    return this.tokenBucket.removeTokens(count, afterTokensRemoved);\n\n    function afterTokensRemoved(err, tokensRemaining) {\n      if (err) return callback(err, null);\n      self.tokensThisInterval += count;\n      callback(null, tokensRemaining);\n    }\n  },\n\n  /**\r\n   * Attempt to remove the requested number of tokens and return immediately.\r\n   * If the bucket (and any parent buckets) contains enough tokens and we\r\n   * haven't spent too many tokens in this interval already, this will return\r\n   * true. Otherwise, false is returned.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Boolean} True if the tokens were successfully removed, otherwise\r\n   *  false.\r\n   */\n  tryRemoveTokens: function (count) {\n    // Make sure the request isn't for more than we can handle\n    if (count > this.tokenBucket.bucketSize) return false;\n    var now = getMilliseconds(); // Advance the current interval and reset the current interval token count\n    // if needed\n\n    if (now < this.curIntervalStart || now - this.curIntervalStart >= this.tokenBucket.interval) {\n      this.curIntervalStart = now;\n      this.tokensThisInterval = 0;\n    } // If we don't have enough tokens left in this interval, return false\n\n\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval) return false; // Try to remove the requested number of tokens from the token bucket\n\n    var removed = this.tokenBucket.tryRemoveTokens(count);\n\n    if (removed) {\n      this.tokensThisInterval += count;\n    }\n\n    return removed;\n  },\n\n  /**\r\n   * Returns the number of tokens remaining in the TokenBucket.\r\n   * @returns {Number} The number of tokens remaining.\r\n   */\n  getTokensRemaining: function () {\n    this.tokenBucket.drip();\n    return this.tokenBucket.content;\n  }\n};\nmodule.exports = RateLimiter;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/limiter/lib/rateLimiter.js"],"names":["TokenBucket","require","getMilliseconds","RateLimiter","tokensPerInterval","interval","fireImmediately","tokenBucket","content","curIntervalStart","tokensThisInterval","prototype","removeTokens","count","callback","bucketSize","process","nextTick","bind","self","now","waitInterval","Math","ceil","setTimeout","afterTokensRemoved","err","tokensRemaining","tryRemoveTokens","removed","getTokensRemaining","drip","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIC,eAAe,GAAGD,OAAO,CAAC,SAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,WAAW,GAAG,UAASC,iBAAT,EAA4BC,QAA5B,EAAsCC,eAAtC,EAAuD;AACvE,OAAKC,WAAL,GAAmB,IAAIP,WAAJ,CAAgBI,iBAAhB,EAAmCA,iBAAnC,EACjBC,QADiB,EACP,IADO,CAAnB,CADuE,CAIvE;;AACA,OAAKE,WAAL,CAAiBC,OAAjB,GAA2BJ,iBAA3B;AAEA,OAAKK,gBAAL,GAAwBP,eAAe,EAAvC;AACA,OAAKQ,kBAAL,GAA0B,CAA1B;AACA,OAAKJ,eAAL,GAAuBA,eAAvB;AACD,CAVD;;AAYAH,WAAW,CAACQ,SAAZ,GAAwB;AACtBJ,EAAAA,WAAW,EAAE,IADS;AAEtBE,EAAAA,gBAAgB,EAAE,CAFI;AAGtBC,EAAAA,kBAAkB,EAAE,CAHE;AAItBJ,EAAAA,eAAe,EAAE,KAJK;;AAMtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,YAAY,EAAE,UAASC,KAAT,EAAgBC,QAAhB,EAA0B;AACtC;AACA,QAAID,KAAK,GAAG,KAAKN,WAAL,CAAiBQ,UAA7B,EAAyC;AACvCC,MAAAA,OAAO,CAACC,QAAR,CAAiBH,QAAQ,CAACI,IAAT,CAAc,IAAd,EAAoB,sBAAsBL,KAAtB,GACnC,uCADmC,GACO,KAAKN,WAAL,CAAiBQ,UAD5C,EAEf,IAFe,CAAjB;AAGA,aAAO,KAAP;AACD;;AAED,QAAII,IAAI,GAAG,IAAX;AACA,QAAIC,GAAG,GAAGlB,eAAe,EAAzB,CAVsC,CAYtC;AACA;;AACA,QAAIkB,GAAG,GAAG,KAAKX,gBAAX,IACCW,GAAG,GAAG,KAAKX,gBAAX,IAA+B,KAAKF,WAAL,CAAiBF,QADrD,EAC+D;AAC7D,WAAKI,gBAAL,GAAwBW,GAAxB;AACA,WAAKV,kBAAL,GAA0B,CAA1B;AACD,KAlBqC,CAoBtC;AACA;;;AACA,QAAIG,KAAK,GAAG,KAAKN,WAAL,CAAiBH,iBAAjB,GAAqC,KAAKM,kBAAtD,EAA0E;AACxE,UAAI,KAAKJ,eAAT,EAA0B;AACxBU,QAAAA,OAAO,CAACC,QAAR,CAAiBH,QAAQ,CAACI,IAAT,CAAc,IAAd,EAAoB,IAApB,EAA0B,CAAC,CAA3B,CAAjB;AACD,OAFD,MAEO;AACL,YAAIG,YAAY,GAAGC,IAAI,CAACC,IAAL,CACjB,KAAKd,gBAAL,GAAwB,KAAKF,WAAL,CAAiBF,QAAzC,GAAoDe,GADnC,CAAnB;AAGAI,QAAAA,UAAU,CAAC,YAAW;AACpBL,UAAAA,IAAI,CAACZ,WAAL,CAAiBK,YAAjB,CAA8BC,KAA9B,EAAqCY,kBAArC;AACD,SAFS,EAEPJ,YAFO,CAAV;AAGD;;AACD,aAAO,KAAP;AACD,KAlCqC,CAoCtC;;;AACA,WAAO,KAAKd,WAAL,CAAiBK,YAAjB,CAA8BC,KAA9B,EAAqCY,kBAArC,CAAP;;AAEA,aAASA,kBAAT,CAA4BC,GAA5B,EAAiCC,eAAjC,EAAkD;AAChD,UAAID,GAAJ,EAAS,OAAOZ,QAAQ,CAACY,GAAD,EAAM,IAAN,CAAf;AAETP,MAAAA,IAAI,CAACT,kBAAL,IAA2BG,KAA3B;AACAC,MAAAA,QAAQ,CAAC,IAAD,EAAOa,eAAP,CAAR;AACD;AACF,GA7DqB;;AA+DtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAe,EAAE,UAASf,KAAT,EAAgB;AAC/B;AACA,QAAIA,KAAK,GAAG,KAAKN,WAAL,CAAiBQ,UAA7B,EACE,OAAO,KAAP;AAEF,QAAIK,GAAG,GAAGlB,eAAe,EAAzB,CAL+B,CAO/B;AACA;;AACA,QAAIkB,GAAG,GAAG,KAAKX,gBAAX,IACCW,GAAG,GAAG,KAAKX,gBAAX,IAA+B,KAAKF,WAAL,CAAiBF,QADrD,EAC+D;AAC7D,WAAKI,gBAAL,GAAwBW,GAAxB;AACA,WAAKV,kBAAL,GAA0B,CAA1B;AACD,KAb8B,CAe/B;;;AACA,QAAIG,KAAK,GAAG,KAAKN,WAAL,CAAiBH,iBAAjB,GAAqC,KAAKM,kBAAtD,EACE,OAAO,KAAP,CAjB6B,CAmB/B;;AACA,QAAImB,OAAO,GAAG,KAAKtB,WAAL,CAAiBqB,eAAjB,CAAiCf,KAAjC,CAAd;;AACA,QAAIgB,OAAJ,EAAa;AACX,WAAKnB,kBAAL,IAA2BG,KAA3B;AACD;;AACD,WAAOgB,OAAP;AACD,GAjGqB;;AAmGtB;AACF;AACA;AACA;AACEC,EAAAA,kBAAkB,EAAE,YAAY;AAC9B,SAAKvB,WAAL,CAAiBwB,IAAjB;AACA,WAAO,KAAKxB,WAAL,CAAiBC,OAAxB;AACD;AA1GqB,CAAxB;AA6GAwB,MAAM,CAACC,OAAP,GAAiB9B,WAAjB","sourcesContent":["var TokenBucket = require('./tokenBucket');\r\nvar getMilliseconds = require('./clock');\r\n\r\n/**\r\n * A generic rate limiter. Underneath the hood, this uses a token bucket plus\r\n * an additional check to limit how many tokens we can remove each interval.\r\n * @author John Hurliman <jhurliman@jhurliman.org>\r\n *\r\n * @param {Number} tokensPerInterval Maximum number of tokens that can be\r\n *  removed at any given moment and over the course of one interval.\r\n * @param {String|Number} interval The interval length in milliseconds, or as\r\n *  one of the following strings: 'second', 'minute', 'hour', day'.\r\n * @param {Boolean} fireImmediately Optional. Whether or not the callback\r\n *  will fire immediately when rate limiting is in effect (default is false).\r\n */\r\nvar RateLimiter = function(tokensPerInterval, interval, fireImmediately) {\r\n  this.tokenBucket = new TokenBucket(tokensPerInterval, tokensPerInterval,\r\n    interval, null);\r\n\r\n  // Fill the token bucket to start\r\n  this.tokenBucket.content = tokensPerInterval;\r\n\r\n  this.curIntervalStart = getMilliseconds();\r\n  this.tokensThisInterval = 0;\r\n  this.fireImmediately = fireImmediately;\r\n};\r\n\r\nRateLimiter.prototype = {\r\n  tokenBucket: null,\r\n  curIntervalStart: 0,\r\n  tokensThisInterval: 0,\r\n  fireImmediately: false,\r\n\r\n  /**\r\n   * Remove the requested number of tokens and fire the given callback. If the\r\n   * rate limiter contains enough tokens and we haven't spent too many tokens\r\n   * in this interval already, this will happen immediately. Otherwise, the\r\n   * removal and callback will happen when enough tokens become available.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Function} callback(err, remainingTokens)\r\n   * @returns {Boolean} True if the callback was fired immediately, otherwise\r\n   *  false.\r\n   */\r\n  removeTokens: function(count, callback) {\r\n    // Make sure the request isn't for more than we can handle\r\n    if (count > this.tokenBucket.bucketSize) {\r\n      process.nextTick(callback.bind(null, 'Requested tokens ' + count +\r\n        ' exceeds maximum tokens per interval ' + this.tokenBucket.bucketSize,\r\n        null));\r\n      return false;\r\n    }\r\n\r\n    var self = this;\r\n    var now = getMilliseconds();\r\n\r\n    // Advance the current interval and reset the current interval token count\r\n    // if needed\r\n    if (now < this.curIntervalStart\r\n      || now - this.curIntervalStart >= this.tokenBucket.interval) {\r\n      this.curIntervalStart = now;\r\n      this.tokensThisInterval = 0;\r\n    }\r\n\r\n    // If we don't have enough tokens left in this interval, wait until the\r\n    // next interval\r\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval) {\r\n      if (this.fireImmediately) {\r\n        process.nextTick(callback.bind(null, null, -1));\r\n      } else {\r\n        var waitInterval = Math.ceil(\r\n          this.curIntervalStart + this.tokenBucket.interval - now);\r\n\r\n        setTimeout(function() {\r\n          self.tokenBucket.removeTokens(count, afterTokensRemoved);\r\n        }, waitInterval);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // Remove the requested number of tokens from the token bucket\r\n    return this.tokenBucket.removeTokens(count, afterTokensRemoved);\r\n\r\n    function afterTokensRemoved(err, tokensRemaining) {\r\n      if (err) return callback(err, null);\r\n\r\n      self.tokensThisInterval += count;\r\n      callback(null, tokensRemaining);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Attempt to remove the requested number of tokens and return immediately.\r\n   * If the bucket (and any parent buckets) contains enough tokens and we\r\n   * haven't spent too many tokens in this interval already, this will return\r\n   * true. Otherwise, false is returned.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Boolean} True if the tokens were successfully removed, otherwise\r\n   *  false.\r\n   */\r\n  tryRemoveTokens: function(count) {\r\n    // Make sure the request isn't for more than we can handle\r\n    if (count > this.tokenBucket.bucketSize)\r\n      return false;\r\n\r\n    var now = getMilliseconds();\r\n\r\n    // Advance the current interval and reset the current interval token count\r\n    // if needed\r\n    if (now < this.curIntervalStart\r\n      || now - this.curIntervalStart >= this.tokenBucket.interval) {\r\n      this.curIntervalStart = now;\r\n      this.tokensThisInterval = 0;\r\n    }\r\n\r\n    // If we don't have enough tokens left in this interval, return false\r\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval)\r\n      return false;\r\n\r\n    // Try to remove the requested number of tokens from the token bucket\r\n    var removed = this.tokenBucket.tryRemoveTokens(count);\r\n    if (removed) {\r\n      this.tokensThisInterval += count;\r\n    }\r\n    return removed;\r\n  },\r\n\r\n  /**\r\n   * Returns the number of tokens remaining in the TokenBucket.\r\n   * @returns {Number} The number of tokens remaining.\r\n   */\r\n  getTokensRemaining: function () {\r\n    this.tokenBucket.drip();\r\n    return this.tokenBucket.content;\r\n  }\r\n};\r\n\r\nmodule.exports = RateLimiter;\r\n"]},"metadata":{},"sourceType":"script"}