{"ast":null,"code":"/*! firebase-admin v9.11.1 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JwtErrorCode = exports.JwtError = exports.decodeJwt = exports.verifyJwtSignature = exports.EmulatorSignatureVerifier = exports.PublicKeySignatureVerifier = exports.UrlKeyFetcher = exports.JwksFetcher = exports.ALGORITHM_RS256 = void 0;\n\nvar validator = require(\"./validator\");\n\nvar jwt = require(\"jsonwebtoken\");\n\nvar jwks = require(\"jwks-rsa\");\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nexports.ALGORITHM_RS256 = 'RS256'; // `jsonwebtoken` converts errors from the `getKey` callback to its own `JsonWebTokenError` type\n// and prefixes the error message with the following. Use the prefix to identify errors thrown\n// from the key provider callback.\n// https://github.com/auth0/node-jsonwebtoken/blob/d71e383862fc735991fd2e759181480f066bf138/verify.js#L96\n\nvar JWT_CALLBACK_ERROR_PREFIX = 'error in secret or public key callback: ';\nvar NO_MATCHING_KID_ERROR_MESSAGE = 'no-matching-kid-error';\nvar NO_KID_IN_HEADER_ERROR_MESSAGE = 'no-kid-in-header-error';\nvar ONE_DAY_IN_SECONDS = 24 * 3600;\n\nvar JwksFetcher = function () {\n  function JwksFetcher(jwksUrl) {\n    this.publicKeysExpireAt = 0;\n\n    if (!validator.isURL(jwksUrl)) {\n      throw new Error('The provided JWKS URL is not a valid URL.');\n    }\n\n    this.client = jwks({\n      jwksUri: jwksUrl,\n      cache: false\n    });\n  }\n\n  JwksFetcher.prototype.fetchPublicKeys = function () {\n    if (this.shouldRefresh()) {\n      return this.refresh();\n    }\n\n    return Promise.resolve(this.publicKeys);\n  };\n\n  JwksFetcher.prototype.shouldRefresh = function () {\n    return !this.publicKeys || this.publicKeysExpireAt <= Date.now();\n  };\n\n  JwksFetcher.prototype.refresh = function () {\n    var _this = this;\n\n    return this.client.getSigningKeys().then(function (signingKeys) {\n      // reset expire at from previous set of keys.\n      _this.publicKeysExpireAt = 0;\n      var newKeys = signingKeys.reduce(function (map, signingKey) {\n        map[signingKey.kid] = signingKey.getPublicKey();\n        return map;\n      }, {});\n      _this.publicKeysExpireAt = Date.now() + ONE_DAY_IN_SECONDS * 1000;\n      _this.publicKeys = newKeys;\n      return newKeys;\n    }).catch(function (err) {\n      throw new Error(\"Error fetching Json Web Keys: \" + err.message);\n    });\n  };\n\n  return JwksFetcher;\n}();\n\nexports.JwksFetcher = JwksFetcher;\n/**\n * Class to fetch public keys from a client certificates URL.\n */\n\nvar UrlKeyFetcher = function () {\n  function UrlKeyFetcher(clientCertUrl, httpAgent) {\n    this.clientCertUrl = clientCertUrl;\n    this.httpAgent = httpAgent;\n    this.publicKeysExpireAt = 0;\n\n    if (!validator.isURL(clientCertUrl)) {\n      throw new Error('The provided public client certificate URL is not a valid URL.');\n    }\n  }\n  /**\n   * Fetches the public keys for the Google certs.\n   *\n   * @return A promise fulfilled with public keys for the Google certs.\n   */\n\n\n  UrlKeyFetcher.prototype.fetchPublicKeys = function () {\n    if (this.shouldRefresh()) {\n      return this.refresh();\n    }\n\n    return Promise.resolve(this.publicKeys);\n  };\n  /**\n   * Checks if the cached public keys need to be refreshed.\n   *\n   * @returns Whether the keys should be fetched from the client certs url or not.\n   */\n\n\n  UrlKeyFetcher.prototype.shouldRefresh = function () {\n    return !this.publicKeys || this.publicKeysExpireAt <= Date.now();\n  };\n\n  UrlKeyFetcher.prototype.refresh = function () {\n    var _this = this;\n\n    var client = new api_request_1.HttpClient();\n    var request = {\n      method: 'GET',\n      url: this.clientCertUrl,\n      httpAgent: this.httpAgent\n    };\n    return client.send(request).then(function (resp) {\n      if (!resp.isJson() || resp.data.error) {\n        // Treat all non-json messages and messages with an 'error' field as\n        // error responses.\n        throw new api_request_1.HttpError(resp);\n      } // reset expire at from previous set of keys.\n\n\n      _this.publicKeysExpireAt = 0;\n\n      if (Object.prototype.hasOwnProperty.call(resp.headers, 'cache-control')) {\n        var cacheControlHeader = resp.headers['cache-control'];\n        var parts = cacheControlHeader.split(',');\n        parts.forEach(function (part) {\n          var subParts = part.trim().split('=');\n\n          if (subParts[0] === 'max-age') {\n            var maxAge = +subParts[1];\n            _this.publicKeysExpireAt = Date.now() + maxAge * 1000;\n          }\n        });\n      }\n\n      _this.publicKeys = resp.data;\n      return resp.data;\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        var errorMessage = 'Error fetching public keys for Google certs: ';\n        var resp = err.response;\n\n        if (resp.isJson() && resp.data.error) {\n          errorMessage += \"\" + resp.data.error;\n\n          if (resp.data.error_description) {\n            errorMessage += ' (' + resp.data.error_description + ')';\n          }\n        } else {\n          errorMessage += \"\" + resp.text;\n        }\n\n        throw new Error(errorMessage);\n      }\n\n      throw err;\n    });\n  };\n\n  return UrlKeyFetcher;\n}();\n\nexports.UrlKeyFetcher = UrlKeyFetcher;\n/**\n * Class for verifing JWT signature with a public key.\n */\n\nvar PublicKeySignatureVerifier = function () {\n  function PublicKeySignatureVerifier(keyFetcher) {\n    this.keyFetcher = keyFetcher;\n\n    if (!validator.isNonNullObject(keyFetcher)) {\n      throw new Error('The provided key fetcher is not an object or null.');\n    }\n  }\n\n  PublicKeySignatureVerifier.withCertificateUrl = function (clientCertUrl, httpAgent) {\n    return new PublicKeySignatureVerifier(new UrlKeyFetcher(clientCertUrl, httpAgent));\n  };\n\n  PublicKeySignatureVerifier.withJwksUrl = function (jwksUrl) {\n    return new PublicKeySignatureVerifier(new JwksFetcher(jwksUrl));\n  };\n\n  PublicKeySignatureVerifier.prototype.verify = function (token) {\n    var _this = this;\n\n    if (!validator.isString(token)) {\n      return Promise.reject(new JwtError(JwtErrorCode.INVALID_ARGUMENT, 'The provided token must be a string.'));\n    }\n\n    return verifyJwtSignature(token, getKeyCallback(this.keyFetcher), {\n      algorithms: [exports.ALGORITHM_RS256]\n    }).catch(function (error) {\n      if (error.code === JwtErrorCode.NO_KID_IN_HEADER) {\n        // No kid in JWT header. Try with all the public keys.\n        return _this.verifyWithoutKid(token);\n      }\n\n      throw error;\n    });\n  };\n\n  PublicKeySignatureVerifier.prototype.verifyWithoutKid = function (token) {\n    var _this = this;\n\n    return this.keyFetcher.fetchPublicKeys().then(function (publicKeys) {\n      return _this.verifyWithAllKeys(token, publicKeys);\n    });\n  };\n\n  PublicKeySignatureVerifier.prototype.verifyWithAllKeys = function (token, keys) {\n    var promises = [];\n    Object.values(keys).forEach(function (key) {\n      var result = verifyJwtSignature(token, key).then(function () {\n        return true;\n      }).catch(function (error) {\n        if (error.code === JwtErrorCode.TOKEN_EXPIRED) {\n          throw error;\n        }\n\n        return false;\n      });\n      promises.push(result);\n    });\n    return Promise.all(promises).then(function (result) {\n      if (result.every(function (r) {\n        return r === false;\n      })) {\n        throw new JwtError(JwtErrorCode.INVALID_SIGNATURE, 'Invalid token signature.');\n      }\n    });\n  };\n\n  return PublicKeySignatureVerifier;\n}();\n\nexports.PublicKeySignatureVerifier = PublicKeySignatureVerifier;\n/**\n * Class for verifing unsigned (emulator) JWTs.\n */\n\nvar EmulatorSignatureVerifier = function () {\n  function EmulatorSignatureVerifier() {}\n\n  EmulatorSignatureVerifier.prototype.verify = function (token) {\n    // Signature checks skipped for emulator; no need to fetch public keys.\n    return verifyJwtSignature(token, '');\n  };\n\n  return EmulatorSignatureVerifier;\n}();\n\nexports.EmulatorSignatureVerifier = EmulatorSignatureVerifier;\n/**\n * Provides a callback to fetch public keys.\n *\n * @param fetcher KeyFetcher to fetch the keys from.\n * @returns A callback function that can be used to get keys in `jsonwebtoken`.\n */\n\nfunction getKeyCallback(fetcher) {\n  return function (header, callback) {\n    if (!header.kid) {\n      callback(new Error(NO_KID_IN_HEADER_ERROR_MESSAGE));\n    }\n\n    var kid = header.kid || '';\n    fetcher.fetchPublicKeys().then(function (publicKeys) {\n      if (!Object.prototype.hasOwnProperty.call(publicKeys, kid)) {\n        callback(new Error(NO_MATCHING_KID_ERROR_MESSAGE));\n      } else {\n        callback(null, publicKeys[kid]);\n      }\n    }).catch(function (error) {\n      callback(error);\n    });\n  };\n}\n/**\n * Verifies the signature of a JWT using the provided secret or a function to fetch\n * the secret or public key.\n *\n * @param token The JWT to be verfied.\n * @param secretOrPublicKey The secret or a function to fetch the secret or public key.\n * @param options JWT verification options.\n * @returns A Promise resolving for a token with a valid signature.\n */\n\n\nfunction verifyJwtSignature(token, secretOrPublicKey, options) {\n  if (!validator.isString(token)) {\n    return Promise.reject(new JwtError(JwtErrorCode.INVALID_ARGUMENT, 'The provided token must be a string.'));\n  }\n\n  return new Promise(function (resolve, reject) {\n    jwt.verify(token, secretOrPublicKey, options, function (error) {\n      if (!error) {\n        return resolve();\n      }\n\n      if (error.name === 'TokenExpiredError') {\n        return reject(new JwtError(JwtErrorCode.TOKEN_EXPIRED, 'The provided token has expired. Get a fresh token from your ' + 'client app and try again.'));\n      } else if (error.name === 'JsonWebTokenError') {\n        if (error.message && error.message.includes(JWT_CALLBACK_ERROR_PREFIX)) {\n          var message = error.message.split(JWT_CALLBACK_ERROR_PREFIX).pop() || 'Error fetching public keys.';\n          var code = JwtErrorCode.KEY_FETCH_ERROR;\n\n          if (message === NO_MATCHING_KID_ERROR_MESSAGE) {\n            code = JwtErrorCode.NO_MATCHING_KID;\n          } else if (message === NO_KID_IN_HEADER_ERROR_MESSAGE) {\n            code = JwtErrorCode.NO_KID_IN_HEADER;\n          }\n\n          return reject(new JwtError(code, message));\n        }\n      }\n\n      return reject(new JwtError(JwtErrorCode.INVALID_SIGNATURE, error.message));\n    });\n  });\n}\n\nexports.verifyJwtSignature = verifyJwtSignature;\n/**\n * Decodes general purpose Firebase JWTs.\n *\n * @param jwtToken JWT token to be decoded.\n * @returns Decoded token containing the header and payload.\n */\n\nfunction decodeJwt(jwtToken) {\n  if (!validator.isString(jwtToken)) {\n    return Promise.reject(new JwtError(JwtErrorCode.INVALID_ARGUMENT, 'The provided token must be a string.'));\n  }\n\n  var fullDecodedToken = jwt.decode(jwtToken, {\n    complete: true\n  });\n\n  if (!fullDecodedToken) {\n    return Promise.reject(new JwtError(JwtErrorCode.INVALID_ARGUMENT, 'Decoding token failed.'));\n  }\n\n  var header = fullDecodedToken === null || fullDecodedToken === void 0 ? void 0 : fullDecodedToken.header;\n  var payload = fullDecodedToken === null || fullDecodedToken === void 0 ? void 0 : fullDecodedToken.payload;\n  return Promise.resolve({\n    header: header,\n    payload: payload\n  });\n}\n\nexports.decodeJwt = decodeJwt;\n/**\n * Jwt error code structure.\n *\n * @param code The error code.\n * @param message The error message.\n * @constructor\n */\n\nvar JwtError = function (_super) {\n  __extends(JwtError, _super);\n\n  function JwtError(code, message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.code = code;\n    _this.message = message;\n    _this.__proto__ = JwtError.prototype;\n    return _this;\n  }\n\n  return JwtError;\n}(Error);\n\nexports.JwtError = JwtError;\n/**\n * JWT error codes.\n */\n\nvar JwtErrorCode;\n\n(function (JwtErrorCode) {\n  JwtErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\n  JwtErrorCode[\"INVALID_CREDENTIAL\"] = \"invalid-credential\";\n  JwtErrorCode[\"TOKEN_EXPIRED\"] = \"token-expired\";\n  JwtErrorCode[\"INVALID_SIGNATURE\"] = \"invalid-token\";\n  JwtErrorCode[\"NO_MATCHING_KID\"] = \"no-matching-kid-error\";\n  JwtErrorCode[\"NO_KID_IN_HEADER\"] = \"no-kid-error\";\n  JwtErrorCode[\"KEY_FETCH_ERROR\"] = \"key-fetch-error\";\n})(JwtErrorCode = exports.JwtErrorCode || (exports.JwtErrorCode = {}));","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/firebase-admin/lib/utils/jwt.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","JwtErrorCode","JwtError","decodeJwt","verifyJwtSignature","EmulatorSignatureVerifier","PublicKeySignatureVerifier","UrlKeyFetcher","JwksFetcher","ALGORITHM_RS256","validator","require","jwt","jwks","api_request_1","JWT_CALLBACK_ERROR_PREFIX","NO_MATCHING_KID_ERROR_MESSAGE","NO_KID_IN_HEADER_ERROR_MESSAGE","ONE_DAY_IN_SECONDS","jwksUrl","publicKeysExpireAt","isURL","Error","client","jwksUri","cache","fetchPublicKeys","shouldRefresh","refresh","Promise","resolve","publicKeys","Date","now","_this","getSigningKeys","then","signingKeys","newKeys","reduce","map","signingKey","kid","getPublicKey","catch","err","message","clientCertUrl","httpAgent","HttpClient","request","method","url","send","resp","isJson","data","error","HttpError","call","headers","cacheControlHeader","parts","split","forEach","part","subParts","trim","maxAge","errorMessage","response","error_description","text","keyFetcher","isNonNullObject","withCertificateUrl","withJwksUrl","verify","token","isString","reject","INVALID_ARGUMENT","getKeyCallback","algorithms","code","NO_KID_IN_HEADER","verifyWithoutKid","verifyWithAllKeys","keys","promises","values","key","result","TOKEN_EXPIRED","push","all","every","r","INVALID_SIGNATURE","fetcher","header","callback","secretOrPublicKey","options","name","includes","pop","KEY_FETCH_ERROR","NO_MATCHING_KID","jwtToken","fullDecodedToken","decode","complete","payload","_super"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.11.1 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JwtErrorCode = exports.JwtError = exports.decodeJwt = exports.verifyJwtSignature = exports.EmulatorSignatureVerifier = exports.PublicKeySignatureVerifier = exports.UrlKeyFetcher = exports.JwksFetcher = exports.ALGORITHM_RS256 = void 0;\nvar validator = require(\"./validator\");\nvar jwt = require(\"jsonwebtoken\");\nvar jwks = require(\"jwks-rsa\");\nvar api_request_1 = require(\"../utils/api-request\");\nexports.ALGORITHM_RS256 = 'RS256';\n// `jsonwebtoken` converts errors from the `getKey` callback to its own `JsonWebTokenError` type\n// and prefixes the error message with the following. Use the prefix to identify errors thrown\n// from the key provider callback.\n// https://github.com/auth0/node-jsonwebtoken/blob/d71e383862fc735991fd2e759181480f066bf138/verify.js#L96\nvar JWT_CALLBACK_ERROR_PREFIX = 'error in secret or public key callback: ';\nvar NO_MATCHING_KID_ERROR_MESSAGE = 'no-matching-kid-error';\nvar NO_KID_IN_HEADER_ERROR_MESSAGE = 'no-kid-in-header-error';\nvar ONE_DAY_IN_SECONDS = 24 * 3600;\nvar JwksFetcher = /** @class */ (function () {\n    function JwksFetcher(jwksUrl) {\n        this.publicKeysExpireAt = 0;\n        if (!validator.isURL(jwksUrl)) {\n            throw new Error('The provided JWKS URL is not a valid URL.');\n        }\n        this.client = jwks({\n            jwksUri: jwksUrl,\n            cache: false,\n        });\n    }\n    JwksFetcher.prototype.fetchPublicKeys = function () {\n        if (this.shouldRefresh()) {\n            return this.refresh();\n        }\n        return Promise.resolve(this.publicKeys);\n    };\n    JwksFetcher.prototype.shouldRefresh = function () {\n        return !this.publicKeys || this.publicKeysExpireAt <= Date.now();\n    };\n    JwksFetcher.prototype.refresh = function () {\n        var _this = this;\n        return this.client.getSigningKeys()\n            .then(function (signingKeys) {\n            // reset expire at from previous set of keys.\n            _this.publicKeysExpireAt = 0;\n            var newKeys = signingKeys.reduce(function (map, signingKey) {\n                map[signingKey.kid] = signingKey.getPublicKey();\n                return map;\n            }, {});\n            _this.publicKeysExpireAt = Date.now() + (ONE_DAY_IN_SECONDS * 1000);\n            _this.publicKeys = newKeys;\n            return newKeys;\n        }).catch(function (err) {\n            throw new Error(\"Error fetching Json Web Keys: \" + err.message);\n        });\n    };\n    return JwksFetcher;\n}());\nexports.JwksFetcher = JwksFetcher;\n/**\n * Class to fetch public keys from a client certificates URL.\n */\nvar UrlKeyFetcher = /** @class */ (function () {\n    function UrlKeyFetcher(clientCertUrl, httpAgent) {\n        this.clientCertUrl = clientCertUrl;\n        this.httpAgent = httpAgent;\n        this.publicKeysExpireAt = 0;\n        if (!validator.isURL(clientCertUrl)) {\n            throw new Error('The provided public client certificate URL is not a valid URL.');\n        }\n    }\n    /**\n     * Fetches the public keys for the Google certs.\n     *\n     * @return A promise fulfilled with public keys for the Google certs.\n     */\n    UrlKeyFetcher.prototype.fetchPublicKeys = function () {\n        if (this.shouldRefresh()) {\n            return this.refresh();\n        }\n        return Promise.resolve(this.publicKeys);\n    };\n    /**\n     * Checks if the cached public keys need to be refreshed.\n     *\n     * @returns Whether the keys should be fetched from the client certs url or not.\n     */\n    UrlKeyFetcher.prototype.shouldRefresh = function () {\n        return !this.publicKeys || this.publicKeysExpireAt <= Date.now();\n    };\n    UrlKeyFetcher.prototype.refresh = function () {\n        var _this = this;\n        var client = new api_request_1.HttpClient();\n        var request = {\n            method: 'GET',\n            url: this.clientCertUrl,\n            httpAgent: this.httpAgent,\n        };\n        return client.send(request).then(function (resp) {\n            if (!resp.isJson() || resp.data.error) {\n                // Treat all non-json messages and messages with an 'error' field as\n                // error responses.\n                throw new api_request_1.HttpError(resp);\n            }\n            // reset expire at from previous set of keys.\n            _this.publicKeysExpireAt = 0;\n            if (Object.prototype.hasOwnProperty.call(resp.headers, 'cache-control')) {\n                var cacheControlHeader = resp.headers['cache-control'];\n                var parts = cacheControlHeader.split(',');\n                parts.forEach(function (part) {\n                    var subParts = part.trim().split('=');\n                    if (subParts[0] === 'max-age') {\n                        var maxAge = +subParts[1];\n                        _this.publicKeysExpireAt = Date.now() + (maxAge * 1000);\n                    }\n                });\n            }\n            _this.publicKeys = resp.data;\n            return resp.data;\n        }).catch(function (err) {\n            if (err instanceof api_request_1.HttpError) {\n                var errorMessage = 'Error fetching public keys for Google certs: ';\n                var resp = err.response;\n                if (resp.isJson() && resp.data.error) {\n                    errorMessage += \"\" + resp.data.error;\n                    if (resp.data.error_description) {\n                        errorMessage += ' (' + resp.data.error_description + ')';\n                    }\n                }\n                else {\n                    errorMessage += \"\" + resp.text;\n                }\n                throw new Error(errorMessage);\n            }\n            throw err;\n        });\n    };\n    return UrlKeyFetcher;\n}());\nexports.UrlKeyFetcher = UrlKeyFetcher;\n/**\n * Class for verifing JWT signature with a public key.\n */\nvar PublicKeySignatureVerifier = /** @class */ (function () {\n    function PublicKeySignatureVerifier(keyFetcher) {\n        this.keyFetcher = keyFetcher;\n        if (!validator.isNonNullObject(keyFetcher)) {\n            throw new Error('The provided key fetcher is not an object or null.');\n        }\n    }\n    PublicKeySignatureVerifier.withCertificateUrl = function (clientCertUrl, httpAgent) {\n        return new PublicKeySignatureVerifier(new UrlKeyFetcher(clientCertUrl, httpAgent));\n    };\n    PublicKeySignatureVerifier.withJwksUrl = function (jwksUrl) {\n        return new PublicKeySignatureVerifier(new JwksFetcher(jwksUrl));\n    };\n    PublicKeySignatureVerifier.prototype.verify = function (token) {\n        var _this = this;\n        if (!validator.isString(token)) {\n            return Promise.reject(new JwtError(JwtErrorCode.INVALID_ARGUMENT, 'The provided token must be a string.'));\n        }\n        return verifyJwtSignature(token, getKeyCallback(this.keyFetcher), { algorithms: [exports.ALGORITHM_RS256] })\n            .catch(function (error) {\n            if (error.code === JwtErrorCode.NO_KID_IN_HEADER) {\n                // No kid in JWT header. Try with all the public keys.\n                return _this.verifyWithoutKid(token);\n            }\n            throw error;\n        });\n    };\n    PublicKeySignatureVerifier.prototype.verifyWithoutKid = function (token) {\n        var _this = this;\n        return this.keyFetcher.fetchPublicKeys()\n            .then(function (publicKeys) { return _this.verifyWithAllKeys(token, publicKeys); });\n    };\n    PublicKeySignatureVerifier.prototype.verifyWithAllKeys = function (token, keys) {\n        var promises = [];\n        Object.values(keys).forEach(function (key) {\n            var result = verifyJwtSignature(token, key)\n                .then(function () { return true; })\n                .catch(function (error) {\n                if (error.code === JwtErrorCode.TOKEN_EXPIRED) {\n                    throw error;\n                }\n                return false;\n            });\n            promises.push(result);\n        });\n        return Promise.all(promises)\n            .then(function (result) {\n            if (result.every(function (r) { return r === false; })) {\n                throw new JwtError(JwtErrorCode.INVALID_SIGNATURE, 'Invalid token signature.');\n            }\n        });\n    };\n    return PublicKeySignatureVerifier;\n}());\nexports.PublicKeySignatureVerifier = PublicKeySignatureVerifier;\n/**\n * Class for verifing unsigned (emulator) JWTs.\n */\nvar EmulatorSignatureVerifier = /** @class */ (function () {\n    function EmulatorSignatureVerifier() {\n    }\n    EmulatorSignatureVerifier.prototype.verify = function (token) {\n        // Signature checks skipped for emulator; no need to fetch public keys.\n        return verifyJwtSignature(token, '');\n    };\n    return EmulatorSignatureVerifier;\n}());\nexports.EmulatorSignatureVerifier = EmulatorSignatureVerifier;\n/**\n * Provides a callback to fetch public keys.\n *\n * @param fetcher KeyFetcher to fetch the keys from.\n * @returns A callback function that can be used to get keys in `jsonwebtoken`.\n */\nfunction getKeyCallback(fetcher) {\n    return function (header, callback) {\n        if (!header.kid) {\n            callback(new Error(NO_KID_IN_HEADER_ERROR_MESSAGE));\n        }\n        var kid = header.kid || '';\n        fetcher.fetchPublicKeys().then(function (publicKeys) {\n            if (!Object.prototype.hasOwnProperty.call(publicKeys, kid)) {\n                callback(new Error(NO_MATCHING_KID_ERROR_MESSAGE));\n            }\n            else {\n                callback(null, publicKeys[kid]);\n            }\n        })\n            .catch(function (error) {\n            callback(error);\n        });\n    };\n}\n/**\n * Verifies the signature of a JWT using the provided secret or a function to fetch\n * the secret or public key.\n *\n * @param token The JWT to be verfied.\n * @param secretOrPublicKey The secret or a function to fetch the secret or public key.\n * @param options JWT verification options.\n * @returns A Promise resolving for a token with a valid signature.\n */\nfunction verifyJwtSignature(token, secretOrPublicKey, options) {\n    if (!validator.isString(token)) {\n        return Promise.reject(new JwtError(JwtErrorCode.INVALID_ARGUMENT, 'The provided token must be a string.'));\n    }\n    return new Promise(function (resolve, reject) {\n        jwt.verify(token, secretOrPublicKey, options, function (error) {\n            if (!error) {\n                return resolve();\n            }\n            if (error.name === 'TokenExpiredError') {\n                return reject(new JwtError(JwtErrorCode.TOKEN_EXPIRED, 'The provided token has expired. Get a fresh token from your ' +\n                    'client app and try again.'));\n            }\n            else if (error.name === 'JsonWebTokenError') {\n                if (error.message && error.message.includes(JWT_CALLBACK_ERROR_PREFIX)) {\n                    var message = error.message.split(JWT_CALLBACK_ERROR_PREFIX).pop() || 'Error fetching public keys.';\n                    var code = JwtErrorCode.KEY_FETCH_ERROR;\n                    if (message === NO_MATCHING_KID_ERROR_MESSAGE) {\n                        code = JwtErrorCode.NO_MATCHING_KID;\n                    }\n                    else if (message === NO_KID_IN_HEADER_ERROR_MESSAGE) {\n                        code = JwtErrorCode.NO_KID_IN_HEADER;\n                    }\n                    return reject(new JwtError(code, message));\n                }\n            }\n            return reject(new JwtError(JwtErrorCode.INVALID_SIGNATURE, error.message));\n        });\n    });\n}\nexports.verifyJwtSignature = verifyJwtSignature;\n/**\n * Decodes general purpose Firebase JWTs.\n *\n * @param jwtToken JWT token to be decoded.\n * @returns Decoded token containing the header and payload.\n */\nfunction decodeJwt(jwtToken) {\n    if (!validator.isString(jwtToken)) {\n        return Promise.reject(new JwtError(JwtErrorCode.INVALID_ARGUMENT, 'The provided token must be a string.'));\n    }\n    var fullDecodedToken = jwt.decode(jwtToken, {\n        complete: true,\n    });\n    if (!fullDecodedToken) {\n        return Promise.reject(new JwtError(JwtErrorCode.INVALID_ARGUMENT, 'Decoding token failed.'));\n    }\n    var header = fullDecodedToken === null || fullDecodedToken === void 0 ? void 0 : fullDecodedToken.header;\n    var payload = fullDecodedToken === null || fullDecodedToken === void 0 ? void 0 : fullDecodedToken.payload;\n    return Promise.resolve({ header: header, payload: payload });\n}\nexports.decodeJwt = decodeJwt;\n/**\n * Jwt error code structure.\n *\n * @param code The error code.\n * @param message The error message.\n * @constructor\n */\nvar JwtError = /** @class */ (function (_super) {\n    __extends(JwtError, _super);\n    function JwtError(code, message) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        _this.message = message;\n        _this.__proto__ = JwtError.prototype;\n        return _this;\n    }\n    return JwtError;\n}(Error));\nexports.JwtError = JwtError;\n/**\n * JWT error codes.\n */\nvar JwtErrorCode;\n(function (JwtErrorCode) {\n    JwtErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\n    JwtErrorCode[\"INVALID_CREDENTIAL\"] = \"invalid-credential\";\n    JwtErrorCode[\"TOKEN_EXPIRED\"] = \"token-expired\";\n    JwtErrorCode[\"INVALID_SIGNATURE\"] = \"invalid-token\";\n    JwtErrorCode[\"NO_MATCHING_KID\"] = \"no-matching-kid-error\";\n    JwtErrorCode[\"NO_KID_IN_HEADER\"] = \"no-kid-error\";\n    JwtErrorCode[\"KEY_FETCH_ERROR\"] = \"key-fetch-error\";\n})(JwtErrorCode = exports.JwtErrorCode || (exports.JwtErrorCode = {}));\n"]},"metadata":{},"sourceType":"script"}