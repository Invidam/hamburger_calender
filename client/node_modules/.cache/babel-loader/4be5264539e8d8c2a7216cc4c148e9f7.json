{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { getToday } from \"../../../tools/time\";\nexport const useUpdateTime = (key, user, date) => {\n  _s();\n\n  console.log(\"UPDATE TIME HOOK DATE: \", date, getToday());\n  if (getToday() !== date) window.localStorage.removeItem(key);\n  const initVal = window.localStorage.getItem(key) ? JSON.parse(window.localStorage.getItem(key)) : null;\n  console.log(\"UPDATE TIME HOOK INIT VAL\", initVal);\n  const [recordTime, setRecordTime] = useState(initVal); // setRecordTime(initVal);\n\n  useEffect(() => {\n    console.log(\"====================DETATCH DATE CHANGE \");\n  }, [date]);\n  console.log(\"UPDATE TIME HOOK RECRORD TIME\", recordTime);\n  if (!recordTime) axios({\n    headers: {\n      Authorization: \"\",\n      \"Content-Type\": \"application/json\"\n    },\n    url: `/api/${user}/${date}/worklist/record-time/${key}`,\n    method: \"get\"\n  }).then(data => {\n    if (data === null || data === void 0 ? void 0 : data.data) {\n      setRecordTime(data === null || data === void 0 ? void 0 : data.data);\n      window.localStorage.setItem(key, JSON.stringify(data === null || data === void 0 ? void 0 : data.data));\n    } else {\n      const emptyTimeObj = {\n        hour: -1,\n        minute: -1\n      };\n      setRecordTime(emptyTimeObj);\n      window.localStorage.removeItem(key);\n    }\n  });\n\n  const updateRecordTime = timeObj => {\n    if (!timeObj) timeObj = {\n      hour: -1,\n      minute: -1\n    };\n    axios.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n      value: timeObj\n    });\n    window.localStorage.setItem(key, JSON.stringify(timeObj));\n    setRecordTime(timeObj);\n  };\n\n  const onClick = event => {\n    event.preventDefault();\n    const [hour, minute] = new Date().toTimeString().split(\":\").slice(0, 2).map(numChar => parseInt(numChar));\n    const timeObj = {\n      hour,\n      minute\n    };\n    updateRecordTime(timeObj);\n  };\n\n  return [recordTime, onClick, updateRecordTime];\n};\n\n_s(useUpdateTime, \"h490kuPbigxM53kww9L99hhwvTY=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/time/useUpdateTime.js"],"names":["axios","useState","useEffect","getToday","useUpdateTime","key","user","date","console","log","window","localStorage","removeItem","initVal","getItem","JSON","parse","recordTime","setRecordTime","headers","Authorization","url","method","then","data","setItem","stringify","emptyTimeObj","hour","minute","updateRecordTime","timeObj","post","value","onClick","event","preventDefault","Date","toTimeString","split","slice","map","numChar","parseInt"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { getToday } from \"../../../tools/time\";\n\nexport const useUpdateTime = (key, user, date) => {\n  console.log(\"UPDATE TIME HOOK DATE: \", date, getToday());\n  if (getToday() !== date) window.localStorage.removeItem(key);\n  const initVal = window.localStorage.getItem(key)\n    ? JSON.parse(window.localStorage.getItem(key))\n    : null;\n  console.log(\"UPDATE TIME HOOK INIT VAL\", initVal);\n  const [recordTime, setRecordTime] = useState(initVal);\n  // setRecordTime(initVal);\n  useEffect(() => {\n    console.log(\"====================DETATCH DATE CHANGE \");\n  }, [date]);\n  console.log(\"UPDATE TIME HOOK RECRORD TIME\", recordTime);\n  if (!recordTime)\n    axios({\n      headers: {\n        Authorization: \"\",\n        \"Content-Type\": \"application/json\",\n      },\n      url: `/api/${user}/${date}/worklist/record-time/${key}`,\n      method: \"get\",\n    }).then((data) => {\n      if (data?.data) {\n        setRecordTime(data?.data);\n        window.localStorage.setItem(key, JSON.stringify(data?.data));\n      } else {\n        const emptyTimeObj = { hour: -1, minute: -1 };\n        setRecordTime(emptyTimeObj);\n        window.localStorage.removeItem(key);\n      }\n    });\n  const updateRecordTime = (timeObj) => {\n    if (!timeObj) timeObj = { hour: -1, minute: -1 };\n\n    axios.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n      value: timeObj,\n    });\n    window.localStorage.setItem(key, JSON.stringify(timeObj));\n    setRecordTime(timeObj);\n  };\n  const onClick = (event) => {\n    event.preventDefault();\n    const [hour, minute] = new Date()\n      .toTimeString()\n      .split(\":\")\n      .slice(0, 2)\n      .map((numChar) => parseInt(numChar));\n    const timeObj = { hour, minute };\n    updateRecordTime(timeObj);\n  };\n  return [recordTime, onClick, updateRecordTime];\n};\n"]},"metadata":{},"sourceType":"module"}