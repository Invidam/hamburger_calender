{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Storage = exports.PROTOCOL_REGEX = exports.IdempotencyStrategy = void 0;\n\nconst common_1 = require(\"@google-cloud/common\");\n\nconst paginator_1 = require(\"@google-cloud/paginator\");\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst arrify = require(\"arrify\");\n\nconst bucket_1 = require(\"./bucket\");\n\nconst channel_1 = require(\"./channel\");\n\nconst file_1 = require(\"./file\");\n\nconst util_1 = require(\"./util\");\n\nconst hmacKey_1 = require(\"./hmacKey\");\n\nvar IdempotencyStrategy;\n\n(function (IdempotencyStrategy) {\n  IdempotencyStrategy[IdempotencyStrategy[\"RetryAlways\"] = 0] = \"RetryAlways\";\n  IdempotencyStrategy[IdempotencyStrategy[\"RetryConditional\"] = 1] = \"RetryConditional\";\n  IdempotencyStrategy[IdempotencyStrategy[\"RetryNever\"] = 2] = \"RetryNever\";\n})(IdempotencyStrategy = exports.IdempotencyStrategy || (exports.IdempotencyStrategy = {}));\n\nexports.PROTOCOL_REGEX = /^(\\w*):\\/\\//;\n/**\n * Default behavior: Automatically retry retriable server errors.\n *\n * @const {boolean}\n * @private\n */\n\nconst AUTO_RETRY_DEFAULT = true;\n/**\n * Default behavior: Only attempt to retry retriable errors 3 times.\n *\n * @const {number}\n * @private\n */\n\nconst MAX_RETRY_DEFAULT = 3;\n/**\n * Default behavior: Wait twice as long as previous retry before retrying.\n *\n * @const {number}\n * @private\n */\n\nconst RETRY_DELAY_MULTIPLIER_DEFAULT = 2;\n/**\n * Default behavior: If the operation doesn't succeed after 600 seconds,\n *  stop retrying.\n *\n * @const {number}\n * @private\n */\n\nconst TOTAL_TIMEOUT_DEFAULT = 600;\n/**\n * Default behavior: Wait no more than 64 seconds between retries.\n *\n * @const {number}\n * @private\n */\n\nconst MAX_RETRY_DELAY_DEFAULT = 64;\n/**\n * Default behavior: Retry conditionally idempotent operations if correct preconditions are set.\n *\n * @const {enum}\n * @private\n */\n\nconst IDEMPOTENCY_STRATEGY_DEFAULT = IdempotencyStrategy.RetryConditional;\n/**\n * Returns true if the API request should be retried, given the error that was\n * given the first time the request was attempted.\n * @const\n * @private\n * @param {error} err - The API error to check if it is appropriate to retry.\n * @return {boolean} True if the API request should be retried, false otherwise.\n */\n\nconst RETRYABLE_ERR_FN_DEFAULT = function (err) {\n  var _a;\n\n  if (err) {\n    if ([408, 429, 500, 502, 503, 504].indexOf(err.code) !== -1) {\n      return true;\n    }\n\n    if (err.errors) {\n      for (const e of err.errors) {\n        const reason = (_a = e.reason) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n\n        if (reason && reason.includes('eai_again') || //DNS lookup error\n        reason === 'connection reset by peer' || reason === 'unexpected connection closure') {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n/*! Developer Documentation\n *\n * Invoke this method to create a new Storage object bound with pre-determined\n * configuration options. For each object that can be created (e.g., a bucket),\n * there is an equivalent static and instance method. While they are classes,\n * they can be instantiated without use of the `new` keyword.\n */\n\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * This object provides constants to refer to the three permission levels that\n * can be granted to an entity:\n *\n *   - `gcs.acl.OWNER_ROLE` - (\"OWNER\")\n *   - `gcs.acl.READER_ROLE` - (\"READER\")\n *   - `gcs.acl.WRITER_ROLE` - (\"WRITER\")\n *\n * @see [About Access Control Lists]{@link https://cloud.google.com/storage/docs/access-control/lists}\n *\n * @name Storage#acl\n * @type {object}\n * @property {string} OWNER_ROLE\n * @property {string} READER_ROLE\n * @property {string} WRITER_ROLE\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const albums = storage.bucket('albums');\n *\n * //-\n * // Make all of the files currently in a bucket publicly readable.\n * //-\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * albums.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // Make any new objects added to a bucket publicly readable.\n * //-\n * albums.acl.default.add(options, function(err, aclObject) {});\n *\n * //-\n * // Grant a user ownership permissions to a bucket.\n * //-\n * albums.acl.add({\n *   entity: 'user-useremail@example.com',\n *   role: storage.acl.OWNER_ROLE\n * }, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * albums.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n */\n\n/**\n * Get {@link Bucket} objects for all of the buckets in your project as\n * a readable object stream.\n *\n * @method Storage#getBucketsStream\n * @param {GetBucketsRequest} [query] Query object for listing buckets.\n * @returns {ReadableStream} A readable stream that emits {@link Bucket}\n *     instances.\n *\n * @example\n * storage.getBucketsStream()\n *   .on('error', console.error)\n *   .on('data', function(bucket) {\n *     // bucket is a Bucket object.\n *   })\n *   .on('end', function() {\n *     // All buckets retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * storage.getBucketsStream()\n *   .on('data', function(bucket) {\n *     this.end();\n *   });\n */\n\n/**\n * Get {@link HmacKey} objects for all of the HMAC keys in the project in a\n * readable object stream.\n *\n * @method Storage#getHmacKeysStream\n * @param {GetHmacKeysOptions} [options] Configuration options.\n * @returns {ReadableStream} A readable stream that emits {@link HmacKey}\n *     instances.\n *\n * @example\n * storage.getHmacKeysStream()\n *   .on('error', console.error)\n *   .on('data', function(hmacKey) {\n *     // hmacKey is an HmacKey object.\n *   })\n *   .on('end', function() {\n *     // All HmacKey retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * storage.getHmacKeysStream()\n *   .on('data', function(bucket) {\n *     this.end();\n *   });\n */\n\n/**\n * <h4>ACLs</h4>\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share files with other users\n * and allow other users to access your buckets and files.\n *\n * To learn more about ACLs, read this overview on\n * [Access Control](https://cloud.google.com/storage/docs/access-control).\n *\n * @see [Cloud Storage overview]{@link https://cloud.google.com/storage/docs/overview}\n * @see [Access Control]{@link https://cloud.google.com/storage/docs/access-control}\n *\n * @class\n */\n\n\nclass Storage extends common_1.Service {\n  /**\n   * @typedef {object} StorageOptions\n   * @property {string} [projectId] The project ID from the Google Developer's\n   *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n   *     variable `GCLOUD_PROJECT` for your project ID. If your app is running\n   * in an environment which supports {@link\n   * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n   * Application Default Credentials}, your project ID will be detected\n   * automatically.\n   * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n   *     downloaded from the Google Developers Console. If you provide a path to\n   * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n   *     .p12 require you to specify the `email` option as well.\n   * @property {string} [email] Account email address. Required when using a .pem\n   *     or .p12 keyFilename.\n   * @property {object} [credentials] Credentials object.\n   * @property {string} [credentials.client_email]\n   * @property {string} [credentials.private_key]\n   * @property {object} [retryOptions] Options for customizing retries. Retriable server errors\n   *     will be retried with exponential delay between them dictated by the formula\n   *     max(maxRetryDelay, retryDelayMultiplier*retryNumber) until maxRetries or totalTimeout\n   *     has been reached. Retries will only happen if autoRetry is set to true.\n   * @property {boolean} [retryOptions.autoRetry=true] Automatically retry requests if the\n   *     response is related to rate limits or certain intermittent server\n   * errors. We will exponentially backoff subsequent requests by default.\n   * @property {number} [retryOptions.retryDelayMultiplier = 2] the multiplier by which to\n   *   increase the delay time between the completion of failed requests, and the\n   *   initiation of the subsequent retrying request.\n   * @property {number} [retryOptions.totalTimeout = 600] The total time, starting from\n   *  when the initial request is sent, after which an error will\n   *   be returned, regardless of the retrying attempts made meanwhile.\n   * @property {number} [retryOptions.maxRetryDelay = 64] The maximum delay time between requests.\n   *   When this value is reached, ``retryDelayMultiplier`` will no longer be used to\n   *   increase delay time.\n   * @property {number} [retryOptions.maxRetries=3] Maximum number of automatic retries\n   *     attempted before returning the error.\n   * @property {function} [retryOptions.retryableErrorFn] Function that returns true if a given\n   *     error should be retried and false otherwise.\n   * @property {enum} [retryOptions.idempotencyStrategy=IdempotencyStrategy.RetryConditional] Enumeration\n   *     controls how conditionally idempotent operations are retried. Possible values are: RetryAlways -\n   *     will respect other retry settings and attempt to retry conditionally idempotent operations. RetryConditional -\n   *     will retry conditionally idempotent operations if the correct preconditions are set. RetryNever - never\n   *     retry a conditionally idempotent operation.\n   * @property {string} [userAgent] The value to be prepended to the User-Agent\n   *     header in API requests.\n   * @property {object} [authClient] GoogleAuth client to reuse instead of creating a new one.\n   * @property {number} [timeout] The amount of time in milliseconds to wait per http request before timing out.\n   * @property {object[]} [interceptors_] Array of custom request interceptors to be returned in the order they were assigned.\n   * @property {string} [apiEndpoint = storage.google.com] The API endpoint of the service used to make requests.\n   */\n\n  /**\n   * Constructs the Storage client.\n   *\n   * @example <caption>Create a client that uses Application Default Credentials\n   * (ADC)</caption>\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   *\n   * @example <caption>Create a client with explicit credentials</caption>\n   * const storage = new Storage({\n   *   projectId: 'your-project-id',\n   *   keyFilename: '/path/to/keyfile.json'\n   * });\n   *\n   * @param {StorageOptions} [options] Configuration options.\n   */\n  constructor(options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n\n    let apiEndpoint = 'https://storage.googleapis.com';\n    let customEndpoint = false; // Note: EMULATOR_HOST is an experimental configuration variable. Use apiEndpoint instead.\n\n    const EMULATOR_HOST = process.env.STORAGE_EMULATOR_HOST;\n\n    if (typeof EMULATOR_HOST === 'string') {\n      apiEndpoint = Storage.sanitizeEndpoint(EMULATOR_HOST);\n      customEndpoint = true;\n    }\n\n    if (options.apiEndpoint) {\n      apiEndpoint = Storage.sanitizeEndpoint(options.apiEndpoint);\n      customEndpoint = true;\n    }\n\n    options = Object.assign({}, options, {\n      apiEndpoint\n    }); // Note: EMULATOR_HOST is an experimental configuration variable. Use apiEndpoint instead.\n\n    const baseUrl = EMULATOR_HOST || `${options.apiEndpoint}/storage/v1`;\n    let autoRetryValue = AUTO_RETRY_DEFAULT;\n\n    if (options.autoRetry !== undefined && ((_a = options.retryOptions) === null || _a === void 0 ? void 0 : _a.autoRetry) !== undefined) {\n      throw new common_1.ApiError('autoRetry is deprecated. Use retryOptions.autoRetry instead.');\n    } else if (options.autoRetry !== undefined) {\n      autoRetryValue = options.autoRetry;\n    } else if (((_b = options.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry) !== undefined) {\n      autoRetryValue = options.retryOptions.autoRetry;\n    }\n\n    let maxRetryValue = MAX_RETRY_DEFAULT;\n\n    if (options.maxRetries && ((_c = options.retryOptions) === null || _c === void 0 ? void 0 : _c.maxRetries)) {\n      throw new common_1.ApiError('maxRetries is deprecated. Use retryOptions.maxRetries instead.');\n    } else if (options.maxRetries) {\n      maxRetryValue = options.maxRetries;\n    } else if ((_d = options.retryOptions) === null || _d === void 0 ? void 0 : _d.maxRetries) {\n      maxRetryValue = options.retryOptions.maxRetries;\n    }\n\n    const config = {\n      apiEndpoint: options.apiEndpoint,\n      retryOptions: {\n        autoRetry: autoRetryValue,\n        maxRetries: maxRetryValue,\n        retryDelayMultiplier: ((_e = options.retryOptions) === null || _e === void 0 ? void 0 : _e.retryDelayMultiplier) ? (_f = options.retryOptions) === null || _f === void 0 ? void 0 : _f.retryDelayMultiplier : RETRY_DELAY_MULTIPLIER_DEFAULT,\n        totalTimeout: ((_g = options.retryOptions) === null || _g === void 0 ? void 0 : _g.totalTimeout) ? (_h = options.retryOptions) === null || _h === void 0 ? void 0 : _h.totalTimeout : TOTAL_TIMEOUT_DEFAULT,\n        maxRetryDelay: ((_j = options.retryOptions) === null || _j === void 0 ? void 0 : _j.maxRetryDelay) ? (_k = options.retryOptions) === null || _k === void 0 ? void 0 : _k.maxRetryDelay : MAX_RETRY_DELAY_DEFAULT,\n        retryableErrorFn: ((_l = options.retryOptions) === null || _l === void 0 ? void 0 : _l.retryableErrorFn) ? (_m = options.retryOptions) === null || _m === void 0 ? void 0 : _m.retryableErrorFn : RETRYABLE_ERR_FN_DEFAULT,\n        idempotencyStrategy: ((_o = options.retryOptions) === null || _o === void 0 ? void 0 : _o.idempotencyStrategy) !== undefined ? (_p = options.retryOptions) === null || _p === void 0 ? void 0 : _p.idempotencyStrategy : IDEMPOTENCY_STRATEGY_DEFAULT\n      },\n      baseUrl,\n      customEndpoint,\n      projectIdRequired: false,\n      scopes: ['https://www.googleapis.com/auth/iam', 'https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/devstorage.full_control'],\n      packageJson: require('../../package.json')\n    };\n    super(config, options);\n    /**\n     * Reference to {@link Storage.acl}.\n     *\n     * @name Storage#acl\n     * @see Storage.acl\n     */\n\n    this.acl = Storage.acl;\n    this.retryOptions = config.retryOptions;\n    this.getBucketsStream = paginator_1.paginator.streamify('getBuckets');\n    this.getHmacKeysStream = paginator_1.paginator.streamify('getHmacKeys');\n  }\n\n  static sanitizeEndpoint(url) {\n    if (!exports.PROTOCOL_REGEX.test(url)) {\n      url = `https://${url}`;\n    }\n\n    return url.replace(/\\/+$/, ''); // Remove trailing slashes\n  }\n  /**\n   * Get a reference to a Cloud Storage bucket.\n   *\n   * @param {string} name Name of the bucket.\n   * @param {object} [options] Configuration object.\n   * @param {string} [options.kmsKeyName] A Cloud KMS key that will be used to\n   *     encrypt objects inserted into this bucket, if no encryption method is\n   *     specified.\n   * @param {string} [options.userProject] User project to be billed for all\n   *     requests made from this Bucket object.\n   * @returns {Bucket}\n   * @see Bucket\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const albums = storage.bucket('albums');\n   * const photos = storage.bucket('photos');\n   */\n\n\n  bucket(name, options) {\n    if (!name) {\n      throw new Error('A bucket name is needed to use Cloud Storage.');\n    }\n\n    return new bucket_1.Bucket(this, name, options);\n  }\n  /**\n   * Reference a channel to receive notifications about changes to your bucket.\n   *\n   * @param {string} id The ID of the channel.\n   * @param {string} resourceId The resource ID of the channel.\n   * @returns {Channel}\n   * @see Channel\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const channel = storage.channel('id', 'resource-id');\n   */\n\n\n  channel(id, resourceId) {\n    return new channel_1.Channel(this, id, resourceId);\n  }\n  /**\n   * @typedef {array} CreateBucketResponse\n   * @property {Bucket} 0 The new {@link Bucket}.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback CreateBucketCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Bucket} bucket The new {@link Bucket}.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Metadata to set for the bucket.\n   *\n   * @typedef {object} CreateBucketRequest\n   * @property {boolean} [archive=false] Specify the storage class as Archive.\n   * @property {boolean} [coldline=false] Specify the storage class as Coldline.\n   * @property {Cors[]} [cors=[]] Specify the CORS configuration to use.\n   * @property {boolean} [dra=false] Specify the storage class as Durable Reduced\n   *     Availability.\n   * @property {boolean} [multiRegional=false] Specify the storage class as\n   *     Multi-Regional.\n   * @property {boolean} [nearline=false] Specify the storage class as Nearline.\n   * @property {boolean} [regional=false] Specify the storage class as Regional.\n   * @property {boolean} [requesterPays=false] **Early Access Testers Only**\n   *     Force the use of the User Project metadata field to assign operational\n   *     costs when an operation is made on a Bucket and its objects.\n   * @property {boolean} [standard=true] Specify the storage class as Standard.\n   * @property {string} [storageClass] The new storage class. (`standard`,\n   *     `nearline`, `coldline`, or `archive`).\n   *     **Note:** The storage classes `multi_regional`, `regional`, and\n   *     `durable_reduced_availability` are now legacy and will be deprecated in\n   *     the future.\n   * @property {Versioning} [versioning=undefined] Specify the versioning status.\n   * @property {string} [userProject] The ID of the project which will be billed\n   *     for the request.\n   */\n\n  /**\n   * Create a bucket.\n   *\n   * Cloud Storage uses a flat namespace, so you can't create a bucket with\n   * a name that is already in use. For more information, see\n   * [Bucket Naming\n   * Guidelines](https://cloud.google.com/storage/docs/bucketnaming.html#requirements).\n   *\n   * @see [Buckets: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert}\n   * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes}\n   *\n   * @param {string} name Name of the bucket to create.\n   * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n   * @param {CreateBucketCallback} [callback] Callback function.\n   * @returns {Promise<CreateBucketResponse>}\n   * @throws {Error} If a name is not provided.\n   * @see Bucket#create\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const callback = function(err, bucket, apiResponse) {\n   *   // `bucket` is a Bucket object.\n   * };\n   *\n   * storage.createBucket('new-bucket', callback);\n   *\n   * //-\n   * // Create a bucket in a specific location and region. <em>See the <a\n   * // href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets/insert\">\n   * // Official JSON API docs</a> for complete details on the `location`\n   * option.\n   * // </em>\n   * //-\n   * const metadata = {\n   *   location: 'US-CENTRAL1',\n   *   regional: true\n   * };\n   *\n   * storage.createBucket('new-bucket', metadata, callback);\n   *\n   * //-\n   * // Create a bucket with a retention policy of 6 months.\n   * //-\n   * const metadata = {\n   *   retentionPolicy: {\n   *     retentionPeriod: 15780000 // 6 months in seconds.\n   *   }\n   * };\n   *\n   * storage.createBucket('new-bucket', metadata, callback);\n   *\n   * //-\n   * // Enable versioning on a new bucket.\n   * //-\n   * const metadata = {\n   *   versioning: {\n   *     enabled: true\n   *   }\n   * };\n   *\n   * storage.createBucket('new-bucket', metadata, callback);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * storage.createBucket('new-bucket').then(function(data) {\n   *   const bucket = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * @example <caption>include:samples/buckets.js</caption>\n   * region_tag:storage_create_bucket\n   * Another example:\n   */\n\n\n  createBucket(name, metadataOrCallback, callback) {\n    if (!name) {\n      throw new Error('A name is required to create a bucket.');\n    }\n\n    let metadata;\n\n    if (!callback) {\n      callback = metadataOrCallback;\n      metadata = {};\n    } else {\n      metadata = metadataOrCallback;\n    }\n\n    const body = Object.assign({}, metadata, {\n      name\n    });\n    const storageClasses = {\n      archive: 'ARCHIVE',\n      coldline: 'COLDLINE',\n      dra: 'DURABLE_REDUCED_AVAILABILITY',\n      multiRegional: 'MULTI_REGIONAL',\n      nearline: 'NEARLINE',\n      regional: 'REGIONAL',\n      standard: 'STANDARD'\n    };\n    Object.keys(storageClasses).forEach(storageClass => {\n      if (body[storageClass]) {\n        if (metadata.storageClass && metadata.storageClass !== storageClass) {\n          throw new Error(`Both \\`${storageClass}\\` and \\`storageClass\\` were provided.`);\n        }\n\n        body.storageClass = storageClasses[storageClass];\n        delete body[storageClass];\n      }\n    });\n\n    if (body.requesterPays) {\n      body.billing = {\n        requesterPays: body.requesterPays\n      };\n      delete body.requesterPays;\n    }\n\n    const query = {\n      project: this.projectId\n    };\n\n    if (body.userProject) {\n      query.userProject = body.userProject;\n      delete body.userProject;\n    }\n\n    this.request({\n      method: 'POST',\n      uri: '/b',\n      qs: query,\n      json: body\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      const bucket = this.bucket(name);\n      bucket.metadata = resp;\n      callback(null, bucket, resp);\n    });\n  }\n  /**\n   * @typedef {object} CreateHmacKeyOptions\n   * @property {string} [projectId] The project ID of the project that owns\n   *     the service account of the requested HMAC key. If not provided,\n   *     the project ID used to instantiate the Storage client will be used.\n   * @property {string} [userProject] This parameter is currently ignored.\n   */\n\n  /**\n   * @typedef {object} HmacKeyMetadata\n   * @property {string} accessId The access id identifies which HMAC key was\n   *     used to sign a request when authenticating with HMAC.\n   * @property {string} etag Used to perform a read-modify-write of the key.\n   * @property {string} id The resource name of the HMAC key.\n   * @property {string} projectId The project ID.\n   * @property {string} serviceAccountEmail The service account's email this\n   *     HMAC key is created for.\n   * @property {string} state The state of this HMAC key. One of \"ACTIVE\",\n   *     \"INACTIVE\" or \"DELETED\".\n   * @property {string} timeCreated The creation time of the HMAC key in\n   *     RFC 3339 format.\n   * @property {string} [updated] The time this HMAC key was last updated in\n   *     RFC 3339 format.\n   */\n\n  /**\n   * @typedef {array} CreateHmacKeyResponse\n   * @property {HmacKey} 0 The HmacKey instance created from API response.\n   * @property {string} 1 The HMAC key's secret used to access the XML API.\n   * @property {object} 3 The raw API response.\n   */\n\n  /**\n   * @callback CreateHmacKeyCallback Callback function.\n   * @param {?Error} err Request error, if any.\n   * @param {HmacKey} hmacKey The HmacKey instance created from API response.\n   * @param {string} secret The HMAC key's secret used to access the XML API.\n   * @param {object} apiResponse The raw API response.\n   */\n\n  /**\n   * Create an HMAC key associated with an service account to authenticate\n   * requests to the Cloud Storage XML API.\n   *\n   * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys}\n   *\n   * @param {string} serviceAccountEmail The service account's email address\n   *     with which the HMAC key is created for.\n   * @param {CreateHmacKeyCallback} [callback] Callback function.\n   * @return {Promise<CreateHmacKeyResponse>}\n   *\n   * @example\n   * const {Storage} = require('google-cloud/storage');\n   * const storage = new Storage();\n   *\n   * // Replace with your service account's email address\n   * const serviceAccountEmail =\n   *   'my-service-account@appspot.gserviceaccount.com';\n   *\n   * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {\n   *   if (!err) {\n   *     // Securely store the secret for use with the XML API.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * storage.createHmacKey(serviceAccountEmail)\n   *   .then((response) => {\n   *     const hmacKey = response[0];\n   *     const secret = response[1];\n   *     // Securely store the secret for use with the XML API.\n   *   });\n   */\n\n\n  createHmacKey(serviceAccountEmail, optionsOrCb, cb) {\n    if (typeof serviceAccountEmail !== 'string') {\n      throw new Error('The first argument must be a service account email to create an HMAC key.');\n    }\n\n    const {\n      options,\n      callback\n    } = util_1.normalize(optionsOrCb, cb);\n    const query = Object.assign({}, options, {\n      serviceAccountEmail\n    });\n    const projectId = query.projectId || this.projectId;\n    delete query.projectId;\n    this.request({\n      method: 'POST',\n      uri: `/projects/${projectId}/hmacKeys`,\n      qs: query,\n      maxRetries: 0\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, null, resp);\n        return;\n      }\n\n      const metadata = resp.metadata;\n      const hmacKey = this.hmacKey(metadata.accessId, {\n        projectId: metadata.projectId\n      });\n      hmacKey.metadata = resp.metadata;\n      callback(null, hmacKey, resp.secret, resp);\n    });\n  }\n  /**\n   * Query object for listing buckets.\n   *\n   * @typedef {object} GetBucketsRequest\n   * @property {boolean} [autoPaginate=true] Have pagination handled\n   *     automatically.\n   * @property {number} [maxApiCalls] Maximum number of API calls to make.\n   * @property {number} [maxResults] Maximum number of items plus prefixes to\n   *     return per call.\n   *     Note: By default will handle pagination automatically\n   *     if more than 1 page worth of results are requested per call.\n   *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n   *     or 1 page of results will be returned per call.\n   * @property {string} [pageToken] A previously-returned page token\n   *     representing part of the larger set of results to view.\n   * @property {string} [userProject] The ID of the project which will be billed\n   *     for the request.\n   */\n\n  /**\n   * @typedef {array} GetBucketsResponse\n   * @property {Bucket[]} 0 Array of {@link Bucket} instances.\n   * @property {objcet} 1 nextQuery A query object to receive more results.\n   * @property {object} 2 The full API response.\n   */\n\n  /**\n   * @callback GetBucketsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Bucket[]} buckets Array of {@link Bucket} instances.\n   * @param {object} nextQuery A query object to receive more results.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Get Bucket objects for all of the buckets in your project.\n   *\n   * @see [Buckets: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list}\n   *\n   * @param {GetBucketsRequest} [query] Query object for listing buckets.\n   * @param {GetBucketsCallback} [callback] Callback function.\n   * @returns {Promise<GetBucketsResponse>}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * storage.getBuckets(function(err, buckets) {\n   *   if (!err) {\n   *     // buckets is an array of Bucket objects.\n   *   }\n   * });\n   *\n   * //-\n   * // To control how many API requests are made and page through the results\n   * // manually, set `autoPaginate` to `false`.\n   * //-\n   * const callback = function(err, buckets, nextQuery, apiResponse) {\n   *   if (nextQuery) {\n   *     // More results exist.\n   *     storage.getBuckets(nextQuery, callback);\n   *   }\n   *\n   *   // The `metadata` property is populated for you with the metadata at the\n   *   // time of fetching.\n   *   buckets[0].metadata;\n   *\n   *   // However, in cases where you are concerned the metadata could have\n   *   // changed, use the `getMetadata` method.\n   *   buckets[0].getMetadata(function(err, metadata, apiResponse) {});\n   * };\n   *\n   * storage.getBuckets({\n   *   autoPaginate: false\n   * }, callback);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * storage.getBuckets().then(function(data) {\n   *   const buckets = data[0];\n   * });\n   *\n   * @example <caption>include:samples/buckets.js</caption>\n   * region_tag:storage_list_buckets\n   * Another example:\n   */\n\n\n  getBuckets(optionsOrCallback, cb) {\n    const {\n      options,\n      callback\n    } = util_1.normalize(optionsOrCallback, cb);\n    options.project = options.project || this.projectId;\n    this.request({\n      uri: '/b',\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, null, resp);\n        return;\n      }\n\n      const buckets = arrify(resp.items).map(bucket => {\n        const bucketInstance = this.bucket(bucket.id);\n        bucketInstance.metadata = bucket;\n        return bucketInstance;\n      });\n      const nextQuery = resp.nextPageToken ? Object.assign({}, options, {\n        pageToken: resp.nextPageToken\n      }) : null;\n      callback(null, buckets, nextQuery, resp);\n    });\n  }\n\n  getHmacKeys(optionsOrCb, cb) {\n    const {\n      options,\n      callback\n    } = util_1.normalize(optionsOrCb, cb);\n    const query = Object.assign({}, options);\n    const projectId = query.projectId || this.projectId;\n    delete query.projectId;\n    this.request({\n      uri: `/projects/${projectId}/hmacKeys`,\n      qs: query\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, null, resp);\n        return;\n      }\n\n      const hmacKeys = arrify(resp.items).map(hmacKey => {\n        const hmacKeyInstance = this.hmacKey(hmacKey.accessId, {\n          projectId: hmacKey.projectId\n        });\n        hmacKeyInstance.metadata = hmacKey;\n        return hmacKeyInstance;\n      });\n      const nextQuery = resp.nextPageToken ? Object.assign({}, options, {\n        pageToken: resp.nextPageToken\n      }) : null;\n      callback(null, hmacKeys, nextQuery, resp);\n    });\n  }\n  /**\n   * @typedef {array} GetServiceAccountResponse\n   * @property {object} 0 The service account resource.\n   * @property {object} 1 The full\n   * [API\n   * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\n   */\n\n  /**\n   * @callback GetServiceAccountCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} serviceAccount The serviceAccount resource.\n   * @param {string} serviceAccount.emailAddress The service account email\n   *     address.\n   * @param {object} apiResponse The full\n   * [API\n   * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\n   */\n\n  /**\n   * Get the email address of this project's Google Cloud Storage service\n   * account.\n   *\n   * @see [Projects.serviceAccount: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get}\n   * @see [Projects.serviceAccount Resource]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource}\n   *\n   * @param {object} [options] Configuration object.\n   * @param {string} [options.userProject] User project to be billed for this\n   *     request.\n   * @param {GetServiceAccountCallback} [callback] Callback function.\n   * @returns {Promise<GetServiceAccountResponse>}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   *\n   * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {\n   *   if (!err) {\n   *     const serviceAccountEmail = serviceAccount.emailAddress;\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * storage.getServiceAccount().then(function(data) {\n   *   const serviceAccountEmail = data[0].emailAddress;\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  getServiceAccount(optionsOrCallback, cb) {\n    const {\n      options,\n      callback\n    } = util_1.normalize(optionsOrCallback, cb);\n    this.request({\n      uri: `/projects/${this.projectId}/serviceAccount`,\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      const camelCaseResponse = {};\n\n      for (const prop in resp) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (resp.hasOwnProperty(prop)) {\n          const camelCaseProp = prop.replace(/_(\\w)/g, (_, match) => match.toUpperCase());\n          camelCaseResponse[camelCaseProp] = resp[prop];\n        }\n      }\n\n      callback(null, camelCaseResponse, resp);\n    });\n  }\n  /**\n   * Get a reference to an HmacKey object.\n   * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to\n   * retrieve and populate the metadata.\n   *\n   * To get a reference to an HMAC key that's not created for a service\n   * account in the same project used to instantiate the Storage client,\n   * supply the project's ID as `projectId` in the `options` argument.\n   *\n   * @param {string} accessId The HMAC key's access ID.\n   * @param {HmacKeyOptions} options HmacKey constructor owptions.\n   * @returns {HmacKey}\n   * @see HmacKey\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const hmacKey = storage.hmacKey('ACCESS_ID');\n   */\n\n\n  hmacKey(accessId, options) {\n    if (!accessId) {\n      throw new Error('An access ID is needed to create an HmacKey object.');\n    }\n\n    return new hmacKey_1.HmacKey(this, accessId, options);\n  }\n\n}\n\nexports.Storage = Storage;\n/**\n * {@link Bucket} class.\n *\n * @name Storage.Bucket\n * @see Bucket\n * @type {Constructor}\n */\n\nStorage.Bucket = bucket_1.Bucket;\n/**\n * {@link Channel} class.\n *\n * @name Storage.Channel\n * @see Channel\n * @type {Constructor}\n */\n\nStorage.Channel = channel_1.Channel;\n/**\n * {@link File} class.\n *\n * @name Storage.File\n * @see File\n * @type {Constructor}\n */\n\nStorage.File = file_1.File;\n/**\n * {@link HmacKey} class.\n *\n * @name Storage.HmacKey\n * @see HmacKey\n * @type {Constructor}\n */\n\nStorage.HmacKey = hmacKey_1.HmacKey;\nStorage.acl = {\n  OWNER_ROLE: 'OWNER',\n  READER_ROLE: 'READER',\n  WRITER_ROLE: 'WRITER'\n};\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\n\npaginator_1.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Storage, {\n  exclude: ['bucket', 'channel', 'hmacKey']\n});","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/@google-cloud/storage/build/src/storage.js"],"names":["Object","defineProperty","exports","value","Storage","PROTOCOL_REGEX","IdempotencyStrategy","common_1","require","paginator_1","promisify_1","arrify","bucket_1","channel_1","file_1","util_1","hmacKey_1","AUTO_RETRY_DEFAULT","MAX_RETRY_DEFAULT","RETRY_DELAY_MULTIPLIER_DEFAULT","TOTAL_TIMEOUT_DEFAULT","MAX_RETRY_DELAY_DEFAULT","IDEMPOTENCY_STRATEGY_DEFAULT","RetryConditional","RETRYABLE_ERR_FN_DEFAULT","err","_a","indexOf","code","errors","e","reason","toLowerCase","includes","Service","constructor","options","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","apiEndpoint","customEndpoint","EMULATOR_HOST","process","env","STORAGE_EMULATOR_HOST","sanitizeEndpoint","assign","baseUrl","autoRetryValue","autoRetry","undefined","retryOptions","ApiError","maxRetryValue","maxRetries","config","retryDelayMultiplier","totalTimeout","maxRetryDelay","retryableErrorFn","idempotencyStrategy","projectIdRequired","scopes","packageJson","acl","getBucketsStream","paginator","streamify","getHmacKeysStream","url","test","replace","bucket","name","Error","Bucket","channel","id","resourceId","Channel","createBucket","metadataOrCallback","callback","metadata","body","storageClasses","archive","coldline","dra","multiRegional","nearline","regional","standard","keys","forEach","storageClass","requesterPays","billing","query","project","projectId","userProject","request","method","uri","qs","json","resp","createHmacKey","serviceAccountEmail","optionsOrCb","cb","normalize","hmacKey","accessId","secret","getBuckets","optionsOrCallback","buckets","items","map","bucketInstance","nextQuery","nextPageToken","pageToken","getHmacKeys","hmacKeys","hmacKeyInstance","getServiceAccount","camelCaseResponse","prop","hasOwnProperty","camelCaseProp","_","match","toUpperCase","HmacKey","File","OWNER_ROLE","READER_ROLE","WRITER_ROLE","extend","promisifyAll","exclude"],"mappings":"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;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,YAAY,CAACP,IAAD,EAAOQ,kBAAP,EAA2BC,QAA3B,EAAqC;AAC7C,QAAI,CAACT,IAAL,EAAW;AACP,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACH;;AACD,QAAIS,QAAJ;;AACA,QAAI,CAACD,QAAL,EAAe;AACXA,MAAAA,QAAQ,GAAGD,kBAAX;AACAE,MAAAA,QAAQ,GAAG,EAAX;AACH,KAHD,MAIK;AACDA,MAAAA,QAAQ,GAAGF,kBAAX;AACH;;AACD,UAAMG,IAAI,GAAG/F,MAAM,CAACyD,MAAP,CAAc,EAAd,EAAkBqC,QAAlB,EAA4B;AAAEV,MAAAA;AAAF,KAA5B,CAAb;AACA,UAAMY,cAAc,GAAG;AACnBC,MAAAA,OAAO,EAAE,SADU;AAEnBC,MAAAA,QAAQ,EAAE,UAFS;AAGnBC,MAAAA,GAAG,EAAE,8BAHc;AAInBC,MAAAA,aAAa,EAAE,gBAJI;AAKnBC,MAAAA,QAAQ,EAAE,UALS;AAMnBC,MAAAA,QAAQ,EAAE,UANS;AAOnBC,MAAAA,QAAQ,EAAE;AAPS,KAAvB;AASAvG,IAAAA,MAAM,CAACwG,IAAP,CAAYR,cAAZ,EA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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Storage = exports.PROTOCOL_REGEX = exports.IdempotencyStrategy = void 0;\nconst common_1 = require(\"@google-cloud/common\");\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\nconst bucket_1 = require(\"./bucket\");\nconst channel_1 = require(\"./channel\");\nconst file_1 = require(\"./file\");\nconst util_1 = require(\"./util\");\nconst hmacKey_1 = require(\"./hmacKey\");\nvar IdempotencyStrategy;\n(function (IdempotencyStrategy) {\n    IdempotencyStrategy[IdempotencyStrategy[\"RetryAlways\"] = 0] = \"RetryAlways\";\n    IdempotencyStrategy[IdempotencyStrategy[\"RetryConditional\"] = 1] = \"RetryConditional\";\n    IdempotencyStrategy[IdempotencyStrategy[\"RetryNever\"] = 2] = \"RetryNever\";\n})(IdempotencyStrategy = exports.IdempotencyStrategy || (exports.IdempotencyStrategy = {}));\nexports.PROTOCOL_REGEX = /^(\\w*):\\/\\//;\n/**\n * Default behavior: Automatically retry retriable server errors.\n *\n * @const {boolean}\n * @private\n */\nconst AUTO_RETRY_DEFAULT = true;\n/**\n * Default behavior: Only attempt to retry retriable errors 3 times.\n *\n * @const {number}\n * @private\n */\nconst MAX_RETRY_DEFAULT = 3;\n/**\n * Default behavior: Wait twice as long as previous retry before retrying.\n *\n * @const {number}\n * @private\n */\nconst RETRY_DELAY_MULTIPLIER_DEFAULT = 2;\n/**\n * Default behavior: If the operation doesn't succeed after 600 seconds,\n *  stop retrying.\n *\n * @const {number}\n * @private\n */\nconst TOTAL_TIMEOUT_DEFAULT = 600;\n/**\n * Default behavior: Wait no more than 64 seconds between retries.\n *\n * @const {number}\n * @private\n */\nconst MAX_RETRY_DELAY_DEFAULT = 64;\n/**\n * Default behavior: Retry conditionally idempotent operations if correct preconditions are set.\n *\n * @const {enum}\n * @private\n */\nconst IDEMPOTENCY_STRATEGY_DEFAULT = IdempotencyStrategy.RetryConditional;\n/**\n * Returns true if the API request should be retried, given the error that was\n * given the first time the request was attempted.\n * @const\n * @private\n * @param {error} err - The API error to check if it is appropriate to retry.\n * @return {boolean} True if the API request should be retried, false otherwise.\n */\nconst RETRYABLE_ERR_FN_DEFAULT = function (err) {\n    var _a;\n    if (err) {\n        if ([408, 429, 500, 502, 503, 504].indexOf(err.code) !== -1) {\n            return true;\n        }\n        if (err.errors) {\n            for (const e of err.errors) {\n                const reason = (_a = e.reason) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n                if ((reason && reason.includes('eai_again')) || //DNS lookup error\n                    reason === 'connection reset by peer' ||\n                    reason === 'unexpected connection closure') {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n};\n/*! Developer Documentation\n *\n * Invoke this method to create a new Storage object bound with pre-determined\n * configuration options. For each object that can be created (e.g., a bucket),\n * there is an equivalent static and instance method. While they are classes,\n * they can be instantiated without use of the `new` keyword.\n */\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * This object provides constants to refer to the three permission levels that\n * can be granted to an entity:\n *\n *   - `gcs.acl.OWNER_ROLE` - (\"OWNER\")\n *   - `gcs.acl.READER_ROLE` - (\"READER\")\n *   - `gcs.acl.WRITER_ROLE` - (\"WRITER\")\n *\n * @see [About Access Control Lists]{@link https://cloud.google.com/storage/docs/access-control/lists}\n *\n * @name Storage#acl\n * @type {object}\n * @property {string} OWNER_ROLE\n * @property {string} READER_ROLE\n * @property {string} WRITER_ROLE\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const albums = storage.bucket('albums');\n *\n * //-\n * // Make all of the files currently in a bucket publicly readable.\n * //-\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * albums.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // Make any new objects added to a bucket publicly readable.\n * //-\n * albums.acl.default.add(options, function(err, aclObject) {});\n *\n * //-\n * // Grant a user ownership permissions to a bucket.\n * //-\n * albums.acl.add({\n *   entity: 'user-useremail@example.com',\n *   role: storage.acl.OWNER_ROLE\n * }, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * albums.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n */\n/**\n * Get {@link Bucket} objects for all of the buckets in your project as\n * a readable object stream.\n *\n * @method Storage#getBucketsStream\n * @param {GetBucketsRequest} [query] Query object for listing buckets.\n * @returns {ReadableStream} A readable stream that emits {@link Bucket}\n *     instances.\n *\n * @example\n * storage.getBucketsStream()\n *   .on('error', console.error)\n *   .on('data', function(bucket) {\n *     // bucket is a Bucket object.\n *   })\n *   .on('end', function() {\n *     // All buckets retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * storage.getBucketsStream()\n *   .on('data', function(bucket) {\n *     this.end();\n *   });\n */\n/**\n * Get {@link HmacKey} objects for all of the HMAC keys in the project in a\n * readable object stream.\n *\n * @method Storage#getHmacKeysStream\n * @param {GetHmacKeysOptions} [options] Configuration options.\n * @returns {ReadableStream} A readable stream that emits {@link HmacKey}\n *     instances.\n *\n * @example\n * storage.getHmacKeysStream()\n *   .on('error', console.error)\n *   .on('data', function(hmacKey) {\n *     // hmacKey is an HmacKey object.\n *   })\n *   .on('end', function() {\n *     // All HmacKey retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * storage.getHmacKeysStream()\n *   .on('data', function(bucket) {\n *     this.end();\n *   });\n */\n/**\n * <h4>ACLs</h4>\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share files with other users\n * and allow other users to access your buckets and files.\n *\n * To learn more about ACLs, read this overview on\n * [Access Control](https://cloud.google.com/storage/docs/access-control).\n *\n * @see [Cloud Storage overview]{@link https://cloud.google.com/storage/docs/overview}\n * @see [Access Control]{@link https://cloud.google.com/storage/docs/access-control}\n *\n * @class\n */\nclass Storage extends common_1.Service {\n    /**\n     * @typedef {object} StorageOptions\n     * @property {string} [projectId] The project ID from the Google Developer's\n     *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n     *     variable `GCLOUD_PROJECT` for your project ID. If your app is running\n     * in an environment which supports {@link\n     * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n     * Application Default Credentials}, your project ID will be detected\n     * automatically.\n     * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n     *     downloaded from the Google Developers Console. If you provide a path to\n     * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n     *     .p12 require you to specify the `email` option as well.\n     * @property {string} [email] Account email address. Required when using a .pem\n     *     or .p12 keyFilename.\n     * @property {object} [credentials] Credentials object.\n     * @property {string} [credentials.client_email]\n     * @property {string} [credentials.private_key]\n     * @property {object} [retryOptions] Options for customizing retries. Retriable server errors\n     *     will be retried with exponential delay between them dictated by the formula\n     *     max(maxRetryDelay, retryDelayMultiplier*retryNumber) until maxRetries or totalTimeout\n     *     has been reached. Retries will only happen if autoRetry is set to true.\n     * @property {boolean} [retryOptions.autoRetry=true] Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * @property {number} [retryOptions.retryDelayMultiplier = 2] the multiplier by which to\n     *   increase the delay time between the completion of failed requests, and the\n     *   initiation of the subsequent retrying request.\n     * @property {number} [retryOptions.totalTimeout = 600] The total time, starting from\n     *  when the initial request is sent, after which an error will\n     *   be returned, regardless of the retrying attempts made meanwhile.\n     * @property {number} [retryOptions.maxRetryDelay = 64] The maximum delay time between requests.\n     *   When this value is reached, ``retryDelayMultiplier`` will no longer be used to\n     *   increase delay time.\n     * @property {number} [retryOptions.maxRetries=3] Maximum number of automatic retries\n     *     attempted before returning the error.\n     * @property {function} [retryOptions.retryableErrorFn] Function that returns true if a given\n     *     error should be retried and false otherwise.\n     * @property {enum} [retryOptions.idempotencyStrategy=IdempotencyStrategy.RetryConditional] Enumeration\n     *     controls how conditionally idempotent operations are retried. Possible values are: RetryAlways -\n     *     will respect other retry settings and attempt to retry conditionally idempotent operations. RetryConditional -\n     *     will retry conditionally idempotent operations if the correct preconditions are set. RetryNever - never\n     *     retry a conditionally idempotent operation.\n     * @property {string} [userAgent] The value to be prepended to the User-Agent\n     *     header in API requests.\n     * @property {object} [authClient] GoogleAuth client to reuse instead of creating a new one.\n     * @property {number} [timeout] The amount of time in milliseconds to wait per http request before timing out.\n     * @property {object[]} [interceptors_] Array of custom request interceptors to be returned in the order they were assigned.\n     * @property {string} [apiEndpoint = storage.google.com] The API endpoint of the service used to make requests.\n     */\n    /**\n     * Constructs the Storage client.\n     *\n     * @example <caption>Create a client that uses Application Default Credentials\n     * (ADC)</caption>\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * @example <caption>Create a client with explicit credentials</caption>\n     * const storage = new Storage({\n     *   projectId: 'your-project-id',\n     *   keyFilename: '/path/to/keyfile.json'\n     * });\n     *\n     * @param {StorageOptions} [options] Configuration options.\n     */\n    constructor(options = {}) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n        let apiEndpoint = 'https://storage.googleapis.com';\n        let customEndpoint = false;\n        // Note: EMULATOR_HOST is an experimental configuration variable. Use apiEndpoint instead.\n        const EMULATOR_HOST = process.env.STORAGE_EMULATOR_HOST;\n        if (typeof EMULATOR_HOST === 'string') {\n            apiEndpoint = Storage.sanitizeEndpoint(EMULATOR_HOST);\n            customEndpoint = true;\n        }\n        if (options.apiEndpoint) {\n            apiEndpoint = Storage.sanitizeEndpoint(options.apiEndpoint);\n            customEndpoint = true;\n        }\n        options = Object.assign({}, options, { apiEndpoint });\n        // Note: EMULATOR_HOST is an experimental configuration variable. Use apiEndpoint instead.\n        const baseUrl = EMULATOR_HOST || `${options.apiEndpoint}/storage/v1`;\n        let autoRetryValue = AUTO_RETRY_DEFAULT;\n        if (options.autoRetry !== undefined &&\n            ((_a = options.retryOptions) === null || _a === void 0 ? void 0 : _a.autoRetry) !== undefined) {\n            throw new common_1.ApiError('autoRetry is deprecated. Use retryOptions.autoRetry instead.');\n        }\n        else if (options.autoRetry !== undefined) {\n            autoRetryValue = options.autoRetry;\n        }\n        else if (((_b = options.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry) !== undefined) {\n            autoRetryValue = options.retryOptions.autoRetry;\n        }\n        let maxRetryValue = MAX_RETRY_DEFAULT;\n        if (options.maxRetries && ((_c = options.retryOptions) === null || _c === void 0 ? void 0 : _c.maxRetries)) {\n            throw new common_1.ApiError('maxRetries is deprecated. Use retryOptions.maxRetries instead.');\n        }\n        else if (options.maxRetries) {\n            maxRetryValue = options.maxRetries;\n        }\n        else if ((_d = options.retryOptions) === null || _d === void 0 ? void 0 : _d.maxRetries) {\n            maxRetryValue = options.retryOptions.maxRetries;\n        }\n        const config = {\n            apiEndpoint: options.apiEndpoint,\n            retryOptions: {\n                autoRetry: autoRetryValue,\n                maxRetries: maxRetryValue,\n                retryDelayMultiplier: ((_e = options.retryOptions) === null || _e === void 0 ? void 0 : _e.retryDelayMultiplier) ? (_f = options.retryOptions) === null || _f === void 0 ? void 0 : _f.retryDelayMultiplier : RETRY_DELAY_MULTIPLIER_DEFAULT,\n                totalTimeout: ((_g = options.retryOptions) === null || _g === void 0 ? void 0 : _g.totalTimeout) ? (_h = options.retryOptions) === null || _h === void 0 ? void 0 : _h.totalTimeout : TOTAL_TIMEOUT_DEFAULT,\n                maxRetryDelay: ((_j = options.retryOptions) === null || _j === void 0 ? void 0 : _j.maxRetryDelay) ? (_k = options.retryOptions) === null || _k === void 0 ? void 0 : _k.maxRetryDelay : MAX_RETRY_DELAY_DEFAULT,\n                retryableErrorFn: ((_l = options.retryOptions) === null || _l === void 0 ? void 0 : _l.retryableErrorFn) ? (_m = options.retryOptions) === null || _m === void 0 ? void 0 : _m.retryableErrorFn : RETRYABLE_ERR_FN_DEFAULT,\n                idempotencyStrategy: ((_o = options.retryOptions) === null || _o === void 0 ? void 0 : _o.idempotencyStrategy) !== undefined\n                    ? (_p = options.retryOptions) === null || _p === void 0 ? void 0 : _p.idempotencyStrategy : IDEMPOTENCY_STRATEGY_DEFAULT,\n            },\n            baseUrl,\n            customEndpoint,\n            projectIdRequired: false,\n            scopes: [\n                'https://www.googleapis.com/auth/iam',\n                'https://www.googleapis.com/auth/cloud-platform',\n                'https://www.googleapis.com/auth/devstorage.full_control',\n            ],\n            packageJson: require('../../package.json'),\n        };\n        super(config, options);\n        /**\n         * Reference to {@link Storage.acl}.\n         *\n         * @name Storage#acl\n         * @see Storage.acl\n         */\n        this.acl = Storage.acl;\n        this.retryOptions = config.retryOptions;\n        this.getBucketsStream = paginator_1.paginator.streamify('getBuckets');\n        this.getHmacKeysStream = paginator_1.paginator.streamify('getHmacKeys');\n    }\n    static sanitizeEndpoint(url) {\n        if (!exports.PROTOCOL_REGEX.test(url)) {\n            url = `https://${url}`;\n        }\n        return url.replace(/\\/+$/, ''); // Remove trailing slashes\n    }\n    /**\n     * Get a reference to a Cloud Storage bucket.\n     *\n     * @param {string} name Name of the bucket.\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.kmsKeyName] A Cloud KMS key that will be used to\n     *     encrypt objects inserted into this bucket, if no encryption method is\n     *     specified.\n     * @param {string} [options.userProject] User project to be billed for all\n     *     requests made from this Bucket object.\n     * @returns {Bucket}\n     * @see Bucket\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const albums = storage.bucket('albums');\n     * const photos = storage.bucket('photos');\n     */\n    bucket(name, options) {\n        if (!name) {\n            throw new Error('A bucket name is needed to use Cloud Storage.');\n        }\n        return new bucket_1.Bucket(this, name, options);\n    }\n    /**\n     * Reference a channel to receive notifications about changes to your bucket.\n     *\n     * @param {string} id The ID of the channel.\n     * @param {string} resourceId The resource ID of the channel.\n     * @returns {Channel}\n     * @see Channel\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const channel = storage.channel('id', 'resource-id');\n     */\n    channel(id, resourceId) {\n        return new channel_1.Channel(this, id, resourceId);\n    }\n    /**\n     * @typedef {array} CreateBucketResponse\n     * @property {Bucket} 0 The new {@link Bucket}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateBucketCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Bucket} bucket The new {@link Bucket}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Metadata to set for the bucket.\n     *\n     * @typedef {object} CreateBucketRequest\n     * @property {boolean} [archive=false] Specify the storage class as Archive.\n     * @property {boolean} [coldline=false] Specify the storage class as Coldline.\n     * @property {Cors[]} [cors=[]] Specify the CORS configuration to use.\n     * @property {boolean} [dra=false] Specify the storage class as Durable Reduced\n     *     Availability.\n     * @property {boolean} [multiRegional=false] Specify the storage class as\n     *     Multi-Regional.\n     * @property {boolean} [nearline=false] Specify the storage class as Nearline.\n     * @property {boolean} [regional=false] Specify the storage class as Regional.\n     * @property {boolean} [requesterPays=false] **Early Access Testers Only**\n     *     Force the use of the User Project metadata field to assign operational\n     *     costs when an operation is made on a Bucket and its objects.\n     * @property {boolean} [standard=true] Specify the storage class as Standard.\n     * @property {string} [storageClass] The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`).\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\n     *     the future.\n     * @property {Versioning} [versioning=undefined] Specify the versioning status.\n     * @property {string} [userProject] The ID of the project which will be billed\n     *     for the request.\n     */\n    /**\n     * Create a bucket.\n     *\n     * Cloud Storage uses a flat namespace, so you can't create a bucket with\n     * a name that is already in use. For more information, see\n     * [Bucket Naming\n     * Guidelines](https://cloud.google.com/storage/docs/bucketnaming.html#requirements).\n     *\n     * @see [Buckets: insert API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert}\n     * @see [Storage Classes]{@link https://cloud.google.com/storage/docs/storage-classes}\n     *\n     * @param {string} name Name of the bucket to create.\n     * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n     * @param {CreateBucketCallback} [callback] Callback function.\n     * @returns {Promise<CreateBucketResponse>}\n     * @throws {Error} If a name is not provided.\n     * @see Bucket#create\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const callback = function(err, bucket, apiResponse) {\n     *   // `bucket` is a Bucket object.\n     * };\n     *\n     * storage.createBucket('new-bucket', callback);\n     *\n     * //-\n     * // Create a bucket in a specific location and region. <em>See the <a\n     * // href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets/insert\">\n     * // Official JSON API docs</a> for complete details on the `location`\n     * option.\n     * // </em>\n     * //-\n     * const metadata = {\n     *   location: 'US-CENTRAL1',\n     *   regional: true\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // Create a bucket with a retention policy of 6 months.\n     * //-\n     * const metadata = {\n     *   retentionPolicy: {\n     *     retentionPeriod: 15780000 // 6 months in seconds.\n     *   }\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // Enable versioning on a new bucket.\n     * //-\n     * const metadata = {\n     *   versioning: {\n     *     enabled: true\n     *   }\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.createBucket('new-bucket').then(function(data) {\n     *   const bucket = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/buckets.js</caption>\n     * region_tag:storage_create_bucket\n     * Another example:\n     */\n    createBucket(name, metadataOrCallback, callback) {\n        if (!name) {\n            throw new Error('A name is required to create a bucket.');\n        }\n        let metadata;\n        if (!callback) {\n            callback = metadataOrCallback;\n            metadata = {};\n        }\n        else {\n            metadata = metadataOrCallback;\n        }\n        const body = Object.assign({}, metadata, { name });\n        const storageClasses = {\n            archive: 'ARCHIVE',\n            coldline: 'COLDLINE',\n            dra: 'DURABLE_REDUCED_AVAILABILITY',\n            multiRegional: 'MULTI_REGIONAL',\n            nearline: 'NEARLINE',\n            regional: 'REGIONAL',\n            standard: 'STANDARD',\n        };\n        Object.keys(storageClasses).forEach(storageClass => {\n            if (body[storageClass]) {\n                if (metadata.storageClass && metadata.storageClass !== storageClass) {\n                    throw new Error(`Both \\`${storageClass}\\` and \\`storageClass\\` were provided.`);\n                }\n                body.storageClass = storageClasses[storageClass];\n                delete body[storageClass];\n            }\n        });\n        if (body.requesterPays) {\n            body.billing = {\n                requesterPays: body.requesterPays,\n            };\n            delete body.requesterPays;\n        }\n        const query = {\n            project: this.projectId,\n        };\n        if (body.userProject) {\n            query.userProject = body.userProject;\n            delete body.userProject;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/b',\n            qs: query,\n            json: body,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const bucket = this.bucket(name);\n            bucket.metadata = resp;\n            callback(null, bucket, resp);\n        });\n    }\n    /**\n     * @typedef {object} CreateHmacKeyOptions\n     * @property {string} [projectId] The project ID of the project that owns\n     *     the service account of the requested HMAC key. If not provided,\n     *     the project ID used to instantiate the Storage client will be used.\n     * @property {string} [userProject] This parameter is currently ignored.\n     */\n    /**\n     * @typedef {object} HmacKeyMetadata\n     * @property {string} accessId The access id identifies which HMAC key was\n     *     used to sign a request when authenticating with HMAC.\n     * @property {string} etag Used to perform a read-modify-write of the key.\n     * @property {string} id The resource name of the HMAC key.\n     * @property {string} projectId The project ID.\n     * @property {string} serviceAccountEmail The service account's email this\n     *     HMAC key is created for.\n     * @property {string} state The state of this HMAC key. One of \"ACTIVE\",\n     *     \"INACTIVE\" or \"DELETED\".\n     * @property {string} timeCreated The creation time of the HMAC key in\n     *     RFC 3339 format.\n     * @property {string} [updated] The time this HMAC key was last updated in\n     *     RFC 3339 format.\n     */\n    /**\n     * @typedef {array} CreateHmacKeyResponse\n     * @property {HmacKey} 0 The HmacKey instance created from API response.\n     * @property {string} 1 The HMAC key's secret used to access the XML API.\n     * @property {object} 3 The raw API response.\n     */\n    /**\n     * @callback CreateHmacKeyCallback Callback function.\n     * @param {?Error} err Request error, if any.\n     * @param {HmacKey} hmacKey The HmacKey instance created from API response.\n     * @param {string} secret The HMAC key's secret used to access the XML API.\n     * @param {object} apiResponse The raw API response.\n     */\n    /**\n     * Create an HMAC key associated with an service account to authenticate\n     * requests to the Cloud Storage XML API.\n     *\n     * @see [HMAC keys documentation]{@link https://cloud.google.com/storage/docs/authentication/hmackeys}\n     *\n     * @param {string} serviceAccountEmail The service account's email address\n     *     with which the HMAC key is created for.\n     * @param {CreateHmacKeyCallback} [callback] Callback function.\n     * @return {Promise<CreateHmacKeyResponse>}\n     *\n     * @example\n     * const {Storage} = require('google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * // Replace with your service account's email address\n     * const serviceAccountEmail =\n     *   'my-service-account@appspot.gserviceaccount.com';\n     *\n     * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {\n     *   if (!err) {\n     *     // Securely store the secret for use with the XML API.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.createHmacKey(serviceAccountEmail)\n     *   .then((response) => {\n     *     const hmacKey = response[0];\n     *     const secret = response[1];\n     *     // Securely store the secret for use with the XML API.\n     *   });\n     */\n    createHmacKey(serviceAccountEmail, optionsOrCb, cb) {\n        if (typeof serviceAccountEmail !== 'string') {\n            throw new Error('The first argument must be a service account email to create an HMAC key.');\n        }\n        const { options, callback } = util_1.normalize(optionsOrCb, cb);\n        const query = Object.assign({}, options, { serviceAccountEmail });\n        const projectId = query.projectId || this.projectId;\n        delete query.projectId;\n        this.request({\n            method: 'POST',\n            uri: `/projects/${projectId}/hmacKeys`,\n            qs: query,\n            maxRetries: 0,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const metadata = resp.metadata;\n            const hmacKey = this.hmacKey(metadata.accessId, {\n                projectId: metadata.projectId,\n            });\n            hmacKey.metadata = resp.metadata;\n            callback(null, hmacKey, resp.secret, resp);\n        });\n    }\n    /**\n     * Query object for listing buckets.\n     *\n     * @typedef {object} GetBucketsRequest\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [userProject] The ID of the project which will be billed\n     *     for the request.\n     */\n    /**\n     * @typedef {array} GetBucketsResponse\n     * @property {Bucket[]} 0 Array of {@link Bucket} instances.\n     * @property {objcet} 1 nextQuery A query object to receive more results.\n     * @property {object} 2 The full API response.\n     */\n    /**\n     * @callback GetBucketsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Bucket[]} buckets Array of {@link Bucket} instances.\n     * @param {object} nextQuery A query object to receive more results.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get Bucket objects for all of the buckets in your project.\n     *\n     * @see [Buckets: list API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list}\n     *\n     * @param {GetBucketsRequest} [query] Query object for listing buckets.\n     * @param {GetBucketsCallback} [callback] Callback function.\n     * @returns {Promise<GetBucketsResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * storage.getBuckets(function(err, buckets) {\n     *   if (!err) {\n     *     // buckets is an array of Bucket objects.\n     *   }\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * const callback = function(err, buckets, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     storage.getBuckets(nextQuery, callback);\n     *   }\n     *\n     *   // The `metadata` property is populated for you with the metadata at the\n     *   // time of fetching.\n     *   buckets[0].metadata;\n     *\n     *   // However, in cases where you are concerned the metadata could have\n     *   // changed, use the `getMetadata` method.\n     *   buckets[0].getMetadata(function(err, metadata, apiResponse) {});\n     * };\n     *\n     * storage.getBuckets({\n     *   autoPaginate: false\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.getBuckets().then(function(data) {\n     *   const buckets = data[0];\n     * });\n     *\n     * @example <caption>include:samples/buckets.js</caption>\n     * region_tag:storage_list_buckets\n     * Another example:\n     */\n    getBuckets(optionsOrCallback, cb) {\n        const { options, callback } = util_1.normalize(optionsOrCallback, cb);\n        options.project = options.project || this.projectId;\n        this.request({\n            uri: '/b',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const buckets = arrify(resp.items).map((bucket) => {\n                const bucketInstance = this.bucket(bucket.id);\n                bucketInstance.metadata = bucket;\n                return bucketInstance;\n            });\n            const nextQuery = resp.nextPageToken\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\n                : null;\n            callback(null, buckets, nextQuery, resp);\n        });\n    }\n    getHmacKeys(optionsOrCb, cb) {\n        const { options, callback } = util_1.normalize(optionsOrCb, cb);\n        const query = Object.assign({}, options);\n        const projectId = query.projectId || this.projectId;\n        delete query.projectId;\n        this.request({\n            uri: `/projects/${projectId}/hmacKeys`,\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const hmacKeys = arrify(resp.items).map((hmacKey) => {\n                const hmacKeyInstance = this.hmacKey(hmacKey.accessId, {\n                    projectId: hmacKey.projectId,\n                });\n                hmacKeyInstance.metadata = hmacKey;\n                return hmacKeyInstance;\n            });\n            const nextQuery = resp.nextPageToken\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\n                : null;\n            callback(null, hmacKeys, nextQuery, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetServiceAccountResponse\n     * @property {object} 0 The service account resource.\n     * @property {object} 1 The full\n     * [API\n     * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\n     */\n    /**\n     * @callback GetServiceAccountCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} serviceAccount The serviceAccount resource.\n     * @param {string} serviceAccount.emailAddress The service account email\n     *     address.\n     * @param {object} apiResponse The full\n     * [API\n     * response](https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource).\n     */\n    /**\n     * Get the email address of this project's Google Cloud Storage service\n     * account.\n     *\n     * @see [Projects.serviceAccount: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get}\n     * @see [Projects.serviceAccount Resource]{@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource}\n     *\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.userProject] User project to be billed for this\n     *     request.\n     * @param {GetServiceAccountCallback} [callback] Callback function.\n     * @returns {Promise<GetServiceAccountResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {\n     *   if (!err) {\n     *     const serviceAccountEmail = serviceAccount.emailAddress;\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.getServiceAccount().then(function(data) {\n     *   const serviceAccountEmail = data[0].emailAddress;\n     *   const apiResponse = data[1];\n     * });\n     */\n    getServiceAccount(optionsOrCallback, cb) {\n        const { options, callback } = util_1.normalize(optionsOrCallback, cb);\n        this.request({\n            uri: `/projects/${this.projectId}/serviceAccount`,\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const camelCaseResponse = {};\n            for (const prop in resp) {\n                // eslint-disable-next-line no-prototype-builtins\n                if (resp.hasOwnProperty(prop)) {\n                    const camelCaseProp = prop.replace(/_(\\w)/g, (_, match) => match.toUpperCase());\n                    camelCaseResponse[camelCaseProp] = resp[prop];\n                }\n            }\n            callback(null, camelCaseResponse, resp);\n        });\n    }\n    /**\n     * Get a reference to an HmacKey object.\n     * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to\n     * retrieve and populate the metadata.\n     *\n     * To get a reference to an HMAC key that's not created for a service\n     * account in the same project used to instantiate the Storage client,\n     * supply the project's ID as `projectId` in the `options` argument.\n     *\n     * @param {string} accessId The HMAC key's access ID.\n     * @param {HmacKeyOptions} options HmacKey constructor owptions.\n     * @returns {HmacKey}\n     * @see HmacKey\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const hmacKey = storage.hmacKey('ACCESS_ID');\n     */\n    hmacKey(accessId, options) {\n        if (!accessId) {\n            throw new Error('An access ID is needed to create an HmacKey object.');\n        }\n        return new hmacKey_1.HmacKey(this, accessId, options);\n    }\n}\nexports.Storage = Storage;\n/**\n * {@link Bucket} class.\n *\n * @name Storage.Bucket\n * @see Bucket\n * @type {Constructor}\n */\nStorage.Bucket = bucket_1.Bucket;\n/**\n * {@link Channel} class.\n *\n * @name Storage.Channel\n * @see Channel\n * @type {Constructor}\n */\nStorage.Channel = channel_1.Channel;\n/**\n * {@link File} class.\n *\n * @name Storage.File\n * @see File\n * @type {Constructor}\n */\nStorage.File = file_1.File;\n/**\n * {@link HmacKey} class.\n *\n * @name Storage.HmacKey\n * @see HmacKey\n * @type {Constructor}\n */\nStorage.HmacKey = hmacKey_1.HmacKey;\nStorage.acl = {\n    OWNER_ROLE: 'OWNER',\n    READER_ROLE: 'READER',\n    WRITER_ROLE: 'WRITER',\n};\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Storage, {\n    exclude: ['bucket', 'channel', 'hmacKey'],\n});\n//# sourceMappingURL=storage.js.map"]},"metadata":{},"sourceType":"script"}