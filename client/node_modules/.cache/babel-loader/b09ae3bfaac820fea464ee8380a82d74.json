{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  var crypto = require('crypto');\n\n  var assert = require('assert');\n\n  var cryptoRandomBytes = crypto.pseudoRandomBytes || crypto.randomBytes;\n  var numeric = '0123456789';\n  var alphaLower = 'abcdefghijklmnopqrstuvwxyz';\n  var alphaUpper = alphaLower.toUpperCase(); // NOTE: This is explicitly in sortable order:\n\n  var alphaNumeric = numeric + alphaUpper + alphaLower;\n  var defaults = {\n    \"chars\": 'default',\n    \"source\": 'default'\n  };\n\n  function validateTokenChars(tokenChars) {\n    assert(tokenChars);\n    assert(typeof tokenChars == 'string');\n    assert(tokenChars.length > 0);\n    assert(tokenChars.length < 256);\n  }\n\n  function bufferAlloc(size) {\n    if (Buffer.alloc) {\n      return Buffer.alloc(size);\n    }\n\n    return new Buffer(size);\n  }\n\n  function buildGenerator(options) {\n    assert(!options || typeof options == 'object');\n    options = options || {};\n    options.chars = options.chars || defaults.chars;\n    options.source = options.source || defaults.source; // Allowed characters\n\n    switch (options.chars) {\n      case 'default':\n        options.chars = alphaNumeric;\n        break;\n\n      case 'a-z':\n      case 'alpha':\n        options.chars = alphaLower;\n        break;\n\n      case 'A-Z':\n      case 'ALPHA':\n        options.chars = alphaUpper;\n        break;\n\n      case '0-9':\n      case 'numeric':\n        options.chars = numeric;\n        break;\n\n      case 'base32':\n        options.chars = alphaUpper + \"234567\";\n        break;\n\n      default: // use the characters as is\n\n    }\n\n    validateTokenChars(options.chars); // Source of randomness:\n\n    switch (options.source) {\n      case 'default':\n        options.source = cryptoRandomBytes;\n        break;\n\n      case 'crypto':\n        options.source = crypto.randomBytes;\n        break;\n\n      case 'math':\n        options.source = function (size) {\n          var buf = bufferAlloc(size);\n\n          for (var i = 0; i < size; i++) {\n            buf.writeUInt8(Math.floor(256 * Math.random()), i);\n          }\n\n          return buf;\n        };\n\n        break;\n\n      default:\n        assert(typeof options.source == 'function');\n    }\n\n    return {\n      \"generate\": function generate(size, chars) {\n        if (chars) {\n          validateTokenChars(chars);\n        } else {\n          chars = options.chars;\n        }\n\n        var max = Math.floor(256 / chars.length) * chars.length;\n        var ret = \"\";\n\n        while (ret.length < size) {\n          var buf = options.source(size - ret.length);\n\n          for (var i = 0; i < buf.length; i++) {\n            var x = buf.readUInt8(i);\n\n            if (x < max) {\n              ret += chars[x % chars.length];\n            }\n          }\n        }\n\n        return ret;\n      }\n    };\n  }\n\n  function base62(n) {\n    assert(n >= 0);\n    n = Math.floor(n);\n    var ret = [];\n\n    do {\n      var index = n % 62;\n      ret.push(alphaNumeric[index]);\n      n = Math.floor(n / 62);\n    } while (n > 0);\n\n    return ret.reverse().join(\"\");\n  } // Default epoch of \"2000-01-01T00:00:00+00:00\"\n\n\n  var defaultEpoch = 946684800000;\n  var defaultPrefixLength = 8;\n\n  function suidPrefix(epoch, prefixLength) {\n    var ret = base62(Date.now() - epoch);\n\n    while (ret.length < prefixLength) {\n      ret = \"0\" + ret;\n    }\n\n    return ret;\n  }\n\n  var defaultGenerator = buildGenerator();\n  module.exports = {\n    generator: buildGenerator,\n    generate: defaultGenerator.generate,\n    uid: defaultGenerator.generate,\n    suid: function suid(length, epoch, prefixLength) {\n      epoch = epoch || defaultEpoch;\n      prefixLength = prefixLength || defaultPrefixLength;\n      return suidPrefix(epoch, prefixLength) + defaultGenerator.generate(length);\n    }\n  };\n})();","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/rand-token/index.js"],"names":["crypto","require","assert","cryptoRandomBytes","pseudoRandomBytes","randomBytes","numeric","alphaLower","alphaUpper","toUpperCase","alphaNumeric","defaults","validateTokenChars","tokenChars","length","bufferAlloc","size","Buffer","alloc","buildGenerator","options","chars","source","buf","i","writeUInt8","Math","floor","random","max","ret","x","readUInt8","base62","n","index","push","reverse","join","defaultEpoch","defaultPrefixLength","suidPrefix","epoch","prefixLength","Date","now","defaultGenerator","module","exports","generator","generate","uid","suid"],"mappings":"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","sourcesContent":["(function () {\n  \"use strict\";\n\n  var crypto = require('crypto');\n  var assert = require('assert');\n  var cryptoRandomBytes = crypto.pseudoRandomBytes || crypto.randomBytes;\n\n  var numeric = '0123456789';\n  var alphaLower = 'abcdefghijklmnopqrstuvwxyz';\n  var alphaUpper = alphaLower.toUpperCase();\n  // NOTE: This is explicitly in sortable order:\n  var alphaNumeric = numeric + alphaUpper + alphaLower;\n  \n  var defaults = {\n    \"chars\": 'default',\n    \"source\": 'default'\n  };\n\n  function validateTokenChars(tokenChars) {\n    assert(tokenChars);\n    assert(typeof(tokenChars) == 'string');\n    assert(tokenChars.length > 0);\n    assert(tokenChars.length < 256);\n  }\n\n  function bufferAlloc(size) {\n    if (Buffer.alloc) {\n      return Buffer.alloc(size);\n    }\n    return new Buffer(size);\n  }\n\n  function buildGenerator(options) {\n    assert(!options || typeof(options) == 'object');\n    options = options || {};\n    options.chars = options.chars || defaults.chars;\n    options.source = options.source || defaults.source;\n\n    // Allowed characters\n    switch( options.chars ) {\n      case 'default':\n        options.chars = alphaNumeric;\n        break;\n      case 'a-z':\n      case 'alpha':\n        options.chars = alphaLower;\n        break;\n      case 'A-Z':\n      case 'ALPHA':\n        options.chars = alphaUpper;\n        break;\n      case '0-9':\n      case 'numeric':\n        options.chars = numeric;\n        break;\n      case 'base32':\n        options.chars = alphaUpper + \"234567\";\n        break;\n      default:\n        // use the characters as is\n    }\n    validateTokenChars(options.chars);\n\n    // Source of randomness:\n    switch( options.source ) {\n      case 'default':\n        options.source = cryptoRandomBytes;\n        break;\n      case 'crypto':\n        options.source = crypto.randomBytes;\n        break;\n      case 'math':\n        options.source = function(size) {\n          var buf = bufferAlloc(size);\n          for(var i=0;i<size;i++) {\n            buf.writeUInt8(Math.floor(256 * Math.random()), i);\n          }\n          return buf;\n        };\n        break;\n      default:\n        assert(typeof(options.source) == 'function');\n    }\n\n    return {\n      \"generate\": function(size, chars) {\n        if( chars ) {\n          validateTokenChars(chars);\n        } else {\n          chars = options.chars;\n        }\n        var max = Math.floor(256 / chars.length) * chars.length;\n        var ret = \"\";\n        while( ret.length < size ) {\n          var buf = options.source(size - ret.length);\n          for(var i=0;i<buf.length;i++) {\n            var x = buf.readUInt8(i);\n            if( x < max ) {\n              ret += chars[x % chars.length];\n            }\n          }\n        }\n        return ret;\n      }\n    };\n  }\n\n  function base62(n) {\n    assert(n >= 0);\n    n = Math.floor(n);\n    var ret = [];\n    do {\n      var index = n % 62;\n      ret.push(alphaNumeric[index]);\n      n = Math.floor(n / 62);\n    } while( n > 0);\n    return ret.reverse().join(\"\");\n  }\n\n  // Default epoch of \"2000-01-01T00:00:00+00:00\"\n  var defaultEpoch = 946684800000;\n  var defaultPrefixLength = 8;\n  function suidPrefix(epoch, prefixLength) {\n    var ret = base62(Date.now() - epoch);\n    while( ret.length < prefixLength ) {\n      ret = \"0\" + ret;\n    }\n    return ret;\n  }\n\n  var defaultGenerator = buildGenerator();\n\n  module.exports = {\n    generator: buildGenerator,\n    generate: defaultGenerator.generate,\n    uid: defaultGenerator.generate,\n    suid: function(length, epoch, prefixLength) {\n      epoch = epoch || defaultEpoch;\n      prefixLength = prefixLength || defaultPrefixLength;\n      return suidPrefix(epoch, prefixLength) + defaultGenerator.generate(length);\n    }\n  };\n})();\n"]},"metadata":{},"sourceType":"script"}