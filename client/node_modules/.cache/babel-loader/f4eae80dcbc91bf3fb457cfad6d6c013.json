{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nexport const useTargetSetting = (user, isLoginLoading) => {\n  _s();\n\n  console.log(\"UPDATE SETTING HOOK USER: \");\n  const [targetWorkTime, setTargetWorkTime] = useState(user ? 0 : -1);\n  const [targetWakeHour, setTargetWakeHour] = useState(user ? 0 : -1);\n  const [targetBedHour, setTargetBedHour] = useState(user ? 0 : -1);\n  const [targetWakeMinute, setTargetWakeMinute] = useState(user ? 0 : -1);\n  const [targetBedMinute, setTargetBedMinute] = useState(user ? 0 : -1);\n  const [isSettingHookLoading, setLoad] = useState(true);\n  let tempTargetWorkTime, tempTargetWakeHour, tempTargetBedHour, tempTargetWakeMinute, tempTargetBedMinute;\n\n  const onChangeTargetWorkTime = workTime => tempTargetWorkTime = parseInt(workTime);\n\n  const onChangeTargetWakeHour = wakeHour => tempTargetWakeHour = parseInt(wakeHour);\n\n  const onChangeTargetBedHour = bedHour => tempTargetBedHour = parseInt(bedHour);\n\n  const onChangeTargetWakeMinute = wakeMinute => tempTargetWakeMinute = parseInt(wakeMinute);\n\n  const onChangeTargetBedMinute = bedMinute => tempTargetBedMinute = parseInt(bedMinute);\n\n  const getUserSetting = async () => {\n    try {\n      if (user && !isLoginLoading) {\n        console.log(\"SETTIN-G\", user);\n        const data = await APIv2.userSetting(user).get(); //API.get(`/auth/setting/${user}`);\n\n        const settingObj = data === null || data === void 0 ? void 0 : data.data;\n        if (!data) throw new Error(\"Cannot find data\");\n        setTargetWorkTime(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetWorkTime);\n        setTargetWakeHour(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetWakeTime.hour);\n        setTargetBedHour(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetBedTime.hour);\n        setTargetWakeMinute(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetWakeTime.minute);\n        setTargetBedMinute(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetBedTime.minute);\n      } else {//\n      }\n\n      if (!isLoginLoading && isSettingHookLoading) {\n        setLoad(false);\n        console.log(\"SETTIN-G END\", isSettingHookLoading);\n      }\n    } catch (error) {\n      setLoad(false);\n      alert(error); // history.push(\"/setting\");\n    }\n  };\n\n  useEffect(() => {\n    getUserSetting();\n  }, [user, isLoginLoading]);\n\n  const validator = targetTimeObj => {\n    return targetTimeObj.targetWorkTime && targetTimeObj.targetWakeTime.hour && targetTimeObj.targetBedTime.hour && targetTimeObj.targetWakeTime.minute && targetTimeObj.targetBedTime.minute;\n  };\n\n  const onEditTargetTime = event => {\n    try {\n      event.preventDefault();\n      let willUpdate = true;\n      let targetTimeObj = {\n        tempTargetWorkTime,\n        tempTargetWakeTime: {\n          hour: tempTargetWakeHour,\n          minute: tempTargetWakeMinute\n        },\n        tempTargetBedTime: {\n          hour: tempTargetBedHour,\n          minute: tempTargetBedMinute\n        }\n      };\n      console.log(\"EDIT TARGET\");\n      if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n\n      if (willUpdate) {\n        setTargetWorkTime(tempTargetWorkTime);\n        setTargetWakeHour(tempTargetWakeHour);\n        setTargetBedHour(tempTargetBedHour);\n        setTargetWakeMinute(tempTargetWakeMinute);\n        setTargetBedMinute(tempTargetBedMinute);\n        targetTimeObj = {\n          targetWorkTime,\n          targetWakeTime: {\n            hour: targetWakeHour,\n            minute: targetWakeMinute\n          },\n          targetBedTime: {\n            hour: targetBedHour,\n            minute: targetBedMinute\n          }\n        };\n        APIv2.userSetting(user).edit(targetTimeObj); // API.post(`/auth/setting/${user}`, {\n        //   value: targetTimeObj,\n        //   user,\n        // });\n      } else {\n        const targetWakeTime = targetWakeHour && targetWakeMinute;\n        const targetBedTime = targetBedHour && targetBedMinute;\n        let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${!targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"}${targetWakeTime ? \"\" : \"TargetWakeTime\"}${!targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"}${targetBedTime ? \"\" : \"TargetBedtime\"} ${!targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"} not entered.`;\n        throw new Error(errText);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const targetTimeObj = {\n    targetWorkTime,\n    targetWakeTime: {\n      hour: targetWakeHour,\n      minute: targetWakeMinute\n    },\n    targetBedTime: {\n      hour: targetBedHour,\n      minute: targetBedMinute\n    }\n  };\n  return {\n    onEditTargetTime,\n    targetWorkTime,\n    onChangeTargetWorkTime,\n    targetTimeObj,\n    targetWakeHour,\n    targetBedHour,\n    targetWakeMinute,\n    targetBedMinute,\n    onChangeTargetWakeHour,\n    onChangeTargetBedHour,\n    onChangeTargetWakeMinute,\n    onChangeTargetBedMinute,\n    isSettingHookLoading\n  };\n};\n\n_s(useTargetSetting, \"xplfkcNyhF0GTTZ7tBIkowfN450=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useTargetSetting.js"],"names":["useEffect","useState","API","APIv2","useTargetSetting","user","isLoginLoading","console","log","targetWorkTime","setTargetWorkTime","targetWakeHour","setTargetWakeHour","targetBedHour","setTargetBedHour","targetWakeMinute","setTargetWakeMinute","targetBedMinute","setTargetBedMinute","isSettingHookLoading","setLoad","tempTargetWorkTime","tempTargetWakeHour","tempTargetBedHour","tempTargetWakeMinute","tempTargetBedMinute","onChangeTargetWorkTime","workTime","parseInt","onChangeTargetWakeHour","wakeHour","onChangeTargetBedHour","bedHour","onChangeTargetWakeMinute","wakeMinute","onChangeTargetBedMinute","bedMinute","getUserSetting","data","userSetting","get","settingObj","Error","targetWakeTime","hour","targetBedTime","minute","error","alert","validator","targetTimeObj","onEditTargetTime","event","preventDefault","willUpdate","tempTargetWakeTime","tempTargetBedTime","edit","errText"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,iBAA3B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAOC,cAAP,KAA0B;AAAA;;AACxDC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAACI,IAAI,GAAG,CAAH,GAAO,CAAC,CAAb,CAApD;AACA,QAAM,CAACM,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAACI,IAAI,GAAG,CAAH,GAAO,CAAC,CAAb,CAApD;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAACI,IAAI,GAAG,CAAH,GAAO,CAAC,CAAb,CAAlD;AACA,QAAM,CAACU,gBAAD,EAAmBC,mBAAnB,IAA0Cf,QAAQ,CAACI,IAAI,GAAG,CAAH,GAAO,CAAC,CAAb,CAAxD;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCjB,QAAQ,CAACI,IAAI,GAAG,CAAH,GAAO,CAAC,CAAb,CAAtD;AACA,QAAM,CAACc,oBAAD,EAAuBC,OAAvB,IAAkCnB,QAAQ,CAAC,IAAD,CAAhD;AACA,MAAIoB,kBAAJ,EACEC,kBADF,EAEEC,iBAFF,EAGEC,oBAHF,EAIEC,mBAJF;;AAKA,QAAMC,sBAAsB,GAAIC,QAAD,IAC5BN,kBAAkB,GAAGO,QAAQ,CAACD,QAAD,CADhC;;AAEA,QAAME,sBAAsB,GAAIC,QAAD,IAC5BR,kBAAkB,GAAGM,QAAQ,CAACE,QAAD,CADhC;;AAEA,QAAMC,qBAAqB,GAAIC,OAAD,IAC3BT,iBAAiB,GAAGK,QAAQ,CAACI,OAAD,CAD/B;;AAEA,QAAMC,wBAAwB,GAAIC,UAAD,IAC9BV,oBAAoB,GAAGI,QAAQ,CAACM,UAAD,CADlC;;AAEA,QAAMC,uBAAuB,GAAIC,SAAD,IAC7BX,mBAAmB,GAAGG,QAAQ,CAACQ,SAAD,CADjC;;AAGA,QAAMC,cAAc,GAAG,YAAY;AACjC,QAAI;AACF,UAAIhC,IAAI,IAAI,CAACC,cAAb,EAA6B;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,IAAxB;AACA,cAAMiC,IAAI,GAAG,MAAMnC,KAAK,CAACoC,WAAN,CAAkBlC,IAAlB,EAAwBmC,GAAxB,EAAnB,CAF2B,CAEuB;;AAClD,cAAMC,UAAU,GAAGH,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEA,IAAzB;AACA,YAAI,CAACA,IAAL,EAAW,MAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACXhC,QAAAA,iBAAiB,CAAC+B,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEhC,cAAb,CAAjB;AACAG,QAAAA,iBAAiB,CAAC6B,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEE,cAAZ,CAA2BC,IAA5B,CAAjB;AACA9B,QAAAA,gBAAgB,CAAC2B,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEI,aAAZ,CAA0BD,IAA3B,CAAhB;AACA5B,QAAAA,mBAAmB,CAACyB,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEE,cAAZ,CAA2BG,MAA5B,CAAnB;AACA5B,QAAAA,kBAAkB,CAACuB,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEI,aAAZ,CAA0BC,MAA3B,CAAlB;AACD,OAVD,MAUO,CACL;AACD;;AAED,UAAI,CAACxC,cAAD,IAAmBa,oBAAvB,EAA6C;AAC3CC,QAAAA,OAAO,CAAC,KAAD,CAAP;AACAb,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BW,oBAA5B;AACD;AACF,KAnBD,CAmBE,OAAO4B,KAAP,EAAc;AACd3B,MAAAA,OAAO,CAAC,KAAD,CAAP;AACA4B,MAAAA,KAAK,CAACD,KAAD,CAAL,CAFc,CAGd;AACD;AACF,GAzBD;;AA0BA/C,EAAAA,SAAS,CAAC,MAAM;AACdqC,IAAAA,cAAc;AACf,GAFQ,EAEN,CAAChC,IAAD,EAAOC,cAAP,CAFM,CAAT;;AAIA,QAAM2C,SAAS,GAAIC,aAAD,IAAmB;AACnC,WACEA,aAAa,CAACzC,cAAd,IACAyC,aAAa,CAACP,cAAd,CAA6BC,IAD7B,IAEAM,aAAa,CAACL,aAAd,CAA4BD,IAF5B,IAGAM,aAAa,CAACP,cAAd,CAA6BG,MAH7B,IAIAI,aAAa,CAACL,aAAd,CAA4BC,MAL9B;AAOD,GARD;;AASA,QAAMK,gBAAgB,GAAIC,KAAD,IAAW;AAClC,QAAI;AACFA,MAAAA,KAAK,CAACC,cAAN;AACA,UAAIC,UAAU,GAAG,IAAjB;AACA,UAAIJ,aAAa,GAAG;AAClB7B,QAAAA,kBADkB;AAElBkC,QAAAA,kBAAkB,EAAE;AAClBX,UAAAA,IAAI,EAAEtB,kBADY;AAElBwB,UAAAA,MAAM,EAAEtB;AAFU,SAFF;AAMlBgC,QAAAA,iBAAiB,EAAE;AACjBZ,UAAAA,IAAI,EAAErB,iBADW;AAEjBuB,UAAAA,MAAM,EAAErB;AAFS;AAND,OAApB;AAWAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,UAAI,OAAOyC,SAAP,KAAqB,UAAzB,EACEK,UAAU,GAAGL,SAAS,CAACC,aAAD,CAAtB;;AACF,UAAII,UAAJ,EAAgB;AACd5C,QAAAA,iBAAiB,CAACW,kBAAD,CAAjB;AACAT,QAAAA,iBAAiB,CAACU,kBAAD,CAAjB;AACAR,QAAAA,gBAAgB,CAACS,iBAAD,CAAhB;AACAP,QAAAA,mBAAmB,CAACQ,oBAAD,CAAnB;AACAN,QAAAA,kBAAkB,CAACO,mBAAD,CAAlB;AACAyB,QAAAA,aAAa,GAAG;AACdzC,UAAAA,cADc;AAEdkC,UAAAA,cAAc,EAAE;AACdC,YAAAA,IAAI,EAAEjC,cADQ;AAEdmC,YAAAA,MAAM,EAAE/B;AAFM,WAFF;AAMd8B,UAAAA,aAAa,EAAE;AACbD,YAAAA,IAAI,EAAE/B,aADO;AAEbiC,YAAAA,MAAM,EAAE7B;AAFK;AAND,SAAhB;AAWAd,QAAAA,KAAK,CAACoC,WAAN,CAAkBlC,IAAlB,EAAwBoD,IAAxB,CAA6BP,aAA7B,EAjBc,CAkBd;AACA;AACA;AACA;AACD,OAtBD,MAsBO;AACL,cAAMP,cAAc,GAAGhC,cAAc,IAAII,gBAAzC;AACA,cAAM8B,aAAa,GAAGhC,aAAa,IAAII,eAAvC;AACA,YAAIyC,OAAO,GAAI,WAAUjD,cAAc,GAAG,EAAH,GAAQ,gBAAiB,GAC9D,CAACkC,cAAD,GAAkB,CAACE,aAAnB,GAAmC,CAAnC,IAAwC,CAACpC,cAAzC,GAA0D,IAA1D,GAAiE,EAClE,GAAEkC,cAAc,GAAG,EAAH,GAAQ,gBAAiB,GACxC,CAACE,aAAD,GAAiB,CAAjB,IAAsB,CAACF,cAAvB,GAAwC,IAAxC,GAA+C,EAChD,GAAEE,aAAa,GAAG,EAAH,GAAQ,eAAgB,IACtC,CAACpC,cAAD,GAAkB,CAACkC,cAAnB,GAAoC,CAACE,aAArC,GAAqD,CAArD,GAAyD,KAAzD,GAAiE,IAClE,eAND;AAOA,cAAM,IAAIH,KAAJ,CAAUgB,OAAV,CAAN;AACD;AACF,KAnDD,CAmDE,OAAOX,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,GAvDD;;AAwDA,QAAMG,aAAa,GAAG;AACpBzC,IAAAA,cADoB;AAEpBkC,IAAAA,cAAc,EAAE;AAAEC,MAAAA,IAAI,EAAEjC,cAAR;AAAwBmC,MAAAA,MAAM,EAAE/B;AAAhC,KAFI;AAGpB8B,IAAAA,aAAa,EAAE;AAAED,MAAAA,IAAI,EAAE/B,aAAR;AAAuBiC,MAAAA,MAAM,EAAE7B;AAA/B;AAHK,GAAtB;AAKA,SAAO;AACLkC,IAAAA,gBADK;AAEL1C,IAAAA,cAFK;AAGLiB,IAAAA,sBAHK;AAILwB,IAAAA,aAJK;AAKLvC,IAAAA,cALK;AAMLE,IAAAA,aANK;AAOLE,IAAAA,gBAPK;AAQLE,IAAAA,eARK;AASLY,IAAAA,sBATK;AAULE,IAAAA,qBAVK;AAWLE,IAAAA,wBAXK;AAYLE,IAAAA,uBAZK;AAaLhB,IAAAA;AAbK,GAAP;AAeD,CA3IM;;GAAMf,gB","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\n\nexport const useTargetSetting = (user, isLoginLoading) => {\n  console.log(\"UPDATE SETTING HOOK USER: \");\n  const [targetWorkTime, setTargetWorkTime] = useState(user ? 0 : -1);\n  const [targetWakeHour, setTargetWakeHour] = useState(user ? 0 : -1);\n  const [targetBedHour, setTargetBedHour] = useState(user ? 0 : -1);\n  const [targetWakeMinute, setTargetWakeMinute] = useState(user ? 0 : -1);\n  const [targetBedMinute, setTargetBedMinute] = useState(user ? 0 : -1);\n  const [isSettingHookLoading, setLoad] = useState(true);\n  let tempTargetWorkTime,\n    tempTargetWakeHour,\n    tempTargetBedHour,\n    tempTargetWakeMinute,\n    tempTargetBedMinute;\n  const onChangeTargetWorkTime = (workTime) =>\n    (tempTargetWorkTime = parseInt(workTime));\n  const onChangeTargetWakeHour = (wakeHour) =>\n    (tempTargetWakeHour = parseInt(wakeHour));\n  const onChangeTargetBedHour = (bedHour) =>\n    (tempTargetBedHour = parseInt(bedHour));\n  const onChangeTargetWakeMinute = (wakeMinute) =>\n    (tempTargetWakeMinute = parseInt(wakeMinute));\n  const onChangeTargetBedMinute = (bedMinute) =>\n    (tempTargetBedMinute = parseInt(bedMinute));\n\n  const getUserSetting = async () => {\n    try {\n      if (user && !isLoginLoading) {\n        console.log(\"SETTIN-G\", user);\n        const data = await APIv2.userSetting(user).get(); //API.get(`/auth/setting/${user}`);\n        const settingObj = data?.data;\n        if (!data) throw new Error(\"Cannot find data\");\n        setTargetWorkTime(settingObj?.targetWorkTime);\n        setTargetWakeHour(settingObj?.targetWakeTime.hour);\n        setTargetBedHour(settingObj?.targetBedTime.hour);\n        setTargetWakeMinute(settingObj?.targetWakeTime.minute);\n        setTargetBedMinute(settingObj?.targetBedTime.minute);\n      } else {\n        //\n      }\n\n      if (!isLoginLoading && isSettingHookLoading) {\n        setLoad(false);\n        console.log(\"SETTIN-G END\", isSettingHookLoading);\n      }\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n      // history.push(\"/setting\");\n    }\n  };\n  useEffect(() => {\n    getUserSetting();\n  }, [user, isLoginLoading]);\n\n  const validator = (targetTimeObj) => {\n    return (\n      targetTimeObj.targetWorkTime &&\n      targetTimeObj.targetWakeTime.hour &&\n      targetTimeObj.targetBedTime.hour &&\n      targetTimeObj.targetWakeTime.minute &&\n      targetTimeObj.targetBedTime.minute\n    );\n  };\n  const onEditTargetTime = (event) => {\n    try {\n      event.preventDefault();\n      let willUpdate = true;\n      let targetTimeObj = {\n        tempTargetWorkTime,\n        tempTargetWakeTime: {\n          hour: tempTargetWakeHour,\n          minute: tempTargetWakeMinute,\n        },\n        tempTargetBedTime: {\n          hour: tempTargetBedHour,\n          minute: tempTargetBedMinute,\n        },\n      };\n      console.log(\"EDIT TARGET\");\n      if (typeof validator === \"function\")\n        willUpdate = validator(targetTimeObj);\n      if (willUpdate) {\n        setTargetWorkTime(tempTargetWorkTime);\n        setTargetWakeHour(tempTargetWakeHour);\n        setTargetBedHour(tempTargetBedHour);\n        setTargetWakeMinute(tempTargetWakeMinute);\n        setTargetBedMinute(tempTargetBedMinute);\n        targetTimeObj = {\n          targetWorkTime,\n          targetWakeTime: {\n            hour: targetWakeHour,\n            minute: targetWakeMinute,\n          },\n          targetBedTime: {\n            hour: targetBedHour,\n            minute: targetBedMinute,\n          },\n        };\n        APIv2.userSetting(user).edit(targetTimeObj);\n        // API.post(`/auth/setting/${user}`, {\n        //   value: targetTimeObj,\n        //   user,\n        // });\n      } else {\n        const targetWakeTime = targetWakeHour && targetWakeMinute;\n        const targetBedTime = targetBedHour && targetBedMinute;\n        let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${\n          !targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"\n        }${targetWakeTime ? \"\" : \"TargetWakeTime\"}${\n          !targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"\n        }${targetBedTime ? \"\" : \"TargetBedtime\"} ${\n          !targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"\n        } not entered.`;\n        throw new Error(errText);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  const targetTimeObj = {\n    targetWorkTime,\n    targetWakeTime: { hour: targetWakeHour, minute: targetWakeMinute },\n    targetBedTime: { hour: targetBedHour, minute: targetBedMinute },\n  };\n  return {\n    onEditTargetTime,\n    targetWorkTime,\n    onChangeTargetWorkTime,\n    targetTimeObj,\n    targetWakeHour,\n    targetBedHour,\n    targetWakeMinute,\n    targetBedMinute,\n    onChangeTargetWakeHour,\n    onChangeTargetBedHour,\n    onChangeTargetWakeMinute,\n    onChangeTargetBedMinute,\n    isSettingHookLoading,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}