{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { API, APIv2 } from \"../../../tools/API\";\nimport { LocalStroage } from \"../../../tools/LocalStorage\";\nimport { getToday } from \"../../../tools/time\";\nexport const isEmptyTimeObj = timeObj => timeObj ? !Object.keys(timeObj).length : true; // !timeObj || timeObj.hour === -1 || timeObj.minute === -1;\n\nconst getEmptyTimeObj = () => {\n  return {};\n};\n\nconst checkTimeObj = timeObj => isEmptyTimeObj(timeObj) ? getEmptyTimeObj() : timeObj;\n\nconst getInitList = (user, key) => !user && window.localStorage.getItem(key) ? JSON.parse(window.localStorage.getItem(key)) : null;\n\nconst getNowTimeHHMM = () => new Date().toTimeString().split(\":\").slice(0, 2).map(numChar => parseInt(numChar));\n\nexport const useRecordTime = (key, user, date) => {\n  _s();\n\n  if (!user) window.localStorage.setItem(key, \"{}\");\n  const initVal = getInitList(user, key);\n  const [recordTime, setRecordTime] = useState(initVal);\n\n  const getRecordTime = async () => {\n    try {\n      let resTimeObj;\n\n      if (user) {\n        const data = await APIv2.recordTime(user, date, key).get();\n        resTimeObj = checkTimeObj(data === null || data === void 0 ? void 0 : data.data);\n      } else resTimeObj = LocalStroage.recordTime(key).get();\n\n      setRecordTime(resTimeObj);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    getRecordTime();\n  }, [date, user]);\n\n  const setTime = timeObj => {\n    timeObj = checkTimeObj(timeObj);\n    console.log(\"setTime, key: \", key);\n    return {\n      create: async () => {\n        setRecordTime(timeObj);\n        if (user) await APIv2.recordTime(user, date, key).create(timeObj);else LocalStroage.recordTime(key).set(timeObj);\n      },\n      edit: async () => {\n        setRecordTime(timeObj);\n        if (user) await APIv2.recordTime(user, date, key).edit(timeObj);else LocalStroage.recordTime(key).set(timeObj);\n      },\n      delete: async () => {\n        setRecordTime({});\n        if (user) await APIv2.recordTime(user, date, key).delete(timeObj);else LocalStroage.recordTime(key).set({});\n      }\n    }; //\n    // if (user)\n    //   API.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n    //     value: timeObj,\n    //   });\n    // else window.localStorage.setItem(key, JSON.stringify(timeObj));\n    // setRecordTime(timeObj);\n  };\n\n  const onClick = event => {\n    event.preventDefault();\n    const [hour, minute] = getNowTimeHHMM();\n    const timeObj = {\n      hour,\n      minute\n    };\n    console.log(\"ONCLICK: TIME: \", timeObj, key);\n    setTime(timeObj).create();\n  };\n\n  return [recordTime, onClick, setTime];\n};\n\n_s(useRecordTime, \"h490kuPbigxM53kww9L99hhwvTY=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/time/useRecordTime.js"],"names":["useState","useEffect","API","APIv2","LocalStroage","getToday","isEmptyTimeObj","timeObj","Object","keys","length","getEmptyTimeObj","checkTimeObj","getInitList","user","key","window","localStorage","getItem","JSON","parse","getNowTimeHHMM","Date","toTimeString","split","slice","map","numChar","parseInt","useRecordTime","date","setItem","initVal","recordTime","setRecordTime","getRecordTime","resTimeObj","data","get","error","alert","setTime","console","log","create","set","edit","delete","onClick","event","preventDefault","hour","minute"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { API, APIv2 } from \"../../../tools/API\";\nimport { LocalStroage } from \"../../../tools/LocalStorage\";\nimport { getToday } from \"../../../tools/time\";\n\nexport const isEmptyTimeObj = (timeObj) =>\n  timeObj ? !Object.keys(timeObj).length : true;\n// !timeObj || timeObj.hour === -1 || timeObj.minute === -1;\n\nconst getEmptyTimeObj = () => {\n  return {};\n};\n\nconst checkTimeObj = (timeObj) =>\n  isEmptyTimeObj(timeObj) ? getEmptyTimeObj() : timeObj;\nconst getInitList = (user, key) =>\n  !user && window.localStorage.getItem(key)\n    ? JSON.parse(window.localStorage.getItem(key))\n    : null;\n\nconst getNowTimeHHMM = () =>\n  new Date()\n    .toTimeString()\n    .split(\":\")\n    .slice(0, 2)\n    .map((numChar) => parseInt(numChar));\nexport const useRecordTime = (key, user, date) => {\n  if (!user) window.localStorage.setItem(key, \"{}\");\n  const initVal = getInitList(user, key);\n  const [recordTime, setRecordTime] = useState(initVal);\n\n  const getRecordTime = async () => {\n    try {\n      let resTimeObj;\n      if (user) {\n        const data = await APIv2.recordTime(user, date, key).get();\n        resTimeObj = checkTimeObj(data?.data);\n      } else resTimeObj = LocalStroage.recordTime(key).get();\n      setRecordTime(resTimeObj);\n    } catch (error) {\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    getRecordTime();\n  }, [date, user]);\n\n  const setTime = (timeObj) => {\n    timeObj = checkTimeObj(timeObj);\n    console.log(\"setTime, key: \", key);\n    return {\n      create: async () => {\n        setRecordTime(timeObj);\n        if (user) await APIv2.recordTime(user, date, key).create(timeObj);\n        else LocalStroage.recordTime(key).set(timeObj);\n      },\n      edit: async () => {\n        setRecordTime(timeObj);\n        if (user) await APIv2.recordTime(user, date, key).edit(timeObj);\n        else LocalStroage.recordTime(key).set(timeObj);\n      },\n      delete: async () => {\n        setRecordTime({});\n        if (user) await APIv2.recordTime(user, date, key).delete(timeObj);\n        else LocalStroage.recordTime(key).set({});\n      },\n    };\n    //\n    // if (user)\n    //   API.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n    //     value: timeObj,\n    //   });\n    // else window.localStorage.setItem(key, JSON.stringify(timeObj));\n    // setRecordTime(timeObj);\n  };\n  const onClick = (event) => {\n    event.preventDefault();\n    const [hour, minute] = getNowTimeHHMM();\n    const timeObj = { hour, minute };\n    console.log(\"ONCLICK: TIME: \", timeObj, key);\n    setTime(timeObj).create();\n  };\n  return [recordTime, onClick, setTime];\n};\n"]},"metadata":{},"sourceType":"module"}