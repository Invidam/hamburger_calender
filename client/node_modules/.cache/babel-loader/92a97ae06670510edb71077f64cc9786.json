{"ast":null,"code":"import _slicedToArray from\"/home/invidam/hamburger_calender/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";import Modal from\"react-modal\";import{useDeleteTime}from\"../../../../hooks/workList/time/useDeleteTime\";// import { useDeleteWork } from \"../../../../hooks/workList/work/useDeleteWork\";\nimport{useEditTime}from\"../../../../hooks/workList/time/useEditTime\";import{getDifference,makeDisplayTime,timeObjToStr}from\"../../../../tools/time\";import{EditTimeWindow}from\"../../window/time/EditTimeWindow\";// import {EditTimeWindow} from \".\"\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";Modal.setAppElement(\"#root\");var customStyles={content:{// top: \"40vh\",\ntop:\"50%\",left:\"50%\",right:\"auto\",bottom:\"auto\",marginRight:\"-50%\",transform:\"translate(-50%, -50%)\",backgroundColor:\"rgb(245, 235, 220)\",border:\"none\"},overlay:{position:\"fixed\",top:0,left:0,right:0,bottom:0,backgroundColor:\"rgba(0,0,0,0.4)\"}};export var TimeRecordDisplay=function TimeRecordDisplay(_ref){var recordTime=_ref.recordTime,isWake=_ref.isWake,setTime=_ref.setTime,targetTime=_ref.targetTime;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),editModalIsOpen=_useState2[0],setEditModalIsOpen=_useState2[1];var openEditModal=function openEditModal(){return setEditModalIsOpen(true);};var closeEditModal=function closeEditModal(event){return setEditModalIsOpen(false);};var editTimeHook=useEditTime(recordTime,setTime,isWake,closeEditModal);var _useDeleteTime=useDeleteTime(recordTime,setTime,closeEditModal),onDeleteTime=_useDeleteTime.onDeleteTime;var editTimeWindow=/*#__PURE__*/_jsx(EditTimeWindow,{recordTime:recordTime,isWake:isWake,editTimeHook:editTimeHook});var editModal=/*#__PURE__*/_jsxs(Modal,{isOpen:editModalIsOpen,onRequestClose:closeEditModal,style:customStyles,contentLabel:\"Example Modal\",overlayClassName:\"Overlay\",children:[editTimeWindow,/*#__PURE__*/_jsx(\"button\",{className:\"modalWindow__btn\",onClick:function onClick(event){return onDeleteTime(event);},children:\"DELETE\"}),/*#__PURE__*/_jsx(\"button\",{className:\"modalWindow__close modalWindow__btn\",onClick:closeEditModal,children:\"CLOSE\"})]});var targetElement=/*#__PURE__*/_jsxs(\"div\",{className:\"tooltip-box__target\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"tooltip-box__key\",children:\"TargetTime:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"tooltip-box__value\",children:timeObjToStr(targetTime)})]});var valueElement=/*#__PURE__*/_jsxs(\"div\",{className:\"tooltip-box__target\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"tooltip-box__key\",children:isWake?\"WakeTime: \":\"BedTime: \"}),/*#__PURE__*/_jsx(\"span\",{className:\"tooltip-box__value\",children:timeObjToStr(recordTime)})]});var diffTime=getDifference(targetTime,recordTime);var diffElement=/*#__PURE__*/_jsxs(\"div\",{className:\"tooltip-box__target\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"tooltip-box__key\",children:\"Difference:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"tooltip-box__value\",children:timeObjToStr(diffTime)})]});// <span className=\"tooltip_box__value\">{`${isWake ? \"Wake\" : \"Bed\"}Time: ${\n//   recordTime.hour\n// }: ${recordTime.minute}`}</span>;\nvar tooltipBox=/*#__PURE__*/_jsx(\"div\",{className:\"tooltip-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"tooltip-box\",children:[targetTime.hour!==-1?targetElement:\"\",valueElement,targetTime.hour!==-1?diffElement:\"\"]})});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"li\",{className:isWake?\"workList__wakeTime-display workList__time-display workList__time workList__wakeTime tooltip\":\"workList__bedTime-display workList__time-display workList__time workList__bedTime tooltip\",onClick:openEditModal,children:[isWake?\"Wake at \":\"Sleep at \",makeDisplayTime(recordTime.hour),\": \",makeDisplayTime(recordTime.minute),tooltipBox]}),editModal]});};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/worklist/element/timeBtn/TimeDisplayBtn.js"],"names":["useState","Modal","useDeleteTime","useEditTime","getDifference","makeDisplayTime","timeObjToStr","EditTimeWindow","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","backgroundColor","border","overlay","position","TimeRecordDisplay","recordTime","isWake","setTime","targetTime","editModalIsOpen","setEditModalIsOpen","openEditModal","closeEditModal","event","editTimeHook","onDeleteTime","editTimeWindow","editModal","targetElement","valueElement","diffTime","diffElement","tooltipBox","hour","minute"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useDeleteTime } from \"../../../../hooks/workList/time/useDeleteTime\";\n// import { useDeleteWork } from \"../../../../hooks/workList/work/useDeleteWork\";\nimport { useEditTime } from \"../../../../hooks/workList/time/useEditTime\";\nimport {\n  getDifference,\n  makeDisplayTime,\n  timeObjToStr,\n} from \"../../../../tools/time\";\nimport { EditTimeWindow } from \"../../window/time/EditTimeWindow\";\n// import {EditTimeWindow} from \".\"\n\nModal.setAppElement(\"#root\");\nconst customStyles = {\n  content: {\n    // top: \"40vh\",\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"rgb(245, 235, 220)\",\n    border: \"none\",\n  },\n  overlay: {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: \"rgba(0,0,0,0.4)\",\n  },\n};\nexport const TimeRecordDisplay = ({\n  recordTime,\n  isWake,\n  setTime,\n  targetTime,\n}) => {\n  const [editModalIsOpen, setEditModalIsOpen] = useState(false);\n  const openEditModal = () => setEditModalIsOpen(true);\n\n  const closeEditModal = (event) => setEditModalIsOpen(false);\n  const editTimeHook = useEditTime(recordTime, setTime, isWake, closeEditModal);\n  const { onDeleteTime } = useDeleteTime(recordTime, setTime, closeEditModal);\n  const editTimeWindow = (\n    <EditTimeWindow\n      recordTime={recordTime}\n      isWake={isWake}\n      editTimeHook={editTimeHook}\n    />\n  );\n  const editModal = (\n    <Modal\n      isOpen={editModalIsOpen}\n      onRequestClose={closeEditModal}\n      style={customStyles}\n      contentLabel=\"Example Modal\"\n      overlayClassName=\"Overlay\"\n    >\n      {editTimeWindow}\n      <button\n        className=\"modalWindow__btn\"\n        onClick={(event) => onDeleteTime(event)}\n      >\n        DELETE\n      </button>\n      <button\n        className=\"modalWindow__close modalWindow__btn\"\n        onClick={closeEditModal}\n      >\n        CLOSE\n      </button>\n    </Modal>\n  );\n  const targetElement = (\n    <div className=\"tooltip-box__target\">\n      <span className=\"tooltip-box__key\">TargetTime:</span>\n      <span className=\"tooltip-box__value\">{timeObjToStr(targetTime)}</span>\n    </div>\n  );\n  const valueElement = (\n    <div className=\"tooltip-box__target\">\n      <span className=\"tooltip-box__key\">\n        {isWake ? \"WakeTime: \" : \"BedTime: \"}\n      </span>\n      <span className=\"tooltip-box__value\">{timeObjToStr(recordTime)}</span>\n    </div>\n  );\n  const diffTime = getDifference(targetTime, recordTime);\n  const diffElement = (\n    <div className=\"tooltip-box__target\">\n      <span className=\"tooltip-box__key\">Difference:</span>\n      <span className=\"tooltip-box__value\">{timeObjToStr(diffTime)}</span>\n    </div>\n  );\n  // <span className=\"tooltip_box__value\">{`${isWake ? \"Wake\" : \"Bed\"}Time: ${\n  //   recordTime.hour\n  // }: ${recordTime.minute}`}</span>;\n  const tooltipBox = (\n    <div className=\"tooltip-content\">\n      <div className=\"tooltip-box\">\n        {targetTime.hour !== -1 ? targetElement : \"\"}\n        {valueElement}\n        {targetTime.hour !== -1 ? diffElement : \"\"}\n      </div>\n    </div>\n  );\n  return (\n    <div>\n      <li\n        className={\n          isWake\n            ? \"workList__wakeTime-display workList__time-display workList__time workList__wakeTime tooltip\"\n            : \"workList__bedTime-display workList__time-display workList__time workList__bedTime tooltip\"\n        }\n        onClick={openEditModal}\n      >\n        {isWake ? \"Wake at \" : \"Sleep at \"}\n        {makeDisplayTime(recordTime.hour)}: {makeDisplayTime(recordTime.minute)}\n        {tooltipBox}\n      </li>\n      {editModal}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}