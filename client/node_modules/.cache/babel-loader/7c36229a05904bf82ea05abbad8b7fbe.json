{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\n\nconst makeTargetSetting = (targetWorkTime, targetWakeHour, targetWakeMinute, targetBedHour, targetBedMinute) => {\n  return {\n    targetWorkTime,\n    targetWakeTime: {\n      hour: targetWakeHour,\n      minute: targetWakeMinute\n    },\n    targetBedTime: {\n      hour: targetBedHour,\n      minute: targetBedMinute\n    }\n  };\n};\n\nconst makeEmptySetting = () => makeTargetSetting(-1, -1, -1, -1, -1);\n\nexport const useTargetSetting = (user, isLoginLoading) => {\n  _s();\n\n  console.log(\"UPDATE SETTING HOOK USER: \", user, isLoginLoading);\n  const [targetSetting, setTargetSetting] = useState(makeEmptySetting()); // const [targetWorkTime, setTargetWorkTime] = useState(-1);\n  // const [targetWakeHour, setTargetWakeHour] = useState(-1);\n  // const [targetBedHour, setTargetBedHour] = useState(-1);\n  // const [targetWakeMinute, setTargetWakeMinute] = useState(-1);\n  // const [targetBedMinute, setTargetBedMinute] = useState(-1);\n\n  const [isSettingHookLoading, setLoad] = useState(true);\n\n  const getUserSetting = async () => {\n    try {\n      console.log(\"SETTING USE EFFECT : \", user, isLoginLoading);\n\n      if (user && !isLoginLoading) {\n        console.log(\"SETTIN-G\", user); // setLoad(true);\n\n        const data = await APIv2.userSetting(user).get(); //API.get(`/auth/setting/${user}`);\n\n        const settingObj = data === null || data === void 0 ? void 0 : data.data;\n        if (!data) throw new Error(\"Cannot find data\");\n        setTargetSetting(settingObj);\n        setLoad(false); // setTargetWorkTime(settingObj?.targetWorkTime);\n        // setTargetWakeHour(settingObj?.targetWakeTime.hour);\n        // setTargetBedHour(settingObj?.targetBedTime.hour);\n        // setTargetWakeMinute(settingObj?.targetWakeTime.minute);\n        // setTargetBedMinute(settingObj?.targetBedTime.minute);\n      } else {\n        if (!isLoginLoading) setLoad(false); //\n      }\n    } catch (error) {\n      setLoad(false);\n      alert(error); // history.push(\"/setting\");\n    }\n  };\n\n  useEffect(() => {\n    getUserSetting();\n  }, [user, isLoginLoading]);\n\n  const validator = targetSetting => {\n    return targetSetting.targetWorkTime !== -1 && targetSetting.targetWakeTime.hour !== -1 && targetSetting.targetBedTime.hour !== -1 && targetSetting.targetWakeTime.minute !== -1 && targetSetting.targetBedTime.minute !== -1;\n  };\n\n  const setTargetTime = targetSetting => {\n    try {\n      let willUpdate = true;\n      console.log(\"EDIT TARGET\");\n      if (typeof validator === \"function\") willUpdate = validator(targetSetting);\n\n      if (willUpdate) {\n        console.log(\"API START~~\");\n        APIv2.userSetting(user).edit(targetSetting);\n        setTargetSetting(targetSetting); // setTargetWorkTime(targetSetting?.targetWorkTime);\n        // setTargetWakeHour(targetSetting?.targetWakeTime.hour);\n        // setTargetBedHour(targetSetting?.targetBedTime.hour);\n        // setTargetWakeMinute(targetSetting?.targetWakeTime.minute);\n        // setTargetBedMinute(targetSetting?.targetBedTime.minute);\n      } else {\n        const targetWakeTime = (targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetWakeHour) && (targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetWakeMinute);\n        const targetBedTime = (targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetBedHour) && (targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetBedMinute);\n        let errText = `[ERROR] ${(targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetWorkTime) ? \"\" : \"TargetWorkTime\"}${!(targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetWakeTime) + !(targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetBedTime) > 0 && !(targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetWorkTime) ? \", \" : \"\"}${(targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetWakeTime) ? \"\" : \"TargetWakeTime\"}${!(targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetBedTime) > 0 && !(targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetWakeTime) ? \", \" : \"\"}${(targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetBedTime) ? \"\" : \"TargetBedtime\"} ${!(targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetWorkTime) + !(targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetWakeTime) + !(targetSetting === null || targetSetting === void 0 ? void 0 : targetSetting.targetBedTime) > 1 ? \"are\" : \"is\"} not entered.`;\n        throw new Error(errText);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  }; // const targetSetting = makeTargetSetting(\n  //   targetWorkTime,\n  //   targetWakeHour,\n  //   targetBedHour,\n  //   targetWakeMinute,\n  //   targetBedMinute\n  // );\n\n\n  return {\n    setTargetTime,\n    targetSetting,\n    isSettingHookLoading\n  };\n};\n\n_s(useTargetSetting, \"FAJLMV1zYgkz6vNEfeXacb7dXV4=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useTargetSetting.js"],"names":["useEffect","useState","API","APIv2","makeTargetSetting","targetWorkTime","targetWakeHour","targetWakeMinute","targetBedHour","targetBedMinute","targetWakeTime","hour","minute","targetBedTime","makeEmptySetting","useTargetSetting","user","isLoginLoading","console","log","targetSetting","setTargetSetting","isSettingHookLoading","setLoad","getUserSetting","data","userSetting","get","settingObj","Error","error","alert","validator","setTargetTime","willUpdate","edit","errText"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nconst makeTargetSetting = (\n  targetWorkTime,\n  targetWakeHour,\n  targetWakeMinute,\n  targetBedHour,\n  targetBedMinute\n) => {\n  return {\n    targetWorkTime,\n    targetWakeTime: { hour: targetWakeHour, minute: targetWakeMinute },\n    targetBedTime: { hour: targetBedHour, minute: targetBedMinute },\n  };\n};\nconst makeEmptySetting = () => makeTargetSetting(-1, -1, -1, -1, -1);\nexport const useTargetSetting = (user, isLoginLoading) => {\n  console.log(\"UPDATE SETTING HOOK USER: \", user, isLoginLoading);\n  const [targetSetting, setTargetSetting] = useState(makeEmptySetting());\n  // const [targetWorkTime, setTargetWorkTime] = useState(-1);\n  // const [targetWakeHour, setTargetWakeHour] = useState(-1);\n  // const [targetBedHour, setTargetBedHour] = useState(-1);\n  // const [targetWakeMinute, setTargetWakeMinute] = useState(-1);\n  // const [targetBedMinute, setTargetBedMinute] = useState(-1);\n  const [isSettingHookLoading, setLoad] = useState(true);\n  const getUserSetting = async () => {\n    try {\n      console.log(\"SETTING USE EFFECT : \", user, isLoginLoading);\n      if (user && !isLoginLoading) {\n        console.log(\"SETTIN-G\", user);\n        // setLoad(true);\n        const data = await APIv2.userSetting(user).get(); //API.get(`/auth/setting/${user}`);\n        const settingObj = data?.data;\n        if (!data) throw new Error(\"Cannot find data\");\n        setTargetSetting(settingObj);\n        setLoad(false);\n        // setTargetWorkTime(settingObj?.targetWorkTime);\n        // setTargetWakeHour(settingObj?.targetWakeTime.hour);\n        // setTargetBedHour(settingObj?.targetBedTime.hour);\n        // setTargetWakeMinute(settingObj?.targetWakeTime.minute);\n        // setTargetBedMinute(settingObj?.targetBedTime.minute);\n      } else {\n        if (!isLoginLoading) setLoad(false);\n        //\n      }\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n      // history.push(\"/setting\");\n    }\n  };\n  useEffect(() => {\n    getUserSetting();\n  }, [user, isLoginLoading]);\n\n  const validator = (targetSetting) => {\n    return (\n      targetSetting.targetWorkTime !== -1 &&\n      targetSetting.targetWakeTime.hour !== -1 &&\n      targetSetting.targetBedTime.hour !== -1 &&\n      targetSetting.targetWakeTime.minute !== -1 &&\n      targetSetting.targetBedTime.minute !== -1\n    );\n  };\n  const setTargetTime = (targetSetting) => {\n    try {\n      let willUpdate = true;\n      console.log(\"EDIT TARGET\");\n      if (typeof validator === \"function\")\n        willUpdate = validator(targetSetting);\n      if (willUpdate) {\n        console.log(\"API START~~\");\n        APIv2.userSetting(user).edit(targetSetting);\n        setTargetSetting(targetSetting);\n        // setTargetWorkTime(targetSetting?.targetWorkTime);\n        // setTargetWakeHour(targetSetting?.targetWakeTime.hour);\n        // setTargetBedHour(targetSetting?.targetBedTime.hour);\n        // setTargetWakeMinute(targetSetting?.targetWakeTime.minute);\n        // setTargetBedMinute(targetSetting?.targetBedTime.minute);\n      } else {\n        const targetWakeTime =\n          targetSetting?.targetWakeHour && targetSetting?.targetWakeMinute;\n        const targetBedTime =\n          targetSetting?.targetBedHour && targetSetting?.targetBedMinute;\n        let errText = `[ERROR] ${\n          targetSetting?.targetWorkTime ? \"\" : \"TargetWorkTime\"\n        }${\n          !targetSetting?.targetWakeTime + !targetSetting?.targetBedTime > 0 &&\n          !targetSetting?.targetWorkTime\n            ? \", \"\n            : \"\"\n        }${targetSetting?.targetWakeTime ? \"\" : \"TargetWakeTime\"}${\n          !targetSetting?.targetBedTime > 0 && !targetSetting?.targetWakeTime\n            ? \", \"\n            : \"\"\n        }${targetSetting?.targetBedTime ? \"\" : \"TargetBedtime\"} ${\n          !targetSetting?.targetWorkTime +\n            !targetSetting?.targetWakeTime +\n            !targetSetting?.targetBedTime >\n          1\n            ? \"are\"\n            : \"is\"\n        } not entered.`;\n        throw new Error(errText);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  // const targetSetting = makeTargetSetting(\n  //   targetWorkTime,\n  //   targetWakeHour,\n  //   targetBedHour,\n  //   targetWakeMinute,\n  //   targetBedMinute\n  // );\n  return {\n    setTargetTime,\n    targetSetting,\n    isSettingHookLoading,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}