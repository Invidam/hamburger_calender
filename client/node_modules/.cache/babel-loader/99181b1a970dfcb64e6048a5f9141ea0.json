{"ast":null,"code":"const errors = require('../errors');\n\nconst importKey = require('./import');\n\nconst RSAKey = require('./key/rsa');\n\nconst ECKey = require('./key/ec');\n\nconst OKPKey = require('./key/okp');\n\nconst OctKey = require('./key/oct');\n\nconst generate = async (kty, crvOrSize, params, generatePrivate = true) => {\n  switch (kty) {\n    case 'RSA':\n      return importKey(await RSAKey.generate(crvOrSize, generatePrivate), params);\n\n    case 'EC':\n      return importKey(await ECKey.generate(crvOrSize, generatePrivate), params);\n\n    case 'OKP':\n      return importKey(await OKPKey.generate(crvOrSize, generatePrivate), params);\n\n    case 'oct':\n      return importKey(await OctKey.generate(crvOrSize, generatePrivate), params);\n\n    default:\n      throw new errors.JOSENotSupported(`unsupported key type: ${kty}`);\n  }\n};\n\nconst generateSync = (kty, crvOrSize, params, generatePrivate = true) => {\n  switch (kty) {\n    case 'RSA':\n      return importKey(RSAKey.generateSync(crvOrSize, generatePrivate), params);\n\n    case 'EC':\n      return importKey(ECKey.generateSync(crvOrSize, generatePrivate), params);\n\n    case 'OKP':\n      return importKey(OKPKey.generateSync(crvOrSize, generatePrivate), params);\n\n    case 'oct':\n      return importKey(OctKey.generateSync(crvOrSize, generatePrivate), params);\n\n    default:\n      throw new errors.JOSENotSupported(`unsupported key type: ${kty}`);\n  }\n};\n\nmodule.exports.generate = generate;\nmodule.exports.generateSync = generateSync;","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/jwk/generate.js"],"names":["errors","require","importKey","RSAKey","ECKey","OKPKey","OctKey","generate","kty","crvOrSize","params","generatePrivate","JOSENotSupported","generateSync","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,MAAMC,SAAS,GAAGD,OAAO,CAAC,UAAD,CAAzB;;AAEA,MAAME,MAAM,GAAGF,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,WAAD,CAAtB;;AAEA,MAAMM,QAAQ,GAAG,OAAOC,GAAP,EAAYC,SAAZ,EAAuBC,MAAvB,EAA+BC,eAAe,GAAG,IAAjD,KAA0D;AACzE,UAAQH,GAAR;AACE,SAAK,KAAL;AACE,aAAON,SAAS,CACd,MAAMC,MAAM,CAACI,QAAP,CAAgBE,SAAhB,EAA2BE,eAA3B,CADQ,EAEdD,MAFc,CAAhB;;AAIF,SAAK,IAAL;AACE,aAAOR,SAAS,CACd,MAAME,KAAK,CAACG,QAAN,CAAeE,SAAf,EAA0BE,eAA1B,CADQ,EAEdD,MAFc,CAAhB;;AAIF,SAAK,KAAL;AACE,aAAOR,SAAS,CACd,MAAMG,MAAM,CAACE,QAAP,CAAgBE,SAAhB,EAA2BE,eAA3B,CADQ,EAEdD,MAFc,CAAhB;;AAIF,SAAK,KAAL;AACE,aAAOR,SAAS,CACd,MAAMI,MAAM,CAACC,QAAP,CAAgBE,SAAhB,EAA2BE,eAA3B,CADQ,EAEdD,MAFc,CAAhB;;AAIF;AACE,YAAM,IAAIV,MAAM,CAACY,gBAAX,CAA6B,yBAAwBJ,GAAI,EAAzD,CAAN;AAtBJ;AAwBD,CAzBD;;AA2BA,MAAMK,YAAY,GAAG,CAACL,GAAD,EAAMC,SAAN,EAAiBC,MAAjB,EAAyBC,eAAe,GAAG,IAA3C,KAAoD;AACvE,UAAQH,GAAR;AACE,SAAK,KAAL;AACE,aAAON,SAAS,CAACC,MAAM,CAACU,YAAP,CAAoBJ,SAApB,EAA+BE,eAA/B,CAAD,EAAkDD,MAAlD,CAAhB;;AACF,SAAK,IAAL;AACE,aAAOR,SAAS,CAACE,KAAK,CAACS,YAAN,CAAmBJ,SAAnB,EAA8BE,eAA9B,CAAD,EAAiDD,MAAjD,CAAhB;;AACF,SAAK,KAAL;AACE,aAAOR,SAAS,CAACG,MAAM,CAACQ,YAAP,CAAoBJ,SAApB,EAA+BE,eAA/B,CAAD,EAAkDD,MAAlD,CAAhB;;AACF,SAAK,KAAL;AACE,aAAOR,SAAS,CAACI,MAAM,CAACO,YAAP,CAAoBJ,SAApB,EAA+BE,eAA/B,CAAD,EAAkDD,MAAlD,CAAhB;;AACF;AACE,YAAM,IAAIV,MAAM,CAACY,gBAAX,CAA6B,yBAAwBJ,GAAI,EAAzD,CAAN;AAVJ;AAYD,CAbD;;AAeAM,MAAM,CAACC,OAAP,CAAeR,QAAf,GAA0BA,QAA1B;AACAO,MAAM,CAACC,OAAP,CAAeF,YAAf,GAA8BA,YAA9B","sourcesContent":["const errors = require('../errors')\n\nconst importKey = require('./import')\n\nconst RSAKey = require('./key/rsa')\nconst ECKey = require('./key/ec')\nconst OKPKey = require('./key/okp')\nconst OctKey = require('./key/oct')\n\nconst generate = async (kty, crvOrSize, params, generatePrivate = true) => {\n  switch (kty) {\n    case 'RSA':\n      return importKey(\n        await RSAKey.generate(crvOrSize, generatePrivate),\n        params\n      )\n    case 'EC':\n      return importKey(\n        await ECKey.generate(crvOrSize, generatePrivate),\n        params\n      )\n    case 'OKP':\n      return importKey(\n        await OKPKey.generate(crvOrSize, generatePrivate),\n        params\n      )\n    case 'oct':\n      return importKey(\n        await OctKey.generate(crvOrSize, generatePrivate),\n        params\n      )\n    default:\n      throw new errors.JOSENotSupported(`unsupported key type: ${kty}`)\n  }\n}\n\nconst generateSync = (kty, crvOrSize, params, generatePrivate = true) => {\n  switch (kty) {\n    case 'RSA':\n      return importKey(RSAKey.generateSync(crvOrSize, generatePrivate), params)\n    case 'EC':\n      return importKey(ECKey.generateSync(crvOrSize, generatePrivate), params)\n    case 'OKP':\n      return importKey(OKPKey.generateSync(crvOrSize, generatePrivate), params)\n    case 'oct':\n      return importKey(OctKey.generateSync(crvOrSize, generatePrivate), params)\n    default:\n      throw new errors.JOSENotSupported(`unsupported key type: ${kty}`)\n  }\n}\n\nmodule.exports.generate = generate\nmodule.exports.generateSync = generateSync\n"]},"metadata":{},"sourceType":"script"}