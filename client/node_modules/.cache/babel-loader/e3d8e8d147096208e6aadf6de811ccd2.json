{"ast":null,"code":"const {\n  createSign,\n  createVerify\n} = require('crypto');\n\nconst {\n  KEYOBJECT\n} = require('../help/consts');\n\nconst resolveNodeAlg = require('../help/node_alg');\n\nconst {\n  asInput\n} = require('../help/key_object');\n\nconst sign = (nodeAlg, {\n  [KEYOBJECT]: keyObject\n}, payload) => {\n  return createSign(nodeAlg).update(payload).sign(asInput(keyObject, false));\n};\n\nconst verify = (nodeAlg, {\n  [KEYOBJECT]: keyObject\n}, payload, signature) => {\n  return createVerify(nodeAlg).update(payload).verify(asInput(keyObject, true), signature);\n};\n\nconst LENGTHS = {\n  RS256: 0,\n  RS384: 624,\n  RS512: 752\n};\n\nmodule.exports = (JWA, JWK) => {\n  ['RS256', 'RS384', 'RS512'].forEach(jwaAlg => {\n    const nodeAlg = resolveNodeAlg(jwaAlg);\n    JWA.sign.set(jwaAlg, sign.bind(undefined, nodeAlg));\n    JWA.verify.set(jwaAlg, verify.bind(undefined, nodeAlg));\n\n    JWK.RSA.sign[jwaAlg] = key => key.private && JWK.RSA.verify[jwaAlg](key);\n\n    JWK.RSA.verify[jwaAlg] = key => (key.use === 'sig' || key.use === undefined) && key.length >= LENGTHS[jwaAlg];\n  });\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jose/lib/jwa/rsassa.js"],"names":["createSign","createVerify","require","KEYOBJECT","resolveNodeAlg","asInput","sign","nodeAlg","keyObject","payload","update","verify","signature","LENGTHS","RS256","RS384","RS512","module","exports","JWA","JWK","forEach","jwaAlg","set","bind","undefined","RSA","key","private","use","length"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAA+BC,OAAO,CAAC,QAAD,CAA5C;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAcH,OAAO,CAAC,oBAAD,CAA3B;;AAEA,MAAMI,IAAI,GAAG,CAACC,OAAD,EAAU;AAAE,GAACJ,SAAD,GAAaK;AAAf,CAAV,EAAsCC,OAAtC,KAAkD;AAC7D,SAAOT,UAAU,CAACO,OAAD,CAAV,CAAoBG,MAApB,CAA2BD,OAA3B,EAAoCH,IAApC,CAAyCD,OAAO,CAACG,SAAD,EAAY,KAAZ,CAAhD,CAAP;AACD,CAFD;;AAIA,MAAMG,MAAM,GAAG,CAACJ,OAAD,EAAU;AAAE,GAACJ,SAAD,GAAaK;AAAf,CAAV,EAAsCC,OAAtC,EAA+CG,SAA/C,KAA6D;AAC1E,SAAOX,YAAY,CAACM,OAAD,CAAZ,CAAsBG,MAAtB,CAA6BD,OAA7B,EAAsCE,MAAtC,CAA6CN,OAAO,CAACG,SAAD,EAAY,IAAZ,CAApD,EAAuEI,SAAvE,CAAP;AACD,CAFD;;AAIA,MAAMC,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,CADO;AAEdC,EAAAA,KAAK,EAAE,GAFO;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAhB;;AAMAC,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B,GAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4BC,OAA5B,CAAqCC,MAAD,IAAY;AAC9C,UAAMf,OAAO,GAAGH,cAAc,CAACkB,MAAD,CAA9B;AACAH,IAAAA,GAAG,CAACb,IAAJ,CAASiB,GAAT,CAAaD,MAAb,EAAqBhB,IAAI,CAACkB,IAAL,CAAUC,SAAV,EAAqBlB,OAArB,CAArB;AACAY,IAAAA,GAAG,CAACR,MAAJ,CAAWY,GAAX,CAAeD,MAAf,EAAuBX,MAAM,CAACa,IAAP,CAAYC,SAAZ,EAAuBlB,OAAvB,CAAvB;;AACAa,IAAAA,GAAG,CAACM,GAAJ,CAAQpB,IAAR,CAAagB,MAAb,IAAuBK,GAAG,IAAIA,GAAG,CAACC,OAAJ,IAAeR,GAAG,CAACM,GAAJ,CAAQf,MAAR,CAAeW,MAAf,EAAuBK,GAAvB,CAA7C;;AACAP,IAAAA,GAAG,CAACM,GAAJ,CAAQf,MAAR,CAAeW,MAAf,IAAyBK,GAAG,IAAI,CAACA,GAAG,CAACE,GAAJ,KAAY,KAAZ,IAAqBF,GAAG,CAACE,GAAJ,KAAYJ,SAAlC,KAAgDE,GAAG,CAACG,MAAJ,IAAcjB,OAAO,CAACS,MAAD,CAArG;AACD,GAND;AAOD,CARD","sourcesContent":["const { createSign, createVerify } = require('crypto')\n\nconst { KEYOBJECT } = require('../help/consts')\nconst resolveNodeAlg = require('../help/node_alg')\nconst { asInput } = require('../help/key_object')\n\nconst sign = (nodeAlg, { [KEYOBJECT]: keyObject }, payload) => {\n  return createSign(nodeAlg).update(payload).sign(asInput(keyObject, false))\n}\n\nconst verify = (nodeAlg, { [KEYOBJECT]: keyObject }, payload, signature) => {\n  return createVerify(nodeAlg).update(payload).verify(asInput(keyObject, true), signature)\n}\n\nconst LENGTHS = {\n  RS256: 0,\n  RS384: 624,\n  RS512: 752\n}\n\nmodule.exports = (JWA, JWK) => {\n  ['RS256', 'RS384', 'RS512'].forEach((jwaAlg) => {\n    const nodeAlg = resolveNodeAlg(jwaAlg)\n    JWA.sign.set(jwaAlg, sign.bind(undefined, nodeAlg))\n    JWA.verify.set(jwaAlg, verify.bind(undefined, nodeAlg))\n    JWK.RSA.sign[jwaAlg] = key => key.private && JWK.RSA.verify[jwaAlg](key)\n    JWK.RSA.verify[jwaAlg] = key => (key.use === 'sig' || key.use === undefined) && key.length >= LENGTHS[jwaAlg]\n  })\n}\n"]},"metadata":{},"sourceType":"script"}