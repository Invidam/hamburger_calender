{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport const useTodoSort = (initSortTypeIdx, sortTypeCnt, sortTypes, getTodoList) => {\n  _s();\n\n  const [sortTypeIdx, setSortTypeIdx] = useState(initSortTypeIdx);\n\n  const getNextSortType = idx => (idx + 1) % sortTypes === 0 ? idx - sortTypes + 1 : idx + 1;\n\n  const onClickByTabIdx = tabIdx => {\n    // 같은 소속이었다면\n    if (Math.floor(sortTypeIdx / sortTypes) === tabIdx) setSortTypeIdx(getNextSortType(sortTypeIdx));else setSortTypeIdx(tabIdx * sortTypeCnt + 1);\n  };\n\n  useEffect(() => getTodoList(sortTypeIdx), [sortTypeIdx]);\n  return [sortTypeIdx, onClickByTabIdx];\n};\n\n_s(useTodoSort, \"pzwm9icHPj/pSV4uTqqV9EaV6Mg=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/todolist/useTodoSort.js"],"names":["useEffect","useState","useTodoSort","initSortTypeIdx","sortTypeCnt","sortTypes","getTodoList","sortTypeIdx","setSortTypeIdx","getNextSortType","idx","onClickByTabIdx","tabIdx","Math","floor"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,WAAW,GAAG,CACzBC,eADyB,EAEzBC,WAFyB,EAGzBC,SAHyB,EAIzBC,WAJyB,KAKtB;AAAA;;AACH,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAACE,eAAD,CAA9C;;AACA,QAAMM,eAAe,GAAIC,GAAD,IACtB,CAACA,GAAG,GAAG,CAAP,IAAYL,SAAZ,KAA0B,CAA1B,GAA8BK,GAAG,GAAGL,SAAN,GAAkB,CAAhD,GAAoDK,GAAG,GAAG,CAD5D;;AAEA,QAAMC,eAAe,GAAIC,MAAD,IAAY;AAClC;AACA,QAAIC,IAAI,CAACC,KAAL,CAAWP,WAAW,GAAGF,SAAzB,MAAwCO,MAA5C,EACEJ,cAAc,CAACC,eAAe,CAACF,WAAD,CAAhB,CAAd,CADF,KAEKC,cAAc,CAACI,MAAM,GAAGR,WAAT,GAAuB,CAAxB,CAAd;AACN,GALD;;AAMAJ,EAAAA,SAAS,CAAC,MAAMM,WAAW,CAACC,WAAD,CAAlB,EAAiC,CAACA,WAAD,CAAjC,CAAT;AACA,SAAO,CAACA,WAAD,EAAcI,eAAd,CAAP;AACD,CAjBM;;GAAMT,W","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport const useTodoSort = (\n  initSortTypeIdx,\n  sortTypeCnt,\n  sortTypes,\n  getTodoList\n) => {\n  const [sortTypeIdx, setSortTypeIdx] = useState(initSortTypeIdx);\n  const getNextSortType = (idx) =>\n    (idx + 1) % sortTypes === 0 ? idx - sortTypes + 1 : idx + 1;\n  const onClickByTabIdx = (tabIdx) => {\n    // 같은 소속이었다면\n    if (Math.floor(sortTypeIdx / sortTypes) === tabIdx)\n      setSortTypeIdx(getNextSortType(sortTypeIdx));\n    else setSortTypeIdx(tabIdx * sortTypeCnt + 1);\n  };\n  useEffect(() => getTodoList(sortTypeIdx), [sortTypeIdx]);\n  return [sortTypeIdx, onClickByTabIdx];\n};\n"]},"metadata":{},"sourceType":"module"}