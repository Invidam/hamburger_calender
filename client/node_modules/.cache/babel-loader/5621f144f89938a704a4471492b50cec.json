{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nexport const useUpdateTime = key => {\n  _s();\n\n  const initVal = window.localStorage.getItem(key) ? JSON.parse(window.localStorage.getItem(key)) : null;\n  console.log(\"INIT VAL: \", initVal);\n  const [recordTime, setRecordTime] = useState(initVal);\n  if (!recordTime) axios({\n    headers: {\n      Authorization: \"\",\n      \"Content-Type\": \"application/json\"\n    },\n    url: \"/api/get-time\",\n    method: \"post\",\n    data: {\n      user: \"TEST\",\n      key\n    }\n  }).then(data => {\n    console.log(\"HOOK DATA: \", key, data === null || data === void 0 ? void 0 : data.data);\n\n    if (data === null || data === void 0 ? void 0 : data.data) {\n      setRecordTime(data === null || data === void 0 ? void 0 : data.data);\n      window.localStorage.setItem(key, JSON.stringify(data === null || data === void 0 ? void 0 : data.data));\n    }\n  });\n\n  const updateRecordTime = timeObj => {\n    if (timeObj) {\n      axios.post(\"/api/record-time\", {\n        user: \"TEST\",\n        key,\n        value: timeObj\n      });\n      window.localStorage.setItem(key, JSON.stringify(timeObj));\n      setRecordTime(timeObj);\n    } else {\n      timeObj = {\n        hour: -1,\n        minute: -1\n      };\n      axios.post(\"/api/record-time\", {\n        user: \"TEST\",\n        key,\n        value: timeObj\n      });\n      window.localStorage.setItem(key, JSON.stringify(timeObj));\n      setRecordTime(timeObj);\n    }\n  };\n\n  const onClick = event => {\n    event.preventDefault();\n    const [hour, minute] = new Date().toTimeString().split(\":\").slice(0, 2).map(numChar => parseInt(numChar));\n    const timeObj = {\n      hour,\n      minute\n    };\n    updateRecordTime(timeObj);\n  };\n\n  return [recordTime, onClick, updateRecordTime];\n};\n\n_s(useUpdateTime, \"4aDt5VS2nQ1vijZ0/WcWOYBhy/A=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/time/useUpdateTime.js"],"names":["axios","useState","useEffect","useUpdateTime","key","initVal","window","localStorage","getItem","JSON","parse","console","log","recordTime","setRecordTime","headers","Authorization","url","method","data","user","then","setItem","stringify","updateRecordTime","timeObj","post","value","hour","minute","onClick","event","preventDefault","Date","toTimeString","split","slice","map","numChar","parseInt"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\n\nexport const useUpdateTime = (key) => {\n  const initVal = window.localStorage.getItem(key)\n    ? JSON.parse(window.localStorage.getItem(key))\n    : null;\n  console.log(\"INIT VAL: \", initVal);\n  const [recordTime, setRecordTime] = useState(initVal);\n  if (!recordTime)\n    axios({\n      headers: {\n        Authorization: \"\",\n        \"Content-Type\": \"application/json\",\n      },\n      url: \"/api/get-time\",\n      method: \"post\",\n      data: { user: \"TEST\", key },\n    }).then((data) => {\n      console.log(\"HOOK DATA: \", key, data?.data);\n      if (data?.data) {\n        setRecordTime(data?.data);\n        window.localStorage.setItem(key, JSON.stringify(data?.data));\n      }\n    });\n  const updateRecordTime = (timeObj) => {\n    if (timeObj) {\n      axios.post(\"/api/record-time\", { user: \"TEST\", key, value: timeObj });\n      window.localStorage.setItem(key, JSON.stringify(timeObj));\n      setRecordTime(timeObj);\n    } else {\n      timeObj = { hour: -1, minute: -1 };\n      axios.post(\"/api/record-time\", { user: \"TEST\", key, value: timeObj });\n      window.localStorage.setItem(key, JSON.stringify(timeObj));\n      setRecordTime(timeObj);\n    }\n  };\n  const onClick = (event) => {\n    event.preventDefault();\n    const [hour, minute] = new Date()\n      .toTimeString()\n      .split(\":\")\n      .slice(0, 2)\n      .map((numChar) => parseInt(numChar));\n    const timeObj = { hour, minute };\n    updateRecordTime(timeObj);\n  };\n  return [recordTime, onClick, updateRecordTime];\n};\n"]},"metadata":{},"sourceType":"module"}