{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { APIv2 } from \"../../../tools/API\";\nimport { LocalStroage } from \"../../../tools/LocalStorage\";\nexport const isEmptyWorkList = workList => workList ? !Object.keys(workList).length : true;\nexport const isEmptyWork = workObj => workObj ? !Object.keys(workObj).length : true;\n\nconst getEmptyWorkList = () => {\n  return {};\n};\n\nconst checkWorkList = workList => isEmptyWorkList(workList) ? getEmptyWorkList() : workList; // const getInitList = (user) =>\n//   !user && window.localStorage.getItem(\"workList\")\n//     ? JSON.parse(window.localStorage.getItem(\"workList\"))\n//     : [];\n\n\nexport const useWorkList = (user, date) => {\n  _s();\n\n  // const initList = getInitList();\n  const [workList, setWorkList] = useState(\"Loading\");\n\n  const getWorkList = async () => {\n    try {\n      let resWorkList;\n\n      if (user) {\n        console.log(\"BEF: \", workList);\n        const data = await APIv2.workList(user, date).get();\n        resWorkList = checkWorkList(data === null || data === void 0 ? void 0 : data.data);\n        console.log(\"USEWORKLIST, data catch\");\n        console.log(\"USEWORKLIST DATA  CATCH  AFT\");\n        setWorkList(resWorkList);\n      } else {\n        resWorkList = LocalStroage.workList().get();\n        console.log(\"USEWORKLIST DATA NO CATCH [][] AFT\");\n        setWorkList(resWorkList);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    getWorkList();\n  }, [date, user]);\n\n  const setWork = workObj => {\n    const id = workObj.id;\n    const _workList = { ...workList\n    };\n    return {\n      create: async () => {\n        _workList[id] = workObj;\n        setWorkList(_workList);\n        if (user) await APIv2.workList(user, date).create(workObj);else LocalStroage.workList().set(_workList);\n      },\n      edit: async () => {\n        _workList[id] = workObj;\n        setWorkList(_workList);\n        if (user) await APIv2.workList(user, date).edit(workObj);else LocalStroage.workList().set(_workList);\n      },\n      delete: async () => {\n        if (!delete _workList[id]) throw new Error(\"Cannot Delete WorkItem\");\n        setWorkList(_workList);\n        if (user) await APIv2.workList(user, date).delete(workObj);else LocalStroage.workList().set(_workList);\n      }\n    };\n  };\n\n  const updateWorkList = _workList => {\n    _workList = checkWorkList(_workList);\n    setWorkList(_workList);\n\n    if (user) {// API.post(`/api/${user}/${date}/worklist/worklist`, {\n      //   user: \"TEST\",\n      //   value: _workList,\n      // });\n    } else window.localStorage.setItem(\"workList\", JSON.stringify(_workList));\n  };\n\n  return [workList, updateWorkList, setWork];\n};\n\n_s(useWorkList, \"MzqcWxQy5CtaiV7n+6JqR6Y57uI=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/work/useWorkList.js"],"names":["useEffect","useState","APIv2","LocalStroage","isEmptyWorkList","workList","Object","keys","length","isEmptyWork","workObj","getEmptyWorkList","checkWorkList","useWorkList","user","date","setWorkList","getWorkList","resWorkList","console","log","data","get","error","alert","setWork","id","_workList","create","set","edit","delete","Error","updateWorkList","window","localStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { APIv2 } from \"../../../tools/API\";\nimport { LocalStroage } from \"../../../tools/LocalStorage\";\n\nexport const isEmptyWorkList = (workList) =>\n  workList ? !Object.keys(workList).length : true;\nexport const isEmptyWork = (workObj) =>\n  workObj ? !Object.keys(workObj).length : true;\nconst getEmptyWorkList = () => {\n  return {};\n};\nconst checkWorkList = (workList) =>\n  isEmptyWorkList(workList) ? getEmptyWorkList() : workList;\n\n// const getInitList = (user) =>\n//   !user && window.localStorage.getItem(\"workList\")\n//     ? JSON.parse(window.localStorage.getItem(\"workList\"))\n//     : [];\n\nexport const useWorkList = (user, date) => {\n  // const initList = getInitList();\n  const [workList, setWorkList] = useState(\"Loading\");\n  const getWorkList = async () => {\n    try {\n      let resWorkList;\n      if (user) {\n        console.log(\"BEF: \", workList);\n        const data = await APIv2.workList(user, date).get();\n        resWorkList = checkWorkList(data?.data);\n        console.log(\"USEWORKLIST, data catch\");\n        console.log(\"USEWORKLIST DATA  CATCH  AFT\");\n        setWorkList(resWorkList);\n      } else {\n        resWorkList = LocalStroage.workList().get();\n        console.log(\"USEWORKLIST DATA NO CATCH [][] AFT\");\n        setWorkList(resWorkList);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    getWorkList();\n  }, [date, user]);\n\n  const setWork = (workObj) => {\n    const id = workObj.id;\n    const _workList = { ...workList };\n    return {\n      create: async () => {\n        _workList[id] = workObj;\n        setWorkList(_workList);\n        if (user) await APIv2.workList(user, date).create(workObj);\n        else LocalStroage.workList().set(_workList);\n      },\n      edit: async () => {\n        _workList[id] = workObj;\n        setWorkList(_workList);\n        if (user) await APIv2.workList(user, date).edit(workObj);\n        else LocalStroage.workList().set(_workList);\n      },\n      delete: async () => {\n        if (!delete _workList[id]) throw new Error(\"Cannot Delete WorkItem\");\n        setWorkList(_workList);\n        if (user) await APIv2.workList(user, date).delete(workObj);\n        else LocalStroage.workList().set(_workList);\n      },\n    };\n  };\n  const updateWorkList = (_workList) => {\n    _workList = checkWorkList(_workList);\n    setWorkList(_workList);\n    if (user) {\n      // API.post(`/api/${user}/${date}/worklist/worklist`, {\n      //   user: \"TEST\",\n      //   value: _workList,\n      // });\n    } else window.localStorage.setItem(\"workList\", JSON.stringify(_workList));\n  };\n  return [workList, updateWorkList, setWork];\n};\n"]},"metadata":{},"sourceType":"module"}