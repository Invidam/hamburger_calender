{"ast":null,"code":"const debug = require('debug');\n\nconst {\n  retrieveSigningKeys\n} = require('./utils');\n\nconst {\n  request,\n  cacheSigningKey,\n  rateLimitSigningKey,\n  getKeysInterceptor,\n  callbackSupport\n} = require('./wrappers');\n\nconst JwksError = require('./errors/JwksError');\n\nconst SigningKeyNotFoundError = require('./errors/SigningKeyNotFoundError');\n\nclass JwksClient {\n  constructor(options) {\n    this.options = {\n      rateLimit: false,\n      cache: true,\n      timeout: 30000,\n      ...options\n    };\n    this.logger = debug('jwks'); // Initialize wrappers.\n\n    if (this.options.getKeysInterceptor) {\n      this.getSigningKey = getKeysInterceptor(this, options);\n    }\n\n    if (this.options.rateLimit) {\n      this.getSigningKey = rateLimitSigningKey(this, options);\n    }\n\n    if (this.options.cache) {\n      this.getSigningKey = cacheSigningKey(this, options);\n    }\n\n    this.getSigningKey = callbackSupport(this, options);\n  }\n\n  async getKeys() {\n    this.logger(`Fetching keys from '${this.options.jwksUri}'`);\n\n    try {\n      const res = await request({\n        uri: this.options.jwksUri,\n        headers: this.options.requestHeaders,\n        agent: this.options.requestAgent,\n        timeout: this.options.timeout,\n        fetcher: this.options.fetcher\n      });\n      this.logger('Keys:', res.keys);\n      return res.keys;\n    } catch (err) {\n      const {\n        errorMsg\n      } = err;\n      this.logger('Failure:', errorMsg || err);\n      throw errorMsg ? new JwksError(errorMsg) : err;\n    }\n  }\n\n  async getSigningKeys() {\n    const keys = await this.getKeys();\n\n    if (!keys || !keys.length) {\n      throw new JwksError('The JWKS endpoint did not contain any keys');\n    }\n\n    const signingKeys = retrieveSigningKeys(keys);\n\n    if (!signingKeys.length) {\n      throw new JwksError('The JWKS endpoint did not contain any signing keys');\n    }\n\n    this.logger('Signing Keys:', signingKeys);\n    return signingKeys;\n  }\n\n  async getSigningKey(kid) {\n    this.logger(`Fetching signing key for '${kid}'`);\n    const keys = await this.getSigningKeys();\n    const kidDefined = kid !== undefined && kid !== null;\n\n    if (!kidDefined && keys.length > 1) {\n      this.logger('No KID specified and JWKS endpoint returned more than 1 key');\n      throw new SigningKeyNotFoundError('No KID specified and JWKS endpoint returned more than 1 key');\n    }\n\n    const key = keys.find(k => !kidDefined || k.kid === kid);\n\n    if (key) {\n      return key;\n    } else {\n      this.logger(`Unable to find a signing key that matches '${kid}'`);\n      throw new SigningKeyNotFoundError(`Unable to find a signing key that matches '${kid}'`);\n    }\n  }\n\n}\n\nmodule.exports = {\n  JwksClient\n};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/jwks-rsa/src/JwksClient.js"],"names":["debug","require","retrieveSigningKeys","request","cacheSigningKey","rateLimitSigningKey","getKeysInterceptor","callbackSupport","JwksError","SigningKeyNotFoundError","JwksClient","constructor","options","rateLimit","cache","timeout","logger","getSigningKey","getKeys","jwksUri","res","uri","headers","requestHeaders","agent","requestAgent","fetcher","keys","err","errorMsg","getSigningKeys","length","signingKeys","kid","kidDefined","undefined","key","find","k","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA0BD,OAAO,CAAC,SAAD,CAAvC;;AACA,MAAM;AAAEE,EAAAA,OAAF;AAAWC,EAAAA,eAAX;AAA4BC,EAAAA,mBAA5B;AAAiDC,EAAAA,kBAAjD;AAAqEC,EAAAA;AAArE,IAAyFN,OAAO,CAAC,YAAD,CAAtG;;AACA,MAAMO,SAAS,GAAGP,OAAO,CAAC,oBAAD,CAAzB;;AACA,MAAMQ,uBAAuB,GAAGR,OAAO,CAAC,kCAAD,CAAvC;;AAEA,MAAMS,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAe;AACbC,MAAAA,SAAS,EAAE,KADE;AAEbC,MAAAA,KAAK,EAAE,IAFM;AAGbC,MAAAA,OAAO,EAAE,KAHI;AAIb,SAAGH;AAJU,KAAf;AAMA,SAAKI,MAAL,GAAchB,KAAK,CAAC,MAAD,CAAnB,CAPmB,CASnB;;AACA,QAAI,KAAKY,OAAL,CAAaN,kBAAjB,EAAqC;AACnC,WAAKW,aAAL,GAAqBX,kBAAkB,CAAC,IAAD,EAAOM,OAAP,CAAvC;AACD;;AAED,QAAI,KAAKA,OAAL,CAAaC,SAAjB,EAA4B;AAC1B,WAAKI,aAAL,GAAqBZ,mBAAmB,CAAC,IAAD,EAAOO,OAAP,CAAxC;AACD;;AACD,QAAI,KAAKA,OAAL,CAAaE,KAAjB,EAAwB;AACtB,WAAKG,aAAL,GAAqBb,eAAe,CAAC,IAAD,EAAOQ,OAAP,CAApC;AACD;;AAED,SAAKK,aAAL,GAAqBV,eAAe,CAAC,IAAD,EAAOK,OAAP,CAApC;AACD;;AAEY,QAAPM,OAAO,GAAG;AACd,SAAKF,MAAL,CAAa,uBAAsB,KAAKJ,OAAL,CAAaO,OAAQ,GAAxD;;AAEA,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMjB,OAAO,CAAC;AACxBkB,QAAAA,GAAG,EAAE,KAAKT,OAAL,CAAaO,OADM;AAExBG,QAAAA,OAAO,EAAE,KAAKV,OAAL,CAAaW,cAFE;AAGxBC,QAAAA,KAAK,EAAE,KAAKZ,OAAL,CAAaa,YAHI;AAIxBV,QAAAA,OAAO,EAAE,KAAKH,OAAL,CAAaG,OAJE;AAKxBW,QAAAA,OAAO,EAAE,KAAKd,OAAL,CAAac;AALE,OAAD,CAAzB;AAQA,WAAKV,MAAL,CAAY,OAAZ,EAAqBI,GAAG,CAACO,IAAzB;AACA,aAAOP,GAAG,CAACO,IAAX;AACD,KAXD,CAWE,OAAOC,GAAP,EAAY;AACZ,YAAM;AAAEC,QAAAA;AAAF,UAAeD,GAArB;AACA,WAAKZ,MAAL,CAAY,UAAZ,EAAwBa,QAAQ,IAAID,GAApC;AACA,YAAOC,QAAQ,GAAG,IAAIrB,SAAJ,CAAcqB,QAAd,CAAH,GAA6BD,GAA5C;AACD;AACF;;AAEmB,QAAdE,cAAc,GAAG;AACrB,UAAMH,IAAI,GAAG,MAAM,KAAKT,OAAL,EAAnB;;AAEA,QAAI,CAACS,IAAD,IAAS,CAACA,IAAI,CAACI,MAAnB,EAA2B;AACzB,YAAM,IAAIvB,SAAJ,CAAc,4CAAd,CAAN;AACD;;AAED,UAAMwB,WAAW,GAAG9B,mBAAmB,CAACyB,IAAD,CAAvC;;AAEA,QAAI,CAACK,WAAW,CAACD,MAAjB,EAAyB;AACvB,YAAM,IAAIvB,SAAJ,CAAc,oDAAd,CAAN;AACD;;AAED,SAAKQ,MAAL,CAAY,eAAZ,EAA6BgB,WAA7B;AACA,WAAOA,WAAP;AACD;;AAEkB,QAAbf,aAAa,CAAEgB,GAAF,EAAO;AACxB,SAAKjB,MAAL,CAAa,6BAA4BiB,GAAI,GAA7C;AACA,UAAMN,IAAI,GAAG,MAAM,KAAKG,cAAL,EAAnB;AAEA,UAAMI,UAAU,GAAGD,GAAG,KAAKE,SAAR,IAAqBF,GAAG,KAAK,IAAhD;;AACA,QAAI,CAACC,UAAD,IAAeP,IAAI,CAACI,MAAL,GAAc,CAAjC,EAAoC;AAClC,WAAKf,MAAL,CAAY,6DAAZ;AACA,YAAM,IAAIP,uBAAJ,CAA4B,6DAA5B,CAAN;AACD;;AAED,UAAM2B,GAAG,GAAGT,IAAI,CAACU,IAAL,CAAUC,CAAC,IAAI,CAACJ,UAAD,IAAeI,CAAC,CAACL,GAAF,KAAUA,GAAxC,CAAZ;;AACA,QAAIG,GAAJ,EAAS;AACP,aAAOA,GAAP;AACD,KAFD,MAEO;AACL,WAAKpB,MAAL,CAAa,8CAA6CiB,GAAI,GAA9D;AACA,YAAM,IAAIxB,uBAAJ,CAA6B,8CAA6CwB,GAAI,GAA9E,CAAN;AACD;AACF;;AAhFc;;AAmFjBM,MAAM,CAACC,OAAP,GAAiB;AACf9B,EAAAA;AADe,CAAjB","sourcesContent":["const debug = require('debug');\nconst { retrieveSigningKeys } = require('./utils') ;\nconst { request, cacheSigningKey, rateLimitSigningKey, getKeysInterceptor, callbackSupport } = require('./wrappers');\nconst JwksError = require('./errors/JwksError');\nconst SigningKeyNotFoundError = require('./errors/SigningKeyNotFoundError');\n\nclass JwksClient {\n  constructor(options) {\n    this.options = {\n      rateLimit: false,\n      cache: true,\n      timeout: 30000,\n      ...options\n    };\n    this.logger = debug('jwks');\n\n    // Initialize wrappers.\n    if (this.options.getKeysInterceptor) {\n      this.getSigningKey = getKeysInterceptor(this, options);\n    }\n\n    if (this.options.rateLimit) {\n      this.getSigningKey = rateLimitSigningKey(this, options);\n    }\n    if (this.options.cache) {\n      this.getSigningKey = cacheSigningKey(this, options);\n    }\n\n    this.getSigningKey = callbackSupport(this, options);\n  }\n\n  async getKeys() {\n    this.logger(`Fetching keys from '${this.options.jwksUri}'`);\n\n    try {\n      const res = await request({\n        uri: this.options.jwksUri,\n        headers: this.options.requestHeaders,\n        agent: this.options.requestAgent,\n        timeout: this.options.timeout,\n        fetcher: this.options.fetcher\n      });\n\n      this.logger('Keys:', res.keys);  \n      return res.keys;\n    } catch (err) {\n      const { errorMsg } = err;\n      this.logger('Failure:', errorMsg || err);\n      throw (errorMsg ? new JwksError(errorMsg) : err);\n    }\n  }\n\n  async getSigningKeys() {\n    const keys = await this.getKeys();\n\n    if (!keys || !keys.length) {\n      throw new JwksError('The JWKS endpoint did not contain any keys');\n    }\n\n    const signingKeys = retrieveSigningKeys(keys);\n\n    if (!signingKeys.length) {\n      throw new JwksError('The JWKS endpoint did not contain any signing keys');\n    }\n\n    this.logger('Signing Keys:', signingKeys);\n    return signingKeys;\n  }\n\n  async getSigningKey (kid) {\n    this.logger(`Fetching signing key for '${kid}'`);\n    const keys = await this.getSigningKeys();\n\n    const kidDefined = kid !== undefined && kid !== null;\n    if (!kidDefined && keys.length > 1) {\n      this.logger('No KID specified and JWKS endpoint returned more than 1 key');\n      throw new SigningKeyNotFoundError('No KID specified and JWKS endpoint returned more than 1 key');\n    }\n\n    const key = keys.find(k => !kidDefined || k.kid === kid);\n    if (key) {\n      return key;\n    } else {\n      this.logger(`Unable to find a signing key that matches '${kid}'`);\n      throw new SigningKeyNotFoundError(`Unable to find a signing key that matches '${kid}'`);\n    }\n  }\n}\n\nmodule.exports = {\n  JwksClient\n};\n"]},"metadata":{},"sourceType":"script"}