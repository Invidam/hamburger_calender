{"ast":null,"code":"// import { useState } from \"react\";\n// export const useTodoSort = (initSortTypeIdx, sortTypeCnt, sortTypes) => {\n//   const [sortTypeIdx, setSortTypeIdx] = useState(initSortTypeIdx);\n//   const getNextSortType = (idx) =>\n//     (idx + 1) % sortTypes === 0 ? idx - sortTypes + 1 : idx + 1;\n//   const onClickByTabIdx = (tabIdx) => {\n//     // 같은 소속이었다면\n//     if (Math.floor(sortTypeIdx / sortTypes) === tabIdx)\n//       setSortTypeIdx(getNextSortType(sortTypeIdx));\n//     else setSortTypeIdx(tabIdx * sortTypeCnt + 1);\n//   };\n//   return [sortTypeIdx, onClickByTabIdx];\n// };","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/todolist/useTodoSort.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { useState } from \"react\";\n\n// export const useTodoSort = (initSortTypeIdx, sortTypeCnt, sortTypes) => {\n//   const [sortTypeIdx, setSortTypeIdx] = useState(initSortTypeIdx);\n//   const getNextSortType = (idx) =>\n//     (idx + 1) % sortTypes === 0 ? idx - sortTypes + 1 : idx + 1;\n//   const onClickByTabIdx = (tabIdx) => {\n//     // 같은 소속이었다면\n//     if (Math.floor(sortTypeIdx / sortTypes) === tabIdx)\n//       setSortTypeIdx(getNextSortType(sortTypeIdx));\n//     else setSortTypeIdx(tabIdx * sortTypeCnt + 1);\n//   };\n//   return [sortTypeIdx, onClickByTabIdx];\n// };\n"]},"metadata":{},"sourceType":"module"}