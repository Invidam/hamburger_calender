{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nimport { isEqualYYYYMMDateStr } from \"../../tools/time\";\nlet befDate;\nexport const useDateInfo = (user, date) => {\n  _s();\n\n  const [dateInfo, setDateInfo] = useState();\n  const [activeDate, setActiveDate] = useState();\n  const [isDateInfoLoad, setLoad] = useState(true);\n\n  const getUserInfo = async nextDate => {\n    try {\n      console.log(\"GET USER IFNO START\");\n      setLoad(true);\n      const data = await APIv2.workList(user, nextDate).dataInfo();\n      if (!(data === null || data === void 0 ? void 0 : data.data)) throw new Error(\"Cannot found Your Work List\");\n      setDateInfo(data === null || data === void 0 ? void 0 : data.data);\n      setLoad(false);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    let nextDate = befDate === date ? activeDate ? activeDate : date : date;\n    console.log(\"BEF: \", befDate, \"CURR: \", nextDate, activeDate, date, user, !befDate || !isEqualYYYYMMDateStr(befDate, nextDate));\n    if (user && (!befDate || !isEqualYYYYMMDateStr(befDate, nextDate))) getUserInfo(nextDate);\n    befDate = nextDate;\n  }, [user, date, activeDate]);\n  return [dateInfo, isDateInfoLoad, setActiveDate];\n};\n\n_s(useDateInfo, \"o+vG9B3mBXYu9TmH/iHukq0drcw=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/calendar/useDateInfo.js"],"names":["useEffect","useState","API","APIv2","isEqualYYYYMMDateStr","befDate","useDateInfo","user","date","dateInfo","setDateInfo","activeDate","setActiveDate","isDateInfoLoad","setLoad","getUserInfo","nextDate","console","log","data","workList","dataInfo","Error","error","alert"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,iBAA3B;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,IAAIC,OAAJ;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAAA;;AACzC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,EAAxC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,EAA5C;AACA,QAAM,CAACY,cAAD,EAAiBC,OAAjB,IAA4Bb,QAAQ,CAAC,IAAD,CAA1C;;AAEA,QAAMc,WAAW,GAAG,MAAOC,QAAP,IAAoB;AACtC,QAAI;AACFC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAJ,MAAAA,OAAO,CAAC,IAAD,CAAP;AACA,YAAMK,IAAI,GAAG,MAAMhB,KAAK,CAACiB,QAAN,CAAeb,IAAf,EAAqBS,QAArB,EAA+BK,QAA/B,EAAnB;AACA,UAAI,EAACF,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAJ,EAAiB,MAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;AACjBZ,MAAAA,WAAW,CAACS,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAX;AACAL,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAPD,CAOE,OAAOS,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,GAXD;;AAYAvB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,QAAQ,GAAGX,OAAO,KAAKG,IAAZ,GAAoBG,UAAU,GAAGA,UAAH,GAAgBH,IAA9C,GAAsDA,IAArE;AACAS,IAAAA,OAAO,CAACC,GAAR,CACE,OADF,EAEEb,OAFF,EAGE,QAHF,EAIEW,QAJF,EAKEL,UALF,EAMEH,IANF,EAOED,IAPF,EAQE,CAACF,OAAD,IAAY,CAACD,oBAAoB,CAACC,OAAD,EAAUW,QAAV,CARnC;AAUA,QAAIT,IAAI,KAAK,CAACF,OAAD,IAAY,CAACD,oBAAoB,CAACC,OAAD,EAAUW,QAAV,CAAtC,CAAR,EACED,WAAW,CAACC,QAAD,CAAX;AACFX,IAAAA,OAAO,GAAGW,QAAV;AACD,GAfQ,EAeN,CAACT,IAAD,EAAOC,IAAP,EAAaG,UAAb,CAfM,CAAT;AAgBA,SAAO,CAACF,QAAD,EAAWI,cAAX,EAA2BD,aAA3B,CAAP;AACD,CAlCM;;GAAMN,W","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nimport { isEqualYYYYMMDateStr } from \"../../tools/time\";\nlet befDate;\n\nexport const useDateInfo = (user, date) => {\n  const [dateInfo, setDateInfo] = useState();\n  const [activeDate, setActiveDate] = useState();\n  const [isDateInfoLoad, setLoad] = useState(true);\n\n  const getUserInfo = async (nextDate) => {\n    try {\n      console.log(\"GET USER IFNO START\");\n      setLoad(true);\n      const data = await APIv2.workList(user, nextDate).dataInfo();\n      if (!data?.data) throw new Error(\"Cannot found Your Work List\");\n      setDateInfo(data?.data);\n      setLoad(false);\n    } catch (error) {\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    let nextDate = befDate === date ? (activeDate ? activeDate : date) : date;\n    console.log(\n      \"BEF: \",\n      befDate,\n      \"CURR: \",\n      nextDate,\n      activeDate,\n      date,\n      user,\n      !befDate || !isEqualYYYYMMDateStr(befDate, nextDate)\n    );\n    if (user && (!befDate || !isEqualYYYYMMDateStr(befDate, nextDate)))\n      getUserInfo(nextDate);\n    befDate = nextDate;\n  }, [user, date, activeDate]);\n  return [dateInfo, isDateInfoLoad, setActiveDate];\n};\n"]},"metadata":{},"sourceType":"module"}