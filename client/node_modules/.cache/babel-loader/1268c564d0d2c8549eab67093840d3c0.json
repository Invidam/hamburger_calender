{"ast":null,"code":"var _jsxFileName = \"/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js\",\n    _s = $RefreshSig$();\n\nimport Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, getToday, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport axios from \"axios\";\nimport { useDateInfo } from \"../../hooks/calendar/useDateInfo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CalendarTemplate = ({\n  user,\n  updateDateHook\n}) => {\n  _s();\n\n  // const clickDay = (event, date) => alert(\"Clicked day: \", date);\n  let [date, onUpdateDate] = updateDateHook;\n  const [mark, isDateInfoLoad, setTrigger] = useDateInfo(user, changeFormatYYYYMMDD(date));\n  console.log(\"DATE INFO: \", dateInfo); // const mark = dateInfo[0];\n\n  console.log(\"[Calendar]\");\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      className: \"caldendar\",\n      onChange: onUpdateDate,\n      value: date,\n      locale: \"en\",\n      calendarType: \"US\",\n      onClickDay: (date, event) => {\n        const localDateObj = {\n          today: getToday(),\n          clickedDate: UTCtoKTC(date)\n        };\n        localStorage.setItem(\"date\", JSON.stringify(localDateObj));\n      },\n      onActiveStartDateChange: ({\n        activeStartDate,\n        value,\n        view\n      }) => {\n        console.log(\"Changed view to: \", activeStartDate, value, view);\n        date = changeFormatYYYYMMDD(activeStartDate);\n        setTr;\n      },\n      tileClassName: ({\n        date,\n        view\n      }) => {\n        if (mark && mark.find(markedDate => markedDate === changeFormatYYYYMMDD(date))) return \"highlight\";\n      } //DB에 있는 날짜는 체크표시 해야함.\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CalendarTemplate, \"4+075MX8Z57gvOFglszTq1BI8X8=\", false, function () {\n  return [useDateInfo];\n});\n\n_c = CalendarTemplate;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarTemplate\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/components/calendar/CalendarTemplate.js"],"names":["Calendar","changeFormatYYYYMMDD","getToday","UTCtoKTC","axios","useDateInfo","CalendarTemplate","user","updateDateHook","date","onUpdateDate","mark","isDateInfoLoad","setTrigger","console","log","dateInfo","event","localDateObj","today","clickedDate","localStorage","setItem","JSON","stringify","activeStartDate","value","view","setTr","find","markedDate"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,SAASC,oBAAT,EAA+BC,QAA/B,EAAyCC,QAAzC,QAAyD,kBAAzD;AACA,OAAO,wBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,kCAA5B;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA8B;AAAA;;AAC5D;AACA,MAAI,CAACC,IAAD,EAAOC,YAAP,IAAuBF,cAA3B;AACA,QAAM,CAACG,IAAD,EAAOC,cAAP,EAAuBC,UAAvB,IAAqCR,WAAW,CACpDE,IADoD,EAEpDN,oBAAoB,CAACQ,IAAD,CAFgC,CAAtD;AAIAK,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,QAA3B,EAP4D,CAQ5D;;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,sBACE;AAAA,2BACE,QAAC,QAAD;AACE,MAAA,SAAS,EAAC,WADZ;AAEE,MAAA,QAAQ,EAAEL,YAFZ;AAGE,MAAA,KAAK,EAAED,IAHT;AAIE,MAAA,MAAM,EAAE,IAJV;AAKE,MAAA,YAAY,EAAE,IALhB;AAME,MAAA,UAAU,EAAE,CAACA,IAAD,EAAOQ,KAAP,KAAiB;AAC3B,cAAMC,YAAY,GAAG;AACnBC,UAAAA,KAAK,EAAEjB,QAAQ,EADI;AAEnBkB,UAAAA,WAAW,EAAEjB,QAAQ,CAACM,IAAD;AAFF,SAArB;AAIAY,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeN,YAAf,CAA7B;AACD,OAZH;AAaE,MAAA,uBAAuB,EAAE,CAAC;AAAEO,QAAAA,eAAF;AAAmBC,QAAAA,KAAnB;AAA0BC,QAAAA;AAA1B,OAAD,KAAsC;AAC7Db,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCU,eAAjC,EAAkDC,KAAlD,EAAyDC,IAAzD;AACAlB,QAAAA,IAAI,GAAGR,oBAAoB,CAACwB,eAAD,CAA3B;AACAG,QAAAA,KAAK;AACN,OAjBH;AAkBE,MAAA,aAAa,EAAE,CAAC;AAAEnB,QAAAA,IAAF;AAAQkB,QAAAA;AAAR,OAAD,KAAoB;AACjC,YACEhB,IAAI,IACJA,IAAI,CAACkB,IAAL,CAAWC,UAAD,IAAgBA,UAAU,KAAK7B,oBAAoB,CAACQ,IAAD,CAA7D,CAFF,EAIE,OAAO,WAAP;AACH,OAxBH,CAyBE;;AAzBF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CAzCM;;GAAMH,gB;UAGgCD,W;;;KAHhCC,gB","sourcesContent":["import Calendar from \"react-calendar\";\nimport { changeFormatYYYYMMDD, getToday, UTCtoKTC } from \"../../tools/time\";\nimport \"../../css/calendar.css\";\nimport axios from \"axios\";\nimport { useDateInfo } from \"../../hooks/calendar/useDateInfo\";\nexport const CalendarTemplate = ({ user, updateDateHook }) => {\n  // const clickDay = (event, date) => alert(\"Clicked day: \", date);\n  let [date, onUpdateDate] = updateDateHook;\n  const [mark, isDateInfoLoad, setTrigger] = useDateInfo(\n    user,\n    changeFormatYYYYMMDD(date)\n  );\n  console.log(\"DATE INFO: \", dateInfo);\n  // const mark = dateInfo[0];\n  console.log(\"[Calendar]\");\n  return (\n    <article>\n      <Calendar\n        className=\"caldendar\"\n        onChange={onUpdateDate}\n        value={date}\n        locale={\"en\"}\n        calendarType={\"US\"}\n        onClickDay={(date, event) => {\n          const localDateObj = {\n            today: getToday(),\n            clickedDate: UTCtoKTC(date),\n          };\n          localStorage.setItem(\"date\", JSON.stringify(localDateObj));\n        }}\n        onActiveStartDateChange={({ activeStartDate, value, view }) => {\n          console.log(\"Changed view to: \", activeStartDate, value, view);\n          date = changeFormatYYYYMMDD(activeStartDate);\n          setTr;\n        }}\n        tileClassName={({ date, view }) => {\n          if (\n            mark &&\n            mark.find((markedDate) => markedDate === changeFormatYYYYMMDD(date))\n          )\n            return \"highlight\";\n        }}\n        //DB에 있는 날짜는 체크표시 해야함.\n      />\n    </article>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}