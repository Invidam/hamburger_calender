{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Deque } from \"../../classes/Deque\";\nimport { Node } from \"../../classes/Node\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport { getAddedDateStr, getDiffDayInStr, subtractDayInStr } from \"../../tools/time\";\nexport const DISPLAY_LENGTH = 5;\nexport const ARRAY_LENGTH = 11;\n\nconst makeStartDate = date => getAddedDateStr(date, -1 * Math.floor(ARRAY_LENGTH / 2)); // const makeStartDate = (date) => getAddedDateStr(date, -1 * STARTDATEDIFF);\n\n\nconst getStartDate = date => LocalStroage.startDate().isEmpty() ? makeStartDate(date) : LocalStroage.startDate().get();\n\nlet befStartDate;\nlet listDeque;\n\nconst turnDeque = (deque, cnt, isLeft) => {\n  deque.print();\n  console.log(\"[deq] \", deque, cnt, isLeft);\n\n  if (isLeft) {\n    // <-- 방향으로 이동\n    while (cnt--) {\n      deque.pop_front();\n      deque.push_back(new Node());\n    }\n  } else {\n    while (cnt--) {\n      deque.pop_back();\n      deque.push_front(new Node());\n    }\n  }\n\n  deque.print();\n};\n\nconst setDeque = (deque, arr, cnt, isLeft) => {\n  if (isLeft) {\n    // <-- 맨앞 요소를 없애고 맨앞에 arr요소들을 넣는다.\n    let idx = 0;\n\n    while (idx++ < cnt) {\n      deque.pop_back();\n      deque.push_back(new Node(arr[idx]));\n    }\n  } else {\n    let idx = 0;\n\n    while (idx++ < cnt) {\n      deque.pop_front();\n      deque.push_front(new Node(arr[idx]));\n    }\n  }\n};\n\nconst getEndDate = startDate => getAddedDateStr(startDate, ARRAY_LENGTH - 1);\n\nconst getDeqNeedDate = (startDate, dateDiff) => {\n  let endDate = getEndDate(startDate);\n\n  if (dateDiff > 0) {\n    startDate = getAddedDateStr(endDate, -1 * dateDiff + 1);\n  } else {\n    // 왼쪽 버튼 클릭 배열이 오른쪽 이동 왼쪽 요소들이 필요\n    endDate = startDate;\n    startDate = getAddedDateStr(startDate, dateDiff + 1);\n  }\n\n  return [startDate, endDate];\n}; // getAddedDateStr(startDate, ARRAY_LENGTH - 1);\n\n\nexport const useListView = (user, date, setDate, workList) => {\n  _s();\n\n  console.log(\"LIST VIEW RENDERING\");\n  const [startDate, setStratDate] = useState(getStartDate(date));\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState(false);\n\n  const updateStartDate = nextDate => {\n    console.log(\"list change\");\n    LocalStroage.startDate().set(nextDate);\n    setStratDate(nextDate);\n  };\n\n  const onClickLeftBtn = () => {\n    const nextDate = getAddedDateStr(startDate, -1);\n    updateStartDate(nextDate);\n  };\n\n  const onClickRightBtn = () => {\n    const nextDate = getAddedDateStr(startDate, 1);\n    updateStartDate(nextDate);\n  };\n\n  const getListView = async (startDate, endDate) => {\n    try {\n      const data = await APIv2.listView(user, startDate, endDate, ARRAY_LENGTH).get();\n      if (!(data === null || data === void 0 ? void 0 : data.data)) throw new Error(\"List View cann't found\");\n      console.log(\"[LISTVIEW] GET LIST VIEW:  \", data === null || data === void 0 ? void 0 : data.data);\n      return data.data;\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const updateListView = async startDate => {\n    if (user && startDate) {\n      setLoad(true);\n      const response = await getListView(startDate, getEndDate(startDate));\n      setLoad(false);\n      listDeque = new Deque(response, DISPLAY_LENGTH);\n      setListView(listDeque.get());\n    }\n  };\n\n  const moveListView = async (startDate, dateDiff) => {\n    if (user && startDate) {\n      turnDeque(listDeque, Math.abs(dateDiff), dateDiff > 0);\n      const [needStartDate, needEndDate] = getDeqNeedDate(startDate, dateDiff);\n      setListView(listDeque.get());\n      console.log(\"list :::\", listView);\n      setDeque(listDeque, await getListView(needStartDate, needEndDate), Math.abs(dateDiff), dateDiff < 0);\n      setListView(listDeque.get());\n      console.log(\"lis2222 t :::\", listView);\n    }\n  };\n\n  useEffect(() => {\n    updateStartDate(makeStartDate(date));\n  }, [date]);\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n    console.log(\"Set list view start\", listDeque, befStartDate, startDate);\n    const dateDiff = subtractDayInStr(befStartDate, startDate);\n    if (!listDeque || !befStartDate || dateDiff > 2 || dateDiff < -2) updateListView(startDate);else moveListView(startDate, dateDiff); // updateListView(startDate);\n\n    befStartDate = startDate;\n    return () => setLoad(false);\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn\n  };\n};\n\n_s(useListView, \"winhrkvjr+81rjeJ0SI6qLAjsAc=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/listView/useListView.js"],"names":["useEffect","useState","Deque","Node","APIv2","LocalStroage","getAddedDateStr","getDiffDayInStr","subtractDayInStr","DISPLAY_LENGTH","ARRAY_LENGTH","makeStartDate","date","Math","floor","getStartDate","startDate","isEmpty","get","befStartDate","listDeque","turnDeque","deque","cnt","isLeft","print","console","log","pop_front","push_back","pop_back","push_front","setDeque","arr","idx","getEndDate","getDeqNeedDate","dateDiff","endDate","useListView","user","setDate","workList","setStratDate","listView","setListView","isListViewLoading","setLoad","updateStartDate","nextDate","set","onClickLeftBtn","onClickRightBtn","getListView","data","Error","error","alert","updateListView","response","moveListView","abs","needStartDate","needEndDate"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Deque } from \"../../classes/Deque\";\nimport { Node } from \"../../classes/Node\";\nimport { APIv2 } from \"../../tools/API\";\nimport { LocalStroage } from \"../../tools/LocalStorage\";\nimport {\n  getAddedDateStr,\n  getDiffDayInStr,\n  subtractDayInStr,\n} from \"../../tools/time\";\nexport const DISPLAY_LENGTH = 5;\nexport const ARRAY_LENGTH = 11;\nconst makeStartDate = (date) =>\n  getAddedDateStr(date, -1 * Math.floor(ARRAY_LENGTH / 2));\n// const makeStartDate = (date) => getAddedDateStr(date, -1 * STARTDATEDIFF);\nconst getStartDate = (date) =>\n  LocalStroage.startDate().isEmpty()\n    ? makeStartDate(date)\n    : LocalStroage.startDate().get();\n\nlet befStartDate;\nlet listDeque;\n\nconst turnDeque = (deque, cnt, isLeft) => {\n  deque.print();\n  console.log(\"[deq] \", deque, cnt, isLeft);\n  if (isLeft) {\n    // <-- 방향으로 이동\n    while (cnt--) {\n      deque.pop_front();\n      deque.push_back(new Node());\n    }\n  } else {\n    while (cnt--) {\n      deque.pop_back();\n      deque.push_front(new Node());\n    }\n  }\n  deque.print();\n};\nconst setDeque = (deque, arr, cnt, isLeft) => {\n  if (isLeft) {\n    // <-- 맨앞 요소를 없애고 맨앞에 arr요소들을 넣는다.\n    let idx = 0;\n    while (idx++ < cnt) {\n      deque.pop_back();\n      deque.push_back(new Node(arr[idx]));\n    }\n  } else {\n    let idx = 0;\n    while (idx++ < cnt) {\n      deque.pop_front();\n      deque.push_front(new Node(arr[idx]));\n    }\n  }\n};\n\nconst getEndDate = (startDate) => getAddedDateStr(startDate, ARRAY_LENGTH - 1);\nconst getDeqNeedDate = (startDate, dateDiff) => {\n  let endDate = getEndDate(startDate);\n  if (dateDiff > 0) {\n    startDate = getAddedDateStr(endDate, -1 * dateDiff + 1);\n  } else {\n    // 왼쪽 버튼 클릭 배열이 오른쪽 이동 왼쪽 요소들이 필요\n    endDate = startDate;\n    startDate = getAddedDateStr(startDate, dateDiff + 1);\n  }\n  return [startDate, endDate];\n};\n// getAddedDateStr(startDate, ARRAY_LENGTH - 1);\nexport const useListView = (user, date, setDate, workList) => {\n  console.log(\"LIST VIEW RENDERING\");\n  const [startDate, setStratDate] = useState(getStartDate(date));\n  const [listView, setListView] = useState();\n  const [isListViewLoading, setLoad] = useState(false);\n\n  const updateStartDate = (nextDate) => {\n    console.log(\"list change\");\n    LocalStroage.startDate().set(nextDate);\n    setStratDate(nextDate);\n  };\n  const onClickLeftBtn = () => {\n    const nextDate = getAddedDateStr(startDate, -1);\n    updateStartDate(nextDate);\n  };\n  const onClickRightBtn = () => {\n    const nextDate = getAddedDateStr(startDate, 1);\n    updateStartDate(nextDate);\n  };\n\n  const getListView = async (startDate, endDate) => {\n    try {\n      const data = await APIv2.listView(\n        user,\n        startDate,\n        endDate,\n        ARRAY_LENGTH\n      ).get();\n      if (!data?.data) throw new Error(\"List View cann't found\");\n      console.log(\"[LISTVIEW] GET LIST VIEW:  \", data?.data);\n      return data.data;\n    } catch (error) {\n      alert(error);\n    }\n  };\n  const updateListView = async (startDate) => {\n    if (user && startDate) {\n      setLoad(true);\n      const response = await getListView(startDate, getEndDate(startDate));\n      setLoad(false);\n      listDeque = new Deque(response, DISPLAY_LENGTH);\n      setListView(listDeque.get());\n    }\n  };\n  const moveListView = async (startDate, dateDiff) => {\n    if (user && startDate) {\n      turnDeque(listDeque, Math.abs(dateDiff), dateDiff > 0);\n      const [needStartDate, needEndDate] = getDeqNeedDate(startDate, dateDiff);\n      setListView(listDeque.get());\n      console.log(\"list :::\", listView);\n      setDeque(\n        listDeque,\n        await getListView(needStartDate, needEndDate),\n        Math.abs(dateDiff),\n        dateDiff < 0\n      );\n      setListView(listDeque.get());\n      console.log(\"lis2222 t :::\", listView);\n    }\n  };\n  useEffect(() => {\n    updateStartDate(makeStartDate(date));\n  }, [date]);\n  useEffect(() => {\n    //setListView를 좀 더 스마트하게 바꾸어야 한다.\n\n    console.log(\"Set list view start\", listDeque, befStartDate, startDate);\n    const dateDiff = subtractDayInStr(befStartDate, startDate);\n    if (!listDeque || !befStartDate || dateDiff > 2 || dateDiff < -2)\n      updateListView(startDate);\n    else moveListView(startDate, dateDiff);\n    // updateListView(startDate);\n    befStartDate = startDate;\n    return () => setLoad(false);\n  }, [startDate]);\n  return {\n    isListViewLoading,\n    startDate,\n    listView,\n    onClickLeftBtn,\n    onClickRightBtn,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}