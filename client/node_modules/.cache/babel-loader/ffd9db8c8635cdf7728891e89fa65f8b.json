{"ast":null,"code":"/*! firebase-admin v9.11.1 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.appCheckErrorFromCryptoSignerError = exports.AppCheckTokenGenerator = void 0;\n\nvar validator = require(\"../utils/validator\");\n\nvar utils_1 = require(\"../utils\");\n\nvar crypto_signer_1 = require(\"../utils/crypto-signer\");\n\nvar app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\n\nvar ONE_MINUTE_IN_SECONDS = 60;\nvar ONE_MINUTE_IN_MILLIS = ONE_MINUTE_IN_SECONDS * 1000;\nvar ONE_DAY_IN_MILLIS = 24 * 60 * 60 * 1000; // Audience to use for Firebase App Check Custom tokens\n\nvar FIREBASE_APP_CHECK_AUDIENCE = 'https://firebaseappcheck.googleapis.com/google.firebase.appcheck.v1beta.TokenExchangeService';\n/**\n * Class for generating Firebase App Check tokens.\n *\n * @internal\n */\n\nvar AppCheckTokenGenerator = function () {\n  /**\n   * The AppCheckTokenGenerator class constructor.\n   *\n   * @param signer The CryptoSigner instance for this token generator.\n   * @constructor\n   */\n  function AppCheckTokenGenerator(signer) {\n    if (!validator.isNonNullObject(signer)) {\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'INTERNAL ASSERT: Must provide a CryptoSigner to use AppCheckTokenGenerator.');\n    }\n\n    this.signer = signer;\n  }\n  /**\n   * Creates a new custom token that can be exchanged to an App Check token.\n   *\n   * @param appId The Application ID to use for the generated token.\n   *\n   * @return A Promise fulfilled with a custom token signed with a service account key\n   * that can be exchanged to an App Check token.\n   */\n\n\n  AppCheckTokenGenerator.prototype.createCustomToken = function (appId, options) {\n    var _this = this;\n\n    if (!validator.isNonEmptyString(appId)) {\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', '`appId` must be a non-empty string.');\n    }\n\n    var customOptions = {};\n\n    if (typeof options !== 'undefined') {\n      customOptions = this.validateTokenOptions(options);\n    }\n\n    return this.signer.getAccountId().then(function (account) {\n      var header = {\n        alg: _this.signer.algorithm,\n        typ: 'JWT'\n      };\n      var iat = Math.floor(Date.now() / 1000);\n\n      var body = __assign({\n        iss: account,\n        sub: account,\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        app_id: appId,\n        aud: FIREBASE_APP_CHECK_AUDIENCE,\n        exp: iat + ONE_MINUTE_IN_SECONDS * 5,\n        iat: iat\n      }, customOptions);\n\n      var token = _this.encodeSegment(header) + \".\" + _this.encodeSegment(body);\n\n      return _this.signer.sign(Buffer.from(token)).then(function (signature) {\n        return token + \".\" + _this.encodeSegment(signature);\n      });\n    }).catch(function (err) {\n      throw appCheckErrorFromCryptoSignerError(err);\n    });\n  };\n\n  AppCheckTokenGenerator.prototype.encodeSegment = function (segment) {\n    var buffer = segment instanceof Buffer ? segment : Buffer.from(JSON.stringify(segment));\n    return utils_1.toWebSafeBase64(buffer).replace(/=+$/, '');\n  };\n  /**\n   * Checks if a given `AppCheckTokenOptions` object is valid. If successful, returns an object with\n   * custom properties.\n   *\n   * @param options An options object to be validated.\n   * @returns A custom object with ttl converted to protobuf Duration string format.\n   */\n\n\n  AppCheckTokenGenerator.prototype.validateTokenOptions = function (options) {\n    if (!validator.isNonNullObject(options)) {\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'AppCheckTokenOptions must be a non-null object.');\n    }\n\n    if (typeof options.ttlMillis !== 'undefined') {\n      if (!validator.isNumber(options.ttlMillis)) {\n        throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'ttlMillis must be a duration in milliseconds.');\n      } // ttlMillis must be between 30 minutes and 7 days (inclusive)\n\n\n      if (options.ttlMillis < ONE_MINUTE_IN_MILLIS * 30 || options.ttlMillis > ONE_DAY_IN_MILLIS * 7) {\n        throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'ttlMillis must be a duration in milliseconds between 30 minutes and 7 days (inclusive).');\n      }\n\n      return {\n        ttl: utils_1.transformMillisecondsToSecondsString(options.ttlMillis)\n      };\n    }\n\n    return {};\n  };\n\n  return AppCheckTokenGenerator;\n}();\n\nexports.AppCheckTokenGenerator = AppCheckTokenGenerator;\n/**\n * Creates a new FirebaseAppCheckError by extracting the error code, message and other relevant\n * details from a CryptoSignerError.\n *\n * @param err The Error to convert into a FirebaseAppCheckError error\n * @return A Firebase App Check error that can be returned to the user.\n */\n\nfunction appCheckErrorFromCryptoSignerError(err) {\n  if (!(err instanceof crypto_signer_1.CryptoSignerError)) {\n    return err;\n  }\n\n  if (err.code === crypto_signer_1.CryptoSignerErrorCode.SERVER_ERROR && validator.isNonNullObject(err.cause)) {\n    var httpError = err.cause;\n    var errorResponse = httpError.response.data;\n\n    if (errorResponse === null || errorResponse === void 0 ? void 0 : errorResponse.error) {\n      var status = errorResponse.error.status;\n      var description = errorResponse.error.message || JSON.stringify(httpError.response);\n      var code = 'unknown-error';\n\n      if (status && status in app_check_api_client_internal_1.APP_CHECK_ERROR_CODE_MAPPING) {\n        code = app_check_api_client_internal_1.APP_CHECK_ERROR_CODE_MAPPING[status];\n      }\n\n      return new app_check_api_client_internal_1.FirebaseAppCheckError(code, \"Error returned from server while signing a custom token: \" + description);\n    }\n\n    return new app_check_api_client_internal_1.FirebaseAppCheckError('internal-error', 'Error returned from server: ' + JSON.stringify(errorResponse) + '.');\n  }\n\n  return new app_check_api_client_internal_1.FirebaseAppCheckError(mapToAppCheckErrorCode(err.code), err.message);\n}\n\nexports.appCheckErrorFromCryptoSignerError = appCheckErrorFromCryptoSignerError;\n\nfunction mapToAppCheckErrorCode(code) {\n  switch (code) {\n    case crypto_signer_1.CryptoSignerErrorCode.INVALID_CREDENTIAL:\n      return 'invalid-credential';\n\n    case crypto_signer_1.CryptoSignerErrorCode.INVALID_ARGUMENT:\n      return 'invalid-argument';\n\n    default:\n      return 'internal-error';\n  }\n}","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/node_modules/firebase-admin/lib/app-check/token-generator.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","appCheckErrorFromCryptoSignerError","AppCheckTokenGenerator","validator","require","utils_1","crypto_signer_1","app_check_api_client_internal_1","ONE_MINUTE_IN_SECONDS","ONE_MINUTE_IN_MILLIS","ONE_DAY_IN_MILLIS","FIREBASE_APP_CHECK_AUDIENCE","signer","isNonNullObject","FirebaseAppCheckError","createCustomToken","appId","options","_this","isNonEmptyString","customOptions","validateTokenOptions","getAccountId","then","account","header","alg","algorithm","typ","iat","Math","floor","Date","now","body","iss","sub","app_id","aud","exp","token","encodeSegment","sign","Buffer","from","signature","catch","err","segment","buffer","JSON","stringify","toWebSafeBase64","replace","ttlMillis","isNumber","ttl","transformMillisecondsToSecondsString","CryptoSignerError","code","CryptoSignerErrorCode","SERVER_ERROR","cause","httpError","errorResponse","response","data","error","status","description","message","APP_CHECK_ERROR_CODE_MAPPING","mapToAppCheckErrorCode","INVALID_CREDENTIAL","INVALID_ARGUMENT"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.11.1 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.appCheckErrorFromCryptoSignerError = exports.AppCheckTokenGenerator = void 0;\nvar validator = require(\"../utils/validator\");\nvar utils_1 = require(\"../utils\");\nvar crypto_signer_1 = require(\"../utils/crypto-signer\");\nvar app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\nvar ONE_MINUTE_IN_SECONDS = 60;\nvar ONE_MINUTE_IN_MILLIS = ONE_MINUTE_IN_SECONDS * 1000;\nvar ONE_DAY_IN_MILLIS = 24 * 60 * 60 * 1000;\n// Audience to use for Firebase App Check Custom tokens\nvar FIREBASE_APP_CHECK_AUDIENCE = 'https://firebaseappcheck.googleapis.com/google.firebase.appcheck.v1beta.TokenExchangeService';\n/**\n * Class for generating Firebase App Check tokens.\n *\n * @internal\n */\nvar AppCheckTokenGenerator = /** @class */ (function () {\n    /**\n     * The AppCheckTokenGenerator class constructor.\n     *\n     * @param signer The CryptoSigner instance for this token generator.\n     * @constructor\n     */\n    function AppCheckTokenGenerator(signer) {\n        if (!validator.isNonNullObject(signer)) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'INTERNAL ASSERT: Must provide a CryptoSigner to use AppCheckTokenGenerator.');\n        }\n        this.signer = signer;\n    }\n    /**\n     * Creates a new custom token that can be exchanged to an App Check token.\n     *\n     * @param appId The Application ID to use for the generated token.\n     *\n     * @return A Promise fulfilled with a custom token signed with a service account key\n     * that can be exchanged to an App Check token.\n     */\n    AppCheckTokenGenerator.prototype.createCustomToken = function (appId, options) {\n        var _this = this;\n        if (!validator.isNonEmptyString(appId)) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', '`appId` must be a non-empty string.');\n        }\n        var customOptions = {};\n        if (typeof options !== 'undefined') {\n            customOptions = this.validateTokenOptions(options);\n        }\n        return this.signer.getAccountId().then(function (account) {\n            var header = {\n                alg: _this.signer.algorithm,\n                typ: 'JWT',\n            };\n            var iat = Math.floor(Date.now() / 1000);\n            var body = __assign({ iss: account, sub: account, \n                // eslint-disable-next-line @typescript-eslint/camelcase\n                app_id: appId, aud: FIREBASE_APP_CHECK_AUDIENCE, exp: iat + (ONE_MINUTE_IN_SECONDS * 5), iat: iat }, customOptions);\n            var token = _this.encodeSegment(header) + \".\" + _this.encodeSegment(body);\n            return _this.signer.sign(Buffer.from(token))\n                .then(function (signature) {\n                return token + \".\" + _this.encodeSegment(signature);\n            });\n        }).catch(function (err) {\n            throw appCheckErrorFromCryptoSignerError(err);\n        });\n    };\n    AppCheckTokenGenerator.prototype.encodeSegment = function (segment) {\n        var buffer = (segment instanceof Buffer) ? segment : Buffer.from(JSON.stringify(segment));\n        return utils_1.toWebSafeBase64(buffer).replace(/=+$/, '');\n    };\n    /**\n     * Checks if a given `AppCheckTokenOptions` object is valid. If successful, returns an object with\n     * custom properties.\n     *\n     * @param options An options object to be validated.\n     * @returns A custom object with ttl converted to protobuf Duration string format.\n     */\n    AppCheckTokenGenerator.prototype.validateTokenOptions = function (options) {\n        if (!validator.isNonNullObject(options)) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'AppCheckTokenOptions must be a non-null object.');\n        }\n        if (typeof options.ttlMillis !== 'undefined') {\n            if (!validator.isNumber(options.ttlMillis)) {\n                throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'ttlMillis must be a duration in milliseconds.');\n            }\n            // ttlMillis must be between 30 minutes and 7 days (inclusive)\n            if (options.ttlMillis < (ONE_MINUTE_IN_MILLIS * 30) || options.ttlMillis > (ONE_DAY_IN_MILLIS * 7)) {\n                throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'ttlMillis must be a duration in milliseconds between 30 minutes and 7 days (inclusive).');\n            }\n            return { ttl: utils_1.transformMillisecondsToSecondsString(options.ttlMillis) };\n        }\n        return {};\n    };\n    return AppCheckTokenGenerator;\n}());\nexports.AppCheckTokenGenerator = AppCheckTokenGenerator;\n/**\n * Creates a new FirebaseAppCheckError by extracting the error code, message and other relevant\n * details from a CryptoSignerError.\n *\n * @param err The Error to convert into a FirebaseAppCheckError error\n * @return A Firebase App Check error that can be returned to the user.\n */\nfunction appCheckErrorFromCryptoSignerError(err) {\n    if (!(err instanceof crypto_signer_1.CryptoSignerError)) {\n        return err;\n    }\n    if (err.code === crypto_signer_1.CryptoSignerErrorCode.SERVER_ERROR && validator.isNonNullObject(err.cause)) {\n        var httpError = err.cause;\n        var errorResponse = httpError.response.data;\n        if (errorResponse === null || errorResponse === void 0 ? void 0 : errorResponse.error) {\n            var status = errorResponse.error.status;\n            var description = errorResponse.error.message || JSON.stringify(httpError.response);\n            var code = 'unknown-error';\n            if (status && status in app_check_api_client_internal_1.APP_CHECK_ERROR_CODE_MAPPING) {\n                code = app_check_api_client_internal_1.APP_CHECK_ERROR_CODE_MAPPING[status];\n            }\n            return new app_check_api_client_internal_1.FirebaseAppCheckError(code, \"Error returned from server while signing a custom token: \" + description);\n        }\n        return new app_check_api_client_internal_1.FirebaseAppCheckError('internal-error', 'Error returned from server: ' + JSON.stringify(errorResponse) + '.');\n    }\n    return new app_check_api_client_internal_1.FirebaseAppCheckError(mapToAppCheckErrorCode(err.code), err.message);\n}\nexports.appCheckErrorFromCryptoSignerError = appCheckErrorFromCryptoSignerError;\nfunction mapToAppCheckErrorCode(code) {\n    switch (code) {\n        case crypto_signer_1.CryptoSignerErrorCode.INVALID_CREDENTIAL:\n            return 'invalid-credential';\n        case crypto_signer_1.CryptoSignerErrorCode.INVALID_ARGUMENT:\n            return 'invalid-argument';\n        default:\n            return 'internal-error';\n    }\n}\n"]},"metadata":{},"sourceType":"script"}