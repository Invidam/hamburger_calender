{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const usePushWork = () => {\n  _s();\n\n  const initVal = window.localStorage.getItem(\"workList\") ? JSON.parse(window.localStorage.getItem(\"workList\")) : [];\n  const [workList, setWorkList] = useState(initVal);\n\n  const validator = workObj => {\n    return workObj.workName && workObj.workTime && workObj.color;\n  };\n\n  const onSubmitWork = event => {\n    event.preventDefault();\n    const workName = event.target.workName.value;\n    const workTime = parseInt(event.target.workTime.value);\n    const workColor = event.target.workColor.value;\n    const workObj = {\n      workName,\n      workTime,\n      workColor\n    };\n    console.log(workObj);\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n\n    if (willUpdate) {\n      setWorkList(workList => [...workList, workObj]);\n    }\n  };\n\n  return {\n    workList,\n    onSubmitWork\n  };\n};\n\n_s(usePushWork, \"YVLqEpFLgtK5mvd/A4LvT7VuxxU=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/usePushWork.js"],"names":["useState","usePushWork","initVal","window","localStorage","getItem","JSON","parse","workList","setWorkList","validator","workObj","workName","workTime","color","onSubmitWork","event","preventDefault","target","value","parseInt","workColor","console","log","willUpdate"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAMC,OAAO,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,IACZC,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAX,CADY,GAEZ,EAFJ;AAGA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACE,OAAD,CAAxC;;AACA,QAAMQ,SAAS,GAAIC,OAAD,IAAa;AAC7B,WAAOA,OAAO,CAACC,QAAR,IAAoBD,OAAO,CAACE,QAA5B,IAAwCF,OAAO,CAACG,KAAvD;AACD,GAFD;;AAGA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAML,QAAQ,GAAGI,KAAK,CAACE,MAAN,CAAaN,QAAb,CAAsBO,KAAvC;AACA,UAAMN,QAAQ,GAAGO,QAAQ,CAACJ,KAAK,CAACE,MAAN,CAAaL,QAAb,CAAsBM,KAAvB,CAAzB;AACA,UAAME,SAAS,GAAGL,KAAK,CAACE,MAAN,CAAaG,SAAb,CAAuBF,KAAzC;AACA,UAAMR,OAAO,GAAG;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,QAAZ;AAAsBQ,MAAAA;AAAtB,KAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,OAAZ;AACA,QAAIa,UAAU,GAAG,IAAjB;AACA,QAAI,OAAOd,SAAP,KAAqB,UAAzB,EAAqCc,UAAU,GAAGd,SAAS,CAACC,OAAD,CAAtB;;AACrC,QAAIa,UAAJ,EAAgB;AACdf,MAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcG,OAAd,CAAf,CAAX;AACD;AACF,GAZD;;AAaA,SAAO;AAAEH,IAAAA,QAAF;AAAYO,IAAAA;AAAZ,GAAP;AACD,CAtBM;;GAAMd,W","sourcesContent":["import { useState } from \"react\";\n\nexport const usePushWork = () => {\n  const initVal = window.localStorage.getItem(\"workList\")\n    ? JSON.parse(window.localStorage.getItem(\"workList\"))\n    : [];\n  const [workList, setWorkList] = useState(initVal);\n  const validator = (workObj) => {\n    return workObj.workName && workObj.workTime && workObj.color;\n  };\n  const onSubmitWork = (event) => {\n    event.preventDefault();\n    const workName = event.target.workName.value;\n    const workTime = parseInt(event.target.workTime.value);\n    const workColor = event.target.workColor.value;\n    const workObj = { workName, workTime, workColor };\n    console.log(workObj);\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n    if (willUpdate) {\n      setWorkList((workList) => [...workList, workObj]);\n    }\n  };\n  return { workList, onSubmitWork };\n};\n"]},"metadata":{},"sourceType":"module"}