{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\n\nconst makeTargetTimeObj = (targetWorkTime, targetWakeHour, targetWakeMinute, targetBedHour, targetBedMinute) => {\n  return {\n    targetWorkTime,\n    targetWakeTime: {\n      hour: targetWakeHour,\n      minute: targetWakeMinute\n    },\n    targetBedTime: {\n      hour: targetBedHour,\n      minute: targetBedMinute\n    }\n  };\n};\n\nexport const useTargetSetting = (user, isLoginLoading) => {\n  _s();\n\n  console.log(\"UPDATE SETTING HOOK USER: \");\n  const [targetWorkTime, setTargetWorkTime] = useState(-1);\n  const [targetWakeHour, setTargetWakeHour] = useState(-1);\n  const [targetBedHour, setTargetBedHour] = useState(-1);\n  const [targetWakeMinute, setTargetWakeMinute] = useState(-1);\n  const [targetBedMinute, setTargetBedMinute] = useState(-1);\n  const [isSettingHookLoading, setLoad] = useState(true);\n\n  const onChangeTargetWorkTime = workTime => setTargetWorkTime(parseInt(workTime));\n\n  const onChangeTargetWakeHour = wakeHour => setTargetWakeHour(parseInt(wakeHour));\n\n  const onChangeTargetBedHour = bedHour => setTargetBedHour(parseInt(bedHour));\n\n  const onChangeTargetWakeMinute = wakeMinute => setTargetWakeMinute(parseInt(wakeMinute));\n\n  const onChangeTargetBedMinute = bedMinute => setTargetBedMinute(parseInt(bedMinute));\n\n  const getUserSetting = async () => {\n    try {\n      if (user && !isLoginLoading) {\n        console.log(\"SETTIN-G\", user);\n        const data = await APIv2.userSetting(user).get(); //API.get(`/auth/setting/${user}`);\n\n        const settingObj = data === null || data === void 0 ? void 0 : data.data;\n        if (!data) throw new Error(\"Cannot find data\");\n        setTargetWorkTime(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetWorkTime);\n        setTargetWakeHour(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetWakeTime.hour);\n        setTargetBedHour(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetBedTime.hour);\n        setTargetWakeMinute(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetWakeTime.minute);\n        setTargetBedMinute(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetBedTime.minute);\n      } else {//\n      }\n\n      if (!isLoginLoading && isSettingHookLoading) {\n        setLoad(false);\n        console.log(\"SETTIN-G END\", isSettingHookLoading);\n      }\n    } catch (error) {\n      setLoad(false);\n      alert(error); // history.push(\"/setting\");\n    }\n  };\n\n  useEffect(() => {\n    getUserSetting();\n  }, [user, isLoginLoading]);\n\n  const validator = targetTimeObj => {\n    return targetTimeObj.targetWorkTime !== -1 && targetTimeObj.targetWakeTime.hour !== -1 && targetTimeObj.targetBedTime.hour !== -1 && targetTimeObj.targetWakeTime.minute !== -1 && targetTimeObj.targetBedTime.minute !== -1;\n  };\n\n  const onEditTargetTime = event => {\n    try {\n      event.preventDefault();\n      let willUpdate = true;\n      const targetTimeObj = {\n        targetWorkTime,\n        targetWakeTime: {\n          hour: targetWakeHour,\n          minute: targetWakeMinute\n        },\n        targetBedTime: {\n          hour: targetBedHour,\n          minute: targetBedMinute\n        }\n      };\n      console.log(\"EDIT TARGET\");\n      if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n\n      if (willUpdate) {\n        APIv2.userSetting(user).edit(targetTimeObj); // API.post(`/auth/setting/${user}`, {\n        //   value: targetTimeObj,\n        //   user,\n        // });\n      } else {\n        const targetWakeTime = targetWakeHour && targetWakeMinute;\n        const targetBedTime = targetBedHour && targetBedMinute;\n        let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${!targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"}${targetWakeTime ? \"\" : \"TargetWakeTime\"}${!targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"}${targetBedTime ? \"\" : \"TargetBedtime\"} ${!targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"} not entered.`;\n        throw new Error(errText);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  const targetTimeObj = {\n    targetWorkTime,\n    targetWakeTime: {\n      hour: targetWakeHour,\n      minute: targetWakeMinute\n    },\n    targetBedTime: {\n      hour: targetBedHour,\n      minute: targetBedMinute\n    }\n  };\n  return {\n    onEditTargetTime,\n    targetWorkTime,\n    onChangeTargetWorkTime,\n    targetTimeObj,\n    targetWakeHour,\n    targetBedHour,\n    targetWakeMinute,\n    targetBedMinute,\n    onChangeTargetWakeHour,\n    onChangeTargetBedHour,\n    onChangeTargetWakeMinute,\n    onChangeTargetBedMinute,\n    isSettingHookLoading\n  };\n};\n\n_s(useTargetSetting, \"BvYw7HkduhWQR752F26zNKgP2v4=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useTargetSetting.js"],"names":["useEffect","useState","API","APIv2","makeTargetTimeObj","targetWorkTime","targetWakeHour","targetWakeMinute","targetBedHour","targetBedMinute","targetWakeTime","hour","minute","targetBedTime","useTargetSetting","user","isLoginLoading","console","log","setTargetWorkTime","setTargetWakeHour","setTargetBedHour","setTargetWakeMinute","setTargetBedMinute","isSettingHookLoading","setLoad","onChangeTargetWorkTime","workTime","parseInt","onChangeTargetWakeHour","wakeHour","onChangeTargetBedHour","bedHour","onChangeTargetWakeMinute","wakeMinute","onChangeTargetBedMinute","bedMinute","getUserSetting","data","userSetting","get","settingObj","Error","error","alert","validator","targetTimeObj","onEditTargetTime","event","preventDefault","willUpdate","edit","errText"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nconst makeTargetTimeObj = (\n  targetWorkTime,\n  targetWakeHour,\n  targetWakeMinute,\n  targetBedHour,\n  targetBedMinute\n) => {\n  return {\n    targetWorkTime,\n    targetWakeTime: { hour: targetWakeHour, minute: targetWakeMinute },\n    targetBedTime: { hour: targetBedHour, minute: targetBedMinute },\n  };\n};\nexport const useTargetSetting = (user, isLoginLoading) => {\n  console.log(\"UPDATE SETTING HOOK USER: \");\n  const [targetWorkTime, setTargetWorkTime] = useState(-1);\n  const [targetWakeHour, setTargetWakeHour] = useState(-1);\n  const [targetBedHour, setTargetBedHour] = useState(-1);\n  const [targetWakeMinute, setTargetWakeMinute] = useState(-1);\n  const [targetBedMinute, setTargetBedMinute] = useState(-1);\n  const [isSettingHookLoading, setLoad] = useState(true);\n  const onChangeTargetWorkTime = (workTime) =>\n    setTargetWorkTime(parseInt(workTime));\n  const onChangeTargetWakeHour = (wakeHour) =>\n    setTargetWakeHour(parseInt(wakeHour));\n  const onChangeTargetBedHour = (bedHour) =>\n    setTargetBedHour(parseInt(bedHour));\n  const onChangeTargetWakeMinute = (wakeMinute) =>\n    setTargetWakeMinute(parseInt(wakeMinute));\n  const onChangeTargetBedMinute = (bedMinute) =>\n    setTargetBedMinute(parseInt(bedMinute));\n\n  const getUserSetting = async () => {\n    try {\n      if (user && !isLoginLoading) {\n        console.log(\"SETTIN-G\", user);\n        const data = await APIv2.userSetting(user).get(); //API.get(`/auth/setting/${user}`);\n        const settingObj = data?.data;\n        if (!data) throw new Error(\"Cannot find data\");\n        setTargetWorkTime(settingObj?.targetWorkTime);\n        setTargetWakeHour(settingObj?.targetWakeTime.hour);\n        setTargetBedHour(settingObj?.targetBedTime.hour);\n        setTargetWakeMinute(settingObj?.targetWakeTime.minute);\n        setTargetBedMinute(settingObj?.targetBedTime.minute);\n      } else {\n        //\n      }\n\n      if (!isLoginLoading && isSettingHookLoading) {\n        setLoad(false);\n        console.log(\"SETTIN-G END\", isSettingHookLoading);\n      }\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n      // history.push(\"/setting\");\n    }\n  };\n  useEffect(() => {\n    getUserSetting();\n  }, [user, isLoginLoading]);\n\n  const validator = (targetTimeObj) => {\n    return (\n      targetTimeObj.targetWorkTime !== -1 &&\n      targetTimeObj.targetWakeTime.hour !== -1 &&\n      targetTimeObj.targetBedTime.hour !== -1 &&\n      targetTimeObj.targetWakeTime.minute !== -1 &&\n      targetTimeObj.targetBedTime.minute !== -1\n    );\n  };\n  const onEditTargetTime = (event) => {\n    try {\n      event.preventDefault();\n      let willUpdate = true;\n      const targetTimeObj = {\n        targetWorkTime,\n        targetWakeTime: { hour: targetWakeHour, minute: targetWakeMinute },\n        targetBedTime: { hour: targetBedHour, minute: targetBedMinute },\n      };\n      console.log(\"EDIT TARGET\");\n      if (typeof validator === \"function\")\n        willUpdate = validator(targetTimeObj);\n      if (willUpdate) {\n        APIv2.userSetting(user).edit(targetTimeObj);\n        // API.post(`/auth/setting/${user}`, {\n        //   value: targetTimeObj,\n        //   user,\n        // });\n      } else {\n        const targetWakeTime = targetWakeHour && targetWakeMinute;\n        const targetBedTime = targetBedHour && targetBedMinute;\n        let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${\n          !targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"\n        }${targetWakeTime ? \"\" : \"TargetWakeTime\"}${\n          !targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"\n        }${targetBedTime ? \"\" : \"TargetBedtime\"} ${\n          !targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"\n        } not entered.`;\n        throw new Error(errText);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  const targetTimeObj = {\n    targetWorkTime,\n    targetWakeTime: { hour: targetWakeHour, minute: targetWakeMinute },\n    targetBedTime: { hour: targetBedHour, minute: targetBedMinute },\n  };\n  return {\n    onEditTargetTime,\n    targetWorkTime,\n    onChangeTargetWorkTime,\n    targetTimeObj,\n    targetWakeHour,\n    targetBedHour,\n    targetWakeMinute,\n    targetBedMinute,\n    onChangeTargetWakeHour,\n    onChangeTargetBedHour,\n    onChangeTargetWakeMinute,\n    onChangeTargetBedMinute,\n    isSettingHookLoading,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}