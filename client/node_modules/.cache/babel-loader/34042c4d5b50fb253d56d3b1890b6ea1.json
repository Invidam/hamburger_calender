{"ast":null,"code":"import _regeneratorRuntime from\"/home/invidam/hamburger_calender/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/invidam/hamburger_calender/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/invidam/hamburger_calender/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";export var useEditTime=function useEditTime(recordTime,setTime,isWake,callback){var _useState=useState(recordTime.hour),_useState2=_slicedToArray(_useState,2),hour=_useState2[0],setHour=_useState2[1];var _useState3=useState(recordTime.minute),_useState4=_slicedToArray(_useState3,2),minute=_useState4[0],setMinute=_useState4[1];var validator=function validator(timeObj){return timeObj.hour&&timeObj.minute;};var onChangeHour=function onChangeHour(hour){return setHour(parseInt(hour));};var onChangeMinute=function onChangeMinute(minute){return setMinute(parseInt(minute));};var getErrText=function getErrText(){return\"\".concat(isWake?\"WakeTime\":\"BedTime\",\" is not entered.\");};var editTime=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(timeObj){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return setTime(timeObj).edit();case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},_callee);}));return function editTime(_x){return _ref.apply(this,arguments);};}();var onEditRecordTime=function onEditRecordTime(event){try{event.preventDefault();var timeObj={hour:hour,minute:minute};var willUpdate=true;if(typeof validator===\"function\")willUpdate=validator(timeObj);if(willUpdate){callback();editTime(timeObj);}else{throw new Error(getErrText());}}catch(error){alert(error);}};return{onChangeHour:onChangeHour,onChangeMinute:onChangeMinute,onEditRecordTime:onEditRecordTime};};","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/time/useEditTime.js"],"names":["useState","useEditTime","recordTime","setTime","isWake","callback","hour","setHour","minute","setMinute","validator","timeObj","onChangeHour","parseInt","onChangeMinute","getErrText","editTime","edit","onEditRecordTime","event","preventDefault","willUpdate","Error","error","alert"],"mappings":"kcAAA,OAASA,QAAT,KAAyB,OAAzB,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,UAAD,CAAaC,OAAb,CAAsBC,MAAtB,CAA8BC,QAA9B,CAA2C,CACpE,cAAwBL,QAAQ,CAACE,UAAU,CAACI,IAAZ,CAAhC,wCAAOA,IAAP,eAAaC,OAAb,eACA,eAA4BP,QAAQ,CAACE,UAAU,CAACM,MAAZ,CAApC,yCAAOA,MAAP,eAAeC,SAAf,eACA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,OAAD,CAAa,CAC7B,MAAOA,CAAAA,OAAO,CAACL,IAAR,EAAgBK,OAAO,CAACH,MAA/B,CACD,CAFD,CAGA,GAAMI,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACN,IAAD,QAAUC,CAAAA,OAAO,CAACM,QAAQ,CAACP,IAAD,CAAT,CAAjB,EAArB,CACA,GAAMQ,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACN,MAAD,QAAYC,CAAAA,SAAS,CAACI,QAAQ,CAACL,MAAD,CAAT,CAArB,EAAvB,CACA,GAAMO,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,mBAASX,MAAM,CAAG,UAAH,CAAgB,SAA/B,sBAAnB,CACA,GAAMY,CAAAA,QAAQ,0FAAG,iBAAOL,OAAP,wIAAyBR,CAAAA,OAAO,CAACQ,OAAD,CAAP,CAAiBM,IAAjB,EAAzB,6GAAH,kBAARD,CAAAA,QAAQ,4CAAd,CACA,GAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAW,CAClC,GAAI,CACFA,KAAK,CAACC,cAAN,GACA,GAAMT,CAAAA,OAAO,CAAG,CAAEL,IAAI,CAAJA,IAAF,CAAQE,MAAM,CAANA,MAAR,CAAhB,CACA,GAAIa,CAAAA,UAAU,CAAG,IAAjB,CACA,GAAI,MAAOX,CAAAA,SAAP,GAAqB,UAAzB,CAAqCW,UAAU,CAAGX,SAAS,CAACC,OAAD,CAAtB,CACrC,GAAIU,UAAJ,CAAgB,CACdhB,QAAQ,GACRW,QAAQ,CAACL,OAAD,CAAR,CACD,CAHD,IAGO,CACL,KAAM,IAAIW,CAAAA,KAAJ,CAAUP,UAAU,EAApB,CAAN,CACD,CACF,CAAC,MAAOQ,KAAP,CAAc,CACdC,KAAK,CAACD,KAAD,CAAL,CACD,CACF,CAfD,CAgBA,MAAO,CAAEX,YAAY,CAAZA,YAAF,CAAgBE,cAAc,CAAdA,cAAhB,CAAgCI,gBAAgB,CAAhBA,gBAAhC,CAAP,CACD,CA3BM","sourcesContent":["import { useState } from \"react\";\n\nexport const useEditTime = (recordTime, setTime, isWake, callback) => {\n  const [hour, setHour] = useState(recordTime.hour);\n  const [minute, setMinute] = useState(recordTime.minute);\n  const validator = (timeObj) => {\n    return timeObj.hour && timeObj.minute;\n  };\n  const onChangeHour = (hour) => setHour(parseInt(hour));\n  const onChangeMinute = (minute) => setMinute(parseInt(minute));\n  const getErrText = () => `${isWake ? \"WakeTime\" : \"BedTime\"} is not entered.`;\n  const editTime = async (timeObj) => await setTime(timeObj).edit();\n  const onEditRecordTime = (event) => {\n    try {\n      event.preventDefault();\n      const timeObj = { hour, minute };\n      let willUpdate = true;\n      if (typeof validator === \"function\") willUpdate = validator(timeObj);\n      if (willUpdate) {\n        callback();\n        editTime(timeObj);\n      } else {\n        throw new Error(getErrText());\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n  return { onChangeHour, onChangeMinute, onEditRecordTime };\n};\n"]},"metadata":{},"sourceType":"module"}