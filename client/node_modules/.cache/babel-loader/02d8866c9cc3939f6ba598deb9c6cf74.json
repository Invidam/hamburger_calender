{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fallback = exports.protobuf = exports.createApiCall = exports.lro = exports.GrpcClient = exports.defaultToObjectOptions = exports.version = exports.routingHeader = void 0;\n\nconst protobuf = require(\"protobufjs\");\n\nexports.protobuf = protobuf;\n\nconst gax = require(\"./gax\");\n\nconst routingHeader = require(\"./routingHeader\");\n\nexports.routingHeader = routingHeader;\n\nconst status_1 = require(\"./status\");\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst objectHash = require(\"object-hash\");\n\nconst operationsClient_1 = require(\"./operationsClient\");\n\nconst createApiCall_1 = require(\"./createApiCall\");\n\nconst fallbackProto = require(\"./fallbackProto\");\n\nconst fallbackRest = require(\"./fallbackRest\");\n\nconst featureDetection_1 = require(\"./featureDetection\");\n\nconst fallbackServiceStub_1 = require(\"./fallbackServiceStub\");\n\nvar pathTemplate_1 = require(\"./pathTemplate\");\n\nObject.defineProperty(exports, \"PathTemplate\", {\n  enumerable: true,\n  get: function () {\n    return pathTemplate_1.PathTemplate;\n  }\n});\n\nvar gax_1 = require(\"./gax\");\n\nObject.defineProperty(exports, \"CallSettings\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.CallSettings;\n  }\n});\nObject.defineProperty(exports, \"constructSettings\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.constructSettings;\n  }\n});\nObject.defineProperty(exports, \"RetryOptions\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.RetryOptions;\n  }\n});\nexports.version = require('../../package.json').version + '-fallback';\n\nvar descriptor_1 = require(\"./descriptor\");\n\nObject.defineProperty(exports, \"BundleDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.BundleDescriptor;\n  }\n});\nObject.defineProperty(exports, \"LongrunningDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.LongrunningDescriptor;\n  }\n});\nObject.defineProperty(exports, \"PageDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.PageDescriptor;\n  }\n});\nObject.defineProperty(exports, \"StreamDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.StreamDescriptor;\n  }\n});\n\nvar streaming_1 = require(\"./streamingCalls/streaming\");\n\nObject.defineProperty(exports, \"StreamType\", {\n  enumerable: true,\n  get: function () {\n    return streaming_1.StreamType;\n  }\n});\nexports.defaultToObjectOptions = {\n  keepCase: false,\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: true\n};\nconst CLIENT_VERSION_HEADER = 'x-goog-api-client';\n\nclass GrpcClient {\n  /**\n   * gRPC-fallback version of GrpcClient\n   * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n   *\n   * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\n   *  to use in Node.js. Required for browser, optional for Node.js.\n   * @constructor\n   */\n  constructor(options = {}) {\n    if (!featureDetection_1.isNodeJS()) {\n      if (!options.auth) {\n        throw new Error(JSON.stringify(options) + 'You need to pass auth instance to use gRPC-fallback client in browser or other non-Node.js environments. Use OAuth2Client from google-auth-library.');\n      }\n\n      this.auth = options.auth;\n    } else {\n      this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n    }\n\n    this.fallback = options.fallback !== 'rest' ? 'proto' : 'rest';\n    this.grpcVersion = require('../../package.json').version;\n  }\n  /**\n   * In rare cases users might need to deallocate all memory consumed by loaded protos.\n   * This method will delete the proto cache content.\n   */\n\n\n  static clearProtoCache() {\n    GrpcClient.protoCache.clear();\n  }\n  /**\n   * gRPC-fallback version of loadProto\n   * Loads the protobuf root object from a JSON object created from a proto file\n   * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n   * @returns {Object} Root namespace of proto JSON\n   */\n\n\n  loadProto(jsonObject) {\n    const rootObject = protobuf.Root.fromJSON(jsonObject);\n    return rootObject;\n  }\n\n  loadProtoJSON(json, ignoreCache = false) {\n    const hash = objectHash(json);\n    const cached = GrpcClient.protoCache.get(hash);\n\n    if (cached && !ignoreCache) {\n      return cached;\n    }\n\n    const root = protobuf.Root.fromJSON(json);\n    GrpcClient.protoCache.set(hash, root);\n    return root;\n  }\n\n  static getServiceMethods(service) {\n    const methods = {};\n\n    for (const [methodName, methodObject] of Object.entries(service.methods)) {\n      const methodNameLowerCamelCase = methodName[0].toLowerCase() + methodName.substring(1);\n      methods[methodNameLowerCamelCase] = methodObject;\n    }\n\n    return methods;\n  }\n  /**\n   * gRPC-fallback version of constructSettings\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n\n\n  constructSettings(serviceName, clientConfig, configOverrides, headers) {\n    function buildMetadata(abTests, moreHeaders) {\n      const metadata = {};\n\n      if (!headers) {\n        headers = {};\n      } // Since gRPC expects each header to be an array,\n      // we are doing the same for fallback here.\n\n\n      for (const key in headers) {\n        metadata[key] = Array.isArray(headers[key]) ? headers[key] : [headers[key]];\n      } // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n\n\n      const clientVersions = [];\n\n      if (metadata[CLIENT_VERSION_HEADER] && metadata[CLIENT_VERSION_HEADER][0]) {\n        clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(' '));\n      }\n\n      clientVersions.push(`grpc-web/${exports.version}`);\n      metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n\n      if (!moreHeaders) {\n        return metadata;\n      }\n\n      for (const key in moreHeaders) {\n        if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n          const value = moreHeaders[key];\n\n          if (Array.isArray(value)) {\n            if (metadata[key] === undefined) {\n              metadata[key] = value;\n            } else {\n              if (Array.isArray(metadata[key])) {\n                metadata[key].push(...value);\n              } else {\n                throw new Error(`Can not add value ${value} to the call metadata.`);\n              }\n            }\n          } else {\n            metadata[key] = [value];\n          }\n        }\n      }\n\n      return metadata;\n    }\n\n    return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, {\n      metadataBuilder: buildMetadata\n    });\n  }\n  /**\n   * gRPC-fallback version of createStub\n   * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\n   *\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n   * @param {Object} opts - Connection options, as described below.\n   * @param {string} opts.servicePath - The hostname of the API endpoint service.\n   * @param {number} opts.port - The port of the service.\n   * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n   */\n\n\n  async createStub(service, opts, // For consistency with createStub in grpc.ts, customServicePath is defined:\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  customServicePath) {\n    if (!this.authClient) {\n      if (this.auth && 'getClient' in this.auth) {\n        this.authClient = await this.auth.getClient();\n      } else if (this.auth && 'getRequestHeaders' in this.auth) {\n        this.authClient = this.auth;\n      }\n    }\n\n    if (!this.authClient) {\n      throw new Error('No authentication was provided');\n    }\n\n    service.resolveAll();\n    const methods = GrpcClient.getServiceMethods(service);\n    const protocol = opts.protocol || 'https';\n    let servicePath = opts.servicePath;\n\n    if (!servicePath && service.options && service.options['(google.api.default_host)']) {\n      servicePath = service.options['(google.api.default_host)'];\n    }\n\n    if (!servicePath) {\n      throw new Error(`Cannot determine service API path for service ${service.name}.`);\n    }\n\n    let servicePort;\n    const match = servicePath.match(/^(.*):(\\d+)$/);\n\n    if (match) {\n      servicePath = match[1];\n      servicePort = parseInt(match[2]);\n    }\n\n    if (opts.port) {\n      servicePort = opts.port;\n    } else if (!servicePort) {\n      servicePort = 443;\n    }\n\n    const encoder = this.fallback === 'rest' ? fallbackRest.encodeRequest : fallbackProto.encodeRequest;\n    const decoder = this.fallback === 'rest' ? fallbackRest.decodeResponse : fallbackProto.decodeResponse;\n    const serviceStub = fallbackServiceStub_1.generateServiceStub(methods, protocol, servicePath, servicePort, this.authClient, encoder, decoder);\n    return serviceStub;\n  }\n\n}\n\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */\n\nfunction lro(options) {\n  options = Object.assign({\n    scopes: []\n  }, options);\n  const gaxGrpc = new GrpcClient(options);\n  return new operationsClient_1.OperationsClientBuilder(gaxGrpc);\n}\n\nexports.lro = lro;\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\n\nfunction createApiCall(func, settings, descriptor) {\n  if (descriptor && 'streaming' in descriptor) {\n    return () => {\n      throw new Error('The gRPC-fallback client library (e.g. browser version of the library) currently does not support streaming calls.');\n    };\n  }\n\n  return createApiCall_1.createApiCall(func, settings, descriptor);\n}\n\nexports.createApiCall = createApiCall;\nexports.protobufMinimal = require(\"protobufjs/minimal\"); // Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\n\nconst fallback = module.exports;\nexports.fallback = fallback;","map":{"version":3,"sources":["../../src/fallback.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fallback = exports.protobuf = exports.createApiCall = exports.lro = exports.GrpcClient = exports.defaultToObjectOptions = exports.version = exports.routingHeader = void 0;\nconst protobuf = require(\"protobufjs\");\nexports.protobuf = protobuf;\nconst gax = require(\"./gax\");\nconst routingHeader = require(\"./routingHeader\");\nexports.routingHeader = routingHeader;\nconst status_1 = require(\"./status\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst objectHash = require(\"object-hash\");\nconst operationsClient_1 = require(\"./operationsClient\");\nconst createApiCall_1 = require(\"./createApiCall\");\nconst fallbackProto = require(\"./fallbackProto\");\nconst fallbackRest = require(\"./fallbackRest\");\nconst featureDetection_1 = require(\"./featureDetection\");\nconst fallbackServiceStub_1 = require(\"./fallbackServiceStub\");\nvar pathTemplate_1 = require(\"./pathTemplate\");\nObject.defineProperty(exports, \"PathTemplate\", { enumerable: true, get: function () { return pathTemplate_1.PathTemplate; } });\nvar gax_1 = require(\"./gax\");\nObject.defineProperty(exports, \"CallSettings\", { enumerable: true, get: function () { return gax_1.CallSettings; } });\nObject.defineProperty(exports, \"constructSettings\", { enumerable: true, get: function () { return gax_1.constructSettings; } });\nObject.defineProperty(exports, \"RetryOptions\", { enumerable: true, get: function () { return gax_1.RetryOptions; } });\nexports.version = require('../../package.json').version + '-fallback';\nvar descriptor_1 = require(\"./descriptor\");\nObject.defineProperty(exports, \"BundleDescriptor\", { enumerable: true, get: function () { return descriptor_1.BundleDescriptor; } });\nObject.defineProperty(exports, \"LongrunningDescriptor\", { enumerable: true, get: function () { return descriptor_1.LongrunningDescriptor; } });\nObject.defineProperty(exports, \"PageDescriptor\", { enumerable: true, get: function () { return descriptor_1.PageDescriptor; } });\nObject.defineProperty(exports, \"StreamDescriptor\", { enumerable: true, get: function () { return descriptor_1.StreamDescriptor; } });\nvar streaming_1 = require(\"./streamingCalls/streaming\");\nObject.defineProperty(exports, \"StreamType\", { enumerable: true, get: function () { return streaming_1.StreamType; } });\nexports.defaultToObjectOptions = {\n    keepCase: false,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n};\nconst CLIENT_VERSION_HEADER = 'x-goog-api-client';\nclass GrpcClient {\n    /**\n     * gRPC-fallback version of GrpcClient\n     * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n     *\n     * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\n     *  to use in Node.js. Required for browser, optional for Node.js.\n     * @constructor\n     */\n    constructor(options = {}) {\n        if (!featureDetection_1.isNodeJS()) {\n            if (!options.auth) {\n                throw new Error(JSON.stringify(options) +\n                    'You need to pass auth instance to use gRPC-fallback client in browser or other non-Node.js environments. Use OAuth2Client from google-auth-library.');\n            }\n            this.auth = options.auth;\n        }\n        else {\n            this.auth =\n                options.auth ||\n                    new google_auth_library_1.GoogleAuth(options);\n        }\n        this.fallback = options.fallback !== 'rest' ? 'proto' : 'rest';\n        this.grpcVersion = require('../../package.json').version;\n    }\n    /**\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\n     * This method will delete the proto cache content.\n     */\n    static clearProtoCache() {\n        GrpcClient.protoCache.clear();\n    }\n    /**\n     * gRPC-fallback version of loadProto\n     * Loads the protobuf root object from a JSON object created from a proto file\n     * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n     * @returns {Object} Root namespace of proto JSON\n     */\n    loadProto(jsonObject) {\n        const rootObject = protobuf.Root.fromJSON(jsonObject);\n        return rootObject;\n    }\n    loadProtoJSON(json, ignoreCache = false) {\n        const hash = objectHash(json);\n        const cached = GrpcClient.protoCache.get(hash);\n        if (cached && !ignoreCache) {\n            return cached;\n        }\n        const root = protobuf.Root.fromJSON(json);\n        GrpcClient.protoCache.set(hash, root);\n        return root;\n    }\n    static getServiceMethods(service) {\n        const methods = {};\n        for (const [methodName, methodObject] of Object.entries(service.methods)) {\n            const methodNameLowerCamelCase = methodName[0].toLowerCase() + methodName.substring(1);\n            methods[methodNameLowerCamelCase] = methodObject;\n        }\n        return methods;\n    }\n    /**\n     * gRPC-fallback version of constructSettings\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */\n    constructSettings(serviceName, clientConfig, configOverrides, headers) {\n        function buildMetadata(abTests, moreHeaders) {\n            const metadata = {};\n            if (!headers) {\n                headers = {};\n            }\n            // Since gRPC expects each header to be an array,\n            // we are doing the same for fallback here.\n            for (const key in headers) {\n                metadata[key] = Array.isArray(headers[key])\n                    ? headers[key]\n                    : [headers[key]];\n            }\n            // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n            const clientVersions = [];\n            if (metadata[CLIENT_VERSION_HEADER] &&\n                metadata[CLIENT_VERSION_HEADER][0]) {\n                clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(' '));\n            }\n            clientVersions.push(`grpc-web/${exports.version}`);\n            metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n            if (!moreHeaders) {\n                return metadata;\n            }\n            for (const key in moreHeaders) {\n                if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n                    const value = moreHeaders[key];\n                    if (Array.isArray(value)) {\n                        if (metadata[key] === undefined) {\n                            metadata[key] = value;\n                        }\n                        else {\n                            if (Array.isArray(metadata[key])) {\n                                metadata[key].push(...value);\n                            }\n                            else {\n                                throw new Error(`Can not add value ${value} to the call metadata.`);\n                            }\n                        }\n                    }\n                    else {\n                        metadata[key] = [value];\n                    }\n                }\n            }\n            return metadata;\n        }\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, { metadataBuilder: buildMetadata });\n    }\n    /**\n     * gRPC-fallback version of createStub\n     * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\n     *\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n     * @param {Object} opts - Connection options, as described below.\n     * @param {string} opts.servicePath - The hostname of the API endpoint service.\n     * @param {number} opts.port - The port of the service.\n     * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n     */\n    async createStub(service, opts, \n    // For consistency with createStub in grpc.ts, customServicePath is defined:\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    customServicePath) {\n        if (!this.authClient) {\n            if (this.auth && 'getClient' in this.auth) {\n                this.authClient = await this.auth.getClient();\n            }\n            else if (this.auth && 'getRequestHeaders' in this.auth) {\n                this.authClient = this.auth;\n            }\n        }\n        if (!this.authClient) {\n            throw new Error('No authentication was provided');\n        }\n        service.resolveAll();\n        const methods = GrpcClient.getServiceMethods(service);\n        const protocol = opts.protocol || 'https';\n        let servicePath = opts.servicePath;\n        if (!servicePath &&\n            service.options &&\n            service.options['(google.api.default_host)']) {\n            servicePath = service.options['(google.api.default_host)'];\n        }\n        if (!servicePath) {\n            throw new Error(`Cannot determine service API path for service ${service.name}.`);\n        }\n        let servicePort;\n        const match = servicePath.match(/^(.*):(\\d+)$/);\n        if (match) {\n            servicePath = match[1];\n            servicePort = parseInt(match[2]);\n        }\n        if (opts.port) {\n            servicePort = opts.port;\n        }\n        else if (!servicePort) {\n            servicePort = 443;\n        }\n        const encoder = this.fallback === 'rest'\n            ? fallbackRest.encodeRequest\n            : fallbackProto.encodeRequest;\n        const decoder = this.fallback === 'rest'\n            ? fallbackRest.decodeResponse\n            : fallbackProto.decodeResponse;\n        const serviceStub = fallbackServiceStub_1.generateServiceStub(methods, protocol, servicePath, servicePort, this.authClient, encoder, decoder);\n        return serviceStub;\n    }\n}\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */\nfunction lro(options) {\n    options = Object.assign({ scopes: [] }, options);\n    const gaxGrpc = new GrpcClient(options);\n    return new operationsClient_1.OperationsClientBuilder(gaxGrpc);\n}\nexports.lro = lro;\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\nfunction createApiCall(func, settings, descriptor) {\n    if (descriptor && 'streaming' in descriptor) {\n        return () => {\n            throw new Error('The gRPC-fallback client library (e.g. browser version of the library) currently does not support streaming calls.');\n        };\n    }\n    return createApiCall_1.createApiCall(func, settings, descriptor);\n}\nexports.createApiCall = createApiCall;\nexports.protobufMinimal = require(\"protobufjs/minimal\");\n// Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\nconst fallback = module.exports;\nexports.fallback = fallback;\n//# sourceMappingURL=fallback.js.map"]},"metadata":{},"sourceType":"script"}