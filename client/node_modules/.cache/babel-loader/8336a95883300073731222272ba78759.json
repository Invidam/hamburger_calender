{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const usePushWork = (workList, setWorkList, callback) => {\n  _s();\n\n  const [color, setColor] = useState();\n  const [workName, setWorkName] = useState();\n  const [workTime, setWorkTime] = useState();\n\n  const validator = workObj => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n\n  const hexToRgba = color => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n\n  const onSubmitColor = color => {\n    if (!color) {} else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n\n    workColor = color;\n  };\n\n  const onSubmitWork = event => {\n    event.preventDefault();\n    const workName = event.target.workName.value;\n    const workTime = parseInt(event.target.workTime.value);\n    const workObj = {\n      workName,\n      workTime,\n      workColor\n    };\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n\n    if (willUpdate) {\n      callback(); // workList.push(workObj);\n\n      setWorkList([...workList, workObj]);\n    } else {\n      let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${!workTime + !workColor > 0 && !workName ? \", \" : \"\"}${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${workColor ? \"\" : \"WorkColor\"} ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n\n  return {\n    workList,\n    onSubmitColor,\n    onSubmitWork\n  };\n};\n\n_s(usePushWork, \"Omdkz2Ol0k71aSnoniOiNS2509M=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/work/usePushWork.js"],"names":["useState","usePushWork","workList","setWorkList","callback","color","setColor","workName","setWorkName","workTime","setWorkTime","validator","workObj","workColor","hexToRgba","r","parseInt","substr","g","b","onSubmitColor","onSubmitWork","event","preventDefault","target","value","willUpdate","errText","alert"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nexport const usePushWork = (workList, setWorkList, callback) => {\n  const [color, setColor] = useState();\n  const [workName, setWorkName] = useState();\n  const [workTime, setWorkTime] = useState();\n  const validator = (workObj) => {\n    return workObj.workName && workObj.workTime && workObj.workColor;\n  };\n  const hexToRgba = (color) => {\n    const r = parseInt(color.substr(1, 2), 16);\n    const g = parseInt(color.substr(3, 2), 16);\n    const b = parseInt(color.substr(5, 2), 16);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\n  };\n  const onSubmitColor = (color) => {\n    if (!color) {\n    } else if (color.substr(0, 1) === \"#\") {\n      color = hexToRgba(color);\n    }\n    workColor = color;\n  };\n  const onSubmitWork = (event) => {\n    event.preventDefault();\n    const workName = event.target.workName.value;\n    const workTime = parseInt(event.target.workTime.value);\n    const workObj = { workName, workTime, workColor };\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n    if (willUpdate) {\n      callback();\n      // workList.push(workObj);\n      setWorkList([...workList, workObj]);\n    } else {\n      let errText = `[ERROR] ${workName ? \"\" : \"WorkName\"}${\n        !workTime + !workColor > 0 && !workName ? \", \" : \"\"\n      }${workTime ? \"\" : \"WorkTime\"}${!workColor > 0 && !workTime ? \", \" : \"\"}${\n        workColor ? \"\" : \"WorkColor\"\n      } ${!workName + !workTime + !workColor > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n  return { workList, onSubmitColor, onSubmitWork };\n};\n"]},"metadata":{},"sourceType":"module"}