{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nimport { isEqualYYYYMMDateStr } from \"../../tools/time\";\nlet befDate;\nexport const useDateInfo = (user, date) => {\n  _s();\n\n  const [dateInfo, setDateInfo] = useState();\n  const [isDateInfoLoad, setLoad] = useState(true);\n\n  const getUserInfo = async () => {\n    try {\n      setLoad(true);\n      const data = await APIv2.workList(user, date).getAll();\n      if (!(data === null || data === void 0 ? void 0 : data.data)) throw new Error(\"Cannot found Your Work List\");\n      setDateInfo(data === null || data === void 0 ? void 0 : data.data);\n      setLoad(false);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"BEF: \", befDate, \"CURR: \", date);\n    if (user && (!befDate || !isEqualYYYYMMDateStr(befDate, date))) getUserInfo();\n    befDate = date;\n  }, [user, date]);\n  return [dateInfo, isDateInfoLoad];\n};\n\n_s(useDateInfo, \"iCcFurWZIPiNdVpHKKvf9nJ3WSQ=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/calendar/useDateInfo.js"],"names":["useEffect","useState","API","APIv2","isEqualYYYYMMDateStr","befDate","useDateInfo","user","date","dateInfo","setDateInfo","isDateInfoLoad","setLoad","getUserInfo","data","workList","getAll","Error","error","alert","console","log"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,iBAA3B;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,IAAIC,OAAJ;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAAA;;AACzC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,EAAxC;AACA,QAAM,CAACU,cAAD,EAAiBC,OAAjB,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;;AAEA,QAAMY,WAAW,GAAG,YAAY;AAC9B,QAAI;AACFD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACA,YAAME,IAAI,GAAG,MAAMX,KAAK,CAACY,QAAN,CAAeR,IAAf,EAAqBC,IAArB,EAA2BQ,MAA3B,EAAnB;AACA,UAAI,EAACF,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAJ,EAAiB,MAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;AACjBP,MAAAA,WAAW,CAACI,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAX;AACAF,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAND,CAME,OAAOM,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,GAVD;;AAWAlB,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBhB,OAArB,EAA8B,QAA9B,EAAwCG,IAAxC;AACA,QAAID,IAAI,KAAK,CAACF,OAAD,IAAY,CAACD,oBAAoB,CAACC,OAAD,EAAUG,IAAV,CAAtC,CAAR,EACEK,WAAW;AACbR,IAAAA,OAAO,GAAGG,IAAV;AACD,GALQ,EAKN,CAACD,IAAD,EAAOC,IAAP,CALM,CAAT;AAMA,SAAO,CAACC,QAAD,EAAWE,cAAX,CAAP;AACD,CAtBM;;GAAML,W","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nimport { isEqualYYYYMMDateStr } from \"../../tools/time\";\nlet befDate;\n\nexport const useDateInfo = (user, date) => {\n  const [dateInfo, setDateInfo] = useState();\n  const [isDateInfoLoad, setLoad] = useState(true);\n\n  const getUserInfo = async () => {\n    try {\n      setLoad(true);\n      const data = await APIv2.workList(user, date).getAll();\n      if (!data?.data) throw new Error(\"Cannot found Your Work List\");\n      setDateInfo(data?.data);\n      setLoad(false);\n    } catch (error) {\n      alert(error);\n    }\n  };\n  useEffect(() => {\n    console.log(\"BEF: \", befDate, \"CURR: \", date);\n    if (user && (!befDate || !isEqualYYYYMMDateStr(befDate, date)))\n      getUserInfo();\n    befDate = date;\n  }, [user, date]);\n  return [dateInfo, isDateInfoLoad];\n};\n"]},"metadata":{},"sourceType":"module"}