{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { API } from \"../../tools/API\";\nexport const useWorkListGrade = (user, date) => {\n  _s();\n\n  const [gradeInfo, setGradeInfo] = useState(); // const [difference, setDifference] = useState();\n  // const [target, setTarget] = useState();\n  // const [value, setValue] = useState();\n\n  const [isGradeLoading, setLoad] = useState(false);\n\n  const updateInfo = async () => {\n    try {\n      setLoad(true);\n      const res = await API.workList(user, date).grade();\n      console.log(res.data);\n      if (!(res === null || res === void 0 ? void 0 : res.data)) throw new Error(\"[Error] WorkList Grade cannot load\");\n      const resGradeInfo = res.data;\n      setGradeInfo(resGradeInfo); // setGrade(gradeInfo.grade);\n      // setDifference(gradeInfo.difference);\n      // setTarget(gradeInfo.target);\n      // setValue(gradeInfo.value);\n\n      setLoad(false);\n    } catch (error) {\n      alert(error);\n      setLoad(false);\n    }\n  };\n\n  return [gradeInfo, isGradeLoading, updateInfo]; //return [grade, difference, target, value, isGradeLoading, updateInfo];\n};\n\n_s(useWorkListGrade, \"X8jA0+XOyQXYPk9a8i1XukM9pYg=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/client/src/hooks/workList/useWorkListGrade.js"],"names":["useState","API","useWorkListGrade","user","date","gradeInfo","setGradeInfo","isGradeLoading","setLoad","updateInfo","res","workList","grade","console","log","data","Error","resGradeInfo","error","alert"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAAA;;AAC9C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,EAA1C,CAD8C,CAE9C;AACA;AACA;;AACA,QAAM,CAACO,cAAD,EAAiBC,OAAjB,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;;AACA,QAAMS,UAAU,GAAG,YAAY;AAC7B,QAAI;AACFD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACA,YAAME,GAAG,GAAG,MAAMT,GAAG,CAACU,QAAJ,CAAaR,IAAb,EAAmBC,IAAnB,EAAyBQ,KAAzB,EAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,IAAhB;AACA,UAAI,EAACL,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEK,IAAN,CAAJ,EAAgB,MAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AAChB,YAAMC,YAAY,GAAGP,GAAG,CAACK,IAAzB;AACAT,MAAAA,YAAY,CAACW,YAAD,CAAZ,CANE,CAOF;AACA;AACA;AACA;;AACAT,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAZD,CAYE,OAAOU,KAAP,EAAc;AACdC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACAV,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,GAjBD;;AAkBA,SAAO,CAACH,SAAD,EAAYE,cAAZ,EAA4BE,UAA5B,CAAP,CAxB8C,CAyB9C;AACD,CA1BM;;GAAMP,gB","sourcesContent":["import { useState } from \"react\";\nimport { API } from \"../../tools/API\";\n\nexport const useWorkListGrade = (user, date) => {\n  const [gradeInfo, setGradeInfo] = useState();\n  // const [difference, setDifference] = useState();\n  // const [target, setTarget] = useState();\n  // const [value, setValue] = useState();\n  const [isGradeLoading, setLoad] = useState(false);\n  const updateInfo = async () => {\n    try {\n      setLoad(true);\n      const res = await API.workList(user, date).grade();\n      console.log(res.data);\n      if (!res?.data) throw new Error(\"[Error] WorkList Grade cannot load\");\n      const resGradeInfo = res.data;\n      setGradeInfo(resGradeInfo);\n      // setGrade(gradeInfo.grade);\n      // setDifference(gradeInfo.difference);\n      // setTarget(gradeInfo.target);\n      // setValue(gradeInfo.value);\n      setLoad(false);\n    } catch (error) {\n      alert(error);\n      setLoad(false);\n    }\n  };\n  return [gradeInfo, isGradeLoading, updateInfo];\n  //return [grade, difference, target, value, isGradeLoading, updateInfo];\n};\n"]},"metadata":{},"sourceType":"module"}