{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { API, APIv2 } from \"../../../tools/API\";\nimport { LocalStroage } from \"../../../tools/LocalStorage\";\nimport { getToday } from \"../../../tools/time\";\nexport const isEmptyTimeObj = timeObj => timeObj ? !Object.keys(timeObj).length : true; // !timeObj || timeObj.hour === -1 || timeObj.minute === -1;\n\nconst getEmptyTimeObj = () => {\n  return {};\n};\n\nconst checkTimeObj = timeObj => isEmptyTimeObj(timeObj) ? getEmptyTimeObj() : timeObj;\n\nconst getInitList = (user, key) => !user && window.localStorage.getItem(key) ? JSON.parse(window.localStorage.getItem(key)) : null;\n\nexport const useUpdateTime = (key, user, date) => {\n  _s();\n\n  const initVal = getInitList(user, key);\n  const [recordTime, setRecordTime] = useState(initVal);\n\n  const getRecrodTime = async () => {\n    let resTimeObj;\n\n    if (user) {\n      const data = await APIv2.recordTime(user, date, key).get();\n      resTimeObj = checkTimeObj(data === null || data === void 0 ? void 0 : data.data);\n    } else resTimeObj = LocalStroage.setRecordTime(resTimeObj);\n  };\n\n  useEffect(() => {\n    getRecrodTime();\n  }, [date, user]);\n\n  const updateRecordTime = timeObj => {\n    timeObj = checkTimeObj(timeObj); //\n\n    if (user) API.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n      value: timeObj\n    });else window.localStorage.setItem(key, JSON.stringify(timeObj));\n    setRecordTime(timeObj);\n  };\n\n  const onClick = event => {\n    event.preventDefault();\n    const [hour, minute] = new Date().toTimeString().split(\":\").slice(0, 2).map(numChar => parseInt(numChar));\n    const timeObj = {\n      hour,\n      minute\n    };\n    updateRecordTime(timeObj);\n  };\n\n  return [recordTime, onClick, updateRecordTime];\n};\n\n_s(useUpdateTime, \"h490kuPbigxM53kww9L99hhwvTY=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/workList/time/useUpdateTime.js"],"names":["useState","useEffect","API","APIv2","LocalStroage","getToday","isEmptyTimeObj","timeObj","Object","keys","length","getEmptyTimeObj","checkTimeObj","getInitList","user","key","window","localStorage","getItem","JSON","parse","useUpdateTime","date","initVal","recordTime","setRecordTime","getRecrodTime","resTimeObj","data","get","updateRecordTime","post","value","setItem","stringify","onClick","event","preventDefault","hour","minute","Date","toTimeString","split","slice","map","numChar","parseInt"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,oBAA3B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAC5BA,OAAO,GAAG,CAACC,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,MAAzB,GAAkC,IADpC,C,CAEP;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC5B,SAAO,EAAP;AACD,CAFD;;AAIA,MAAMC,YAAY,GAAIL,OAAD,IACnBD,cAAc,CAACC,OAAD,CAAd,GAA0BI,eAAe,EAAzC,GAA8CJ,OADhD;;AAEA,MAAMM,WAAW,GAAG,CAACC,IAAD,EAAOC,GAAP,KAClB,CAACD,IAAD,IAASE,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BH,GAA5B,CAAT,GACII,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BH,GAA5B,CAAX,CADJ,GAEI,IAHN;;AAIA,OAAO,MAAMM,aAAa,GAAG,CAACN,GAAD,EAAMD,IAAN,EAAYQ,IAAZ,KAAqB;AAAA;;AAChD,QAAMC,OAAO,GAAGV,WAAW,CAACC,IAAD,EAAOC,GAAP,CAA3B;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BzB,QAAQ,CAACuB,OAAD,CAA5C;;AAEA,QAAMG,aAAa,GAAG,YAAY;AAChC,QAAIC,UAAJ;;AACA,QAAIb,IAAJ,EAAU;AACR,YAAMc,IAAI,GAAG,MAAMzB,KAAK,CAACqB,UAAN,CAAiBV,IAAjB,EAAuBQ,IAAvB,EAA6BP,GAA7B,EAAkCc,GAAlC,EAAnB;AACAF,MAAAA,UAAU,GAAGf,YAAY,CAACgB,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAzB;AACD,KAHD,MAGOD,UAAU,GAAGvB,YAAY,CAACqB,aAAb,CAA2BE,UAA3B,CAAb;AACR,GAND;;AAOA1B,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,aAAa;AACd,GAFQ,EAEN,CAACJ,IAAD,EAAOR,IAAP,CAFM,CAAT;;AAIA,QAAMgB,gBAAgB,GAAIvB,OAAD,IAAa;AACpCA,IAAAA,OAAO,GAAGK,YAAY,CAACL,OAAD,CAAtB,CADoC,CAEpC;;AACA,QAAIO,IAAJ,EACEZ,GAAG,CAAC6B,IAAJ,CAAU,QAAOjB,IAAK,IAAGQ,IAAK,yBAAwBP,GAAI,EAA1D,EAA6D;AAC3DiB,MAAAA,KAAK,EAAEzB;AADoD,KAA7D,EADF,KAIKS,MAAM,CAACC,YAAP,CAAoBgB,OAApB,CAA4BlB,GAA5B,EAAiCI,IAAI,CAACe,SAAL,CAAe3B,OAAf,CAAjC;AACLkB,IAAAA,aAAa,CAAClB,OAAD,CAAb;AACD,GATD;;AAUA,QAAM4B,OAAO,GAAIC,KAAD,IAAW;AACzBA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAM,CAACC,IAAD,EAAOC,MAAP,IAAiB,IAAIC,IAAJ,GACpBC,YADoB,GAEpBC,KAFoB,CAEd,GAFc,EAGpBC,KAHoB,CAGd,CAHc,EAGX,CAHW,EAIpBC,GAJoB,CAIfC,OAAD,IAAaC,QAAQ,CAACD,OAAD,CAJL,CAAvB;AAKA,UAAMtC,OAAO,GAAG;AAAE+B,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB;AACAT,IAAAA,gBAAgB,CAACvB,OAAD,CAAhB;AACD,GATD;;AAUA,SAAO,CAACiB,UAAD,EAAaW,OAAb,EAAsBL,gBAAtB,CAAP;AACD,CApCM;;GAAMT,a","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { API, APIv2 } from \"../../../tools/API\";\nimport { LocalStroage } from \"../../../tools/LocalStorage\";\nimport { getToday } from \"../../../tools/time\";\n\nexport const isEmptyTimeObj = (timeObj) =>\n  timeObj ? !Object.keys(timeObj).length : true;\n// !timeObj || timeObj.hour === -1 || timeObj.minute === -1;\n\nconst getEmptyTimeObj = () => {\n  return {};\n};\n\nconst checkTimeObj = (timeObj) =>\n  isEmptyTimeObj(timeObj) ? getEmptyTimeObj() : timeObj;\nconst getInitList = (user, key) =>\n  !user && window.localStorage.getItem(key)\n    ? JSON.parse(window.localStorage.getItem(key))\n    : null;\nexport const useUpdateTime = (key, user, date) => {\n  const initVal = getInitList(user, key);\n  const [recordTime, setRecordTime] = useState(initVal);\n\n  const getRecrodTime = async () => {\n    let resTimeObj;\n    if (user) {\n      const data = await APIv2.recordTime(user, date, key).get();\n      resTimeObj = checkTimeObj(data?.data);\n    } else resTimeObj = LocalStroage.setRecordTime(resTimeObj);\n  };\n  useEffect(() => {\n    getRecrodTime();\n  }, [date, user]);\n\n  const updateRecordTime = (timeObj) => {\n    timeObj = checkTimeObj(timeObj);\n    //\n    if (user)\n      API.post(`/api/${user}/${date}/worklist/record-time/${key}`, {\n        value: timeObj,\n      });\n    else window.localStorage.setItem(key, JSON.stringify(timeObj));\n    setRecordTime(timeObj);\n  };\n  const onClick = (event) => {\n    event.preventDefault();\n    const [hour, minute] = new Date()\n      .toTimeString()\n      .split(\":\")\n      .slice(0, 2)\n      .map((numChar) => parseInt(numChar));\n    const timeObj = { hour, minute };\n    updateRecordTime(timeObj);\n  };\n  return [recordTime, onClick, updateRecordTime];\n};\n"]},"metadata":{},"sourceType":"module"}