{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const usePushWork = validator => {\n  _s();\n\n  const [value, setValue] = useState([]);\n\n  const onSubmitWork = event => {\n    event.preventDefault();\n    const workName = event.target.workName.value;\n    const workTime = event.target.workTime.value;\n    const workObj = {\n      work: workName,\n      time: workTime\n    };\n    console.log(workObj);\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n\n    if (willUpdate) {\n      console.log(workObj);\n      setValue(value.push(workObj));\n    } // return value;\n\n  };\n\n  return {\n    value,\n    onSubmitWork\n  };\n};\n\n_s(usePushWork, \"nXyUXLCLqjbO8MhWxJGJNfpoKZM=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/usePushWork.js"],"names":["useState","usePushWork","validator","value","setValue","onSubmitWork","event","preventDefault","workName","target","workTime","workObj","work","time","console","log","willUpdate","push"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,WAAW,GAAIC,SAAD,IAAe;AAAA;;AACxC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;;AACA,QAAMK,YAAY,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAaD,QAAb,CAAsBL,KAAvC;AACA,UAAMO,QAAQ,GAAGJ,KAAK,CAACG,MAAN,CAAaC,QAAb,CAAsBP,KAAvC;AACA,UAAMQ,OAAO,GAAG;AAAEC,MAAAA,IAAI,EAAEJ,QAAR;AAAkBK,MAAAA,IAAI,EAAEH;AAAxB,KAAhB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,QAAIK,UAAU,GAAG,IAAjB;AACA,QAAI,OAAOd,SAAP,KAAqB,UAAzB,EAAqCc,UAAU,GAAGd,SAAS,CAACS,OAAD,CAAtB;;AACrC,QAAIK,UAAJ,EAAgB;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAP,MAAAA,QAAQ,CAACD,KAAK,CAACc,IAAN,CAAWN,OAAX,CAAD,CAAR;AACD,KAX6B,CAY9B;;AACD,GAbD;;AAcA,SAAO;AAAER,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAP;AACD,CAjBM;;GAAMJ,W","sourcesContent":["import { useState } from \"react\";\n\nexport const usePushWork = (validator) => {\n  const [value, setValue] = useState([]);\n  const onSubmitWork = (event) => {\n    event.preventDefault();\n    const workName = event.target.workName.value;\n    const workTime = event.target.workTime.value;\n    const workObj = { work: workName, time: workTime };\n    console.log(workObj);\n    let willUpdate = true;\n    if (typeof validator === \"function\") willUpdate = validator(workObj);\n    if (willUpdate) {\n      console.log(workObj);\n      setValue(value.push(workObj));\n    }\n    // return value;\n  };\n  return { value, onSubmitWork };\n};\n"]},"metadata":{},"sourceType":"module"}