{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\nexport const useTargetSetting = (user, isLoginLoading) => {\n  _s();\n\n  console.log(\"UPDATE SETTING HOOK USER: \");\n  const [targetWorkTime, setTargetWorkTime] = useState(user ? 0 : -1);\n  const [targetWakeHour, setTargetWakeHour] = useState(user ? 0 : -1);\n  const [targetBedHour, setTargetBedHour] = useState(user ? 0 : -1);\n  const [targetWakeMinute, setTargetWakeMinute] = useState(user ? 0 : -1);\n  const [targetBedMinute, setTargetBedMinute] = useState(user ? 0 : -1);\n  const [isSettingHookLoading, setLoad] = useState(true);\n\n  const onChangeTargetWorkTime = workTime => setTargetWorkTime(parseInt(workTime));\n\n  const onChangeTargetWakeHour = wakeHour => setTargetWakeHour(parseInt(wakeHour));\n\n  const onChangeTargetBedHour = bedHour => setTargetBedHour(parseInt(bedHour));\n\n  const onChangeTargetWakeMinute = wakeMinute => setTargetWakeMinute(parseInt(wakeMinute));\n\n  const onChangeTargetBedMinute = bedMinute => setTargetBedMinute(parseInt(bedMinute));\n\n  const getUserSetting = async () => {\n    try {\n      if (user) {\n        console.log(\"SETTING\");\n        const data = await APIv2.userSetting(user).get(); //API.get(`/auth/setting/${user}`);\n\n        const settingObj = data === null || data === void 0 ? void 0 : data.data;\n        if (!data) throw new Error(\"Cannot find data\");\n        setTargetWorkTime(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetWorkTime);\n        setTargetWakeHour(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetWakeTime.hour);\n        setTargetBedHour(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetBedTime.hour);\n        setTargetWakeMinute(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetWakeTime.minute);\n        setTargetBedMinute(settingObj === null || settingObj === void 0 ? void 0 : settingObj.targetBedTime.minute);\n      } else {//\n      }\n\n      if (!isLoginLoading && isSettingHookLoading) {\n        setLoad(false);\n        console.log(\"SETTING END\", isSettingHookLoading);\n      }\n    } catch (error) {\n      setLoad(false);\n      alert(error); // history.push(\"/setting\");\n    }\n  };\n\n  useEffect(() => {\n    getUserSetting();\n  }, [user, isLoginLoading]);\n\n  const validator = targetTimeObj => {\n    return targetTimeObj.targetWorkTime && targetTimeObj.targetWakeTime.hour && targetTimeObj.targetBedTime.hour && targetTimeObj.targetWakeTime.minute && targetTimeObj.targetBedTime.minute;\n  };\n\n  const onEditTargetTime = event => {\n    event.preventDefault();\n    let willUpdate = true;\n    const targetTimeObj = {\n      targetWorkTime,\n      targetWakeTime: {\n        hour: targetWakeHour,\n        minute: targetWakeMinute\n      },\n      targetBedTime: {\n        hour: targetBedHour,\n        minute: targetBedMinute\n      }\n    };\n    if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n\n    if (willUpdate) {\n      APIv2.userSetting(user).edit(targetTimeObj); // API.post(`/auth/setting/${user}`, {\n      //   value: targetTimeObj,\n      //   user,\n      // });\n    } else {\n      const targetWakeTime = targetWakeHour && targetWakeMinute;\n      const targetBedTime = targetBedHour && targetBedMinute;\n      let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${!targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"}${targetWakeTime ? \"\" : \"TargetWakeTime\"}${!targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"}${targetBedTime ? \"\" : \"TargetBedtime\"} ${!targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"} not entered.`;\n      alert(errText);\n    }\n  };\n\n  const targetTimeObj = {\n    targetWorkTime,\n    targetWakeTime: {\n      hour: targetWakeHour,\n      minute: targetWakeMinute\n    },\n    targetBedTime: {\n      hour: targetBedHour,\n      minute: targetBedMinute\n    }\n  };\n  return {\n    onEditTargetTime,\n    targetWorkTime,\n    onChangeTargetWorkTime,\n    targetTimeObj,\n    targetWakeHour,\n    targetBedHour,\n    targetWakeMinute,\n    targetBedMinute,\n    onChangeTargetWakeHour,\n    onChangeTargetBedHour,\n    onChangeTargetWakeMinute,\n    onChangeTargetBedMinute,\n    isSettingHookLoading\n  };\n};\n\n_s(useTargetSetting, \"xplfkcNyhF0GTTZ7tBIkowfN450=\");","map":{"version":3,"sources":["/home/invidam/hamburger_calender/src/hooks/user/useTargetSetting.js"],"names":["useEffect","useState","API","APIv2","useTargetSetting","user","isLoginLoading","console","log","targetWorkTime","setTargetWorkTime","targetWakeHour","setTargetWakeHour","targetBedHour","setTargetBedHour","targetWakeMinute","setTargetWakeMinute","targetBedMinute","setTargetBedMinute","isSettingHookLoading","setLoad","onChangeTargetWorkTime","workTime","parseInt","onChangeTargetWakeHour","wakeHour","onChangeTargetBedHour","bedHour","onChangeTargetWakeMinute","wakeMinute","onChangeTargetBedMinute","bedMinute","getUserSetting","data","userSetting","get","settingObj","Error","targetWakeTime","hour","targetBedTime","minute","error","alert","validator","targetTimeObj","onEditTargetTime","event","preventDefault","willUpdate","edit","errText"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,iBAA3B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAOC,cAAP,KAA0B;AAAA;;AACxDC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAACI,IAAI,GAAG,CAAH,GAAO,CAAC,CAAb,CAApD;AACA,QAAM,CAACM,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAACI,IAAI,GAAG,CAAH,GAAO,CAAC,CAAb,CAApD;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAACI,IAAI,GAAG,CAAH,GAAO,CAAC,CAAb,CAAlD;AACA,QAAM,CAACU,gBAAD,EAAmBC,mBAAnB,IAA0Cf,QAAQ,CAACI,IAAI,GAAG,CAAH,GAAO,CAAC,CAAb,CAAxD;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCjB,QAAQ,CAACI,IAAI,GAAG,CAAH,GAAO,CAAC,CAAb,CAAtD;AACA,QAAM,CAACc,oBAAD,EAAuBC,OAAvB,IAAkCnB,QAAQ,CAAC,IAAD,CAAhD;;AACA,QAAMoB,sBAAsB,GAAIC,QAAD,IAC7BZ,iBAAiB,CAACa,QAAQ,CAACD,QAAD,CAAT,CADnB;;AAEA,QAAME,sBAAsB,GAAIC,QAAD,IAC7Bb,iBAAiB,CAACW,QAAQ,CAACE,QAAD,CAAT,CADnB;;AAEA,QAAMC,qBAAqB,GAAIC,OAAD,IAC5Bb,gBAAgB,CAACS,QAAQ,CAACI,OAAD,CAAT,CADlB;;AAEA,QAAMC,wBAAwB,GAAIC,UAAD,IAC/Bb,mBAAmB,CAACO,QAAQ,CAACM,UAAD,CAAT,CADrB;;AAEA,QAAMC,uBAAuB,GAAIC,SAAD,IAC9Bb,kBAAkB,CAACK,QAAQ,CAACQ,SAAD,CAAT,CADpB;;AAGA,QAAMC,cAAc,GAAG,YAAY;AACjC,QAAI;AACF,UAAI3B,IAAJ,EAAU;AACRE,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,cAAMyB,IAAI,GAAG,MAAM9B,KAAK,CAAC+B,WAAN,CAAkB7B,IAAlB,EAAwB8B,GAAxB,EAAnB,CAFQ,CAE0C;;AAClD,cAAMC,UAAU,GAAGH,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEA,IAAzB;AACA,YAAI,CAACA,IAAL,EAAW,MAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACX3B,QAAAA,iBAAiB,CAAC0B,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAE3B,cAAb,CAAjB;AACAG,QAAAA,iBAAiB,CAACwB,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEE,cAAZ,CAA2BC,IAA5B,CAAjB;AACAzB,QAAAA,gBAAgB,CAACsB,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEI,aAAZ,CAA0BD,IAA3B,CAAhB;AACAvB,QAAAA,mBAAmB,CAACoB,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEE,cAAZ,CAA2BG,MAA5B,CAAnB;AACAvB,QAAAA,kBAAkB,CAACkB,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEI,aAAZ,CAA0BC,MAA3B,CAAlB;AACD,OAVD,MAUO,CACL;AACD;;AAED,UAAI,CAACnC,cAAD,IAAmBa,oBAAvB,EAA6C;AAC3CC,QAAAA,OAAO,CAAC,KAAD,CAAP;AACAb,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BW,oBAA3B;AACD;AACF,KAnBD,CAmBE,OAAOuB,KAAP,EAAc;AACdtB,MAAAA,OAAO,CAAC,KAAD,CAAP;AACAuB,MAAAA,KAAK,CAACD,KAAD,CAAL,CAFc,CAGd;AACD;AACF,GAzBD;;AA0BA1C,EAAAA,SAAS,CAAC,MAAM;AACdgC,IAAAA,cAAc;AACf,GAFQ,EAEN,CAAC3B,IAAD,EAAOC,cAAP,CAFM,CAAT;;AAIA,QAAMsC,SAAS,GAAIC,aAAD,IAAmB;AACnC,WACEA,aAAa,CAACpC,cAAd,IACAoC,aAAa,CAACP,cAAd,CAA6BC,IAD7B,IAEAM,aAAa,CAACL,aAAd,CAA4BD,IAF5B,IAGAM,aAAa,CAACP,cAAd,CAA6BG,MAH7B,IAIAI,aAAa,CAACL,aAAd,CAA4BC,MAL9B;AAOD,GARD;;AASA,QAAMK,gBAAgB,GAAIC,KAAD,IAAW;AAClCA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,UAAU,GAAG,IAAjB;AACA,UAAMJ,aAAa,GAAG;AACpBpC,MAAAA,cADoB;AAEpB6B,MAAAA,cAAc,EAAE;AAAEC,QAAAA,IAAI,EAAE5B,cAAR;AAAwB8B,QAAAA,MAAM,EAAE1B;AAAhC,OAFI;AAGpByB,MAAAA,aAAa,EAAE;AAAED,QAAAA,IAAI,EAAE1B,aAAR;AAAuB4B,QAAAA,MAAM,EAAExB;AAA/B;AAHK,KAAtB;AAKA,QAAI,OAAO2B,SAAP,KAAqB,UAAzB,EAAqCK,UAAU,GAAGL,SAAS,CAACC,aAAD,CAAtB;;AACrC,QAAII,UAAJ,EAAgB;AACd9C,MAAAA,KAAK,CAAC+B,WAAN,CAAkB7B,IAAlB,EAAwB6C,IAAxB,CAA6BL,aAA7B,EADc,CAEd;AACA;AACA;AACA;AACD,KAND,MAMO;AACL,YAAMP,cAAc,GAAG3B,cAAc,IAAII,gBAAzC;AACA,YAAMyB,aAAa,GAAG3B,aAAa,IAAII,eAAvC;AACA,UAAIkC,OAAO,GAAI,WAAU1C,cAAc,GAAG,EAAH,GAAQ,gBAAiB,GAC9D,CAAC6B,cAAD,GAAkB,CAACE,aAAnB,GAAmC,CAAnC,IAAwC,CAAC/B,cAAzC,GAA0D,IAA1D,GAAiE,EAClE,GAAE6B,cAAc,GAAG,EAAH,GAAQ,gBAAiB,GACxC,CAACE,aAAD,GAAiB,CAAjB,IAAsB,CAACF,cAAvB,GAAwC,IAAxC,GAA+C,EAChD,GAAEE,aAAa,GAAG,EAAH,GAAQ,eAAgB,IACtC,CAAC/B,cAAD,GAAkB,CAAC6B,cAAnB,GAAoC,CAACE,aAArC,GAAqD,CAArD,GAAyD,KAAzD,GAAiE,IAClE,eAND;AAOAG,MAAAA,KAAK,CAACQ,OAAD,CAAL;AACD;AACF,GA3BD;;AA4BA,QAAMN,aAAa,GAAG;AACpBpC,IAAAA,cADoB;AAEpB6B,IAAAA,cAAc,EAAE;AAAEC,MAAAA,IAAI,EAAE5B,cAAR;AAAwB8B,MAAAA,MAAM,EAAE1B;AAAhC,KAFI;AAGpByB,IAAAA,aAAa,EAAE;AAAED,MAAAA,IAAI,EAAE1B,aAAR;AAAuB4B,MAAAA,MAAM,EAAExB;AAA/B;AAHK,GAAtB;AAKA,SAAO;AACL6B,IAAAA,gBADK;AAELrC,IAAAA,cAFK;AAGLY,IAAAA,sBAHK;AAILwB,IAAAA,aAJK;AAKLlC,IAAAA,cALK;AAMLE,IAAAA,aANK;AAOLE,IAAAA,gBAPK;AAQLE,IAAAA,eARK;AASLO,IAAAA,sBATK;AAULE,IAAAA,qBAVK;AAWLE,IAAAA,wBAXK;AAYLE,IAAAA,uBAZK;AAaLX,IAAAA;AAbK,GAAP;AAeD,CA1GM;;GAAMf,gB","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { API, APIv2 } from \"../../tools/API\";\n\nexport const useTargetSetting = (user, isLoginLoading) => {\n  console.log(\"UPDATE SETTING HOOK USER: \");\n  const [targetWorkTime, setTargetWorkTime] = useState(user ? 0 : -1);\n  const [targetWakeHour, setTargetWakeHour] = useState(user ? 0 : -1);\n  const [targetBedHour, setTargetBedHour] = useState(user ? 0 : -1);\n  const [targetWakeMinute, setTargetWakeMinute] = useState(user ? 0 : -1);\n  const [targetBedMinute, setTargetBedMinute] = useState(user ? 0 : -1);\n  const [isSettingHookLoading, setLoad] = useState(true);\n  const onChangeTargetWorkTime = (workTime) =>\n    setTargetWorkTime(parseInt(workTime));\n  const onChangeTargetWakeHour = (wakeHour) =>\n    setTargetWakeHour(parseInt(wakeHour));\n  const onChangeTargetBedHour = (bedHour) =>\n    setTargetBedHour(parseInt(bedHour));\n  const onChangeTargetWakeMinute = (wakeMinute) =>\n    setTargetWakeMinute(parseInt(wakeMinute));\n  const onChangeTargetBedMinute = (bedMinute) =>\n    setTargetBedMinute(parseInt(bedMinute));\n\n  const getUserSetting = async () => {\n    try {\n      if (user) {\n        console.log(\"SETTING\");\n        const data = await APIv2.userSetting(user).get(); //API.get(`/auth/setting/${user}`);\n        const settingObj = data?.data;\n        if (!data) throw new Error(\"Cannot find data\");\n        setTargetWorkTime(settingObj?.targetWorkTime);\n        setTargetWakeHour(settingObj?.targetWakeTime.hour);\n        setTargetBedHour(settingObj?.targetBedTime.hour);\n        setTargetWakeMinute(settingObj?.targetWakeTime.minute);\n        setTargetBedMinute(settingObj?.targetBedTime.minute);\n      } else {\n        //\n      }\n\n      if (!isLoginLoading && isSettingHookLoading) {\n        setLoad(false);\n        console.log(\"SETTING END\", isSettingHookLoading);\n      }\n    } catch (error) {\n      setLoad(false);\n      alert(error);\n      // history.push(\"/setting\");\n    }\n  };\n  useEffect(() => {\n    getUserSetting();\n  }, [user, isLoginLoading]);\n\n  const validator = (targetTimeObj) => {\n    return (\n      targetTimeObj.targetWorkTime &&\n      targetTimeObj.targetWakeTime.hour &&\n      targetTimeObj.targetBedTime.hour &&\n      targetTimeObj.targetWakeTime.minute &&\n      targetTimeObj.targetBedTime.minute\n    );\n  };\n  const onEditTargetTime = (event) => {\n    event.preventDefault();\n    let willUpdate = true;\n    const targetTimeObj = {\n      targetWorkTime,\n      targetWakeTime: { hour: targetWakeHour, minute: targetWakeMinute },\n      targetBedTime: { hour: targetBedHour, minute: targetBedMinute },\n    };\n    if (typeof validator === \"function\") willUpdate = validator(targetTimeObj);\n    if (willUpdate) {\n      APIv2.userSetting(user).edit(targetTimeObj);\n      // API.post(`/auth/setting/${user}`, {\n      //   value: targetTimeObj,\n      //   user,\n      // });\n    } else {\n      const targetWakeTime = targetWakeHour && targetWakeMinute;\n      const targetBedTime = targetBedHour && targetBedMinute;\n      let errText = `[ERROR] ${targetWorkTime ? \"\" : \"TargetWorkTime\"}${\n        !targetWakeTime + !targetBedTime > 0 && !targetWorkTime ? \", \" : \"\"\n      }${targetWakeTime ? \"\" : \"TargetWakeTime\"}${\n        !targetBedTime > 0 && !targetWakeTime ? \", \" : \"\"\n      }${targetBedTime ? \"\" : \"TargetBedtime\"} ${\n        !targetWorkTime + !targetWakeTime + !targetBedTime > 1 ? \"are\" : \"is\"\n      } not entered.`;\n      alert(errText);\n    }\n  };\n  const targetTimeObj = {\n    targetWorkTime,\n    targetWakeTime: { hour: targetWakeHour, minute: targetWakeMinute },\n    targetBedTime: { hour: targetBedHour, minute: targetBedMinute },\n  };\n  return {\n    onEditTargetTime,\n    targetWorkTime,\n    onChangeTargetWorkTime,\n    targetTimeObj,\n    targetWakeHour,\n    targetBedHour,\n    targetWakeMinute,\n    targetBedMinute,\n    onChangeTargetWakeHour,\n    onChangeTargetBedHour,\n    onChangeTargetWakeMinute,\n    onChangeTargetBedMinute,\n    isSettingHookLoading,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}